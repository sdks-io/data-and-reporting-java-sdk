/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.shell.apitest.ApiHelper;
import com.shell.apitest.ShellDataReportingAPIsClient;
import com.shell.apitest.exceptions.ApiException;
import com.shell.apitest.models.EIDDocumentResponse;
import com.shell.apitest.models.EIDDownloadRequest;
import com.shell.apitest.models.EIDSearchRequest;
import com.shell.apitest.models.InvoiceDatesRequest;
import com.shell.apitest.models.InvoiceDatesResponseData;
import com.shell.apitest.models.InvoiceDownloadRequest;
import com.shell.apitest.models.InvoiceSearchRequest;
import com.shell.apitest.models.InvoiceSearchResponse;
import com.shell.apitest.models.InvoiceSummaryRequest;
import com.shell.apitest.models.InvoiceSummaryResponse;
import com.shell.apitest.models.SearchDocumentsRequest;
import com.shell.apitest.models.SearchDocumentsResponse;
import com.shell.apitest.models.SearchStatementOfAccountRequest;
import com.shell.apitest.models.SearchStatementOfAccountResponse;
import com.shell.apitest.models.StatementOfAccountRequest;
import com.shell.apitest.models.StatementOfAccountResponse;
import io.apimatic.core.utilities.TestHelper;
import java.io.InputStream;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class InvoiceControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static ShellDataReportingAPIsClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static InvoiceController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getInvoiceController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This API allows to search invoice data in the Shell Card Platform. It provides flexible
     * search criteria in the request body and supports paging. This API will also query the
     * relevant invoice documents list and return a reference number that can be used to download
     * invoice documents (PDF and Proofing elements in a zip file). #### Supported operations *
     * Search invoices by account * Search invoices by invoice type or invoice status * Search
     * invoices by invoice id or number * Search invoices by invoiced country * Search invoices
     * including einvoices * Search invoices by summary document * Search invoices by statement of
     * account * Search invoices by fixed and custom date periods.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestInvoiceSearch() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        InvoiceSearchRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoId\":14,\"PayerId\":78,\"PayerNumber\":\"DE26688478\",\"Accou"
                + "ntId\":92,\"AccountNumber\":\"DE26702892\",\"InvoiceId\":4013059,\"InvoiceNumber"
                + "\":\"0123456789\",\"FromDate\":\"20170830\",\"ToDate\":\"20171031\",\"InvoiceDat"
                + "e\":\"20171031\",\"Type\":\"Original\",\"SummaryDocumentId\":1616729,\"SummaryDo"
                + "cumentNumber\":\"1283899/289261063/2019\",\"StatementOfAccountId\":\"DE26702892"
                + "\",\"SoAReferenceNumber\":\"1283899\",\"Period\":1,\"InvoiceStatus\":\"Due\",\"I"
                + "nvoicedOnBehalfOf\":\"DE\",\"IncludeEInvoiceDetails\":false,\"SortBy\":[1]},\"Pa"
                + "geSize\":50,\"Page\":1}",
                InvoiceSearchRequest.class);

        // Set callback and perform API call
        InvoiceSearchResponse result = null;
        try {
            result = controller.invoiceSearch(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"18c955d1-b3ec-4dc0-95da-76e67afb891a\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"AccountFullName\":\"powder ambition ERF  \",\"AccountId\":179827,\"Acc"
                + "ountNumber\":\"DE26702892\",\"AccountShortName\":\"soft grocery Argyle  \",\"Col"
                + "CoId\":14,\"ColCoOpCoId\":\"014\",\"CurrentBillingFrequency\":\"Last day of mont"
                + "h\",\"CurrentBillingFrequencyId\":40,\"CurrentDistributionMethod\":\"e-mail\","
                + "\"CurrentDistributionMethodId\":1,\"CustomerCurrencyCode\":\"EUR\",\"CustomerCur"
                + "rencySymbol\":\"€\",\"DelCoClientNumber\":\"014\",\"DelCoId\":14,\"DelCoOpCoId"
                + "\":\"014\",\"DocumentType\":\"Invoice\",\"DocumentTypeId\":1,\"DueDate\":\"20190"
                + "707\",\"GrossAmountCustomerCurrency\":22.85,\"GrossAmountTransactionCurrency\":2"
                + "2.85,\"InvoiceDate\":\"20190630\",\"InvoicedBy\":\"euroShell Deutschland GmbH & "
                + "Co. KG\",\"InvoicedOnBehalfOf\":\"Germany\",\"InvoiceId\":4013059,\"InvoiceNumbe"
                + "r\":\"6402009004\",\"IsInternational\":false,\"IsNational\":true,\"NetAmountCust"
                + "omerCurrency\":19.2,\"NetAmountTransactionCurrency\":19.2,\"PayerId\":164825,\"P"
                + "ayerNumber\":\"DE26688478\",\"PaymentTerms\":\"7 days after invoice\",\"PaymentT"
                + "ermsId\":9,\"ReplacementInvoiceId\":null,\"ReversalInvoiceId\":null,\"Status\":"
                + "\"Paid\",\"SummaryDocumentBillingType\":\"Standard Invoice\",\"SummaryDocumentBi"
                + "llingTypeId\":0,\"SummaryDocumentDate\":\"20190630\",\"SummaryDocumentDDAmount"
                + "\":22.85,\"SummaryDocumentDueDate\":\"20190707\",\"SummaryDocumentId\":1616729,"
                + "\"SummaryDocumentIsFullyPaid\":true,\"SummaryDocumentNumber\":\"1283899/28926106"
                + "3/2019\",\"SummaryDocumentPaidAmount\":22.85,\"SummaryDocumentSoAReferenceNumber"
                + "\":\"2000745709\",\"SummaryDocumentStatementOfAccountId\":2000745709,\"Transacti"
                + "onCurrencyCode\":\"EUR\",\"TransactionCurrencySymbol\":\"€\",\"Type\":\"Original"
                + "\",\"TypeId\":1,\"VATAmountCustomerCurrency\":3.65,\"VATAmountTransactionCurrenc"
                + "y\":3.65,\"VATCountry\":\"Germany\",\"VATCountryId\":9,\"VATCountryISOCode\":\"D"
                + "E\",\"VATCountryOpCoId\":\"014\"}],\"Page\":1,\"PageSize\":50,\"TotalRecords\":1"
                + ",\"TotalPages\":1}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This API returns the high level summary of invoices that match the given search criteria. The
     * same search criteria as the endpoint `/v1/invoice/search` is supported with the exception of
     * paging related parameters. #### Supported operations * Search invoices by account * Search
     * invoices by invoice type or invoice status * Search invoices by invoice id or number * Search
     * invoices by invoiced country * Search invoices including einvoices * Search invoices by
     * summary document * Search invoices by statement of account * Search invoices by fixed and
     * custom date periods .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestInvoiceSummary() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        InvoiceSummaryRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoId\":14,\"PayerId\":78,\"PayerNumber\":\"DE26688478\",\"Accou"
                + "ntId\":92,\"AccountNumber\":\"DE26702892\",\"InvoiceId\":4013059,\"InvoiceNumber"
                + "\":\"0123456789\",\"FromDate\":\"20170830\",\"ToDate\":\"20171031\",\"InvoiceDat"
                + "e\":\"20171031\",\"Type\":\"Original\",\"SummaryDocumentId\":1616729,\"SummaryDo"
                + "cumentNumber\":\"1283899/289261063/2019\",\"StatementOfAccountId\":\"DE26702892"
                + "\",\"SoAReferenceNumber\":\"1283899\",\"Period\":1,\"InvoiceStatus\":\"Due\",\"I"
                + "nvoicedOnBehalfOf\":\"DE\",\"IncludeEInvoiceDetails\":false}}",
                InvoiceSummaryRequest.class);

        // Set callback and perform API call
        InvoiceSummaryResponse result = null;
        try {
            result = controller.invoiceSummary(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"a0a1596f-b242-4672-b513-66c5e5554195\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"TotalInvoices\":1,\"TotalGrossAmountCustomerCurrency\":22.85,\"TotalNe"
                + "tAmountCustomerCurrency\":19.2,\"TotalVATAmountCustomerCurrency\":3.65,\"Custome"
                + "rCurrencyCode\":\"EUR\",\"CustomerCurrencySymbol\":\"€\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This API allows querying the details of the latest statement of account (SOA) generated for a
     * given Payer. The endpoint supports querying SOA documents by various input parameters
     * specified in the request body. #### Supported operations * Search invoice SOA by payer and
     * account * Search invoice SOA including monthly trend (last 13 months invocie trend summary) *
     * Search invoice SOA including past SOAs * Search invoice SOA including due/overdue documents *
     * Search invoice SOA including invoice summary.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestStatementOfAccount() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        StatementOfAccountRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":32,\"PayerId\":308,\"PayerNumber\":\"CZ56891709\",\"Ac"
                + "countNumber\":\"CZ56891900\",\"Accountid\":6928,\"IncludeMonthlyInvoiceTrend\":t"
                + "rue,\"IncludePastStatementOfAccounts\":true,\"DueOrOverDueSOADocumentsOnly\":fal"
                + "se,\"NumberOfSOADocuments\":10,\"IncludeAccountInvoicesSummary\":true}}",
                StatementOfAccountRequest.class);

        // Set callback and perform API call
        StatementOfAccountResponse result = null;
        try {
            result = controller.statementOfAccount(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"5acba53b-3ce7-4f4b-ab59-1db09399aa6a\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"LastStatementOfAccount\":{\"AmountDue\":123699.71,\"AmountNotOverdue"
                + "\":136604.83,\"AmountOverdue\":926469.11,\"CreditLimit\":7000000,\"CreditLimitCu"
                + "rrencyCode\":\"CZK\",\"CreditLimitCurrencySymbol\":\"Kč\",\"CreditLimitInCustome"
                + "rCurrency\":286826.469986,\"CurrencyCode\":\"EUR\",\"CurrencySymbol\":\"€\",\"La"
                + "stPaymentCurrencyCode\":\"EUR\",\"LastPaymentCurrencySymbol\":\"€\",\"LastPaymen"
                + "tDate\":\"20220209\",\"LastPaymentValue\":17918.98,\"OutstandingBalance\":118677"
                + "3.65,\"PayerId\":308,\"PayerNumber\":\"CZ56891709\",\"PaymentDueDate\":\"2023060"
                + "8\",\"PaymentMethod\":\"Incoming - Bank Transfer\",\"PaymentMethodId\":4,\"Payme"
                + "ntTerms\":\"30 days after Invoice\",\"PaymentTermsId\":4,\"SoAReferenceNumber\":"
                + "\"2003923319\",\"StatementDate\":\"20230509\",\"StatementOfAccountId\":200392331"
                + "9,\"TotalBillingDocuments\":6,\"TotalSummaryBillingDocuments\":1,\"UnallocatedPa"
                + "yment\":0},\"MonthlyInvoiceTrend\":null,\"PastStatementOfAccounts\":[{\"AmountDu"
                + "e\":136604.83,\"AmountNotOverdue\":130344.09,\"AmountOverdue\":796109.41,\"Amoun"
                + "tOverdueFromUnallocated\":0,\"AmountPaid\":0,\"BalanceOnThisStatement\":5866.1,"
                + "\"BillingCurrencyCode\":\"EUR\",\"BillingCurrencySymbol\":\"€\",\"CreditLimit\":"
                + "7000000,\"CreditLimitCurrencyCode\":\"CZK\",\"CreditLimitCurrencySymbol\":\"Kč"
                + "\",\"CreditLimitInCustomerCurrency\":286826.4699857,\"CurrencyCode\":\"EUR\",\"C"
                + "urrencySymbol\":\"€\",\"FullyPaid\":false,\"LastPaymentCurrencyCode\":\"EUR\","
                + "\"LastPaymentCurrencySymbol\":\"€\",\"LastPaymentDate\":\"20220209\",\"LastPayme"
                + "ntValue\":17918.98,\"OutstandingBalance\":1063058.33,\"PayerId\":308,\"PayerNumb"
                + "er\":\"CZ56891709\",\"PaymentDueDate\":\"20230511\",\"SoAReferenceNumber\":\"200"
                + "3920583\",\"StatementDate\":\"20230411\",\"StatementOfAccountId\":2003920583,\"T"
                + "otalBillingDocuments\":3,\"TotalNetAmountBillingCurrency\":4847.94,\"TotalSummar"
                + "yBillingDocuments\":1,\"TotalVATAmountBillingCurrency\":1018.16,\"UnallocatedPay"
                + "ment\":0,\"LocalCurrencyCode\":\"EUR\",\"LocalCurrencySymbol\":\"€\",\"LocalCurr"
                + "encyExchangeRate\":24.405}],\"PaymentsSinceLastSOA\":null,\"InvoicesSummaries\":"
                + "null}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * - This API will return the list of Invoice Dates and Numbers for the given date range. If the
     * dates are not provided then it will fetch the data for past 13 months.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDates() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        InvoiceDatesRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":0,\"PayerId\":0,\"PayerNumber\":\"string\",\"IncludeMo"
                + "nthlyInvoiceTrend\":true,\"IncludePastStatementOfAccounts\":true,\"DueOrOverDueS"
                + "OADocumentsOnly\":true,\"NumberOfSOADocuments\":0,\"IncludeAccountInvoicesSummar"
                + "y\":true,\"ColCoId\":0,\"Accounts\":[{\"AccountId\":3453,\"AccountNumber\":\"GB0"
                + "00000124\"}]}}",
                InvoiceDatesRequest.class);

        // Set callback and perform API call
        InvoiceDatesResponseData result = null;
        try {
            result = controller.dates(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"a0a1596f-b242-4672-b513-66c5e5554195\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"InvoiceNumbers\":[\"6402009004\"],\"InvoiceDates\":[\"20170101\"]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * - This API will allow querying of SOA from different systems.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestSearchStatementOfAccount() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        SearchStatementOfAccountRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":18,\"PayerNumber\":\"NL99781417\",\"InvoiceNumber\":"
                + "\"0123456789\",\"FromDate\":\"2022/05/04\",\"ToDate\":\"2022/05/10\",\"Period\":"
                + "1,\"InvoiceDate\":\"20170830\",\"InvoiceStatus\":[\"Due\"],\"SortBy\":[1]},\"Pag"
                + "e\":1,\"PageSize\":10}",
                SearchStatementOfAccountRequest.class);

        // Set callback and perform API call
        SearchStatementOfAccountResponse result = null;
        try {
            result = controller.searchStatementOfAccount(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"a0a1596f-b242-4672-b513-66c5e5554195\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"StatementOfAccountId\":2001581712,\"SoAReferenceNumber\":\"2001581712"
                + "\",\"DocumentReferenceNumber\":null,\"StatementDate\":\"20220505\",\"PayerId\":1"
                + "7150,\"PayerNumber\":\"NL99781417\",\"AmountDue\":0,\"AmountOverdue\":197046.47,"
                + "\"CurrencyCode\":\"EUR\",\"CurrencySymbol\":\"€\",\"DueDate\":\"20220604\",\"Inv"
                + "oicedOnBehalfOf\":\"Netherlands\",\"Status\":\"OverDue\",\"GrossAmountCustomerCu"
                + "rrency\":0}],\"Page\":1,\"TotalRecords\":62,\"TotalPages\":7,\"PageSize\":10}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * - This API allows querying the details of all invoices successfully uploaded to the Worldline
     * invoice repository and file reference numbers for downloading.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestSearchDocuments() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        SearchDocumentsRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"PayerNumber\":\"DE00000096\",\"AccountNumber\":\"DE00000096\",\"Co"
                + "lCoCode\":14,\"AccountNumberList\":[\"DE00000123\",\"DE00000225\"],\"InvoiceNumb"
                + "er\":\"1234567\",\"InvoiceNumberList\":[\"6400013693\",\"9421000010\"],\"Invoice"
                + "Status\":\"NEW\",\"IssuingDateFrom\":\"2023/05/01\",\"IssuingDateTo\":\"2023/06/"
                + "30\",\"DueDateFrom\":\"2023/05/04\",\"DueDateTo\":\"2023/06/30\",\"GrossAmount"
                + "\":\"1000\",\"GrossAmountOperator\":\"LT\",\"DocumentType\":\"SOA\",\"VATIssuerC"
                + "ountry\":\"DE\",\"SortyBy\":[\"InvoiceNumber ASC\",\"InvoiceDate DESC\"]},\"Page"
                + "\":\"1\",\"PageSize\":\"50\"}",
                SearchDocumentsRequest.class);

        // Set callback and perform API call
        SearchDocumentsResponse result = null;
        try {
            result = controller.searchDocuments(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"a8b81c1d-f44a-4365-8113-8958061c0b7e\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"DocumentReference\":311161,\"InvoiceNumber\":\"6400013693\",\"PayerNam"
                + "e\":\"DE00000096\",\"AccountNumber\":\"DE00000096\",\"AccountName\":\"DE00000096"
                + "\",\"DocumentType\":\"NAT\",\"GrossAmount\":-3141.93,\"NetAmount\":0,\"TaxAmount"
                + "\":0,\"CurrencyCode\":\"EUR\",\"InvoiceStatus\":\"NEW\",\"InvoiceDate\":\"2023/0"
                + "1/31\",\"DueDate\":\"2023/02/07\",\"VATCountryISOCode\":\"DE\"}],\"TotalRecords"
                + "\":2,\"TotalRecordsOnPage\":2,\"IsFirstPage\":true,\"IsLastPage\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * - This API provides the functionality needed for the screen “EID FILES” in the web interface.
     * It allows retrieving a list of EIDs based on search criteria.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestEidSearch() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        EIDSearchRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":32,\"AccountGroupCountry\":32,\"AccountGroupId\":[\"12"
                + "2\"],\"AccountGroupName\":null,\"FromDate\":\"2017/08/30\",\"ToDate\":\"2017/10/"
                + "31\",\"InvoiceType\":\"NAT\",\"InvoiceStatus\":\"NEW\",\"SortBy\":[\"DocumentDat"
                + "e ASC\"]},\"Page\":1,\"PageSize\":10}",
                EIDSearchRequest.class);

        // Set callback and perform API call
        EIDDocumentResponse result = null;
        try {
            result = controller.eidSearch(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"RequestId\":\"a0a1596f-b242-4672-b513-66c5e5554195\",\"Status\":\"SUCCESS\",\"D"
                + "ata\":[{\"DocumentId\":15029,\"AccountGroupId\":\"122\",\"AccountGroupName\":\"E"
                + "ID-122\",\"DocumentType\":\"INT\",\"DocumentFormat\":\"FLAT\",\"DocumentDate\":"
                + "\"2022/12/28\",\"NumberOfInvoices\":1,\"FileSize\":1624,\"DocumentStatus\":\"DOW"
                + "NLOADED\",\"DocumentName\":\"032_122_INT_28122022.TXT\"}],\"PageSize\":1,\"Page"
                + "\":1,\"TotalPages\":12,\"TotalRecords\":120,\"IsFirstPage\":true,\"IsLastPage\":"
                + "false}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * - This API downloads Invoice Documents i.e., ZIP file with Invoice PDF file and Proofing
     * Elements in XML format from invoice repository.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDownload() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        InvoiceDownloadRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":18,\"PayerNumber\":\"NL99781417\",\"AccountNumber\":["
                + "\"NL99781420\"],\"DocumentReference\":[1234567890],\"InvoiceOrSOANumber\":\"2234"
                + "556\"}}",
                InvoiceDownloadRequest.class);

        // Set callback and perform API call
        try {
            controller.download(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/octet-stream");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * - This service allows downloading one or more EID documents and the corresponding signature
     * material (where applicable) in one single request - The number of EID that can be downloaded
     * at once is limited to 100 documents. .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestEidDownload() throws Exception {
        // Parameters for the API call
        String requestId = 
                "2b0cbe11-f109-4c43-9201-49af0370df1c";
        EIDDownloadRequest body = ApiHelper.deserialize(
                "{\"Filters\":{\"ColCoCode\":18,\"EIDList\":[\"1710187\",\"1734566\"],\"AccountGrou"
                + "pCountry\":18,\"AccountGroupIdList\":[\"26685402\"]}}",
                EIDDownloadRequest.class);

        // Set callback and perform API call
        try {
            controller.eidDownload(requestId, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/octet-stream");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
