/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shell.apitest.DateTimeHelper;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for PricedResponseData type.
 */
public class PricedResponseData {
    private OptionalNullable<String> accountName;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<String> additional1;
    private OptionalNullable<String> additional2;
    private OptionalNullable<String> additional3;
    private OptionalNullable<String> additional4;
    private OptionalNullable<String> allowClearing;
    private OptionalNullable<Integer> authorisationCode;
    private OptionalNullable<String> transactionStatus;
    private OptionalNullable<String> driverName;
    private OptionalNullable<Integer> cardExpiryPeriod;
    private OptionalNullable<LocalDate> cardExpiry;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<Integer> issuerCode;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<Integer> releaseCode;
    private OptionalNullable<Integer> cardSequenceNumber;
    private OptionalNullable<String> cardType;
    private OptionalNullable<String> colCoCode;
    private OptionalNullable<Double> unitDiscountInvoiceCurrency;
    private Double colCoExchangeRate;
    private OptionalNullable<String> invoiceCurrencySymbol;
    private OptionalNullable<Boolean> correctionFlag;
    private OptionalNullable<Double> cRMNumber;
    private OptionalNullable<String> customerCountry;
    private OptionalNullable<String> customerCurrencyCode;
    private OptionalNullable<String> customerCurrencySymbol;
    private OptionalNullable<Double> rebateonNetAmountInCustomerCurrency;
    private OptionalNullable<Double> effectiveDiscountInCustomerCurrency;
    private OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency;
    private OptionalNullable<Double> unitPriceInInvoiceCurrency;
    private OptionalNullable<Double> invoiceTax;
    private OptionalNullable<Double> invoiceGrossAmount;
    private OptionalNullable<Double> invoiceNetAmount;
    private OptionalNullable<Double> vATonNetAmountInCustomerCurrency;
    private OptionalNullable<Double> customerRetailPriceUnitGross;
    private OptionalNullable<Double> customerRetailValueTotalGross;
    private OptionalNullable<Double> customerRetailValueTotalNet;
    private OptionalNullable<Double> transactionTypeDescription;
    private OptionalNullable<Double> rebateonNetAmountInTransactionCurrency;
    private OptionalNullable<Double> effectiveDiscountInTrxCurrency;
    private OptionalNullable<Integer> delCoToColCoExchangeRate;
    private List<Integer> cards;
    private OptionalNullable<Double> unitDiscountTransactionCurrency;
    private OptionalNullable<Double> transactionGrossAmount;
    private OptionalNullable<Double> transactionNetAmount;
    private OptionalNullable<Double> transactionTax;
    private OptionalNullable<Double> vATonNetAmount;
    private OptionalNullable<Double> delcoListPriceUnitNet;
    private OptionalNullable<Double> delcoRetailPriceUnitGross;
    private OptionalNullable<Double> unitPriceInTransactionCurrency;
    private OptionalNullable<Double> delcoRetailPriceUnitNet;
    private OptionalNullable<Double> delcoRetailValueTotalGross;
    private OptionalNullable<Double> delcoRetailValueTotalNet;
    private OptionalNullable<String> transactionCurrencySymbol;
    private OptionalNullable<String> discountType;
    private OptionalNullable<Boolean> disputeStatus;
    private Boolean isShellSite;
    private OptionalNullable<String> fleetIdInput;
    private OptionalNullable<Integer> incomingProductCode;
    private OptionalNullable<LocalDate> postingDate;
    private OptionalNullable<LocalDateTime> postingTime;
    private OptionalNullable<Integer> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<Integer> productGroupId;
    private OptionalNullable<String> incomingCurrencyCode;
    private OptionalNullable<String> incomingSiteDescription;
    private OptionalNullable<String> location;
    private OptionalNullable<String> siteName;
    private OptionalNullable<Integer> siteCode;
    private OptionalNullable<Integer> incomingSiteNumber;
    private OptionalNullable<String> invoiceCurrencyCode;
    private OptionalNullable<LocalDate> invoiceDate;
    private OptionalNullable<Double> invoiceNumber;
    private OptionalNullable<Boolean> fuelProduct;
    private OptionalNullable<String> vATApplicable;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> parentCustomerNumber;
    private OptionalNullable<String> payerGroup;
    private OptionalNullable<String> payerGroupName;
    private OptionalNullable<Integer> checkDigit;
    private OptionalNullable<String> netInvoiceIndicator;
    private OptionalNullable<Integer> delcoCode;
    private OptionalNullable<Integer> networkCode;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<String> siteCountry;
    private OptionalNullable<String> vATCountry;
    private OptionalNullable<String> delcoName;
    private OptionalNullable<String> network;
    private OptionalNullable<Integer> odometerInput;
    private OptionalNullable<String> originalSalesItemId;
    private OptionalNullable<String> fleetIDDescription;
    private OptionalNullable<Integer> parentCustomerId;
    private OptionalNullable<String> pINIndicator;
    private OptionalNullable<String> productGroupName;
    private OptionalNullable<String> purchasedInCountryCode;
    private OptionalNullable<Double> quantity;
    private OptionalNullable<Double> rebateRate;
    private OptionalNullable<Integer> receiptNumber;
    private PricedTransactionRespV2RefundFlagEnum refundFlag;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> siteGroupName;
    private OptionalNullable<Double> latitude;
    private OptionalNullable<Double> longitude;
    private OptionalNullable<Double> delCoExchangeRate;
    private OptionalNullable<Double> euroRebateAmount;
    private OptionalNullable<Double> netEuroAmount;
    private OptionalNullable<Double> euroVATAmount;
    private OptionalNullable<String> parentCustomerName;
    private OptionalNullable<Boolean> isInvoiced;
    private OptionalNullable<String> transactionCurrencyCode;
    private OptionalNullable<String> creditDebitCode;
    private OptionalNullable<LocalDate> transactionDate;
    private OptionalNullable<LocalDateTime> transactionTime;
    private OptionalNullable<String> transactionItemId;
    private OptionalNullable<String> trnIdentifier;
    private OptionalNullable<String> type;
    private OptionalNullable<Integer> transactionLine;
    private OptionalNullable<String> transactionType;
    private OptionalNullable<String> uTCOffset;
    private OptionalNullable<String> vATCategory;
    private OptionalNullable<Double> vATRate;
    private OptionalNullable<String> vehicleRegistration;
    private OptionalNullable<String> isCancelled;
    private OptionalNullable<Double> colCoGrossAmount;
    private OptionalNullable<Double> colCoNetAmount;
    private OptionalNullable<Double> colCoVATAmount;
    private OptionalNullable<String> originalCurrencySymbol;
    private OptionalNullable<String> originalCurrencyCode;
    private OptionalNullable<Double> originalVATAmount;
    private OptionalNullable<String> embossText;
    private OptionalNullable<Double> originalExchangeRate;
    private OptionalNullable<LocalDate> originalTransactionItemInvoiceDate;
    private OptionalNullable<Integer> feeTypeId;
    private OptionalNullable<Boolean> lineItemDescription;
    private OptionalNullable<String> feeRuleDescription;
    private OptionalNullable<Integer> frequency;
    private OptionalNullable<Integer> feeRuleId;
    private OptionalNullable<LocalDate> systemEntryDate;
    private OptionalNullable<LocalDateTime> systemEntryTime;
    private OptionalNullable<String> isManual;
    private OptionalNullable<String> originalTransactionItemId;
    private OptionalNullable<Integer> originalTransactionItemInvoiceNumber;
    private OptionalNullable<Integer> originalTransactionItemInvoiceId;
    private OptionalNullable<String> payerShortName;
    private OptionalNullable<String> reverseCharge;
    private OptionalNullable<Double> originalGrossAmount;
    private OptionalNullable<Double> originalNetAmount;
    private OptionalNullable<String> unitOfMeasure;
    private OptionalNullable<String> roadType;
    private OptionalNullable<String> customerCountryIsoCode;
    private OptionalNullable<String> eVOperator;
    private OptionalNullable<String> eVSerialId;
    private OptionalNullable<String> eVChargePointSerial;
    private OptionalNullable<Integer> eVChargePointConnectorType;
    private OptionalNullable<String> eVChargePointConnectorTypeDescription;
    private OptionalNullable<String> eVChargeDuration;
    private OptionalNullable<LocalDate> eVChargeStartDate;
    private OptionalNullable<LocalDateTime> eVChargeStartTime;
    private OptionalNullable<LocalDate> eVChargeEndDate;
    private OptionalNullable<LocalDateTime> eVChargeEndTime;
    private OptionalNullable<Integer> hostingCollectingCompanyNumber;
    private OptionalNullable<Double> transactionId;
    private OptionalNullable<Boolean> fuelOnly;

    /**
     * Default constructor.
     */
    public PricedResponseData() {
        disputeStatus = OptionalNullable.of(false);
        isShellSite = false;
        isInvoiced = OptionalNullable.of(false);
        lineItemDescription = OptionalNullable.of(false);
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  additional1  String value for additional1.
     * @param  additional2  String value for additional2.
     * @param  additional3  String value for additional3.
     * @param  additional4  String value for additional4.
     * @param  allowClearing  String value for allowClearing.
     * @param  authorisationCode  Integer value for authorisationCode.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  driverName  String value for driverName.
     * @param  cardExpiryPeriod  Integer value for cardExpiryPeriod.
     * @param  cardExpiry  LocalDate value for cardExpiry.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  issuerCode  Integer value for issuerCode.
     * @param  cardPAN  String value for cardPAN.
     * @param  releaseCode  Integer value for releaseCode.
     * @param  cardSequenceNumber  Integer value for cardSequenceNumber.
     * @param  cardType  String value for cardType.
     * @param  colCoCode  String value for colCoCode.
     * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
     * @param  colCoExchangeRate  Double value for colCoExchangeRate.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  correctionFlag  Boolean value for correctionFlag.
     * @param  cRMNumber  Double value for cRMNumber.
     * @param  customerCountry  String value for customerCountry.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  rebateonNetAmountInCustomerCurrency  Double value for
     *         rebateonNetAmountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Double value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
     * @param  invoiceTax  Double value for invoiceTax.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  vATonNetAmountInCustomerCurrency  Double value for vATonNetAmountInCustomerCurrency.
     * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
     * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
     * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
     * @param  transactionTypeDescription  Double value for transactionTypeDescription.
     * @param  rebateonNetAmountInTransactionCurrency  Double value for
     *         rebateonNetAmountInTransactionCurrency.
     * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
     * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
     * @param  cards  List of Integer value for cards.
     * @param  unitDiscountTransactionCurrency  Double value for unitDiscountTransactionCurrency.
     * @param  transactionGrossAmount  Double value for transactionGrossAmount.
     * @param  transactionNetAmount  Double value for transactionNetAmount.
     * @param  transactionTax  Double value for transactionTax.
     * @param  vATonNetAmount  Double value for vATonNetAmount.
     * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
     * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
     * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
     * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
     * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
     * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  discountType  String value for discountType.
     * @param  disputeStatus  Boolean value for disputeStatus.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  incomingProductCode  Integer value for incomingProductCode.
     * @param  postingDate  LocalDate value for postingDate.
     * @param  postingTime  LocalDateTime value for postingTime.
     * @param  productCode  Integer value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
     * @param  incomingSiteDescription  String value for incomingSiteDescription.
     * @param  location  String value for location.
     * @param  siteName  String value for siteName.
     * @param  siteCode  Integer value for siteCode.
     * @param  incomingSiteNumber  Integer value for incomingSiteNumber.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceDate  LocalDate value for invoiceDate.
     * @param  invoiceNumber  Double value for invoiceNumber.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  payerName  String value for payerName.
     * @param  payerNumber  String value for payerNumber.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  payerGroup  String value for payerGroup.
     * @param  payerGroupName  String value for payerGroupName.
     * @param  checkDigit  Integer value for checkDigit.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  delcoCode  Integer value for delcoCode.
     * @param  networkCode  Integer value for networkCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  siteCountry  String value for siteCountry.
     * @param  vATCountry  String value for vATCountry.
     * @param  delcoName  String value for delcoName.
     * @param  network  String value for network.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  originalSalesItemId  String value for originalSalesItemId.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  parentCustomerId  Integer value for parentCustomerId.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  productGroupName  String value for productGroupName.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  quantity  Double value for quantity.
     * @param  rebateRate  Double value for rebateRate.
     * @param  receiptNumber  Integer value for receiptNumber.
     * @param  refundFlag  PricedTransactionRespV2RefundFlagEnum value for refundFlag.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  latitude  Double value for latitude.
     * @param  longitude  Double value for longitude.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  euroRebateAmount  Double value for euroRebateAmount.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerName  String value for parentCustomerName.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  creditDebitCode  String value for creditDebitCode.
     * @param  transactionDate  LocalDate value for transactionDate.
     * @param  transactionTime  LocalDateTime value for transactionTime.
     * @param  transactionItemId  String value for transactionItemId.
     * @param  trnIdentifier  String value for trnIdentifier.
     * @param  type  String value for type.
     * @param  transactionLine  Integer value for transactionLine.
     * @param  transactionType  String value for transactionType.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  vATCategory  String value for vATCategory.
     * @param  vATRate  Double value for vATRate.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  isCancelled  String value for isCancelled.
     * @param  colCoGrossAmount  Double value for colCoGrossAmount.
     * @param  colCoNetAmount  Double value for colCoNetAmount.
     * @param  colCoVATAmount  Double value for colCoVATAmount.
     * @param  originalCurrencySymbol  String value for originalCurrencySymbol.
     * @param  originalCurrencyCode  String value for originalCurrencyCode.
     * @param  originalVATAmount  Double value for originalVATAmount.
     * @param  embossText  String value for embossText.
     * @param  originalExchangeRate  Double value for originalExchangeRate.
     * @param  originalTransactionItemInvoiceDate  LocalDate value for
     *         originalTransactionItemInvoiceDate.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  lineItemDescription  Boolean value for lineItemDescription.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  frequency  Integer value for frequency.
     * @param  feeRuleId  Integer value for feeRuleId.
     * @param  systemEntryDate  LocalDate value for systemEntryDate.
     * @param  systemEntryTime  LocalDateTime value for systemEntryTime.
     * @param  isManual  String value for isManual.
     * @param  originalTransactionItemId  String value for originalTransactionItemId.
     * @param  originalTransactionItemInvoiceNumber  Integer value for
     *         originalTransactionItemInvoiceNumber.
     * @param  originalTransactionItemInvoiceId  Integer value for originalTransactionItemInvoiceId.
     * @param  payerShortName  String value for payerShortName.
     * @param  reverseCharge  String value for reverseCharge.
     * @param  originalGrossAmount  Double value for originalGrossAmount.
     * @param  originalNetAmount  Double value for originalNetAmount.
     * @param  unitOfMeasure  String value for unitOfMeasure.
     * @param  roadType  String value for roadType.
     * @param  customerCountryIsoCode  String value for customerCountryIsoCode.
     * @param  eVOperator  String value for eVOperator.
     * @param  eVSerialId  String value for eVSerialId.
     * @param  eVChargePointSerial  String value for eVChargePointSerial.
     * @param  eVChargePointConnectorType  Integer value for eVChargePointConnectorType.
     * @param  eVChargePointConnectorTypeDescription  String value for
     *         eVChargePointConnectorTypeDescription.
     * @param  eVChargeDuration  String value for eVChargeDuration.
     * @param  eVChargeStartDate  LocalDate value for eVChargeStartDate.
     * @param  eVChargeStartTime  LocalDateTime value for eVChargeStartTime.
     * @param  eVChargeEndDate  LocalDate value for eVChargeEndDate.
     * @param  eVChargeEndTime  LocalDateTime value for eVChargeEndTime.
     * @param  hostingCollectingCompanyNumber  Integer value for hostingCollectingCompanyNumber.
     * @param  transactionId  Double value for transactionId.
     * @param  fuelOnly  Boolean value for fuelOnly.
     */
    public PricedResponseData(
            String accountName,
            Integer accountId,
            String accountNumber,
            String accountShortName,
            String additional1,
            String additional2,
            String additional3,
            String additional4,
            String allowClearing,
            Integer authorisationCode,
            String transactionStatus,
            String driverName,
            Integer cardExpiryPeriod,
            LocalDate cardExpiry,
            Integer cardGroupId,
            String cardGroupName,
            Integer issuerCode,
            String cardPAN,
            Integer releaseCode,
            Integer cardSequenceNumber,
            String cardType,
            String colCoCode,
            Double unitDiscountInvoiceCurrency,
            Double colCoExchangeRate,
            String invoiceCurrencySymbol,
            Boolean correctionFlag,
            Double cRMNumber,
            String customerCountry,
            String customerCurrencyCode,
            String customerCurrencySymbol,
            Double rebateonNetAmountInCustomerCurrency,
            Double effectiveDiscountInCustomerCurrency,
            Double effectiveUnitDiscountInCustomerCurrency,
            Double unitPriceInInvoiceCurrency,
            Double invoiceTax,
            Double invoiceGrossAmount,
            Double invoiceNetAmount,
            Double vATonNetAmountInCustomerCurrency,
            Double customerRetailPriceUnitGross,
            Double customerRetailValueTotalGross,
            Double customerRetailValueTotalNet,
            Double transactionTypeDescription,
            Double rebateonNetAmountInTransactionCurrency,
            Double effectiveDiscountInTrxCurrency,
            Integer delCoToColCoExchangeRate,
            List<Integer> cards,
            Double unitDiscountTransactionCurrency,
            Double transactionGrossAmount,
            Double transactionNetAmount,
            Double transactionTax,
            Double vATonNetAmount,
            Double delcoListPriceUnitNet,
            Double delcoRetailPriceUnitGross,
            Double unitPriceInTransactionCurrency,
            Double delcoRetailPriceUnitNet,
            Double delcoRetailValueTotalGross,
            Double delcoRetailValueTotalNet,
            String transactionCurrencySymbol,
            String discountType,
            Boolean disputeStatus,
            Boolean isShellSite,
            String fleetIdInput,
            Integer incomingProductCode,
            LocalDate postingDate,
            LocalDateTime postingTime,
            Integer productCode,
            String productName,
            Integer productGroupId,
            String incomingCurrencyCode,
            String incomingSiteDescription,
            String location,
            String siteName,
            Integer siteCode,
            Integer incomingSiteNumber,
            String invoiceCurrencyCode,
            LocalDate invoiceDate,
            Double invoiceNumber,
            Boolean fuelProduct,
            String vATApplicable,
            String payerName,
            String payerNumber,
            String parentCustomerNumber,
            String payerGroup,
            String payerGroupName,
            Integer checkDigit,
            String netInvoiceIndicator,
            Integer delcoCode,
            Integer networkCode,
            String purchasedInCountry,
            String siteCountry,
            String vATCountry,
            String delcoName,
            String network,
            Integer odometerInput,
            String originalSalesItemId,
            String fleetIDDescription,
            Integer parentCustomerId,
            String pINIndicator,
            String productGroupName,
            String purchasedInCountryCode,
            Double quantity,
            Double rebateRate,
            Integer receiptNumber,
            PricedTransactionRespV2RefundFlagEnum refundFlag,
            Integer siteGroupId,
            String siteGroupName,
            Double latitude,
            Double longitude,
            Double delCoExchangeRate,
            Double euroRebateAmount,
            Double netEuroAmount,
            Double euroVATAmount,
            String parentCustomerName,
            Boolean isInvoiced,
            String transactionCurrencyCode,
            String creditDebitCode,
            LocalDate transactionDate,
            LocalDateTime transactionTime,
            String transactionItemId,
            String trnIdentifier,
            String type,
            Integer transactionLine,
            String transactionType,
            String uTCOffset,
            String vATCategory,
            Double vATRate,
            String vehicleRegistration,
            String isCancelled,
            Double colCoGrossAmount,
            Double colCoNetAmount,
            Double colCoVATAmount,
            String originalCurrencySymbol,
            String originalCurrencyCode,
            Double originalVATAmount,
            String embossText,
            Double originalExchangeRate,
            LocalDate originalTransactionItemInvoiceDate,
            Integer feeTypeId,
            Boolean lineItemDescription,
            String feeRuleDescription,
            Integer frequency,
            Integer feeRuleId,
            LocalDate systemEntryDate,
            LocalDateTime systemEntryTime,
            String isManual,
            String originalTransactionItemId,
            Integer originalTransactionItemInvoiceNumber,
            Integer originalTransactionItemInvoiceId,
            String payerShortName,
            String reverseCharge,
            Double originalGrossAmount,
            Double originalNetAmount,
            String unitOfMeasure,
            String roadType,
            String customerCountryIsoCode,
            String eVOperator,
            String eVSerialId,
            String eVChargePointSerial,
            Integer eVChargePointConnectorType,
            String eVChargePointConnectorTypeDescription,
            String eVChargeDuration,
            LocalDate eVChargeStartDate,
            LocalDateTime eVChargeStartTime,
            LocalDate eVChargeEndDate,
            LocalDateTime eVChargeEndTime,
            Integer hostingCollectingCompanyNumber,
            Double transactionId,
            Boolean fuelOnly) {
        this.accountName = OptionalNullable.of(accountName);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.additional1 = OptionalNullable.of(additional1);
        this.additional2 = OptionalNullable.of(additional2);
        this.additional3 = OptionalNullable.of(additional3);
        this.additional4 = OptionalNullable.of(additional4);
        this.allowClearing = OptionalNullable.of(allowClearing);
        this.authorisationCode = OptionalNullable.of(authorisationCode);
        this.transactionStatus = OptionalNullable.of(transactionStatus);
        this.driverName = OptionalNullable.of(driverName);
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
        this.cardExpiry = OptionalNullable.of(cardExpiry);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.issuerCode = OptionalNullable.of(issuerCode);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.releaseCode = OptionalNullable.of(releaseCode);
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
        this.cardType = OptionalNullable.of(cardType);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
        this.colCoExchangeRate = colCoExchangeRate;
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
        this.correctionFlag = OptionalNullable.of(correctionFlag);
        this.cRMNumber = OptionalNullable.of(cRMNumber);
        this.customerCountry = OptionalNullable.of(customerCountry);
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
        this.rebateonNetAmountInCustomerCurrency =
                OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
        this.effectiveDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveDiscountInCustomerCurrency);
        this.effectiveUnitDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
        this.invoiceTax = OptionalNullable.of(invoiceTax);
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
        this.vATonNetAmountInCustomerCurrency =
                OptionalNullable.of(vATonNetAmountInCustomerCurrency);
        this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
        this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
        this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
        this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
        this.rebateonNetAmountInTransactionCurrency =
                OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
        this.cards = cards;
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
        this.transactionTax = OptionalNullable.of(transactionTax);
        this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
        this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
        this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
        this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
        this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
        this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
        this.discountType = OptionalNullable.of(discountType);
        this.disputeStatus = OptionalNullable.of(disputeStatus);
        this.isShellSite = isShellSite;
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
        this.postingDate = OptionalNullable.of(postingDate);
        this.postingTime = OptionalNullable.of(postingTime);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.productGroupId = OptionalNullable.of(productGroupId);
        this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
        this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
        this.location = OptionalNullable.of(location);
        this.siteName = OptionalNullable.of(siteName);
        this.siteCode = OptionalNullable.of(siteCode);
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.fuelProduct = OptionalNullable.of(fuelProduct);
        this.vATApplicable = OptionalNullable.of(vATApplicable);
        this.payerName = OptionalNullable.of(payerName);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
        this.payerGroup = OptionalNullable.of(payerGroup);
        this.payerGroupName = OptionalNullable.of(payerGroupName);
        this.checkDigit = OptionalNullable.of(checkDigit);
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
        this.delcoCode = OptionalNullable.of(delcoCode);
        this.networkCode = OptionalNullable.of(networkCode);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.siteCountry = OptionalNullable.of(siteCountry);
        this.vATCountry = OptionalNullable.of(vATCountry);
        this.delcoName = OptionalNullable.of(delcoName);
        this.network = OptionalNullable.of(network);
        this.odometerInput = OptionalNullable.of(odometerInput);
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
        this.parentCustomerId = OptionalNullable.of(parentCustomerId);
        this.pINIndicator = OptionalNullable.of(pINIndicator);
        this.productGroupName = OptionalNullable.of(productGroupName);
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
        this.quantity = OptionalNullable.of(quantity);
        this.rebateRate = OptionalNullable.of(rebateRate);
        this.receiptNumber = OptionalNullable.of(receiptNumber);
        this.refundFlag = refundFlag;
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.siteGroupName = OptionalNullable.of(siteGroupName);
        this.latitude = OptionalNullable.of(latitude);
        this.longitude = OptionalNullable.of(longitude);
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
        this.parentCustomerName = OptionalNullable.of(parentCustomerName);
        this.isInvoiced = OptionalNullable.of(isInvoiced);
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
        this.creditDebitCode = OptionalNullable.of(creditDebitCode);
        this.transactionDate = OptionalNullable.of(transactionDate);
        this.transactionTime = OptionalNullable.of(transactionTime);
        this.transactionItemId = OptionalNullable.of(transactionItemId);
        this.trnIdentifier = OptionalNullable.of(trnIdentifier);
        this.type = OptionalNullable.of(type);
        this.transactionLine = OptionalNullable.of(transactionLine);
        this.transactionType = OptionalNullable.of(transactionType);
        this.uTCOffset = OptionalNullable.of(uTCOffset);
        this.vATCategory = OptionalNullable.of(vATCategory);
        this.vATRate = OptionalNullable.of(vATRate);
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
        this.isCancelled = OptionalNullable.of(isCancelled);
        this.colCoGrossAmount = OptionalNullable.of(colCoGrossAmount);
        this.colCoNetAmount = OptionalNullable.of(colCoNetAmount);
        this.colCoVATAmount = OptionalNullable.of(colCoVATAmount);
        this.originalCurrencySymbol = OptionalNullable.of(originalCurrencySymbol);
        this.originalCurrencyCode = OptionalNullable.of(originalCurrencyCode);
        this.originalVATAmount = OptionalNullable.of(originalVATAmount);
        this.embossText = OptionalNullable.of(embossText);
        this.originalExchangeRate = OptionalNullable.of(originalExchangeRate);
        this.originalTransactionItemInvoiceDate =
                OptionalNullable.of(originalTransactionItemInvoiceDate);
        this.feeTypeId = OptionalNullable.of(feeTypeId);
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
        this.frequency = OptionalNullable.of(frequency);
        this.feeRuleId = OptionalNullable.of(feeRuleId);
        this.systemEntryDate = OptionalNullable.of(systemEntryDate);
        this.systemEntryTime = OptionalNullable.of(systemEntryTime);
        this.isManual = OptionalNullable.of(isManual);
        this.originalTransactionItemId = OptionalNullable.of(originalTransactionItemId);
        this.originalTransactionItemInvoiceNumber =
                OptionalNullable.of(originalTransactionItemInvoiceNumber);
        this.originalTransactionItemInvoiceId =
                OptionalNullable.of(originalTransactionItemInvoiceId);
        this.payerShortName = OptionalNullable.of(payerShortName);
        this.reverseCharge = OptionalNullable.of(reverseCharge);
        this.originalGrossAmount = OptionalNullable.of(originalGrossAmount);
        this.originalNetAmount = OptionalNullable.of(originalNetAmount);
        this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
        this.roadType = OptionalNullable.of(roadType);
        this.customerCountryIsoCode = OptionalNullable.of(customerCountryIsoCode);
        this.eVOperator = OptionalNullable.of(eVOperator);
        this.eVSerialId = OptionalNullable.of(eVSerialId);
        this.eVChargePointSerial = OptionalNullable.of(eVChargePointSerial);
        this.eVChargePointConnectorType = OptionalNullable.of(eVChargePointConnectorType);
        this.eVChargePointConnectorTypeDescription =
                OptionalNullable.of(eVChargePointConnectorTypeDescription);
        this.eVChargeDuration = OptionalNullable.of(eVChargeDuration);
        this.eVChargeStartDate = OptionalNullable.of(eVChargeStartDate);
        this.eVChargeStartTime = OptionalNullable.of(eVChargeStartTime);
        this.eVChargeEndDate = OptionalNullable.of(eVChargeEndDate);
        this.eVChargeEndTime = OptionalNullable.of(eVChargeEndTime);
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
        this.transactionId = OptionalNullable.of(transactionId);
        this.fuelOnly = OptionalNullable.of(fuelOnly);
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  additional1  String value for additional1.
     * @param  additional2  String value for additional2.
     * @param  additional3  String value for additional3.
     * @param  additional4  String value for additional4.
     * @param  allowClearing  String value for allowClearing.
     * @param  authorisationCode  Integer value for authorisationCode.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  driverName  String value for driverName.
     * @param  cardExpiryPeriod  Integer value for cardExpiryPeriod.
     * @param  cardExpiry  LocalDate value for cardExpiry.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  issuerCode  Integer value for issuerCode.
     * @param  cardPAN  String value for cardPAN.
     * @param  releaseCode  Integer value for releaseCode.
     * @param  cardSequenceNumber  Integer value for cardSequenceNumber.
     * @param  cardType  String value for cardType.
     * @param  colCoCode  String value for colCoCode.
     * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
     * @param  colCoExchangeRate  Double value for colCoExchangeRate.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  correctionFlag  Boolean value for correctionFlag.
     * @param  cRMNumber  Double value for cRMNumber.
     * @param  customerCountry  String value for customerCountry.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  rebateonNetAmountInCustomerCurrency  Double value for
     *         rebateonNetAmountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Double value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
     * @param  invoiceTax  Double value for invoiceTax.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  vATonNetAmountInCustomerCurrency  Double value for vATonNetAmountInCustomerCurrency.
     * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
     * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
     * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
     * @param  transactionTypeDescription  Double value for transactionTypeDescription.
     * @param  rebateonNetAmountInTransactionCurrency  Double value for
     *         rebateonNetAmountInTransactionCurrency.
     * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
     * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
     * @param  cards  List of Integer value for cards.
     * @param  unitDiscountTransactionCurrency  Double value for unitDiscountTransactionCurrency.
     * @param  transactionGrossAmount  Double value for transactionGrossAmount.
     * @param  transactionNetAmount  Double value for transactionNetAmount.
     * @param  transactionTax  Double value for transactionTax.
     * @param  vATonNetAmount  Double value for vATonNetAmount.
     * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
     * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
     * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
     * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
     * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
     * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  discountType  String value for discountType.
     * @param  disputeStatus  Boolean value for disputeStatus.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  incomingProductCode  Integer value for incomingProductCode.
     * @param  postingDate  LocalDate value for postingDate.
     * @param  postingTime  LocalDateTime value for postingTime.
     * @param  productCode  Integer value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
     * @param  incomingSiteDescription  String value for incomingSiteDescription.
     * @param  location  String value for location.
     * @param  siteName  String value for siteName.
     * @param  siteCode  Integer value for siteCode.
     * @param  incomingSiteNumber  Integer value for incomingSiteNumber.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceDate  LocalDate value for invoiceDate.
     * @param  invoiceNumber  Double value for invoiceNumber.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  payerName  String value for payerName.
     * @param  payerNumber  String value for payerNumber.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  payerGroup  String value for payerGroup.
     * @param  payerGroupName  String value for payerGroupName.
     * @param  checkDigit  Integer value for checkDigit.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  delcoCode  Integer value for delcoCode.
     * @param  networkCode  Integer value for networkCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  siteCountry  String value for siteCountry.
     * @param  vATCountry  String value for vATCountry.
     * @param  delcoName  String value for delcoName.
     * @param  network  String value for network.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  originalSalesItemId  String value for originalSalesItemId.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  parentCustomerId  Integer value for parentCustomerId.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  productGroupName  String value for productGroupName.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  quantity  Double value for quantity.
     * @param  rebateRate  Double value for rebateRate.
     * @param  receiptNumber  Integer value for receiptNumber.
     * @param  refundFlag  PricedTransactionRespV2RefundFlagEnum value for refundFlag.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  latitude  Double value for latitude.
     * @param  longitude  Double value for longitude.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  euroRebateAmount  Double value for euroRebateAmount.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerName  String value for parentCustomerName.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  creditDebitCode  String value for creditDebitCode.
     * @param  transactionDate  LocalDate value for transactionDate.
     * @param  transactionTime  LocalDateTime value for transactionTime.
     * @param  transactionItemId  String value for transactionItemId.
     * @param  trnIdentifier  String value for trnIdentifier.
     * @param  type  String value for type.
     * @param  transactionLine  Integer value for transactionLine.
     * @param  transactionType  String value for transactionType.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  vATCategory  String value for vATCategory.
     * @param  vATRate  Double value for vATRate.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  isCancelled  String value for isCancelled.
     * @param  colCoGrossAmount  Double value for colCoGrossAmount.
     * @param  colCoNetAmount  Double value for colCoNetAmount.
     * @param  colCoVATAmount  Double value for colCoVATAmount.
     * @param  originalCurrencySymbol  String value for originalCurrencySymbol.
     * @param  originalCurrencyCode  String value for originalCurrencyCode.
     * @param  originalVATAmount  Double value for originalVATAmount.
     * @param  embossText  String value for embossText.
     * @param  originalExchangeRate  Double value for originalExchangeRate.
     * @param  originalTransactionItemInvoiceDate  LocalDate value for
     *         originalTransactionItemInvoiceDate.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  lineItemDescription  Boolean value for lineItemDescription.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  frequency  Integer value for frequency.
     * @param  feeRuleId  Integer value for feeRuleId.
     * @param  systemEntryDate  LocalDate value for systemEntryDate.
     * @param  systemEntryTime  LocalDateTime value for systemEntryTime.
     * @param  isManual  String value for isManual.
     * @param  originalTransactionItemId  String value for originalTransactionItemId.
     * @param  originalTransactionItemInvoiceNumber  Integer value for
     *         originalTransactionItemInvoiceNumber.
     * @param  originalTransactionItemInvoiceId  Integer value for originalTransactionItemInvoiceId.
     * @param  payerShortName  String value for payerShortName.
     * @param  reverseCharge  String value for reverseCharge.
     * @param  originalGrossAmount  Double value for originalGrossAmount.
     * @param  originalNetAmount  Double value for originalNetAmount.
     * @param  unitOfMeasure  String value for unitOfMeasure.
     * @param  roadType  String value for roadType.
     * @param  customerCountryIsoCode  String value for customerCountryIsoCode.
     * @param  eVOperator  String value for eVOperator.
     * @param  eVSerialId  String value for eVSerialId.
     * @param  eVChargePointSerial  String value for eVChargePointSerial.
     * @param  eVChargePointConnectorType  Integer value for eVChargePointConnectorType.
     * @param  eVChargePointConnectorTypeDescription  String value for
     *         eVChargePointConnectorTypeDescription.
     * @param  eVChargeDuration  String value for eVChargeDuration.
     * @param  eVChargeStartDate  LocalDate value for eVChargeStartDate.
     * @param  eVChargeStartTime  LocalDateTime value for eVChargeStartTime.
     * @param  eVChargeEndDate  LocalDate value for eVChargeEndDate.
     * @param  eVChargeEndTime  LocalDateTime value for eVChargeEndTime.
     * @param  hostingCollectingCompanyNumber  Integer value for hostingCollectingCompanyNumber.
     * @param  transactionId  Double value for transactionId.
     * @param  fuelOnly  Boolean value for fuelOnly.
     */

    protected PricedResponseData(OptionalNullable<String> accountName,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<String> accountShortName, OptionalNullable<String> additional1,
            OptionalNullable<String> additional2, OptionalNullable<String> additional3,
            OptionalNullable<String> additional4, OptionalNullable<String> allowClearing,
            OptionalNullable<Integer> authorisationCode, OptionalNullable<String> transactionStatus,
            OptionalNullable<String> driverName, OptionalNullable<Integer> cardExpiryPeriod,
            OptionalNullable<LocalDate> cardExpiry, OptionalNullable<Integer> cardGroupId,
            OptionalNullable<String> cardGroupName, OptionalNullable<Integer> issuerCode,
            OptionalNullable<String> cardPAN, OptionalNullable<Integer> releaseCode,
            OptionalNullable<Integer> cardSequenceNumber, OptionalNullable<String> cardType,
            OptionalNullable<String> colCoCode,
            OptionalNullable<Double> unitDiscountInvoiceCurrency, Double colCoExchangeRate,
            OptionalNullable<String> invoiceCurrencySymbol,
            OptionalNullable<Boolean> correctionFlag, OptionalNullable<Double> cRMNumber,
            OptionalNullable<String> customerCountry, OptionalNullable<String> customerCurrencyCode,
            OptionalNullable<String> customerCurrencySymbol,
            OptionalNullable<Double> rebateonNetAmountInCustomerCurrency,
            OptionalNullable<Double> effectiveDiscountInCustomerCurrency,
            OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency,
            OptionalNullable<Double> unitPriceInInvoiceCurrency,
            OptionalNullable<Double> invoiceTax, OptionalNullable<Double> invoiceGrossAmount,
            OptionalNullable<Double> invoiceNetAmount,
            OptionalNullable<Double> vATonNetAmountInCustomerCurrency,
            OptionalNullable<Double> customerRetailPriceUnitGross,
            OptionalNullable<Double> customerRetailValueTotalGross,
            OptionalNullable<Double> customerRetailValueTotalNet,
            OptionalNullable<Double> transactionTypeDescription,
            OptionalNullable<Double> rebateonNetAmountInTransactionCurrency,
            OptionalNullable<Double> effectiveDiscountInTrxCurrency,
            OptionalNullable<Integer> delCoToColCoExchangeRate, List<Integer> cards,
            OptionalNullable<Double> unitDiscountTransactionCurrency,
            OptionalNullable<Double> transactionGrossAmount,
            OptionalNullable<Double> transactionNetAmount, OptionalNullable<Double> transactionTax,
            OptionalNullable<Double> vATonNetAmount, OptionalNullable<Double> delcoListPriceUnitNet,
            OptionalNullable<Double> delcoRetailPriceUnitGross,
            OptionalNullable<Double> unitPriceInTransactionCurrency,
            OptionalNullable<Double> delcoRetailPriceUnitNet,
            OptionalNullable<Double> delcoRetailValueTotalGross,
            OptionalNullable<Double> delcoRetailValueTotalNet,
            OptionalNullable<String> transactionCurrencySymbol,
            OptionalNullable<String> discountType, OptionalNullable<Boolean> disputeStatus,
            Boolean isShellSite, OptionalNullable<String> fleetIdInput,
            OptionalNullable<Integer> incomingProductCode, OptionalNullable<LocalDate> postingDate,
            OptionalNullable<LocalDateTime> postingTime, OptionalNullable<Integer> productCode,
            OptionalNullable<String> productName, OptionalNullable<Integer> productGroupId,
            OptionalNullable<String> incomingCurrencyCode,
            OptionalNullable<String> incomingSiteDescription, OptionalNullable<String> location,
            OptionalNullable<String> siteName, OptionalNullable<Integer> siteCode,
            OptionalNullable<Integer> incomingSiteNumber,
            OptionalNullable<String> invoiceCurrencyCode, OptionalNullable<LocalDate> invoiceDate,
            OptionalNullable<Double> invoiceNumber, OptionalNullable<Boolean> fuelProduct,
            OptionalNullable<String> vATApplicable, OptionalNullable<String> payerName,
            OptionalNullable<String> payerNumber, OptionalNullable<String> parentCustomerNumber,
            OptionalNullable<String> payerGroup, OptionalNullable<String> payerGroupName,
            OptionalNullable<Integer> checkDigit, OptionalNullable<String> netInvoiceIndicator,
            OptionalNullable<Integer> delcoCode, OptionalNullable<Integer> networkCode,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<String> siteCountry,
            OptionalNullable<String> vATCountry, OptionalNullable<String> delcoName,
            OptionalNullable<String> network, OptionalNullable<Integer> odometerInput,
            OptionalNullable<String> originalSalesItemId,
            OptionalNullable<String> fleetIDDescription, OptionalNullable<Integer> parentCustomerId,
            OptionalNullable<String> pINIndicator, OptionalNullable<String> productGroupName,
            OptionalNullable<String> purchasedInCountryCode, OptionalNullable<Double> quantity,
            OptionalNullable<Double> rebateRate, OptionalNullable<Integer> receiptNumber,
            PricedTransactionRespV2RefundFlagEnum refundFlag, OptionalNullable<Integer> siteGroupId,
            OptionalNullable<String> siteGroupName, OptionalNullable<Double> latitude,
            OptionalNullable<Double> longitude, OptionalNullable<Double> delCoExchangeRate,
            OptionalNullable<Double> euroRebateAmount, OptionalNullable<Double> netEuroAmount,
            OptionalNullable<Double> euroVATAmount, OptionalNullable<String> parentCustomerName,
            OptionalNullable<Boolean> isInvoiced, OptionalNullable<String> transactionCurrencyCode,
            OptionalNullable<String> creditDebitCode, OptionalNullable<LocalDate> transactionDate,
            OptionalNullable<LocalDateTime> transactionTime,
            OptionalNullable<String> transactionItemId, OptionalNullable<String> trnIdentifier,
            OptionalNullable<String> type, OptionalNullable<Integer> transactionLine,
            OptionalNullable<String> transactionType, OptionalNullable<String> uTCOffset,
            OptionalNullable<String> vATCategory, OptionalNullable<Double> vATRate,
            OptionalNullable<String> vehicleRegistration, OptionalNullable<String> isCancelled,
            OptionalNullable<Double> colCoGrossAmount, OptionalNullable<Double> colCoNetAmount,
            OptionalNullable<Double> colCoVATAmount,
            OptionalNullable<String> originalCurrencySymbol,
            OptionalNullable<String> originalCurrencyCode,
            OptionalNullable<Double> originalVATAmount, OptionalNullable<String> embossText,
            OptionalNullable<Double> originalExchangeRate,
            OptionalNullable<LocalDate> originalTransactionItemInvoiceDate,
            OptionalNullable<Integer> feeTypeId, OptionalNullable<Boolean> lineItemDescription,
            OptionalNullable<String> feeRuleDescription, OptionalNullable<Integer> frequency,
            OptionalNullable<Integer> feeRuleId, OptionalNullable<LocalDate> systemEntryDate,
            OptionalNullable<LocalDateTime> systemEntryTime, OptionalNullable<String> isManual,
            OptionalNullable<String> originalTransactionItemId,
            OptionalNullable<Integer> originalTransactionItemInvoiceNumber,
            OptionalNullable<Integer> originalTransactionItemInvoiceId,
            OptionalNullable<String> payerShortName, OptionalNullable<String> reverseCharge,
            OptionalNullable<Double> originalGrossAmount,
            OptionalNullable<Double> originalNetAmount, OptionalNullable<String> unitOfMeasure,
            OptionalNullable<String> roadType, OptionalNullable<String> customerCountryIsoCode,
            OptionalNullable<String> eVOperator, OptionalNullable<String> eVSerialId,
            OptionalNullable<String> eVChargePointSerial,
            OptionalNullable<Integer> eVChargePointConnectorType,
            OptionalNullable<String> eVChargePointConnectorTypeDescription,
            OptionalNullable<String> eVChargeDuration,
            OptionalNullable<LocalDate> eVChargeStartDate,
            OptionalNullable<LocalDateTime> eVChargeStartTime,
            OptionalNullable<LocalDate> eVChargeEndDate,
            OptionalNullable<LocalDateTime> eVChargeEndTime,
            OptionalNullable<Integer> hostingCollectingCompanyNumber,
            OptionalNullable<Double> transactionId, OptionalNullable<Boolean> fuelOnly) {
        this.accountName = accountName;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.additional1 = additional1;
        this.additional2 = additional2;
        this.additional3 = additional3;
        this.additional4 = additional4;
        this.allowClearing = allowClearing;
        this.authorisationCode = authorisationCode;
        this.transactionStatus = transactionStatus;
        this.driverName = driverName;
        this.cardExpiryPeriod = cardExpiryPeriod;
        this.cardExpiry = cardExpiry;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.issuerCode = issuerCode;
        this.cardPAN = cardPAN;
        this.releaseCode = releaseCode;
        this.cardSequenceNumber = cardSequenceNumber;
        this.cardType = cardType;
        this.colCoCode = colCoCode;
        this.unitDiscountInvoiceCurrency = unitDiscountInvoiceCurrency;
        this.colCoExchangeRate = colCoExchangeRate;
        this.invoiceCurrencySymbol = invoiceCurrencySymbol;
        this.correctionFlag = correctionFlag;
        this.cRMNumber = cRMNumber;
        this.customerCountry = customerCountry;
        this.customerCurrencyCode = customerCurrencyCode;
        this.customerCurrencySymbol = customerCurrencySymbol;
        this.rebateonNetAmountInCustomerCurrency = rebateonNetAmountInCustomerCurrency;
        this.effectiveDiscountInCustomerCurrency = effectiveDiscountInCustomerCurrency;
        this.effectiveUnitDiscountInCustomerCurrency = effectiveUnitDiscountInCustomerCurrency;
        this.unitPriceInInvoiceCurrency = unitPriceInInvoiceCurrency;
        this.invoiceTax = invoiceTax;
        this.invoiceGrossAmount = invoiceGrossAmount;
        this.invoiceNetAmount = invoiceNetAmount;
        this.vATonNetAmountInCustomerCurrency = vATonNetAmountInCustomerCurrency;
        this.customerRetailPriceUnitGross = customerRetailPriceUnitGross;
        this.customerRetailValueTotalGross = customerRetailValueTotalGross;
        this.customerRetailValueTotalNet = customerRetailValueTotalNet;
        this.transactionTypeDescription = transactionTypeDescription;
        this.rebateonNetAmountInTransactionCurrency = rebateonNetAmountInTransactionCurrency;
        this.effectiveDiscountInTrxCurrency = effectiveDiscountInTrxCurrency;
        this.delCoToColCoExchangeRate = delCoToColCoExchangeRate;
        this.cards = cards;
        this.unitDiscountTransactionCurrency = unitDiscountTransactionCurrency;
        this.transactionGrossAmount = transactionGrossAmount;
        this.transactionNetAmount = transactionNetAmount;
        this.transactionTax = transactionTax;
        this.vATonNetAmount = vATonNetAmount;
        this.delcoListPriceUnitNet = delcoListPriceUnitNet;
        this.delcoRetailPriceUnitGross = delcoRetailPriceUnitGross;
        this.unitPriceInTransactionCurrency = unitPriceInTransactionCurrency;
        this.delcoRetailPriceUnitNet = delcoRetailPriceUnitNet;
        this.delcoRetailValueTotalGross = delcoRetailValueTotalGross;
        this.delcoRetailValueTotalNet = delcoRetailValueTotalNet;
        this.transactionCurrencySymbol = transactionCurrencySymbol;
        this.discountType = discountType;
        this.disputeStatus = disputeStatus;
        this.isShellSite = isShellSite;
        this.fleetIdInput = fleetIdInput;
        this.incomingProductCode = incomingProductCode;
        this.postingDate = postingDate;
        this.postingTime = postingTime;
        this.productCode = productCode;
        this.productName = productName;
        this.productGroupId = productGroupId;
        this.incomingCurrencyCode = incomingCurrencyCode;
        this.incomingSiteDescription = incomingSiteDescription;
        this.location = location;
        this.siteName = siteName;
        this.siteCode = siteCode;
        this.incomingSiteNumber = incomingSiteNumber;
        this.invoiceCurrencyCode = invoiceCurrencyCode;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.fuelProduct = fuelProduct;
        this.vATApplicable = vATApplicable;
        this.payerName = payerName;
        this.payerNumber = payerNumber;
        this.parentCustomerNumber = parentCustomerNumber;
        this.payerGroup = payerGroup;
        this.payerGroupName = payerGroupName;
        this.checkDigit = checkDigit;
        this.netInvoiceIndicator = netInvoiceIndicator;
        this.delcoCode = delcoCode;
        this.networkCode = networkCode;
        this.purchasedInCountry = purchasedInCountry;
        this.siteCountry = siteCountry;
        this.vATCountry = vATCountry;
        this.delcoName = delcoName;
        this.network = network;
        this.odometerInput = odometerInput;
        this.originalSalesItemId = originalSalesItemId;
        this.fleetIDDescription = fleetIDDescription;
        this.parentCustomerId = parentCustomerId;
        this.pINIndicator = pINIndicator;
        this.productGroupName = productGroupName;
        this.purchasedInCountryCode = purchasedInCountryCode;
        this.quantity = quantity;
        this.rebateRate = rebateRate;
        this.receiptNumber = receiptNumber;
        this.refundFlag = refundFlag;
        this.siteGroupId = siteGroupId;
        this.siteGroupName = siteGroupName;
        this.latitude = latitude;
        this.longitude = longitude;
        this.delCoExchangeRate = delCoExchangeRate;
        this.euroRebateAmount = euroRebateAmount;
        this.netEuroAmount = netEuroAmount;
        this.euroVATAmount = euroVATAmount;
        this.parentCustomerName = parentCustomerName;
        this.isInvoiced = isInvoiced;
        this.transactionCurrencyCode = transactionCurrencyCode;
        this.creditDebitCode = creditDebitCode;
        this.transactionDate = transactionDate;
        this.transactionTime = transactionTime;
        this.transactionItemId = transactionItemId;
        this.trnIdentifier = trnIdentifier;
        this.type = type;
        this.transactionLine = transactionLine;
        this.transactionType = transactionType;
        this.uTCOffset = uTCOffset;
        this.vATCategory = vATCategory;
        this.vATRate = vATRate;
        this.vehicleRegistration = vehicleRegistration;
        this.isCancelled = isCancelled;
        this.colCoGrossAmount = colCoGrossAmount;
        this.colCoNetAmount = colCoNetAmount;
        this.colCoVATAmount = colCoVATAmount;
        this.originalCurrencySymbol = originalCurrencySymbol;
        this.originalCurrencyCode = originalCurrencyCode;
        this.originalVATAmount = originalVATAmount;
        this.embossText = embossText;
        this.originalExchangeRate = originalExchangeRate;
        this.originalTransactionItemInvoiceDate = originalTransactionItemInvoiceDate;
        this.feeTypeId = feeTypeId;
        this.lineItemDescription = lineItemDescription;
        this.feeRuleDescription = feeRuleDescription;
        this.frequency = frequency;
        this.feeRuleId = feeRuleId;
        this.systemEntryDate = systemEntryDate;
        this.systemEntryTime = systemEntryTime;
        this.isManual = isManual;
        this.originalTransactionItemId = originalTransactionItemId;
        this.originalTransactionItemInvoiceNumber = originalTransactionItemInvoiceNumber;
        this.originalTransactionItemInvoiceId = originalTransactionItemInvoiceId;
        this.payerShortName = payerShortName;
        this.reverseCharge = reverseCharge;
        this.originalGrossAmount = originalGrossAmount;
        this.originalNetAmount = originalNetAmount;
        this.unitOfMeasure = unitOfMeasure;
        this.roadType = roadType;
        this.customerCountryIsoCode = customerCountryIsoCode;
        this.eVOperator = eVOperator;
        this.eVSerialId = eVSerialId;
        this.eVChargePointSerial = eVChargePointSerial;
        this.eVChargePointConnectorType = eVChargePointConnectorType;
        this.eVChargePointConnectorTypeDescription = eVChargePointConnectorTypeDescription;
        this.eVChargeDuration = eVChargeDuration;
        this.eVChargeStartDate = eVChargeStartDate;
        this.eVChargeStartTime = eVChargeStartTime;
        this.eVChargeEndDate = eVChargeEndDate;
        this.eVChargeEndTime = eVChargeEndTime;
        this.hostingCollectingCompanyNumber = hostingCollectingCompanyNumber;
        this.transactionId = transactionId;
        this.fuelOnly = fuelOnly;
    }

    /**
     * Internal Getter for AccountName.
     * Name of the account
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Name of the account
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Name of the account
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Name of the account
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account.
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * AccountNumber of the selected account.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * AccountNumber of the selected account.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * AccountNumber of the selected account.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * AccountNumber of the selected account.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Nick name of the account
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Nick name of the account
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Nick name of the account
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Nick name of the account
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for Additional1.
     * Addtional SerialId or endpoint Id
     * @return Returns the Internal String
     */
    @JsonGetter("Additional1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional1() {
        return this.additional1;
    }

    /**
     * Getter for Additional1.
     * Addtional SerialId or endpoint Id
     * @return Returns the String
     */
    public String getAdditional1() {
        return OptionalNullable.getFrom(additional1);
    }

    /**
     * Setter for Additional1.
     * Addtional SerialId or endpoint Id
     * @param additional1 Value for String
     */
    @JsonSetter("Additional1")
    public void setAdditional1(String additional1) {
        this.additional1 = OptionalNullable.of(additional1);
    }

    /**
     * UnSetter for Additional1.
     * Addtional SerialId or endpoint Id
     */
    public void unsetAdditional1() {
        additional1 = null;
    }

    /**
     * Internal Getter for Additional2.
     * Addtional SerialId or endpoint Id
     * @return Returns the Internal String
     */
    @JsonGetter("Additional2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional2() {
        return this.additional2;
    }

    /**
     * Getter for Additional2.
     * Addtional SerialId or endpoint Id
     * @return Returns the String
     */
    public String getAdditional2() {
        return OptionalNullable.getFrom(additional2);
    }

    /**
     * Setter for Additional2.
     * Addtional SerialId or endpoint Id
     * @param additional2 Value for String
     */
    @JsonSetter("Additional2")
    public void setAdditional2(String additional2) {
        this.additional2 = OptionalNullable.of(additional2);
    }

    /**
     * UnSetter for Additional2.
     * Addtional SerialId or endpoint Id
     */
    public void unsetAdditional2() {
        additional2 = null;
    }

    /**
     * Internal Getter for Additional3.
     * Addtional SerialId or endpoint Id
     * @return Returns the Internal String
     */
    @JsonGetter("Additional3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional3() {
        return this.additional3;
    }

    /**
     * Getter for Additional3.
     * Addtional SerialId or endpoint Id
     * @return Returns the String
     */
    public String getAdditional3() {
        return OptionalNullable.getFrom(additional3);
    }

    /**
     * Setter for Additional3.
     * Addtional SerialId or endpoint Id
     * @param additional3 Value for String
     */
    @JsonSetter("Additional3")
    public void setAdditional3(String additional3) {
        this.additional3 = OptionalNullable.of(additional3);
    }

    /**
     * UnSetter for Additional3.
     * Addtional SerialId or endpoint Id
     */
    public void unsetAdditional3() {
        additional3 = null;
    }

    /**
     * Internal Getter for Additional4.
     * Addtional SerialId or endpoint Id
     * @return Returns the Internal String
     */
    @JsonGetter("Additional4")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional4() {
        return this.additional4;
    }

    /**
     * Getter for Additional4.
     * Addtional SerialId or endpoint Id
     * @return Returns the String
     */
    public String getAdditional4() {
        return OptionalNullable.getFrom(additional4);
    }

    /**
     * Setter for Additional4.
     * Addtional SerialId or endpoint Id
     * @param additional4 Value for String
     */
    @JsonSetter("Additional4")
    public void setAdditional4(String additional4) {
        this.additional4 = OptionalNullable.of(additional4);
    }

    /**
     * UnSetter for Additional4.
     * Addtional SerialId or endpoint Id
     */
    public void unsetAdditional4() {
        additional4 = null;
    }

    /**
     * Internal Getter for AllowClearing.
     * Allow clearings
     * @return Returns the Internal String
     */
    @JsonGetter("AllowClearing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAllowClearing() {
        return this.allowClearing;
    }

    /**
     * Getter for AllowClearing.
     * Allow clearings
     * @return Returns the String
     */
    public String getAllowClearing() {
        return OptionalNullable.getFrom(allowClearing);
    }

    /**
     * Setter for AllowClearing.
     * Allow clearings
     * @param allowClearing Value for String
     */
    @JsonSetter("AllowClearing")
    public void setAllowClearing(String allowClearing) {
        this.allowClearing = OptionalNullable.of(allowClearing);
    }

    /**
     * UnSetter for AllowClearing.
     * Allow clearings
     */
    public void unsetAllowClearing() {
        allowClearing = null;
    }

    /**
     * Internal Getter for AuthorisationCode.
     * Autorization code
     * @return Returns the Internal Integer
     */
    @JsonGetter("AuthorisationCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAuthorisationCode() {
        return this.authorisationCode;
    }

    /**
     * Getter for AuthorisationCode.
     * Autorization code
     * @return Returns the Integer
     */
    public Integer getAuthorisationCode() {
        return OptionalNullable.getFrom(authorisationCode);
    }

    /**
     * Setter for AuthorisationCode.
     * Autorization code
     * @param authorisationCode Value for Integer
     */
    @JsonSetter("AuthorisationCode")
    public void setAuthorisationCode(Integer authorisationCode) {
        this.authorisationCode = OptionalNullable.of(authorisationCode);
    }

    /**
     * UnSetter for AuthorisationCode.
     * Autorization code
     */
    public void unsetAuthorisationCode() {
        authorisationCode = null;
    }

    /**
     * Internal Getter for TransactionStatus.
     * Status of the transaction
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionStatus() {
        return this.transactionStatus;
    }

    /**
     * Getter for TransactionStatus.
     * Status of the transaction
     * @return Returns the String
     */
    public String getTransactionStatus() {
        return OptionalNullable.getFrom(transactionStatus);
    }

    /**
     * Setter for TransactionStatus.
     * Status of the transaction
     * @param transactionStatus Value for String
     */
    @JsonSetter("TransactionStatus")
    public void setTransactionStatus(String transactionStatus) {
        this.transactionStatus = OptionalNullable.of(transactionStatus);
    }

    /**
     * UnSetter for TransactionStatus.
     * Status of the transaction
     */
    public void unsetTransactionStatus() {
        transactionStatus = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name of Card record
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name of Card record
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name of Card record
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name of Card record
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for CardExpiryPeriod.
     * Expiry period of the card
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardExpiryPeriod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardExpiryPeriod() {
        return this.cardExpiryPeriod;
    }

    /**
     * Getter for CardExpiryPeriod.
     * Expiry period of the card
     * @return Returns the Integer
     */
    public Integer getCardExpiryPeriod() {
        return OptionalNullable.getFrom(cardExpiryPeriod);
    }

    /**
     * Setter for CardExpiryPeriod.
     * Expiry period of the card
     * @param cardExpiryPeriod Value for Integer
     */
    @JsonSetter("CardExpiryPeriod")
    public void setCardExpiryPeriod(Integer cardExpiryPeriod) {
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
    }

    /**
     * UnSetter for CardExpiryPeriod.
     * Expiry period of the card
     */
    public void unsetCardExpiryPeriod() {
        cardExpiryPeriod = null;
    }

    /**
     * Internal Getter for CardExpiry.
     * Card Expiry Date
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("CardExpiry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetCardExpiry() {
        return this.cardExpiry;
    }

    /**
     * Getter for CardExpiry.
     * Card Expiry Date
     * @return Returns the LocalDate
     */
    public LocalDate getCardExpiry() {
        return OptionalNullable.getFrom(cardExpiry);
    }

    /**
     * Setter for CardExpiry.
     * Card Expiry Date
     * @param cardExpiry Value for LocalDate
     */
    @JsonSetter("CardExpiry")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setCardExpiry(LocalDate cardExpiry) {
        this.cardExpiry = OptionalNullable.of(cardExpiry);
    }

    /**
     * UnSetter for CardExpiry.
     * Card Expiry Date
     */
    public void unsetCardExpiry() {
        cardExpiry = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card Group Code
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card Group Code
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card Group Code
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card Group Code
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Group nmae of the card
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Group nmae of the card
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Group nmae of the card
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Group nmae of the card
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for IssuerCode.
     * Issuer code
     * @return Returns the Internal Integer
     */
    @JsonGetter("IssuerCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIssuerCode() {
        return this.issuerCode;
    }

    /**
     * Getter for IssuerCode.
     * Issuer code
     * @return Returns the Integer
     */
    public Integer getIssuerCode() {
        return OptionalNullable.getFrom(issuerCode);
    }

    /**
     * Setter for IssuerCode.
     * Issuer code
     * @param issuerCode Value for Integer
     */
    @JsonSetter("IssuerCode")
    public void setIssuerCode(Integer issuerCode) {
        this.issuerCode = OptionalNullable.of(issuerCode);
    }

    /**
     * UnSetter for IssuerCode.
     * Issuer code
     */
    public void unsetIssuerCode() {
        issuerCode = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Full Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Full Card PAN
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Full Card PAN
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Full Card PAN
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for ReleaseCode.
     * Release code
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReleaseCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReleaseCode() {
        return this.releaseCode;
    }

    /**
     * Getter for ReleaseCode.
     * Release code
     * @return Returns the Integer
     */
    public Integer getReleaseCode() {
        return OptionalNullable.getFrom(releaseCode);
    }

    /**
     * Setter for ReleaseCode.
     * Release code
     * @param releaseCode Value for Integer
     */
    @JsonSetter("ReleaseCode")
    public void setReleaseCode(Integer releaseCode) {
        this.releaseCode = OptionalNullable.of(releaseCode);
    }

    /**
     * UnSetter for ReleaseCode.
     * Release code
     */
    public void unsetReleaseCode() {
        releaseCode = null;
    }

    /**
     * Internal Getter for CardSequenceNumber.
     * Sequesnce number of the card
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardSequenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardSequenceNumber() {
        return this.cardSequenceNumber;
    }

    /**
     * Getter for CardSequenceNumber.
     * Sequesnce number of the card
     * @return Returns the Integer
     */
    public Integer getCardSequenceNumber() {
        return OptionalNullable.getFrom(cardSequenceNumber);
    }

    /**
     * Setter for CardSequenceNumber.
     * Sequesnce number of the card
     * @param cardSequenceNumber Value for Integer
     */
    @JsonSetter("CardSequenceNumber")
    public void setCardSequenceNumber(Integer cardSequenceNumber) {
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
    }

    /**
     * UnSetter for CardSequenceNumber.
     * Sequesnce number of the card
     */
    public void unsetCardSequenceNumber() {
        cardSequenceNumber = null;
    }

    /**
     * Internal Getter for CardType.
     * Type of card
     * @return Returns the Internal String
     */
    @JsonGetter("CardType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardType() {
        return this.cardType;
    }

    /**
     * Getter for CardType.
     * Type of card
     * @return Returns the String
     */
    public String getCardType() {
        return OptionalNullable.getFrom(cardType);
    }

    /**
     * Setter for CardType.
     * Type of card
     * @param cardType Value for String
     */
    @JsonSetter("CardType")
    public void setCardType(String cardType) {
        this.cardType = OptionalNullable.of(cardType);
    }

    /**
     * UnSetter for CardType.
     * Type of card
     */
    public void unsetCardType() {
        cardType = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     * @return Returns the String
     */
    public String getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     * @param colCoCode Value for String
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(String colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for UnitDiscountInvoiceCurrency.
     * Unit discount Invoice currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitDiscountInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitDiscountInvoiceCurrency() {
        return this.unitDiscountInvoiceCurrency;
    }

    /**
     * Getter for UnitDiscountInvoiceCurrency.
     * Unit discount Invoice currency
     * @return Returns the Double
     */
    public Double getUnitDiscountInvoiceCurrency() {
        return OptionalNullable.getFrom(unitDiscountInvoiceCurrency);
    }

    /**
     * Setter for UnitDiscountInvoiceCurrency.
     * Unit discount Invoice currency
     * @param unitDiscountInvoiceCurrency Value for Double
     */
    @JsonSetter("UnitDiscountInvoiceCurrency")
    public void setUnitDiscountInvoiceCurrency(Double unitDiscountInvoiceCurrency) {
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
    }

    /**
     * UnSetter for UnitDiscountInvoiceCurrency.
     * Unit discount Invoice currency
     */
    public void unsetUnitDiscountInvoiceCurrency() {
        unitDiscountInvoiceCurrency = null;
    }

    /**
     * Getter for ColCoExchangeRate.
     * Colco exchange rate
     * @return Returns the Double
     */
    @JsonGetter("ColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getColCoExchangeRate() {
        return colCoExchangeRate;
    }

    /**
     * Setter for ColCoExchangeRate.
     * Colco exchange rate
     * @param colCoExchangeRate Value for Double
     */
    @JsonSetter("ColCoExchangeRate")
    public void setColCoExchangeRate(Double colCoExchangeRate) {
        this.colCoExchangeRate = colCoExchangeRate;
    }

    /**
     * Internal Getter for InvoiceCurrencySymbol.
     * Currency symbol on which the invoice was raised
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencySymbol() {
        return this.invoiceCurrencySymbol;
    }

    /**
     * Getter for InvoiceCurrencySymbol.
     * Currency symbol on which the invoice was raised
     * @return Returns the String
     */
    public String getInvoiceCurrencySymbol() {
        return OptionalNullable.getFrom(invoiceCurrencySymbol);
    }

    /**
     * Setter for InvoiceCurrencySymbol.
     * Currency symbol on which the invoice was raised
     * @param invoiceCurrencySymbol Value for String
     */
    @JsonSetter("InvoiceCurrencySymbol")
    public void setInvoiceCurrencySymbol(String invoiceCurrencySymbol) {
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
    }

    /**
     * UnSetter for InvoiceCurrencySymbol.
     * Currency symbol on which the invoice was raised
     */
    public void unsetInvoiceCurrencySymbol() {
        invoiceCurrencySymbol = null;
    }

    /**
     * Internal Getter for CorrectionFlag.
     * Is there any correction
     * @return Returns the Internal Boolean
     */
    @JsonGetter("CorrectionFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetCorrectionFlag() {
        return this.correctionFlag;
    }

    /**
     * Getter for CorrectionFlag.
     * Is there any correction
     * @return Returns the Boolean
     */
    public Boolean getCorrectionFlag() {
        return OptionalNullable.getFrom(correctionFlag);
    }

    /**
     * Setter for CorrectionFlag.
     * Is there any correction
     * @param correctionFlag Value for Boolean
     */
    @JsonSetter("CorrectionFlag")
    public void setCorrectionFlag(Boolean correctionFlag) {
        this.correctionFlag = OptionalNullable.of(correctionFlag);
    }

    /**
     * UnSetter for CorrectionFlag.
     * Is there any correction
     */
    public void unsetCorrectionFlag() {
        correctionFlag = null;
    }

    /**
     * Internal Getter for CRMNumber.
     * CRM number
     * @return Returns the Internal Double
     */
    @JsonGetter("CRMNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCRMNumber() {
        return this.cRMNumber;
    }

    /**
     * Getter for CRMNumber.
     * CRM number
     * @return Returns the Double
     */
    public Double getCRMNumber() {
        return OptionalNullable.getFrom(cRMNumber);
    }

    /**
     * Setter for CRMNumber.
     * CRM number
     * @param cRMNumber Value for Double
     */
    @JsonSetter("CRMNumber")
    public void setCRMNumber(Double cRMNumber) {
        this.cRMNumber = OptionalNullable.of(cRMNumber);
    }

    /**
     * UnSetter for CRMNumber.
     * CRM number
     */
    public void unsetCRMNumber() {
        cRMNumber = null;
    }

    /**
     * Internal Getter for CustomerCountry.
     * Customer country
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountry() {
        return this.customerCountry;
    }

    /**
     * Getter for CustomerCountry.
     * Customer country
     * @return Returns the String
     */
    public String getCustomerCountry() {
        return OptionalNullable.getFrom(customerCountry);
    }

    /**
     * Setter for CustomerCountry.
     * Customer country
     * @param customerCountry Value for String
     */
    @JsonSetter("CustomerCountry")
    public void setCustomerCountry(String customerCountry) {
        this.customerCountry = OptionalNullable.of(customerCountry);
    }

    /**
     * UnSetter for CustomerCountry.
     * Customer country
     */
    public void unsetCustomerCountry() {
        customerCountry = null;
    }

    /**
     * Internal Getter for CustomerCurrencyCode.
     * Curreny which customer uses to transact.
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencyCode() {
        return this.customerCurrencyCode;
    }

    /**
     * Getter for CustomerCurrencyCode.
     * Curreny which customer uses to transact.
     * @return Returns the String
     */
    public String getCustomerCurrencyCode() {
        return OptionalNullable.getFrom(customerCurrencyCode);
    }

    /**
     * Setter for CustomerCurrencyCode.
     * Curreny which customer uses to transact.
     * @param customerCurrencyCode Value for String
     */
    @JsonSetter("CustomerCurrencyCode")
    public void setCustomerCurrencyCode(String customerCurrencyCode) {
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
    }

    /**
     * UnSetter for CustomerCurrencyCode.
     * Curreny which customer uses to transact.
     */
    public void unsetCustomerCurrencyCode() {
        customerCurrencyCode = null;
    }

    /**
     * Internal Getter for CustomerCurrencySymbol.
     * Custome currency symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencySymbol() {
        return this.customerCurrencySymbol;
    }

    /**
     * Getter for CustomerCurrencySymbol.
     * Custome currency symbol
     * @return Returns the String
     */
    public String getCustomerCurrencySymbol() {
        return OptionalNullable.getFrom(customerCurrencySymbol);
    }

    /**
     * Setter for CustomerCurrencySymbol.
     * Custome currency symbol
     * @param customerCurrencySymbol Value for String
     */
    @JsonSetter("CustomerCurrencySymbol")
    public void setCustomerCurrencySymbol(String customerCurrencySymbol) {
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
    }

    /**
     * UnSetter for CustomerCurrencySymbol.
     * Custome currency symbol
     */
    public void unsetCustomerCurrencySymbol() {
        customerCurrencySymbol = null;
    }

    /**
     * Internal Getter for RebateonNetAmountInCustomerCurrency.
     * Rebate on net amount in customer currency
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateonNetAmountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateonNetAmountInCustomerCurrency() {
        return this.rebateonNetAmountInCustomerCurrency;
    }

    /**
     * Getter for RebateonNetAmountInCustomerCurrency.
     * Rebate on net amount in customer currency
     * @return Returns the Double
     */
    public Double getRebateonNetAmountInCustomerCurrency() {
        return OptionalNullable.getFrom(rebateonNetAmountInCustomerCurrency);
    }

    /**
     * Setter for RebateonNetAmountInCustomerCurrency.
     * Rebate on net amount in customer currency
     * @param rebateonNetAmountInCustomerCurrency Value for Double
     */
    @JsonSetter("RebateonNetAmountInCustomerCurrency")
    public void setRebateonNetAmountInCustomerCurrency(Double rebateonNetAmountInCustomerCurrency) {
        this.rebateonNetAmountInCustomerCurrency = OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
    }

    /**
     * UnSetter for RebateonNetAmountInCustomerCurrency.
     * Rebate on net amount in customer currency
     */
    public void unsetRebateonNetAmountInCustomerCurrency() {
        rebateonNetAmountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInCustomerCurrency.
     * Effective discount in customers currency
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveDiscountInCustomerCurrency() {
        return this.effectiveDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveDiscountInCustomerCurrency.
     * Effective discount in customers currency
     * @return Returns the Double
     */
    public Double getEffectiveDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveDiscountInCustomerCurrency.
     * Effective discount in customers currency
     * @param effectiveDiscountInCustomerCurrency Value for Double
     */
    @JsonSetter("EffectiveDiscountInCustomerCurrency")
    public void setEffectiveDiscountInCustomerCurrency(Double effectiveDiscountInCustomerCurrency) {
        this.effectiveDiscountInCustomerCurrency = OptionalNullable.of(effectiveDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInCustomerCurrency.
     * Effective discount in customers currency
     */
    public void unsetEffectiveDiscountInCustomerCurrency() {
        effectiveDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for EffectiveUnitDiscountInCustomerCurrency.
     * effectiive unit discount in customers currency
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveUnitDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveUnitDiscountInCustomerCurrency() {
        return this.effectiveUnitDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveUnitDiscountInCustomerCurrency.
     * effectiive unit discount in customers currency
     * @return Returns the Double
     */
    public Double getEffectiveUnitDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveUnitDiscountInCustomerCurrency.
     * effectiive unit discount in customers currency
     * @param effectiveUnitDiscountInCustomerCurrency Value for Double
     */
    @JsonSetter("EffectiveUnitDiscountInCustomerCurrency")
    public void setEffectiveUnitDiscountInCustomerCurrency(Double effectiveUnitDiscountInCustomerCurrency) {
        this.effectiveUnitDiscountInCustomerCurrency = OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveUnitDiscountInCustomerCurrency.
     * effectiive unit discount in customers currency
     */
    public void unsetEffectiveUnitDiscountInCustomerCurrency() {
        effectiveUnitDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for UnitPriceInInvoiceCurrency.
     * Unitpricing in invoice currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitPriceInInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitPriceInInvoiceCurrency() {
        return this.unitPriceInInvoiceCurrency;
    }

    /**
     * Getter for UnitPriceInInvoiceCurrency.
     * Unitpricing in invoice currency
     * @return Returns the Double
     */
    public Double getUnitPriceInInvoiceCurrency() {
        return OptionalNullable.getFrom(unitPriceInInvoiceCurrency);
    }

    /**
     * Setter for UnitPriceInInvoiceCurrency.
     * Unitpricing in invoice currency
     * @param unitPriceInInvoiceCurrency Value for Double
     */
    @JsonSetter("UnitPriceInInvoiceCurrency")
    public void setUnitPriceInInvoiceCurrency(Double unitPriceInInvoiceCurrency) {
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
    }

    /**
     * UnSetter for UnitPriceInInvoiceCurrency.
     * Unitpricing in invoice currency
     */
    public void unsetUnitPriceInInvoiceCurrency() {
        unitPriceInInvoiceCurrency = null;
    }

    /**
     * Internal Getter for InvoiceTax.
     * Invoice tax
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceTax() {
        return this.invoiceTax;
    }

    /**
     * Getter for InvoiceTax.
     * Invoice tax
     * @return Returns the Double
     */
    public Double getInvoiceTax() {
        return OptionalNullable.getFrom(invoiceTax);
    }

    /**
     * Setter for InvoiceTax.
     * Invoice tax
     * @param invoiceTax Value for Double
     */
    @JsonSetter("InvoiceTax")
    public void setInvoiceTax(Double invoiceTax) {
        this.invoiceTax = OptionalNullable.of(invoiceTax);
    }

    /**
     * UnSetter for InvoiceTax.
     * Invoice tax
     */
    public void unsetInvoiceTax() {
        invoiceTax = null;
    }

    /**
     * Internal Getter for InvoiceGrossAmount.
     * Invoice amount befor tax
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceGrossAmount() {
        return this.invoiceGrossAmount;
    }

    /**
     * Getter for InvoiceGrossAmount.
     * Invoice amount befor tax
     * @return Returns the Double
     */
    public Double getInvoiceGrossAmount() {
        return OptionalNullable.getFrom(invoiceGrossAmount);
    }

    /**
     * Setter for InvoiceGrossAmount.
     * Invoice amount befor tax
     * @param invoiceGrossAmount Value for Double
     */
    @JsonSetter("InvoiceGrossAmount")
    public void setInvoiceGrossAmount(Double invoiceGrossAmount) {
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
    }

    /**
     * UnSetter for InvoiceGrossAmount.
     * Invoice amount befor tax
     */
    public void unsetInvoiceGrossAmount() {
        invoiceGrossAmount = null;
    }

    /**
     * Internal Getter for InvoiceNetAmount.
     * Invoice amount after tax
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceNetAmount() {
        return this.invoiceNetAmount;
    }

    /**
     * Getter for InvoiceNetAmount.
     * Invoice amount after tax
     * @return Returns the Double
     */
    public Double getInvoiceNetAmount() {
        return OptionalNullable.getFrom(invoiceNetAmount);
    }

    /**
     * Setter for InvoiceNetAmount.
     * Invoice amount after tax
     * @param invoiceNetAmount Value for Double
     */
    @JsonSetter("InvoiceNetAmount")
    public void setInvoiceNetAmount(Double invoiceNetAmount) {
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
    }

    /**
     * UnSetter for InvoiceNetAmount.
     * Invoice amount after tax
     */
    public void unsetInvoiceNetAmount() {
        invoiceNetAmount = null;
    }

    /**
     * Internal Getter for VATonNetAmountInCustomerCurrency.
     * Vat on net amount in customer currency
     * @return Returns the Internal Double
     */
    @JsonGetter("VATonNetAmountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATonNetAmountInCustomerCurrency() {
        return this.vATonNetAmountInCustomerCurrency;
    }

    /**
     * Getter for VATonNetAmountInCustomerCurrency.
     * Vat on net amount in customer currency
     * @return Returns the Double
     */
    public Double getVATonNetAmountInCustomerCurrency() {
        return OptionalNullable.getFrom(vATonNetAmountInCustomerCurrency);
    }

    /**
     * Setter for VATonNetAmountInCustomerCurrency.
     * Vat on net amount in customer currency
     * @param vATonNetAmountInCustomerCurrency Value for Double
     */
    @JsonSetter("VATonNetAmountInCustomerCurrency")
    public void setVATonNetAmountInCustomerCurrency(Double vATonNetAmountInCustomerCurrency) {
        this.vATonNetAmountInCustomerCurrency = OptionalNullable.of(vATonNetAmountInCustomerCurrency);
    }

    /**
     * UnSetter for VATonNetAmountInCustomerCurrency.
     * Vat on net amount in customer currency
     */
    public void unsetVATonNetAmountInCustomerCurrency() {
        vATonNetAmountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for CustomerRetailPriceUnitGross.
     * Customer retail unit price before tax
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailPriceUnitGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailPriceUnitGross() {
        return this.customerRetailPriceUnitGross;
    }

    /**
     * Getter for CustomerRetailPriceUnitGross.
     * Customer retail unit price before tax
     * @return Returns the Double
     */
    public Double getCustomerRetailPriceUnitGross() {
        return OptionalNullable.getFrom(customerRetailPriceUnitGross);
    }

    /**
     * Setter for CustomerRetailPriceUnitGross.
     * Customer retail unit price before tax
     * @param customerRetailPriceUnitGross Value for Double
     */
    @JsonSetter("CustomerRetailPriceUnitGross")
    public void setCustomerRetailPriceUnitGross(Double customerRetailPriceUnitGross) {
        this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
    }

    /**
     * UnSetter for CustomerRetailPriceUnitGross.
     * Customer retail unit price before tax
     */
    public void unsetCustomerRetailPriceUnitGross() {
        customerRetailPriceUnitGross = null;
    }

    /**
     * Internal Getter for CustomerRetailValueTotalGross.
     * Total Customer retail value before tax
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailValueTotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailValueTotalGross() {
        return this.customerRetailValueTotalGross;
    }

    /**
     * Getter for CustomerRetailValueTotalGross.
     * Total Customer retail value before tax
     * @return Returns the Double
     */
    public Double getCustomerRetailValueTotalGross() {
        return OptionalNullable.getFrom(customerRetailValueTotalGross);
    }

    /**
     * Setter for CustomerRetailValueTotalGross.
     * Total Customer retail value before tax
     * @param customerRetailValueTotalGross Value for Double
     */
    @JsonSetter("CustomerRetailValueTotalGross")
    public void setCustomerRetailValueTotalGross(Double customerRetailValueTotalGross) {
        this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
    }

    /**
     * UnSetter for CustomerRetailValueTotalGross.
     * Total Customer retail value before tax
     */
    public void unsetCustomerRetailValueTotalGross() {
        customerRetailValueTotalGross = null;
    }

    /**
     * Internal Getter for CustomerRetailValueTotalNet.
     * Total customer retail value after tax
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailValueTotalNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailValueTotalNet() {
        return this.customerRetailValueTotalNet;
    }

    /**
     * Getter for CustomerRetailValueTotalNet.
     * Total customer retail value after tax
     * @return Returns the Double
     */
    public Double getCustomerRetailValueTotalNet() {
        return OptionalNullable.getFrom(customerRetailValueTotalNet);
    }

    /**
     * Setter for CustomerRetailValueTotalNet.
     * Total customer retail value after tax
     * @param customerRetailValueTotalNet Value for Double
     */
    @JsonSetter("CustomerRetailValueTotalNet")
    public void setCustomerRetailValueTotalNet(Double customerRetailValueTotalNet) {
        this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
    }

    /**
     * UnSetter for CustomerRetailValueTotalNet.
     * Total customer retail value after tax
     */
    public void unsetCustomerRetailValueTotalNet() {
        customerRetailValueTotalNet = null;
    }

    /**
     * Internal Getter for TransactionTypeDescription.
     * Trasaction type description
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionTypeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionTypeDescription() {
        return this.transactionTypeDescription;
    }

    /**
     * Getter for TransactionTypeDescription.
     * Trasaction type description
     * @return Returns the Double
     */
    public Double getTransactionTypeDescription() {
        return OptionalNullable.getFrom(transactionTypeDescription);
    }

    /**
     * Setter for TransactionTypeDescription.
     * Trasaction type description
     * @param transactionTypeDescription Value for Double
     */
    @JsonSetter("TransactionTypeDescription")
    public void setTransactionTypeDescription(Double transactionTypeDescription) {
        this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
    }

    /**
     * UnSetter for TransactionTypeDescription.
     * Trasaction type description
     */
    public void unsetTransactionTypeDescription() {
        transactionTypeDescription = null;
    }

    /**
     * Internal Getter for RebateonNetAmountInTransactionCurrency.
     * Rebate give to net amountin transaction currency that is used
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateonNetAmountInTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateonNetAmountInTransactionCurrency() {
        return this.rebateonNetAmountInTransactionCurrency;
    }

    /**
     * Getter for RebateonNetAmountInTransactionCurrency.
     * Rebate give to net amountin transaction currency that is used
     * @return Returns the Double
     */
    public Double getRebateonNetAmountInTransactionCurrency() {
        return OptionalNullable.getFrom(rebateonNetAmountInTransactionCurrency);
    }

    /**
     * Setter for RebateonNetAmountInTransactionCurrency.
     * Rebate give to net amountin transaction currency that is used
     * @param rebateonNetAmountInTransactionCurrency Value for Double
     */
    @JsonSetter("RebateonNetAmountInTransactionCurrency")
    public void setRebateonNetAmountInTransactionCurrency(Double rebateonNetAmountInTransactionCurrency) {
        this.rebateonNetAmountInTransactionCurrency = OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
    }

    /**
     * UnSetter for RebateonNetAmountInTransactionCurrency.
     * Rebate give to net amountin transaction currency that is used
     */
    public void unsetRebateonNetAmountInTransactionCurrency() {
        rebateonNetAmountInTransactionCurrency = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInTrxCurrency.
     * Currency used to giveEffective discount on transactions
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveDiscountInTrxCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveDiscountInTrxCurrency() {
        return this.effectiveDiscountInTrxCurrency;
    }

    /**
     * Getter for EffectiveDiscountInTrxCurrency.
     * Currency used to giveEffective discount on transactions
     * @return Returns the Double
     */
    public Double getEffectiveDiscountInTrxCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInTrxCurrency);
    }

    /**
     * Setter for EffectiveDiscountInTrxCurrency.
     * Currency used to giveEffective discount on transactions
     * @param effectiveDiscountInTrxCurrency Value for Double
     */
    @JsonSetter("EffectiveDiscountInTrxCurrency")
    public void setEffectiveDiscountInTrxCurrency(Double effectiveDiscountInTrxCurrency) {
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInTrxCurrency.
     * Currency used to giveEffective discount on transactions
     */
    public void unsetEffectiveDiscountInTrxCurrency() {
        effectiveDiscountInTrxCurrency = null;
    }

    /**
     * Internal Getter for DelCoToColCoExchangeRate.
     * Exchange rate between Delco and Colco
     * @return Returns the Internal Integer
     */
    @JsonGetter("DelCoToColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDelCoToColCoExchangeRate() {
        return this.delCoToColCoExchangeRate;
    }

    /**
     * Getter for DelCoToColCoExchangeRate.
     * Exchange rate between Delco and Colco
     * @return Returns the Integer
     */
    public Integer getDelCoToColCoExchangeRate() {
        return OptionalNullable.getFrom(delCoToColCoExchangeRate);
    }

    /**
     * Setter for DelCoToColCoExchangeRate.
     * Exchange rate between Delco and Colco
     * @param delCoToColCoExchangeRate Value for Integer
     */
    @JsonSetter("DelCoToColCoExchangeRate")
    public void setDelCoToColCoExchangeRate(Integer delCoToColCoExchangeRate) {
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
    }

    /**
     * UnSetter for DelCoToColCoExchangeRate.
     * Exchange rate between Delco and Colco
     */
    public void unsetDelCoToColCoExchangeRate() {
        delCoToColCoExchangeRate = null;
    }

    /**
     * Getter for Cards.
     * @return Returns the List of Integer
     */
    @JsonGetter("Cards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integer> getCards() {
        return cards;
    }

    /**
     * Setter for Cards.
     * @param cards Value for List of Integer
     */
    @JsonSetter("Cards")
    public void setCards(List<Integer> cards) {
        this.cards = cards;
    }

    /**
     * Internal Getter for UnitDiscountTransactionCurrency.
     * Currency used forto provide unit Transaction discount
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitDiscountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitDiscountTransactionCurrency() {
        return this.unitDiscountTransactionCurrency;
    }

    /**
     * Getter for UnitDiscountTransactionCurrency.
     * Currency used forto provide unit Transaction discount
     * @return Returns the Double
     */
    public Double getUnitDiscountTransactionCurrency() {
        return OptionalNullable.getFrom(unitDiscountTransactionCurrency);
    }

    /**
     * Setter for UnitDiscountTransactionCurrency.
     * Currency used forto provide unit Transaction discount
     * @param unitDiscountTransactionCurrency Value for Double
     */
    @JsonSetter("UnitDiscountTransactionCurrency")
    public void setUnitDiscountTransactionCurrency(Double unitDiscountTransactionCurrency) {
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
    }

    /**
     * UnSetter for UnitDiscountTransactionCurrency.
     * Currency used forto provide unit Transaction discount
     */
    public void unsetUnitDiscountTransactionCurrency() {
        unitDiscountTransactionCurrency = null;
    }

    /**
     * Internal Getter for TransactionGrossAmount.
     * Transactional amount before tax
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionGrossAmount() {
        return this.transactionGrossAmount;
    }

    /**
     * Getter for TransactionGrossAmount.
     * Transactional amount before tax
     * @return Returns the Double
     */
    public Double getTransactionGrossAmount() {
        return OptionalNullable.getFrom(transactionGrossAmount);
    }

    /**
     * Setter for TransactionGrossAmount.
     * Transactional amount before tax
     * @param transactionGrossAmount Value for Double
     */
    @JsonSetter("TransactionGrossAmount")
    public void setTransactionGrossAmount(Double transactionGrossAmount) {
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
    }

    /**
     * UnSetter for TransactionGrossAmount.
     * Transactional amount before tax
     */
    public void unsetTransactionGrossAmount() {
        transactionGrossAmount = null;
    }

    /**
     * Internal Getter for TransactionNetAmount.
     * Transaction net amount after tax
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionNetAmount() {
        return this.transactionNetAmount;
    }

    /**
     * Getter for TransactionNetAmount.
     * Transaction net amount after tax
     * @return Returns the Double
     */
    public Double getTransactionNetAmount() {
        return OptionalNullable.getFrom(transactionNetAmount);
    }

    /**
     * Setter for TransactionNetAmount.
     * Transaction net amount after tax
     * @param transactionNetAmount Value for Double
     */
    @JsonSetter("TransactionNetAmount")
    public void setTransactionNetAmount(Double transactionNetAmount) {
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
    }

    /**
     * UnSetter for TransactionNetAmount.
     * Transaction net amount after tax
     */
    public void unsetTransactionNetAmount() {
        transactionNetAmount = null;
    }

    /**
     * Internal Getter for TransactionTax.
     * Transaction tax
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionTax() {
        return this.transactionTax;
    }

    /**
     * Getter for TransactionTax.
     * Transaction tax
     * @return Returns the Double
     */
    public Double getTransactionTax() {
        return OptionalNullable.getFrom(transactionTax);
    }

    /**
     * Setter for TransactionTax.
     * Transaction tax
     * @param transactionTax Value for Double
     */
    @JsonSetter("TransactionTax")
    public void setTransactionTax(Double transactionTax) {
        this.transactionTax = OptionalNullable.of(transactionTax);
    }

    /**
     * UnSetter for TransactionTax.
     * Transaction tax
     */
    public void unsetTransactionTax() {
        transactionTax = null;
    }

    /**
     * Internal Getter for VATonNetAmount.
     * Transactinal tax rates
     * @return Returns the Internal Double
     */
    @JsonGetter("VATonNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATonNetAmount() {
        return this.vATonNetAmount;
    }

    /**
     * Getter for VATonNetAmount.
     * Transactinal tax rates
     * @return Returns the Double
     */
    public Double getVATonNetAmount() {
        return OptionalNullable.getFrom(vATonNetAmount);
    }

    /**
     * Setter for VATonNetAmount.
     * Transactinal tax rates
     * @param vATonNetAmount Value for Double
     */
    @JsonSetter("VATonNetAmount")
    public void setVATonNetAmount(Double vATonNetAmount) {
        this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
    }

    /**
     * UnSetter for VATonNetAmount.
     * Transactinal tax rates
     */
    public void unsetVATonNetAmount() {
        vATonNetAmount = null;
    }

    /**
     * Internal Getter for DelcoListPriceUnitNet.
     * Priv
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoListPriceUnitNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoListPriceUnitNet() {
        return this.delcoListPriceUnitNet;
    }

    /**
     * Getter for DelcoListPriceUnitNet.
     * Priv
     * @return Returns the Double
     */
    public Double getDelcoListPriceUnitNet() {
        return OptionalNullable.getFrom(delcoListPriceUnitNet);
    }

    /**
     * Setter for DelcoListPriceUnitNet.
     * Priv
     * @param delcoListPriceUnitNet Value for Double
     */
    @JsonSetter("DelcoListPriceUnitNet")
    public void setDelcoListPriceUnitNet(Double delcoListPriceUnitNet) {
        this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
    }

    /**
     * UnSetter for DelcoListPriceUnitNet.
     * Priv
     */
    public void unsetDelcoListPriceUnitNet() {
        delcoListPriceUnitNet = null;
    }

    /**
     * Internal Getter for DelcoRetailPriceUnitGross.
     * Delco retail price per unit before tax
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailPriceUnitGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailPriceUnitGross() {
        return this.delcoRetailPriceUnitGross;
    }

    /**
     * Getter for DelcoRetailPriceUnitGross.
     * Delco retail price per unit before tax
     * @return Returns the Double
     */
    public Double getDelcoRetailPriceUnitGross() {
        return OptionalNullable.getFrom(delcoRetailPriceUnitGross);
    }

    /**
     * Setter for DelcoRetailPriceUnitGross.
     * Delco retail price per unit before tax
     * @param delcoRetailPriceUnitGross Value for Double
     */
    @JsonSetter("DelcoRetailPriceUnitGross")
    public void setDelcoRetailPriceUnitGross(Double delcoRetailPriceUnitGross) {
        this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
    }

    /**
     * UnSetter for DelcoRetailPriceUnitGross.
     * Delco retail price per unit before tax
     */
    public void unsetDelcoRetailPriceUnitGross() {
        delcoRetailPriceUnitGross = null;
    }

    /**
     * Internal Getter for UnitPriceInTransactionCurrency.
     * Delco retail price per unit after tax
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitPriceInTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitPriceInTransactionCurrency() {
        return this.unitPriceInTransactionCurrency;
    }

    /**
     * Getter for UnitPriceInTransactionCurrency.
     * Delco retail price per unit after tax
     * @return Returns the Double
     */
    public Double getUnitPriceInTransactionCurrency() {
        return OptionalNullable.getFrom(unitPriceInTransactionCurrency);
    }

    /**
     * Setter for UnitPriceInTransactionCurrency.
     * Delco retail price per unit after tax
     * @param unitPriceInTransactionCurrency Value for Double
     */
    @JsonSetter("UnitPriceInTransactionCurrency")
    public void setUnitPriceInTransactionCurrency(Double unitPriceInTransactionCurrency) {
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
    }

    /**
     * UnSetter for UnitPriceInTransactionCurrency.
     * Delco retail price per unit after tax
     */
    public void unsetUnitPriceInTransactionCurrency() {
        unitPriceInTransactionCurrency = null;
    }

    /**
     * Internal Getter for DelcoRetailPriceUnitNet.
     * Delco retail price per unit
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailPriceUnitNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailPriceUnitNet() {
        return this.delcoRetailPriceUnitNet;
    }

    /**
     * Getter for DelcoRetailPriceUnitNet.
     * Delco retail price per unit
     * @return Returns the Double
     */
    public Double getDelcoRetailPriceUnitNet() {
        return OptionalNullable.getFrom(delcoRetailPriceUnitNet);
    }

    /**
     * Setter for DelcoRetailPriceUnitNet.
     * Delco retail price per unit
     * @param delcoRetailPriceUnitNet Value for Double
     */
    @JsonSetter("DelcoRetailPriceUnitNet")
    public void setDelcoRetailPriceUnitNet(Double delcoRetailPriceUnitNet) {
        this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
    }

    /**
     * UnSetter for DelcoRetailPriceUnitNet.
     * Delco retail price per unit
     */
    public void unsetDelcoRetailPriceUnitNet() {
        delcoRetailPriceUnitNet = null;
    }

    /**
     * Internal Getter for DelcoRetailValueTotalGross.
     * Delco retail price before tax
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailValueTotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailValueTotalGross() {
        return this.delcoRetailValueTotalGross;
    }

    /**
     * Getter for DelcoRetailValueTotalGross.
     * Delco retail price before tax
     * @return Returns the Double
     */
    public Double getDelcoRetailValueTotalGross() {
        return OptionalNullable.getFrom(delcoRetailValueTotalGross);
    }

    /**
     * Setter for DelcoRetailValueTotalGross.
     * Delco retail price before tax
     * @param delcoRetailValueTotalGross Value for Double
     */
    @JsonSetter("DelcoRetailValueTotalGross")
    public void setDelcoRetailValueTotalGross(Double delcoRetailValueTotalGross) {
        this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
    }

    /**
     * UnSetter for DelcoRetailValueTotalGross.
     * Delco retail price before tax
     */
    public void unsetDelcoRetailValueTotalGross() {
        delcoRetailValueTotalGross = null;
    }

    /**
     * Internal Getter for DelcoRetailValueTotalNet.
     * Delco per unit price after tax
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailValueTotalNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailValueTotalNet() {
        return this.delcoRetailValueTotalNet;
    }

    /**
     * Getter for DelcoRetailValueTotalNet.
     * Delco per unit price after tax
     * @return Returns the Double
     */
    public Double getDelcoRetailValueTotalNet() {
        return OptionalNullable.getFrom(delcoRetailValueTotalNet);
    }

    /**
     * Setter for DelcoRetailValueTotalNet.
     * Delco per unit price after tax
     * @param delcoRetailValueTotalNet Value for Double
     */
    @JsonSetter("DelcoRetailValueTotalNet")
    public void setDelcoRetailValueTotalNet(Double delcoRetailValueTotalNet) {
        this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
    }

    /**
     * UnSetter for DelcoRetailValueTotalNet.
     * Delco per unit price after tax
     */
    public void unsetDelcoRetailValueTotalNet() {
        delcoRetailValueTotalNet = null;
    }

    /**
     * Internal Getter for TransactionCurrencySymbol.
     * Currency used for transaction.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencySymbol() {
        return this.transactionCurrencySymbol;
    }

    /**
     * Getter for TransactionCurrencySymbol.
     * Currency used for transaction.
     * @return Returns the String
     */
    public String getTransactionCurrencySymbol() {
        return OptionalNullable.getFrom(transactionCurrencySymbol);
    }

    /**
     * Setter for TransactionCurrencySymbol.
     * Currency used for transaction.
     * @param transactionCurrencySymbol Value for String
     */
    @JsonSetter("TransactionCurrencySymbol")
    public void setTransactionCurrencySymbol(String transactionCurrencySymbol) {
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
    }

    /**
     * UnSetter for TransactionCurrencySymbol.
     * Currency used for transaction.
     */
    public void unsetTransactionCurrencySymbol() {
        transactionCurrencySymbol = null;
    }

    /**
     * Internal Getter for DiscountType.
     * Type of discount available
     * @return Returns the Internal String
     */
    @JsonGetter("DiscountType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDiscountType() {
        return this.discountType;
    }

    /**
     * Getter for DiscountType.
     * Type of discount available
     * @return Returns the String
     */
    public String getDiscountType() {
        return OptionalNullable.getFrom(discountType);
    }

    /**
     * Setter for DiscountType.
     * Type of discount available
     * @param discountType Value for String
     */
    @JsonSetter("DiscountType")
    public void setDiscountType(String discountType) {
        this.discountType = OptionalNullable.of(discountType);
    }

    /**
     * UnSetter for DiscountType.
     * Type of discount available
     */
    public void unsetDiscountType() {
        discountType = null;
    }

    /**
     * Internal Getter for DisputeStatus.
     * Is there any dispute status?True or False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("DisputeStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetDisputeStatus() {
        return this.disputeStatus;
    }

    /**
     * Getter for DisputeStatus.
     * Is there any dispute status?True or False
     * @return Returns the Boolean
     */
    public Boolean getDisputeStatus() {
        return OptionalNullable.getFrom(disputeStatus);
    }

    /**
     * Setter for DisputeStatus.
     * Is there any dispute status?True or False
     * @param disputeStatus Value for Boolean
     */
    @JsonSetter("DisputeStatus")
    public void setDisputeStatus(Boolean disputeStatus) {
        this.disputeStatus = OptionalNullable.of(disputeStatus);
    }

    /**
     * UnSetter for DisputeStatus.
     * Is there any dispute status?True or False
     */
    public void unsetDisputeStatus() {
        disputeStatus = null;
    }

    /**
     * Getter for IsShellSite.
     * Is it a shell sites?True or False
     * @return Returns the Boolean
     */
    @JsonGetter("IsShellSite")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsShellSite() {
        return isShellSite;
    }

    /**
     * Setter for IsShellSite.
     * Is it a shell sites?True or False
     * @param isShellSite Value for Boolean
     */
    @JsonSetter("IsShellSite")
    public void setIsShellSite(Boolean isShellSite) {
        this.isShellSite = isShellSite;
    }

    /**
     * Internal Getter for FleetIdInput.
     * Fleet identifier
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIdInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIdInput() {
        return this.fleetIdInput;
    }

    /**
     * Getter for FleetIdInput.
     * Fleet identifier
     * @return Returns the String
     */
    public String getFleetIdInput() {
        return OptionalNullable.getFrom(fleetIdInput);
    }

    /**
     * Setter for FleetIdInput.
     * Fleet identifier
     * @param fleetIdInput Value for String
     */
    @JsonSetter("FleetIdInput")
    public void setFleetIdInput(String fleetIdInput) {
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
    }

    /**
     * UnSetter for FleetIdInput.
     * Fleet identifier
     */
    public void unsetFleetIdInput() {
        fleetIdInput = null;
    }

    /**
     * Internal Getter for IncomingProductCode.
     * In coming product code
     * @return Returns the Internal Integer
     */
    @JsonGetter("IncomingProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIncomingProductCode() {
        return this.incomingProductCode;
    }

    /**
     * Getter for IncomingProductCode.
     * In coming product code
     * @return Returns the Integer
     */
    public Integer getIncomingProductCode() {
        return OptionalNullable.getFrom(incomingProductCode);
    }

    /**
     * Setter for IncomingProductCode.
     * In coming product code
     * @param incomingProductCode Value for Integer
     */
    @JsonSetter("IncomingProductCode")
    public void setIncomingProductCode(Integer incomingProductCode) {
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
    }

    /**
     * UnSetter for IncomingProductCode.
     * In coming product code
     */
    public void unsetIncomingProductCode() {
        incomingProductCode = null;
    }

    /**
     * Internal Getter for PostingDate.
     * Date of Posting
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("PostingDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetPostingDate() {
        return this.postingDate;
    }

    /**
     * Getter for PostingDate.
     * Date of Posting
     * @return Returns the LocalDate
     */
    public LocalDate getPostingDate() {
        return OptionalNullable.getFrom(postingDate);
    }

    /**
     * Setter for PostingDate.
     * Date of Posting
     * @param postingDate Value for LocalDate
     */
    @JsonSetter("PostingDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setPostingDate(LocalDate postingDate) {
        this.postingDate = OptionalNullable.of(postingDate);
    }

    /**
     * UnSetter for PostingDate.
     * Date of Posting
     */
    public void unsetPostingDate() {
        postingDate = null;
    }

    /**
     * Internal Getter for PostingTime.
     * Time whern posting happened
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("PostingTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetPostingTime() {
        return this.postingTime;
    }

    /**
     * Getter for PostingTime.
     * Time whern posting happened
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getPostingTime() {
        return OptionalNullable.getFrom(postingTime);
    }

    /**
     * Setter for PostingTime.
     * Time whern posting happened
     * @param postingTime Value for LocalDateTime
     */
    @JsonSetter("PostingTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setPostingTime(LocalDateTime postingTime) {
        this.postingTime = OptionalNullable.of(postingTime);
    }

    /**
     * UnSetter for PostingTime.
     * Time whern posting happened
     */
    public void unsetPostingTime() {
        postingTime = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low
     * octane,24 Unleaded Environmental
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low
     * octane,24 Unleaded Environmental
     * @return Returns the Integer
     */
    public Integer getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low
     * octane,24 Unleaded Environmental
     * @param productCode Value for Integer
     */
    @JsonSetter("ProductCode")
    public void setProductCode(Integer productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code - 21 Unleaded - High octane,22 Unleaded - Medium octane,23 Unleaded - Low
     * octane,24 Unleaded Environmental
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * Name of the product
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * Name of the product
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * Name of the product
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * Name of the product
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for ProductGroupId.
     * Id of the product to which group it belongs
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductGroupId() {
        return this.productGroupId;
    }

    /**
     * Getter for ProductGroupId.
     * Id of the product to which group it belongs
     * @return Returns the Integer
     */
    public Integer getProductGroupId() {
        return OptionalNullable.getFrom(productGroupId);
    }

    /**
     * Setter for ProductGroupId.
     * Id of the product to which group it belongs
     * @param productGroupId Value for Integer
     */
    @JsonSetter("ProductGroupId")
    public void setProductGroupId(Integer productGroupId) {
        this.productGroupId = OptionalNullable.of(productGroupId);
    }

    /**
     * UnSetter for ProductGroupId.
     * Id of the product to which group it belongs
     */
    public void unsetProductGroupId() {
        productGroupId = null;
    }

    /**
     * Internal Getter for IncomingCurrencyCode.
     * In coming currecncy code
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingCurrencyCode() {
        return this.incomingCurrencyCode;
    }

    /**
     * Getter for IncomingCurrencyCode.
     * In coming currecncy code
     * @return Returns the String
     */
    public String getIncomingCurrencyCode() {
        return OptionalNullable.getFrom(incomingCurrencyCode);
    }

    /**
     * Setter for IncomingCurrencyCode.
     * In coming currecncy code
     * @param incomingCurrencyCode Value for String
     */
    @JsonSetter("IncomingCurrencyCode")
    public void setIncomingCurrencyCode(String incomingCurrencyCode) {
        this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
    }

    /**
     * UnSetter for IncomingCurrencyCode.
     * In coming currecncy code
     */
    public void unsetIncomingCurrencyCode() {
        incomingCurrencyCode = null;
    }

    /**
     * Internal Getter for IncomingSiteDescription.
     * In coming Site description
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingSiteDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingSiteDescription() {
        return this.incomingSiteDescription;
    }

    /**
     * Getter for IncomingSiteDescription.
     * In coming Site description
     * @return Returns the String
     */
    public String getIncomingSiteDescription() {
        return OptionalNullable.getFrom(incomingSiteDescription);
    }

    /**
     * Setter for IncomingSiteDescription.
     * In coming Site description
     * @param incomingSiteDescription Value for String
     */
    @JsonSetter("IncomingSiteDescription")
    public void setIncomingSiteDescription(String incomingSiteDescription) {
        this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
    }

    /**
     * UnSetter for IncomingSiteDescription.
     * In coming Site description
     */
    public void unsetIncomingSiteDescription() {
        incomingSiteDescription = null;
    }

    /**
     * Internal Getter for Location.
     * Location of the Shell site
     * @return Returns the Internal String
     */
    @JsonGetter("Location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocation() {
        return this.location;
    }

    /**
     * Getter for Location.
     * Location of the Shell site
     * @return Returns the String
     */
    public String getLocation() {
        return OptionalNullable.getFrom(location);
    }

    /**
     * Setter for Location.
     * Location of the Shell site
     * @param location Value for String
     */
    @JsonSetter("Location")
    public void setLocation(String location) {
        this.location = OptionalNullable.of(location);
    }

    /**
     * UnSetter for Location.
     * Location of the Shell site
     */
    public void unsetLocation() {
        location = null;
    }

    /**
     * Internal Getter for SiteName.
     * Shell site name
     * @return Returns the Internal String
     */
    @JsonGetter("SiteName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteName() {
        return this.siteName;
    }

    /**
     * Getter for SiteName.
     * Shell site name
     * @return Returns the String
     */
    public String getSiteName() {
        return OptionalNullable.getFrom(siteName);
    }

    /**
     * Setter for SiteName.
     * Shell site name
     * @param siteName Value for String
     */
    @JsonSetter("SiteName")
    public void setSiteName(String siteName) {
        this.siteName = OptionalNullable.of(siteName);
    }

    /**
     * UnSetter for SiteName.
     * Shell site name
     */
    public void unsetSiteName() {
        siteName = null;
    }

    /**
     * Internal Getter for SiteCode.
     * Shell site code
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * Shell site code
     * @return Returns the Integer
     */
    public Integer getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * Shell site code
     * @param siteCode Value for Integer
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(Integer siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * Shell site code
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for IncomingSiteNumber.
     * In coming site number
     * @return Returns the Internal Integer
     */
    @JsonGetter("IncomingSiteNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIncomingSiteNumber() {
        return this.incomingSiteNumber;
    }

    /**
     * Getter for IncomingSiteNumber.
     * In coming site number
     * @return Returns the Integer
     */
    public Integer getIncomingSiteNumber() {
        return OptionalNullable.getFrom(incomingSiteNumber);
    }

    /**
     * Setter for IncomingSiteNumber.
     * In coming site number
     * @param incomingSiteNumber Value for Integer
     */
    @JsonSetter("IncomingSiteNumber")
    public void setIncomingSiteNumber(Integer incomingSiteNumber) {
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
    }

    /**
     * UnSetter for IncomingSiteNumber.
     * In coming site number
     */
    public void unsetIncomingSiteNumber() {
        incomingSiteNumber = null;
    }

    /**
     * Internal Getter for InvoiceCurrencyCode.
     * Currency code on which the invoice is raised
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencyCode() {
        return this.invoiceCurrencyCode;
    }

    /**
     * Getter for InvoiceCurrencyCode.
     * Currency code on which the invoice is raised
     * @return Returns the String
     */
    public String getInvoiceCurrencyCode() {
        return OptionalNullable.getFrom(invoiceCurrencyCode);
    }

    /**
     * Setter for InvoiceCurrencyCode.
     * Currency code on which the invoice is raised
     * @param invoiceCurrencyCode Value for String
     */
    @JsonSetter("InvoiceCurrencyCode")
    public void setInvoiceCurrencyCode(String invoiceCurrencyCode) {
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
    }

    /**
     * UnSetter for InvoiceCurrencyCode.
     * Currency code on which the invoice is raised
     */
    public void unsetInvoiceCurrencyCode() {
        invoiceCurrencyCode = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Date on which the invoice was raised
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Date on which the invoice was raised
     * @return Returns the LocalDate
     */
    public LocalDate getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Date on which the invoice was raised
     * @param invoiceDate Value for LocalDate
     */
    @JsonSetter("InvoiceDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setInvoiceDate(LocalDate invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Date on which the invoice was raised
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice number
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice number
     * @return Returns the Double
     */
    public Double getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice number
     * @param invoiceNumber Value for Double
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(Double invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice number
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for FuelProduct.
     * Is it a fuel product? True or False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelProduct() {
        return this.fuelProduct;
    }

    /**
     * Getter for FuelProduct.
     * Is it a fuel product? True or False
     * @return Returns the Boolean
     */
    public Boolean getFuelProduct() {
        return OptionalNullable.getFrom(fuelProduct);
    }

    /**
     * Setter for FuelProduct.
     * Is it a fuel product? True or False
     * @param fuelProduct Value for Boolean
     */
    @JsonSetter("FuelProduct")
    public void setFuelProduct(Boolean fuelProduct) {
        this.fuelProduct = OptionalNullable.of(fuelProduct);
    }

    /**
     * UnSetter for FuelProduct.
     * Is it a fuel product? True or False
     */
    public void unsetFuelProduct() {
        fuelProduct = null;
    }

    /**
     * Internal Getter for VATApplicable.
     * Is VAT applicable?Y or N
     * @return Returns the Internal String
     */
    @JsonGetter("VATApplicable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATApplicable() {
        return this.vATApplicable;
    }

    /**
     * Getter for VATApplicable.
     * Is VAT applicable?Y or N
     * @return Returns the String
     */
    public String getVATApplicable() {
        return OptionalNullable.getFrom(vATApplicable);
    }

    /**
     * Setter for VATApplicable.
     * Is VAT applicable?Y or N
     * @param vATApplicable Value for String
     */
    @JsonSetter("VATApplicable")
    public void setVATApplicable(String vATApplicable) {
        this.vATApplicable = OptionalNullable.of(vATApplicable);
    }

    /**
     * UnSetter for VATApplicable.
     * Is VAT applicable?Y or N
     */
    public void unsetVATApplicable() {
        vATApplicable = null;
    }

    /**
     * Internal Getter for PayerName.
     * Name of the payer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Name of the payer
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Name of the payer
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Name of the payer
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer account number
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer account number
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer account number
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer account number
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for ParentCustomerNumber.
     * Parent account number of the payer
     * @return Returns the Internal String
     */
    @JsonGetter("ParentCustomerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetParentCustomerNumber() {
        return this.parentCustomerNumber;
    }

    /**
     * Getter for ParentCustomerNumber.
     * Parent account number of the payer
     * @return Returns the String
     */
    public String getParentCustomerNumber() {
        return OptionalNullable.getFrom(parentCustomerNumber);
    }

    /**
     * Setter for ParentCustomerNumber.
     * Parent account number of the payer
     * @param parentCustomerNumber Value for String
     */
    @JsonSetter("ParentCustomerNumber")
    public void setParentCustomerNumber(String parentCustomerNumber) {
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
    }

    /**
     * UnSetter for ParentCustomerNumber.
     * Parent account number of the payer
     */
    public void unsetParentCustomerNumber() {
        parentCustomerNumber = null;
    }

    /**
     * Internal Getter for PayerGroup.
     * The group which the payer belongs to
     * @return Returns the Internal String
     */
    @JsonGetter("PayerGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerGroup() {
        return this.payerGroup;
    }

    /**
     * Getter for PayerGroup.
     * The group which the payer belongs to
     * @return Returns the String
     */
    public String getPayerGroup() {
        return OptionalNullable.getFrom(payerGroup);
    }

    /**
     * Setter for PayerGroup.
     * The group which the payer belongs to
     * @param payerGroup Value for String
     */
    @JsonSetter("PayerGroup")
    public void setPayerGroup(String payerGroup) {
        this.payerGroup = OptionalNullable.of(payerGroup);
    }

    /**
     * UnSetter for PayerGroup.
     * The group which the payer belongs to
     */
    public void unsetPayerGroup() {
        payerGroup = null;
    }

    /**
     * Internal Getter for PayerGroupName.
     * Name of the group to which the payer belongs to.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerGroupName() {
        return this.payerGroupName;
    }

    /**
     * Getter for PayerGroupName.
     * Name of the group to which the payer belongs to.
     * @return Returns the String
     */
    public String getPayerGroupName() {
        return OptionalNullable.getFrom(payerGroupName);
    }

    /**
     * Setter for PayerGroupName.
     * Name of the group to which the payer belongs to.
     * @param payerGroupName Value for String
     */
    @JsonSetter("PayerGroupName")
    public void setPayerGroupName(String payerGroupName) {
        this.payerGroupName = OptionalNullable.of(payerGroupName);
    }

    /**
     * UnSetter for PayerGroupName.
     * Name of the group to which the payer belongs to.
     */
    public void unsetPayerGroupName() {
        payerGroupName = null;
    }

    /**
     * Internal Getter for CheckDigit.
     * Check digit
     * @return Returns the Internal Integer
     */
    @JsonGetter("CheckDigit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCheckDigit() {
        return this.checkDigit;
    }

    /**
     * Getter for CheckDigit.
     * Check digit
     * @return Returns the Integer
     */
    public Integer getCheckDigit() {
        return OptionalNullable.getFrom(checkDigit);
    }

    /**
     * Setter for CheckDigit.
     * Check digit
     * @param checkDigit Value for Integer
     */
    @JsonSetter("CheckDigit")
    public void setCheckDigit(Integer checkDigit) {
        this.checkDigit = OptionalNullable.of(checkDigit);
    }

    /**
     * UnSetter for CheckDigit.
     * Check digit
     */
    public void unsetCheckDigit() {
        checkDigit = null;
    }

    /**
     * Internal Getter for NetInvoiceIndicator.
     * After tax net invoice number
     * @return Returns the Internal String
     */
    @JsonGetter("NetInvoiceIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetInvoiceIndicator() {
        return this.netInvoiceIndicator;
    }

    /**
     * Getter for NetInvoiceIndicator.
     * After tax net invoice number
     * @return Returns the String
     */
    public String getNetInvoiceIndicator() {
        return OptionalNullable.getFrom(netInvoiceIndicator);
    }

    /**
     * Setter for NetInvoiceIndicator.
     * After tax net invoice number
     * @param netInvoiceIndicator Value for String
     */
    @JsonSetter("NetInvoiceIndicator")
    public void setNetInvoiceIndicator(String netInvoiceIndicator) {
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
    }

    /**
     * UnSetter for NetInvoiceIndicator.
     * After tax net invoice number
     */
    public void unsetNetInvoiceIndicator() {
        netInvoiceIndicator = null;
    }

    /**
     * Internal Getter for DelcoCode.
     * Delco code
     * @return Returns the Internal Integer
     */
    @JsonGetter("DelcoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDelcoCode() {
        return this.delcoCode;
    }

    /**
     * Getter for DelcoCode.
     * Delco code
     * @return Returns the Integer
     */
    public Integer getDelcoCode() {
        return OptionalNullable.getFrom(delcoCode);
    }

    /**
     * Setter for DelcoCode.
     * Delco code
     * @param delcoCode Value for Integer
     */
    @JsonSetter("DelcoCode")
    public void setDelcoCode(Integer delcoCode) {
        this.delcoCode = OptionalNullable.of(delcoCode);
    }

    /**
     * UnSetter for DelcoCode.
     * Delco code
     */
    public void unsetDelcoCode() {
        delcoCode = null;
    }

    /**
     * Internal Getter for NetworkCode.
     * Network code of the payer
     * @return Returns the Internal Integer
     */
    @JsonGetter("NetworkCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetNetworkCode() {
        return this.networkCode;
    }

    /**
     * Getter for NetworkCode.
     * Network code of the payer
     * @return Returns the Integer
     */
    public Integer getNetworkCode() {
        return OptionalNullable.getFrom(networkCode);
    }

    /**
     * Setter for NetworkCode.
     * Network code of the payer
     * @param networkCode Value for Integer
     */
    @JsonSetter("NetworkCode")
    public void setNetworkCode(Integer networkCode) {
        this.networkCode = OptionalNullable.of(networkCode);
    }

    /**
     * UnSetter for NetworkCode.
     * Network code of the payer
     */
    public void unsetNetworkCode() {
        networkCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Country of purchase
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Country of purchase
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Country of purchase
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Country of purchase
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for SiteCountry.
     * Country where the site exists
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCountry() {
        return this.siteCountry;
    }

    /**
     * Getter for SiteCountry.
     * Country where the site exists
     * @return Returns the String
     */
    public String getSiteCountry() {
        return OptionalNullable.getFrom(siteCountry);
    }

    /**
     * Setter for SiteCountry.
     * Country where the site exists
     * @param siteCountry Value for String
     */
    @JsonSetter("SiteCountry")
    public void setSiteCountry(String siteCountry) {
        this.siteCountry = OptionalNullable.of(siteCountry);
    }

    /**
     * UnSetter for SiteCountry.
     * Country where the site exists
     */
    public void unsetSiteCountry() {
        siteCountry = null;
    }

    /**
     * Internal Getter for VATCountry.
     * Country where VAT is applicable
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountry() {
        return this.vATCountry;
    }

    /**
     * Getter for VATCountry.
     * Country where VAT is applicable
     * @return Returns the String
     */
    public String getVATCountry() {
        return OptionalNullable.getFrom(vATCountry);
    }

    /**
     * Setter for VATCountry.
     * Country where VAT is applicable
     * @param vATCountry Value for String
     */
    @JsonSetter("VATCountry")
    public void setVATCountry(String vATCountry) {
        this.vATCountry = OptionalNullable.of(vATCountry);
    }

    /**
     * UnSetter for VATCountry.
     * Country where VAT is applicable
     */
    public void unsetVATCountry() {
        vATCountry = null;
    }

    /**
     * Internal Getter for DelcoName.
     * Name of the delivery company
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoName() {
        return this.delcoName;
    }

    /**
     * Getter for DelcoName.
     * Name of the delivery company
     * @return Returns the String
     */
    public String getDelcoName() {
        return OptionalNullable.getFrom(delcoName);
    }

    /**
     * Setter for DelcoName.
     * Name of the delivery company
     * @param delcoName Value for String
     */
    @JsonSetter("DelcoName")
    public void setDelcoName(String delcoName) {
        this.delcoName = OptionalNullable.of(delcoName);
    }

    /**
     * UnSetter for DelcoName.
     * Name of the delivery company
     */
    public void unsetDelcoName() {
        delcoName = null;
    }

    /**
     * Internal Getter for Network.
     * Network of the Delivery company
     * @return Returns the Internal String
     */
    @JsonGetter("Network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetwork() {
        return this.network;
    }

    /**
     * Getter for Network.
     * Network of the Delivery company
     * @return Returns the String
     */
    public String getNetwork() {
        return OptionalNullable.getFrom(network);
    }

    /**
     * Setter for Network.
     * Network of the Delivery company
     * @param network Value for String
     */
    @JsonSetter("Network")
    public void setNetwork(String network) {
        this.network = OptionalNullable.of(network);
    }

    /**
     * UnSetter for Network.
     * Network of the Delivery company
     */
    public void unsetNetwork() {
        network = null;
    }

    /**
     * Internal Getter for OdometerInput.
     * Odometet input
     * @return Returns the Internal Integer
     */
    @JsonGetter("OdometerInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetOdometerInput() {
        return this.odometerInput;
    }

    /**
     * Getter for OdometerInput.
     * Odometet input
     * @return Returns the Integer
     */
    public Integer getOdometerInput() {
        return OptionalNullable.getFrom(odometerInput);
    }

    /**
     * Setter for OdometerInput.
     * Odometet input
     * @param odometerInput Value for Integer
     */
    @JsonSetter("OdometerInput")
    public void setOdometerInput(Integer odometerInput) {
        this.odometerInput = OptionalNullable.of(odometerInput);
    }

    /**
     * UnSetter for OdometerInput.
     * Odometet input
     */
    public void unsetOdometerInput() {
        odometerInput = null;
    }

    /**
     * Internal Getter for OriginalSalesItemId.
     * Original item identifier for sales
     * @return Returns the Internal String
     */
    @JsonGetter("OriginalSalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOriginalSalesItemId() {
        return this.originalSalesItemId;
    }

    /**
     * Getter for OriginalSalesItemId.
     * Original item identifier for sales
     * @return Returns the String
     */
    public String getOriginalSalesItemId() {
        return OptionalNullable.getFrom(originalSalesItemId);
    }

    /**
     * Setter for OriginalSalesItemId.
     * Original item identifier for sales
     * @param originalSalesItemId Value for String
     */
    @JsonSetter("OriginalSalesItemId")
    public void setOriginalSalesItemId(String originalSalesItemId) {
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
    }

    /**
     * UnSetter for OriginalSalesItemId.
     * Original item identifier for sales
     */
    public void unsetOriginalSalesItemId() {
        originalSalesItemId = null;
    }

    /**
     * Internal Getter for FleetIDDescription.
     * Fleet identifier description
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIDDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIDDescription() {
        return this.fleetIDDescription;
    }

    /**
     * Getter for FleetIDDescription.
     * Fleet identifier description
     * @return Returns the String
     */
    public String getFleetIDDescription() {
        return OptionalNullable.getFrom(fleetIDDescription);
    }

    /**
     * Setter for FleetIDDescription.
     * Fleet identifier description
     * @param fleetIDDescription Value for String
     */
    @JsonSetter("FleetIDDescription")
    public void setFleetIDDescription(String fleetIDDescription) {
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
    }

    /**
     * UnSetter for FleetIDDescription.
     * Fleet identifier description
     */
    public void unsetFleetIDDescription() {
        fleetIDDescription = null;
    }

    /**
     * Internal Getter for ParentCustomerId.
     * Identifier of parent customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("ParentCustomerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetParentCustomerId() {
        return this.parentCustomerId;
    }

    /**
     * Getter for ParentCustomerId.
     * Identifier of parent customer
     * @return Returns the Integer
     */
    public Integer getParentCustomerId() {
        return OptionalNullable.getFrom(parentCustomerId);
    }

    /**
     * Setter for ParentCustomerId.
     * Identifier of parent customer
     * @param parentCustomerId Value for Integer
     */
    @JsonSetter("ParentCustomerId")
    public void setParentCustomerId(Integer parentCustomerId) {
        this.parentCustomerId = OptionalNullable.of(parentCustomerId);
    }

    /**
     * UnSetter for ParentCustomerId.
     * Identifier of parent customer
     */
    public void unsetParentCustomerId() {
        parentCustomerId = null;
    }

    /**
     * Internal Getter for PINIndicator.
     * PIN indicator
     * @return Returns the Internal String
     */
    @JsonGetter("PINIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPINIndicator() {
        return this.pINIndicator;
    }

    /**
     * Getter for PINIndicator.
     * PIN indicator
     * @return Returns the String
     */
    public String getPINIndicator() {
        return OptionalNullable.getFrom(pINIndicator);
    }

    /**
     * Setter for PINIndicator.
     * PIN indicator
     * @param pINIndicator Value for String
     */
    @JsonSetter("PINIndicator")
    public void setPINIndicator(String pINIndicator) {
        this.pINIndicator = OptionalNullable.of(pINIndicator);
    }

    /**
     * UnSetter for PINIndicator.
     * PIN indicator
     */
    public void unsetPINIndicator() {
        pINIndicator = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * Name og the group the product belongs to
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * Name og the group the product belongs to
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * Name og the group the product belongs to
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * Name og the group the product belongs to
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Internal Getter for PurchasedInCountryCode.
     * The countroy code where the purchase was made
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountryCode() {
        return this.purchasedInCountryCode;
    }

    /**
     * Getter for PurchasedInCountryCode.
     * The countroy code where the purchase was made
     * @return Returns the String
     */
    public String getPurchasedInCountryCode() {
        return OptionalNullable.getFrom(purchasedInCountryCode);
    }

    /**
     * Setter for PurchasedInCountryCode.
     * The countroy code where the purchase was made
     * @param purchasedInCountryCode Value for String
     */
    @JsonSetter("PurchasedInCountryCode")
    public void setPurchasedInCountryCode(String purchasedInCountryCode) {
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
    }

    /**
     * UnSetter for PurchasedInCountryCode.
     * The countroy code where the purchase was made
     */
    public void unsetPurchasedInCountryCode() {
        purchasedInCountryCode = null;
    }

    /**
     * Internal Getter for Quantity.
     * Quantity of the product
     * @return Returns the Internal Double
     */
    @JsonGetter("Quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Quantity.
     * Quantity of the product
     * @return Returns the Double
     */
    public Double getQuantity() {
        return OptionalNullable.getFrom(quantity);
    }

    /**
     * Setter for Quantity.
     * Quantity of the product
     * @param quantity Value for Double
     */
    @JsonSetter("Quantity")
    public void setQuantity(Double quantity) {
        this.quantity = OptionalNullable.of(quantity);
    }

    /**
     * UnSetter for Quantity.
     * Quantity of the product
     */
    public void unsetQuantity() {
        quantity = null;
    }

    /**
     * Internal Getter for RebateRate.
     * Rebate rate if any
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateRate() {
        return this.rebateRate;
    }

    /**
     * Getter for RebateRate.
     * Rebate rate if any
     * @return Returns the Double
     */
    public Double getRebateRate() {
        return OptionalNullable.getFrom(rebateRate);
    }

    /**
     * Setter for RebateRate.
     * Rebate rate if any
     * @param rebateRate Value for Double
     */
    @JsonSetter("RebateRate")
    public void setRebateRate(Double rebateRate) {
        this.rebateRate = OptionalNullable.of(rebateRate);
    }

    /**
     * UnSetter for RebateRate.
     * Rebate rate if any
     */
    public void unsetRebateRate() {
        rebateRate = null;
    }

    /**
     * Internal Getter for ReceiptNumber.
     * Reciept number
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReceiptNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReceiptNumber() {
        return this.receiptNumber;
    }

    /**
     * Getter for ReceiptNumber.
     * Reciept number
     * @return Returns the Integer
     */
    public Integer getReceiptNumber() {
        return OptionalNullable.getFrom(receiptNumber);
    }

    /**
     * Setter for ReceiptNumber.
     * Reciept number
     * @param receiptNumber Value for Integer
     */
    @JsonSetter("ReceiptNumber")
    public void setReceiptNumber(Integer receiptNumber) {
        this.receiptNumber = OptionalNullable.of(receiptNumber);
    }

    /**
     * UnSetter for ReceiptNumber.
     * Reciept number
     */
    public void unsetReceiptNumber() {
        receiptNumber = null;
    }

    /**
     * Getter for RefundFlag.
     * Flag to check if there is any refund
     * @return Returns the PricedTransactionRespV2RefundFlagEnum
     */
    @JsonGetter("RefundFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PricedTransactionRespV2RefundFlagEnum getRefundFlag() {
        return refundFlag;
    }

    /**
     * Setter for RefundFlag.
     * Flag to check if there is any refund
     * @param refundFlag Value for PricedTransactionRespV2RefundFlagEnum
     */
    @JsonSetter("RefundFlag")
    public void setRefundFlag(PricedTransactionRespV2RefundFlagEnum refundFlag) {
        this.refundFlag = refundFlag;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Group identifier for the site
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Group identifier for the site
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Group identifier for the site
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Group identifier for the site
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for SiteGroupName.
     * Name of the Site group
     * @return Returns the Internal String
     */
    @JsonGetter("SiteGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteGroupName() {
        return this.siteGroupName;
    }

    /**
     * Getter for SiteGroupName.
     * Name of the Site group
     * @return Returns the String
     */
    public String getSiteGroupName() {
        return OptionalNullable.getFrom(siteGroupName);
    }

    /**
     * Setter for SiteGroupName.
     * Name of the Site group
     * @param siteGroupName Value for String
     */
    @JsonSetter("SiteGroupName")
    public void setSiteGroupName(String siteGroupName) {
        this.siteGroupName = OptionalNullable.of(siteGroupName);
    }

    /**
     * UnSetter for SiteGroupName.
     * Name of the Site group
     */
    public void unsetSiteGroupName() {
        siteGroupName = null;
    }

    /**
     * Internal Getter for Latitude.
     * Latitude of the site
     * @return Returns the Internal Double
     */
    @JsonGetter("Latitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLatitude() {
        return this.latitude;
    }

    /**
     * Getter for Latitude.
     * Latitude of the site
     * @return Returns the Double
     */
    public Double getLatitude() {
        return OptionalNullable.getFrom(latitude);
    }

    /**
     * Setter for Latitude.
     * Latitude of the site
     * @param latitude Value for Double
     */
    @JsonSetter("Latitude")
    public void setLatitude(Double latitude) {
        this.latitude = OptionalNullable.of(latitude);
    }

    /**
     * UnSetter for Latitude.
     * Latitude of the site
     */
    public void unsetLatitude() {
        latitude = null;
    }

    /**
     * Internal Getter for Longitude.
     * Longitude of the site
     * @return Returns the Internal Double
     */
    @JsonGetter("Longitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLongitude() {
        return this.longitude;
    }

    /**
     * Getter for Longitude.
     * Longitude of the site
     * @return Returns the Double
     */
    public Double getLongitude() {
        return OptionalNullable.getFrom(longitude);
    }

    /**
     * Setter for Longitude.
     * Longitude of the site
     * @param longitude Value for Double
     */
    @JsonSetter("Longitude")
    public void setLongitude(Double longitude) {
        this.longitude = OptionalNullable.of(longitude);
    }

    /**
     * UnSetter for Longitude.
     * Longitude of the site
     */
    public void unsetLongitude() {
        longitude = null;
    }

    /**
     * Internal Getter for DelCoExchangeRate.
     * Delivery company exchange rate
     * @return Returns the Internal Double
     */
    @JsonGetter("DelCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelCoExchangeRate() {
        return this.delCoExchangeRate;
    }

    /**
     * Getter for DelCoExchangeRate.
     * Delivery company exchange rate
     * @return Returns the Double
     */
    public Double getDelCoExchangeRate() {
        return OptionalNullable.getFrom(delCoExchangeRate);
    }

    /**
     * Setter for DelCoExchangeRate.
     * Delivery company exchange rate
     * @param delCoExchangeRate Value for Double
     */
    @JsonSetter("DelCoExchangeRate")
    public void setDelCoExchangeRate(Double delCoExchangeRate) {
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
    }

    /**
     * UnSetter for DelCoExchangeRate.
     * Delivery company exchange rate
     */
    public void unsetDelCoExchangeRate() {
        delCoExchangeRate = null;
    }

    /**
     * Internal Getter for EuroRebateAmount.
     * Rebate amount in Euros
     * @return Returns the Internal Double
     */
    @JsonGetter("EuroRebateAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEuroRebateAmount() {
        return this.euroRebateAmount;
    }

    /**
     * Getter for EuroRebateAmount.
     * Rebate amount in Euros
     * @return Returns the Double
     */
    public Double getEuroRebateAmount() {
        return OptionalNullable.getFrom(euroRebateAmount);
    }

    /**
     * Setter for EuroRebateAmount.
     * Rebate amount in Euros
     * @param euroRebateAmount Value for Double
     */
    @JsonSetter("EuroRebateAmount")
    public void setEuroRebateAmount(Double euroRebateAmount) {
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
    }

    /**
     * UnSetter for EuroRebateAmount.
     * Rebate amount in Euros
     */
    public void unsetEuroRebateAmount() {
        euroRebateAmount = null;
    }

    /**
     * Internal Getter for NetEuroAmount.
     * Net amount in Euros
     * @return Returns the Internal Double
     */
    @JsonGetter("NetEuroAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetEuroAmount() {
        return this.netEuroAmount;
    }

    /**
     * Getter for NetEuroAmount.
     * Net amount in Euros
     * @return Returns the Double
     */
    public Double getNetEuroAmount() {
        return OptionalNullable.getFrom(netEuroAmount);
    }

    /**
     * Setter for NetEuroAmount.
     * Net amount in Euros
     * @param netEuroAmount Value for Double
     */
    @JsonSetter("NetEuroAmount")
    public void setNetEuroAmount(Double netEuroAmount) {
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
    }

    /**
     * UnSetter for NetEuroAmount.
     * Net amount in Euros
     */
    public void unsetNetEuroAmount() {
        netEuroAmount = null;
    }

    /**
     * Internal Getter for EuroVATAmount.
     * Vat amount in Euros
     * @return Returns the Internal Double
     */
    @JsonGetter("EuroVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEuroVATAmount() {
        return this.euroVATAmount;
    }

    /**
     * Getter for EuroVATAmount.
     * Vat amount in Euros
     * @return Returns the Double
     */
    public Double getEuroVATAmount() {
        return OptionalNullable.getFrom(euroVATAmount);
    }

    /**
     * Setter for EuroVATAmount.
     * Vat amount in Euros
     * @param euroVATAmount Value for Double
     */
    @JsonSetter("EuroVATAmount")
    public void setEuroVATAmount(Double euroVATAmount) {
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
    }

    /**
     * UnSetter for EuroVATAmount.
     * Vat amount in Euros
     */
    public void unsetEuroVATAmount() {
        euroVATAmount = null;
    }

    /**
     * Internal Getter for ParentCustomerName.
     * Customers parent name
     * @return Returns the Internal String
     */
    @JsonGetter("ParentCustomerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetParentCustomerName() {
        return this.parentCustomerName;
    }

    /**
     * Getter for ParentCustomerName.
     * Customers parent name
     * @return Returns the String
     */
    public String getParentCustomerName() {
        return OptionalNullable.getFrom(parentCustomerName);
    }

    /**
     * Setter for ParentCustomerName.
     * Customers parent name
     * @param parentCustomerName Value for String
     */
    @JsonSetter("ParentCustomerName")
    public void setParentCustomerName(String parentCustomerName) {
        this.parentCustomerName = OptionalNullable.of(parentCustomerName);
    }

    /**
     * UnSetter for ParentCustomerName.
     * Customers parent name
     */
    public void unsetParentCustomerName() {
        parentCustomerName = null;
    }

    /**
     * Internal Getter for IsInvoiced.
     * Is invoice raised
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInvoiced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInvoiced() {
        return this.isInvoiced;
    }

    /**
     * Getter for IsInvoiced.
     * Is invoice raised
     * @return Returns the Boolean
     */
    public Boolean getIsInvoiced() {
        return OptionalNullable.getFrom(isInvoiced);
    }

    /**
     * Setter for IsInvoiced.
     * Is invoice raised
     * @param isInvoiced Value for Boolean
     */
    @JsonSetter("IsInvoiced")
    public void setIsInvoiced(Boolean isInvoiced) {
        this.isInvoiced = OptionalNullable.of(isInvoiced);
    }

    /**
     * UnSetter for IsInvoiced.
     * Is invoice raised
     */
    public void unsetIsInvoiced() {
        isInvoiced = null;
    }

    /**
     * Internal Getter for TransactionCurrencyCode.
     * Transaction currency code
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencyCode() {
        return this.transactionCurrencyCode;
    }

    /**
     * Getter for TransactionCurrencyCode.
     * Transaction currency code
     * @return Returns the String
     */
    public String getTransactionCurrencyCode() {
        return OptionalNullable.getFrom(transactionCurrencyCode);
    }

    /**
     * Setter for TransactionCurrencyCode.
     * Transaction currency code
     * @param transactionCurrencyCode Value for String
     */
    @JsonSetter("TransactionCurrencyCode")
    public void setTransactionCurrencyCode(String transactionCurrencyCode) {
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
    }

    /**
     * UnSetter for TransactionCurrencyCode.
     * Transaction currency code
     */
    public void unsetTransactionCurrencyCode() {
        transactionCurrencyCode = null;
    }

    /**
     * Internal Getter for CreditDebitCode.
     * Is it Credit or debit C for credit D for Debit
     * @return Returns the Internal String
     */
    @JsonGetter("CreditDebitCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditDebitCode() {
        return this.creditDebitCode;
    }

    /**
     * Getter for CreditDebitCode.
     * Is it Credit or debit C for credit D for Debit
     * @return Returns the String
     */
    public String getCreditDebitCode() {
        return OptionalNullable.getFrom(creditDebitCode);
    }

    /**
     * Setter for CreditDebitCode.
     * Is it Credit or debit C for credit D for Debit
     * @param creditDebitCode Value for String
     */
    @JsonSetter("CreditDebitCode")
    public void setCreditDebitCode(String creditDebitCode) {
        this.creditDebitCode = OptionalNullable.of(creditDebitCode);
    }

    /**
     * UnSetter for CreditDebitCode.
     * Is it Credit or debit C for credit D for Debit
     */
    public void unsetCreditDebitCode() {
        creditDebitCode = null;
    }

    /**
     * Internal Getter for TransactionDate.
     * Date of transaction
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("TransactionDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetTransactionDate() {
        return this.transactionDate;
    }

    /**
     * Getter for TransactionDate.
     * Date of transaction
     * @return Returns the LocalDate
     */
    public LocalDate getTransactionDate() {
        return OptionalNullable.getFrom(transactionDate);
    }

    /**
     * Setter for TransactionDate.
     * Date of transaction
     * @param transactionDate Value for LocalDate
     */
    @JsonSetter("TransactionDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setTransactionDate(LocalDate transactionDate) {
        this.transactionDate = OptionalNullable.of(transactionDate);
    }

    /**
     * UnSetter for TransactionDate.
     * Date of transaction
     */
    public void unsetTransactionDate() {
        transactionDate = null;
    }

    /**
     * Internal Getter for TransactionTime.
     * Time of transaction
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("TransactionTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetTransactionTime() {
        return this.transactionTime;
    }

    /**
     * Getter for TransactionTime.
     * Time of transaction
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getTransactionTime() {
        return OptionalNullable.getFrom(transactionTime);
    }

    /**
     * Setter for TransactionTime.
     * Time of transaction
     * @param transactionTime Value for LocalDateTime
     */
    @JsonSetter("TransactionTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTransactionTime(LocalDateTime transactionTime) {
        this.transactionTime = OptionalNullable.of(transactionTime);
    }

    /**
     * UnSetter for TransactionTime.
     * Time of transaction
     */
    public void unsetTransactionTime() {
        transactionTime = null;
    }

    /**
     * Internal Getter for TransactionItemId.
     * Identifier of the Iem in transaction
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionItemId() {
        return this.transactionItemId;
    }

    /**
     * Getter for TransactionItemId.
     * Identifier of the Iem in transaction
     * @return Returns the String
     */
    public String getTransactionItemId() {
        return OptionalNullable.getFrom(transactionItemId);
    }

    /**
     * Setter for TransactionItemId.
     * Identifier of the Iem in transaction
     * @param transactionItemId Value for String
     */
    @JsonSetter("TransactionItemId")
    public void setTransactionItemId(String transactionItemId) {
        this.transactionItemId = OptionalNullable.of(transactionItemId);
    }

    /**
     * UnSetter for TransactionItemId.
     * Identifier of the Iem in transaction
     */
    public void unsetTransactionItemId() {
        transactionItemId = null;
    }

    /**
     * Internal Getter for TrnIdentifier.
     * Transaction identifier
     * @return Returns the Internal String
     */
    @JsonGetter("TrnIdentifier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTrnIdentifier() {
        return this.trnIdentifier;
    }

    /**
     * Getter for TrnIdentifier.
     * Transaction identifier
     * @return Returns the String
     */
    public String getTrnIdentifier() {
        return OptionalNullable.getFrom(trnIdentifier);
    }

    /**
     * Setter for TrnIdentifier.
     * Transaction identifier
     * @param trnIdentifier Value for String
     */
    @JsonSetter("TrnIdentifier")
    public void setTrnIdentifier(String trnIdentifier) {
        this.trnIdentifier = OptionalNullable.of(trnIdentifier);
    }

    /**
     * UnSetter for TrnIdentifier.
     * Transaction identifier
     */
    public void unsetTrnIdentifier() {
        trnIdentifier = null;
    }

    /**
     * Internal Getter for Type.
     * Transaction type for Delco
     * @return Returns the Internal String
     */
    @JsonGetter("Type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * Transaction type for Delco
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * Transaction type for Delco
     * @param type Value for String
     */
    @JsonSetter("Type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * Transaction type for Delco
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for TransactionLine.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TransactionLine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTransactionLine() {
        return this.transactionLine;
    }

    /**
     * Getter for TransactionLine.
     * @return Returns the Integer
     */
    public Integer getTransactionLine() {
        return OptionalNullable.getFrom(transactionLine);
    }

    /**
     * Setter for TransactionLine.
     * @param transactionLine Value for Integer
     */
    @JsonSetter("TransactionLine")
    public void setTransactionLine(Integer transactionLine) {
        this.transactionLine = OptionalNullable.of(transactionLine);
    }

    /**
     * UnSetter for TransactionLine.
     */
    public void unsetTransactionLine() {
        transactionLine = null;
    }

    /**
     * Internal Getter for TransactionType.
     * Transaction type Colco
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionType() {
        return this.transactionType;
    }

    /**
     * Getter for TransactionType.
     * Transaction type Colco
     * @return Returns the String
     */
    public String getTransactionType() {
        return OptionalNullable.getFrom(transactionType);
    }

    /**
     * Setter for TransactionType.
     * Transaction type Colco
     * @param transactionType Value for String
     */
    @JsonSetter("TransactionType")
    public void setTransactionType(String transactionType) {
        this.transactionType = OptionalNullable.of(transactionType);
    }

    /**
     * UnSetter for TransactionType.
     * Transaction type Colco
     */
    public void unsetTransactionType() {
        transactionType = null;
    }

    /**
     * Internal Getter for UTCOffset.
     * Leaving country
     * @return Returns the Internal String
     */
    @JsonGetter("UTCOffset")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUTCOffset() {
        return this.uTCOffset;
    }

    /**
     * Getter for UTCOffset.
     * Leaving country
     * @return Returns the String
     */
    public String getUTCOffset() {
        return OptionalNullable.getFrom(uTCOffset);
    }

    /**
     * Setter for UTCOffset.
     * Leaving country
     * @param uTCOffset Value for String
     */
    @JsonSetter("UTCOffset")
    public void setUTCOffset(String uTCOffset) {
        this.uTCOffset = OptionalNullable.of(uTCOffset);
    }

    /**
     * UnSetter for UTCOffset.
     * Leaving country
     */
    public void unsetUTCOffset() {
        uTCOffset = null;
    }

    /**
     * Internal Getter for VATCategory.
     * To which category and counry does the VAT come under
     * @return Returns the Internal String
     */
    @JsonGetter("VATCategory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCategory() {
        return this.vATCategory;
    }

    /**
     * Getter for VATCategory.
     * To which category and counry does the VAT come under
     * @return Returns the String
     */
    public String getVATCategory() {
        return OptionalNullable.getFrom(vATCategory);
    }

    /**
     * Setter for VATCategory.
     * To which category and counry does the VAT come under
     * @param vATCategory Value for String
     */
    @JsonSetter("VATCategory")
    public void setVATCategory(String vATCategory) {
        this.vATCategory = OptionalNullable.of(vATCategory);
    }

    /**
     * UnSetter for VATCategory.
     * To which category and counry does the VAT come under
     */
    public void unsetVATCategory() {
        vATCategory = null;
    }

    /**
     * Internal Getter for VATRate.
     * VAT rate
     * @return Returns the Internal Double
     */
    @JsonGetter("VATRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATRate() {
        return this.vATRate;
    }

    /**
     * Getter for VATRate.
     * VAT rate
     * @return Returns the Double
     */
    public Double getVATRate() {
        return OptionalNullable.getFrom(vATRate);
    }

    /**
     * Setter for VATRate.
     * VAT rate
     * @param vATRate Value for Double
     */
    @JsonSetter("VATRate")
    public void setVATRate(Double vATRate) {
        this.vATRate = OptionalNullable.of(vATRate);
    }

    /**
     * UnSetter for VATRate.
     * VAT rate
     */
    public void unsetVATRate() {
        vATRate = null;
    }

    /**
     * Internal Getter for VehicleRegistration.
     * Vehicle registration number
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistration() {
        return this.vehicleRegistration;
    }

    /**
     * Getter for VehicleRegistration.
     * Vehicle registration number
     * @return Returns the String
     */
    public String getVehicleRegistration() {
        return OptionalNullable.getFrom(vehicleRegistration);
    }

    /**
     * Setter for VehicleRegistration.
     * Vehicle registration number
     * @param vehicleRegistration Value for String
     */
    @JsonSetter("VehicleRegistration")
    public void setVehicleRegistration(String vehicleRegistration) {
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
    }

    /**
     * UnSetter for VehicleRegistration.
     * Vehicle registration number
     */
    public void unsetVehicleRegistration() {
        vehicleRegistration = null;
    }

    /**
     * Internal Getter for IsCancelled.
     * Check if the pruchase is cancelled
     * @return Returns the Internal String
     */
    @JsonGetter("IsCancelled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIsCancelled() {
        return this.isCancelled;
    }

    /**
     * Getter for IsCancelled.
     * Check if the pruchase is cancelled
     * @return Returns the String
     */
    public String getIsCancelled() {
        return OptionalNullable.getFrom(isCancelled);
    }

    /**
     * Setter for IsCancelled.
     * Check if the pruchase is cancelled
     * @param isCancelled Value for String
     */
    @JsonSetter("IsCancelled")
    public void setIsCancelled(String isCancelled) {
        this.isCancelled = OptionalNullable.of(isCancelled);
    }

    /**
     * UnSetter for IsCancelled.
     * Check if the pruchase is cancelled
     */
    public void unsetIsCancelled() {
        isCancelled = null;
    }

    /**
     * Internal Getter for ColCoGrossAmount.
     * Gross amount from Colco
     * @return Returns the Internal Double
     */
    @JsonGetter("ColCoGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetColCoGrossAmount() {
        return this.colCoGrossAmount;
    }

    /**
     * Getter for ColCoGrossAmount.
     * Gross amount from Colco
     * @return Returns the Double
     */
    public Double getColCoGrossAmount() {
        return OptionalNullable.getFrom(colCoGrossAmount);
    }

    /**
     * Setter for ColCoGrossAmount.
     * Gross amount from Colco
     * @param colCoGrossAmount Value for Double
     */
    @JsonSetter("ColCoGrossAmount")
    public void setColCoGrossAmount(Double colCoGrossAmount) {
        this.colCoGrossAmount = OptionalNullable.of(colCoGrossAmount);
    }

    /**
     * UnSetter for ColCoGrossAmount.
     * Gross amount from Colco
     */
    public void unsetColCoGrossAmount() {
        colCoGrossAmount = null;
    }

    /**
     * Internal Getter for ColCoNetAmount.
     * Net amount from Colco
     * @return Returns the Internal Double
     */
    @JsonGetter("ColCoNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetColCoNetAmount() {
        return this.colCoNetAmount;
    }

    /**
     * Getter for ColCoNetAmount.
     * Net amount from Colco
     * @return Returns the Double
     */
    public Double getColCoNetAmount() {
        return OptionalNullable.getFrom(colCoNetAmount);
    }

    /**
     * Setter for ColCoNetAmount.
     * Net amount from Colco
     * @param colCoNetAmount Value for Double
     */
    @JsonSetter("ColCoNetAmount")
    public void setColCoNetAmount(Double colCoNetAmount) {
        this.colCoNetAmount = OptionalNullable.of(colCoNetAmount);
    }

    /**
     * UnSetter for ColCoNetAmount.
     * Net amount from Colco
     */
    public void unsetColCoNetAmount() {
        colCoNetAmount = null;
    }

    /**
     * Internal Getter for ColCoVATAmount.
     * Colco VAT amount
     * @return Returns the Internal Double
     */
    @JsonGetter("ColCoVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetColCoVATAmount() {
        return this.colCoVATAmount;
    }

    /**
     * Getter for ColCoVATAmount.
     * Colco VAT amount
     * @return Returns the Double
     */
    public Double getColCoVATAmount() {
        return OptionalNullable.getFrom(colCoVATAmount);
    }

    /**
     * Setter for ColCoVATAmount.
     * Colco VAT amount
     * @param colCoVATAmount Value for Double
     */
    @JsonSetter("ColCoVATAmount")
    public void setColCoVATAmount(Double colCoVATAmount) {
        this.colCoVATAmount = OptionalNullable.of(colCoVATAmount);
    }

    /**
     * UnSetter for ColCoVATAmount.
     * Colco VAT amount
     */
    public void unsetColCoVATAmount() {
        colCoVATAmount = null;
    }

    /**
     * Internal Getter for OriginalCurrencySymbol.
     * Original currency code
     * @return Returns the Internal String
     */
    @JsonGetter("OriginalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOriginalCurrencySymbol() {
        return this.originalCurrencySymbol;
    }

    /**
     * Getter for OriginalCurrencySymbol.
     * Original currency code
     * @return Returns the String
     */
    public String getOriginalCurrencySymbol() {
        return OptionalNullable.getFrom(originalCurrencySymbol);
    }

    /**
     * Setter for OriginalCurrencySymbol.
     * Original currency code
     * @param originalCurrencySymbol Value for String
     */
    @JsonSetter("OriginalCurrencySymbol")
    public void setOriginalCurrencySymbol(String originalCurrencySymbol) {
        this.originalCurrencySymbol = OptionalNullable.of(originalCurrencySymbol);
    }

    /**
     * UnSetter for OriginalCurrencySymbol.
     * Original currency code
     */
    public void unsetOriginalCurrencySymbol() {
        originalCurrencySymbol = null;
    }

    /**
     * Internal Getter for OriginalCurrencyCode.
     * Original currency code
     * @return Returns the Internal String
     */
    @JsonGetter("OriginalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOriginalCurrencyCode() {
        return this.originalCurrencyCode;
    }

    /**
     * Getter for OriginalCurrencyCode.
     * Original currency code
     * @return Returns the String
     */
    public String getOriginalCurrencyCode() {
        return OptionalNullable.getFrom(originalCurrencyCode);
    }

    /**
     * Setter for OriginalCurrencyCode.
     * Original currency code
     * @param originalCurrencyCode Value for String
     */
    @JsonSetter("OriginalCurrencyCode")
    public void setOriginalCurrencyCode(String originalCurrencyCode) {
        this.originalCurrencyCode = OptionalNullable.of(originalCurrencyCode);
    }

    /**
     * UnSetter for OriginalCurrencyCode.
     * Original currency code
     */
    public void unsetOriginalCurrencyCode() {
        originalCurrencyCode = null;
    }

    /**
     * Internal Getter for OriginalVATAmount.
     * Original VAT amount
     * @return Returns the Internal Double
     */
    @JsonGetter("OriginalVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOriginalVATAmount() {
        return this.originalVATAmount;
    }

    /**
     * Getter for OriginalVATAmount.
     * Original VAT amount
     * @return Returns the Double
     */
    public Double getOriginalVATAmount() {
        return OptionalNullable.getFrom(originalVATAmount);
    }

    /**
     * Setter for OriginalVATAmount.
     * Original VAT amount
     * @param originalVATAmount Value for Double
     */
    @JsonSetter("OriginalVATAmount")
    public void setOriginalVATAmount(Double originalVATAmount) {
        this.originalVATAmount = OptionalNullable.of(originalVATAmount);
    }

    /**
     * UnSetter for OriginalVATAmount.
     * Original VAT amount
     */
    public void unsetOriginalVATAmount() {
        originalVATAmount = null;
    }

    /**
     * Internal Getter for EmbossText.
     * Comapany name embosses in text
     * @return Returns the Internal String
     */
    @JsonGetter("EmbossText")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmbossText() {
        return this.embossText;
    }

    /**
     * Getter for EmbossText.
     * Comapany name embosses in text
     * @return Returns the String
     */
    public String getEmbossText() {
        return OptionalNullable.getFrom(embossText);
    }

    /**
     * Setter for EmbossText.
     * Comapany name embosses in text
     * @param embossText Value for String
     */
    @JsonSetter("EmbossText")
    public void setEmbossText(String embossText) {
        this.embossText = OptionalNullable.of(embossText);
    }

    /**
     * UnSetter for EmbossText.
     * Comapany name embosses in text
     */
    public void unsetEmbossText() {
        embossText = null;
    }

    /**
     * Internal Getter for OriginalExchangeRate.
     * Orginal exchange rate
     * @return Returns the Internal Double
     */
    @JsonGetter("OriginalExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOriginalExchangeRate() {
        return this.originalExchangeRate;
    }

    /**
     * Getter for OriginalExchangeRate.
     * Orginal exchange rate
     * @return Returns the Double
     */
    public Double getOriginalExchangeRate() {
        return OptionalNullable.getFrom(originalExchangeRate);
    }

    /**
     * Setter for OriginalExchangeRate.
     * Orginal exchange rate
     * @param originalExchangeRate Value for Double
     */
    @JsonSetter("OriginalExchangeRate")
    public void setOriginalExchangeRate(Double originalExchangeRate) {
        this.originalExchangeRate = OptionalNullable.of(originalExchangeRate);
    }

    /**
     * UnSetter for OriginalExchangeRate.
     * Orginal exchange rate
     */
    public void unsetOriginalExchangeRate() {
        originalExchangeRate = null;
    }

    /**
     * Internal Getter for OriginalTransactionItemInvoiceDate.
     * Original treansaction date
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("OriginalTransactionItemInvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetOriginalTransactionItemInvoiceDate() {
        return this.originalTransactionItemInvoiceDate;
    }

    /**
     * Getter for OriginalTransactionItemInvoiceDate.
     * Original treansaction date
     * @return Returns the LocalDate
     */
    public LocalDate getOriginalTransactionItemInvoiceDate() {
        return OptionalNullable.getFrom(originalTransactionItemInvoiceDate);
    }

    /**
     * Setter for OriginalTransactionItemInvoiceDate.
     * Original treansaction date
     * @param originalTransactionItemInvoiceDate Value for LocalDate
     */
    @JsonSetter("OriginalTransactionItemInvoiceDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setOriginalTransactionItemInvoiceDate(LocalDate originalTransactionItemInvoiceDate) {
        this.originalTransactionItemInvoiceDate = OptionalNullable.of(originalTransactionItemInvoiceDate);
    }

    /**
     * UnSetter for OriginalTransactionItemInvoiceDate.
     * Original treansaction date
     */
    public void unsetOriginalTransactionItemInvoiceDate() {
        originalTransactionItemInvoiceDate = null;
    }

    /**
     * Internal Getter for FeeTypeId.
     * Fee type identifier
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeTypeId() {
        return this.feeTypeId;
    }

    /**
     * Getter for FeeTypeId.
     * Fee type identifier
     * @return Returns the Integer
     */
    public Integer getFeeTypeId() {
        return OptionalNullable.getFrom(feeTypeId);
    }

    /**
     * Setter for FeeTypeId.
     * Fee type identifier
     * @param feeTypeId Value for Integer
     */
    @JsonSetter("FeeTypeId")
    public void setFeeTypeId(Integer feeTypeId) {
        this.feeTypeId = OptionalNullable.of(feeTypeId);
    }

    /**
     * UnSetter for FeeTypeId.
     * Fee type identifier
     */
    public void unsetFeeTypeId() {
        feeTypeId = null;
    }

    /**
     * Internal Getter for LineItemDescription.
     * Line item identifier of the product
     * @return Returns the Internal Boolean
     */
    @JsonGetter("LineItemDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetLineItemDescription() {
        return this.lineItemDescription;
    }

    /**
     * Getter for LineItemDescription.
     * Line item identifier of the product
     * @return Returns the Boolean
     */
    public Boolean getLineItemDescription() {
        return OptionalNullable.getFrom(lineItemDescription);
    }

    /**
     * Setter for LineItemDescription.
     * Line item identifier of the product
     * @param lineItemDescription Value for Boolean
     */
    @JsonSetter("LineItemDescription")
    public void setLineItemDescription(Boolean lineItemDescription) {
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
    }

    /**
     * UnSetter for LineItemDescription.
     * Line item identifier of the product
     */
    public void unsetLineItemDescription() {
        lineItemDescription = null;
    }

    /**
     * Internal Getter for FeeRuleDescription.
     * Fee rule description
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleDescription() {
        return this.feeRuleDescription;
    }

    /**
     * Getter for FeeRuleDescription.
     * Fee rule description
     * @return Returns the String
     */
    public String getFeeRuleDescription() {
        return OptionalNullable.getFrom(feeRuleDescription);
    }

    /**
     * Setter for FeeRuleDescription.
     * Fee rule description
     * @param feeRuleDescription Value for String
     */
    @JsonSetter("FeeRuleDescription")
    public void setFeeRuleDescription(String feeRuleDescription) {
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
    }

    /**
     * UnSetter for FeeRuleDescription.
     * Fee rule description
     */
    public void unsetFeeRuleDescription() {
        feeRuleDescription = null;
    }

    /**
     * Internal Getter for Frequency.
     * Frequency of transaction
     * @return Returns the Internal Integer
     */
    @JsonGetter("Frequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFrequency() {
        return this.frequency;
    }

    /**
     * Getter for Frequency.
     * Frequency of transaction
     * @return Returns the Integer
     */
    public Integer getFrequency() {
        return OptionalNullable.getFrom(frequency);
    }

    /**
     * Setter for Frequency.
     * Frequency of transaction
     * @param frequency Value for Integer
     */
    @JsonSetter("Frequency")
    public void setFrequency(Integer frequency) {
        this.frequency = OptionalNullable.of(frequency);
    }

    /**
     * UnSetter for Frequency.
     * Frequency of transaction
     */
    public void unsetFrequency() {
        frequency = null;
    }

    /**
     * Internal Getter for FeeRuleId.
     * Fee rule identifier
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeRuleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeRuleId() {
        return this.feeRuleId;
    }

    /**
     * Getter for FeeRuleId.
     * Fee rule identifier
     * @return Returns the Integer
     */
    public Integer getFeeRuleId() {
        return OptionalNullable.getFrom(feeRuleId);
    }

    /**
     * Setter for FeeRuleId.
     * Fee rule identifier
     * @param feeRuleId Value for Integer
     */
    @JsonSetter("FeeRuleId")
    public void setFeeRuleId(Integer feeRuleId) {
        this.feeRuleId = OptionalNullable.of(feeRuleId);
    }

    /**
     * UnSetter for FeeRuleId.
     * Fee rule identifier
     */
    public void unsetFeeRuleId() {
        feeRuleId = null;
    }

    /**
     * Internal Getter for SystemEntryDate.
     * Entry date in the system
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("SystemEntryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetSystemEntryDate() {
        return this.systemEntryDate;
    }

    /**
     * Getter for SystemEntryDate.
     * Entry date in the system
     * @return Returns the LocalDate
     */
    public LocalDate getSystemEntryDate() {
        return OptionalNullable.getFrom(systemEntryDate);
    }

    /**
     * Setter for SystemEntryDate.
     * Entry date in the system
     * @param systemEntryDate Value for LocalDate
     */
    @JsonSetter("SystemEntryDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setSystemEntryDate(LocalDate systemEntryDate) {
        this.systemEntryDate = OptionalNullable.of(systemEntryDate);
    }

    /**
     * UnSetter for SystemEntryDate.
     * Entry date in the system
     */
    public void unsetSystemEntryDate() {
        systemEntryDate = null;
    }

    /**
     * Internal Getter for SystemEntryTime.
     * Entry time in the system
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("SystemEntryTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetSystemEntryTime() {
        return this.systemEntryTime;
    }

    /**
     * Getter for SystemEntryTime.
     * Entry time in the system
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getSystemEntryTime() {
        return OptionalNullable.getFrom(systemEntryTime);
    }

    /**
     * Setter for SystemEntryTime.
     * Entry time in the system
     * @param systemEntryTime Value for LocalDateTime
     */
    @JsonSetter("SystemEntryTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setSystemEntryTime(LocalDateTime systemEntryTime) {
        this.systemEntryTime = OptionalNullable.of(systemEntryTime);
    }

    /**
     * UnSetter for SystemEntryTime.
     * Entry time in the system
     */
    public void unsetSystemEntryTime() {
        systemEntryTime = null;
    }

    /**
     * Internal Getter for IsManual.
     * Checking if its manual
     * @return Returns the Internal String
     */
    @JsonGetter("IsManual")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIsManual() {
        return this.isManual;
    }

    /**
     * Getter for IsManual.
     * Checking if its manual
     * @return Returns the String
     */
    public String getIsManual() {
        return OptionalNullable.getFrom(isManual);
    }

    /**
     * Setter for IsManual.
     * Checking if its manual
     * @param isManual Value for String
     */
    @JsonSetter("IsManual")
    public void setIsManual(String isManual) {
        this.isManual = OptionalNullable.of(isManual);
    }

    /**
     * UnSetter for IsManual.
     * Checking if its manual
     */
    public void unsetIsManual() {
        isManual = null;
    }

    /**
     * Internal Getter for OriginalTransactionItemId.
     * Is it manual
     * @return Returns the Internal String
     */
    @JsonGetter("OriginalTransactionItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOriginalTransactionItemId() {
        return this.originalTransactionItemId;
    }

    /**
     * Getter for OriginalTransactionItemId.
     * Is it manual
     * @return Returns the String
     */
    public String getOriginalTransactionItemId() {
        return OptionalNullable.getFrom(originalTransactionItemId);
    }

    /**
     * Setter for OriginalTransactionItemId.
     * Is it manual
     * @param originalTransactionItemId Value for String
     */
    @JsonSetter("OriginalTransactionItemId")
    public void setOriginalTransactionItemId(String originalTransactionItemId) {
        this.originalTransactionItemId = OptionalNullable.of(originalTransactionItemId);
    }

    /**
     * UnSetter for OriginalTransactionItemId.
     * Is it manual
     */
    public void unsetOriginalTransactionItemId() {
        originalTransactionItemId = null;
    }

    /**
     * Internal Getter for OriginalTransactionItemInvoiceNumber.
     * Original invoice transaction number
     * @return Returns the Internal Integer
     */
    @JsonGetter("OriginalTransactionItemInvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetOriginalTransactionItemInvoiceNumber() {
        return this.originalTransactionItemInvoiceNumber;
    }

    /**
     * Getter for OriginalTransactionItemInvoiceNumber.
     * Original invoice transaction number
     * @return Returns the Integer
     */
    public Integer getOriginalTransactionItemInvoiceNumber() {
        return OptionalNullable.getFrom(originalTransactionItemInvoiceNumber);
    }

    /**
     * Setter for OriginalTransactionItemInvoiceNumber.
     * Original invoice transaction number
     * @param originalTransactionItemInvoiceNumber Value for Integer
     */
    @JsonSetter("OriginalTransactionItemInvoiceNumber")
    public void setOriginalTransactionItemInvoiceNumber(Integer originalTransactionItemInvoiceNumber) {
        this.originalTransactionItemInvoiceNumber = OptionalNullable.of(originalTransactionItemInvoiceNumber);
    }

    /**
     * UnSetter for OriginalTransactionItemInvoiceNumber.
     * Original invoice transaction number
     */
    public void unsetOriginalTransactionItemInvoiceNumber() {
        originalTransactionItemInvoiceNumber = null;
    }

    /**
     * Internal Getter for OriginalTransactionItemInvoiceId.
     * Original Invoice transaction Identifier
     * @return Returns the Internal Integer
     */
    @JsonGetter("OriginalTransactionItemInvoiceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetOriginalTransactionItemInvoiceId() {
        return this.originalTransactionItemInvoiceId;
    }

    /**
     * Getter for OriginalTransactionItemInvoiceId.
     * Original Invoice transaction Identifier
     * @return Returns the Integer
     */
    public Integer getOriginalTransactionItemInvoiceId() {
        return OptionalNullable.getFrom(originalTransactionItemInvoiceId);
    }

    /**
     * Setter for OriginalTransactionItemInvoiceId.
     * Original Invoice transaction Identifier
     * @param originalTransactionItemInvoiceId Value for Integer
     */
    @JsonSetter("OriginalTransactionItemInvoiceId")
    public void setOriginalTransactionItemInvoiceId(Integer originalTransactionItemInvoiceId) {
        this.originalTransactionItemInvoiceId = OptionalNullable.of(originalTransactionItemInvoiceId);
    }

    /**
     * UnSetter for OriginalTransactionItemInvoiceId.
     * Original Invoice transaction Identifier
     */
    public void unsetOriginalTransactionItemInvoiceId() {
        originalTransactionItemInvoiceId = null;
    }

    /**
     * Internal Getter for PayerShortName.
     * Payers short name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerShortName() {
        return this.payerShortName;
    }

    /**
     * Getter for PayerShortName.
     * Payers short name
     * @return Returns the String
     */
    public String getPayerShortName() {
        return OptionalNullable.getFrom(payerShortName);
    }

    /**
     * Setter for PayerShortName.
     * Payers short name
     * @param payerShortName Value for String
     */
    @JsonSetter("PayerShortName")
    public void setPayerShortName(String payerShortName) {
        this.payerShortName = OptionalNullable.of(payerShortName);
    }

    /**
     * UnSetter for PayerShortName.
     * Payers short name
     */
    public void unsetPayerShortName() {
        payerShortName = null;
    }

    /**
     * Internal Getter for ReverseCharge.
     * Is reverse charge?
     * @return Returns the Internal String
     */
    @JsonGetter("ReverseCharge")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReverseCharge() {
        return this.reverseCharge;
    }

    /**
     * Getter for ReverseCharge.
     * Is reverse charge?
     * @return Returns the String
     */
    public String getReverseCharge() {
        return OptionalNullable.getFrom(reverseCharge);
    }

    /**
     * Setter for ReverseCharge.
     * Is reverse charge?
     * @param reverseCharge Value for String
     */
    @JsonSetter("ReverseCharge")
    public void setReverseCharge(String reverseCharge) {
        this.reverseCharge = OptionalNullable.of(reverseCharge);
    }

    /**
     * UnSetter for ReverseCharge.
     * Is reverse charge?
     */
    public void unsetReverseCharge() {
        reverseCharge = null;
    }

    /**
     * Internal Getter for OriginalGrossAmount.
     * Original gross amount
     * @return Returns the Internal Double
     */
    @JsonGetter("OriginalGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOriginalGrossAmount() {
        return this.originalGrossAmount;
    }

    /**
     * Getter for OriginalGrossAmount.
     * Original gross amount
     * @return Returns the Double
     */
    public Double getOriginalGrossAmount() {
        return OptionalNullable.getFrom(originalGrossAmount);
    }

    /**
     * Setter for OriginalGrossAmount.
     * Original gross amount
     * @param originalGrossAmount Value for Double
     */
    @JsonSetter("OriginalGrossAmount")
    public void setOriginalGrossAmount(Double originalGrossAmount) {
        this.originalGrossAmount = OptionalNullable.of(originalGrossAmount);
    }

    /**
     * UnSetter for OriginalGrossAmount.
     * Original gross amount
     */
    public void unsetOriginalGrossAmount() {
        originalGrossAmount = null;
    }

    /**
     * Internal Getter for OriginalNetAmount.
     * Original Net amount
     * @return Returns the Internal Double
     */
    @JsonGetter("OriginalNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOriginalNetAmount() {
        return this.originalNetAmount;
    }

    /**
     * Getter for OriginalNetAmount.
     * Original Net amount
     * @return Returns the Double
     */
    public Double getOriginalNetAmount() {
        return OptionalNullable.getFrom(originalNetAmount);
    }

    /**
     * Setter for OriginalNetAmount.
     * Original Net amount
     * @param originalNetAmount Value for Double
     */
    @JsonSetter("OriginalNetAmount")
    public void setOriginalNetAmount(Double originalNetAmount) {
        this.originalNetAmount = OptionalNullable.of(originalNetAmount);
    }

    /**
     * UnSetter for OriginalNetAmount.
     * Original Net amount
     */
    public void unsetOriginalNetAmount() {
        originalNetAmount = null;
    }

    /**
     * Internal Getter for UnitOfMeasure.
     * Unit of measure
     * @return Returns the Internal String
     */
    @JsonGetter("UnitOfMeasure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUnitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Getter for UnitOfMeasure.
     * Unit of measure
     * @return Returns the String
     */
    public String getUnitOfMeasure() {
        return OptionalNullable.getFrom(unitOfMeasure);
    }

    /**
     * Setter for UnitOfMeasure.
     * Unit of measure
     * @param unitOfMeasure Value for String
     */
    @JsonSetter("UnitOfMeasure")
    public void setUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
    }

    /**
     * UnSetter for UnitOfMeasure.
     * Unit of measure
     */
    public void unsetUnitOfMeasure() {
        unitOfMeasure = null;
    }

    /**
     * Internal Getter for RoadType.
     * Type of road
     * @return Returns the Internal String
     */
    @JsonGetter("RoadType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRoadType() {
        return this.roadType;
    }

    /**
     * Getter for RoadType.
     * Type of road
     * @return Returns the String
     */
    public String getRoadType() {
        return OptionalNullable.getFrom(roadType);
    }

    /**
     * Setter for RoadType.
     * Type of road
     * @param roadType Value for String
     */
    @JsonSetter("RoadType")
    public void setRoadType(String roadType) {
        this.roadType = OptionalNullable.of(roadType);
    }

    /**
     * UnSetter for RoadType.
     * Type of road
     */
    public void unsetRoadType() {
        roadType = null;
    }

    /**
     * Internal Getter for CustomerCountryIsoCode.
     * Customer country ISO Code
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountryIsoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountryIsoCode() {
        return this.customerCountryIsoCode;
    }

    /**
     * Getter for CustomerCountryIsoCode.
     * Customer country ISO Code
     * @return Returns the String
     */
    public String getCustomerCountryIsoCode() {
        return OptionalNullable.getFrom(customerCountryIsoCode);
    }

    /**
     * Setter for CustomerCountryIsoCode.
     * Customer country ISO Code
     * @param customerCountryIsoCode Value for String
     */
    @JsonSetter("CustomerCountryIsoCode")
    public void setCustomerCountryIsoCode(String customerCountryIsoCode) {
        this.customerCountryIsoCode = OptionalNullable.of(customerCountryIsoCode);
    }

    /**
     * UnSetter for CustomerCountryIsoCode.
     * Customer country ISO Code
     */
    public void unsetCustomerCountryIsoCode() {
        customerCountryIsoCode = null;
    }

    /**
     * Internal Getter for EVOperator.
     * EvOperator Name
     * @return Returns the Internal String
     */
    @JsonGetter("EVOperator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVOperator() {
        return this.eVOperator;
    }

    /**
     * Getter for EVOperator.
     * EvOperator Name
     * @return Returns the String
     */
    public String getEVOperator() {
        return OptionalNullable.getFrom(eVOperator);
    }

    /**
     * Setter for EVOperator.
     * EvOperator Name
     * @param eVOperator Value for String
     */
    @JsonSetter("EVOperator")
    public void setEVOperator(String eVOperator) {
        this.eVOperator = OptionalNullable.of(eVOperator);
    }

    /**
     * UnSetter for EVOperator.
     * EvOperator Name
     */
    public void unsetEVOperator() {
        eVOperator = null;
    }

    /**
     * Internal Getter for EVSerialId.
     * Ev Operator identifier
     * @return Returns the Internal String
     */
    @JsonGetter("EVSerialId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVSerialId() {
        return this.eVSerialId;
    }

    /**
     * Getter for EVSerialId.
     * Ev Operator identifier
     * @return Returns the String
     */
    public String getEVSerialId() {
        return OptionalNullable.getFrom(eVSerialId);
    }

    /**
     * Setter for EVSerialId.
     * Ev Operator identifier
     * @param eVSerialId Value for String
     */
    @JsonSetter("EVSerialId")
    public void setEVSerialId(String eVSerialId) {
        this.eVSerialId = OptionalNullable.of(eVSerialId);
    }

    /**
     * UnSetter for EVSerialId.
     * Ev Operator identifier
     */
    public void unsetEVSerialId() {
        eVSerialId = null;
    }

    /**
     * Internal Getter for EVChargePointSerial.
     * EV Charging point iserial identifier
     * @return Returns the Internal String
     */
    @JsonGetter("EVChargePointSerial")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVChargePointSerial() {
        return this.eVChargePointSerial;
    }

    /**
     * Getter for EVChargePointSerial.
     * EV Charging point iserial identifier
     * @return Returns the String
     */
    public String getEVChargePointSerial() {
        return OptionalNullable.getFrom(eVChargePointSerial);
    }

    /**
     * Setter for EVChargePointSerial.
     * EV Charging point iserial identifier
     * @param eVChargePointSerial Value for String
     */
    @JsonSetter("EVChargePointSerial")
    public void setEVChargePointSerial(String eVChargePointSerial) {
        this.eVChargePointSerial = OptionalNullable.of(eVChargePointSerial);
    }

    /**
     * UnSetter for EVChargePointSerial.
     * EV Charging point iserial identifier
     */
    public void unsetEVChargePointSerial() {
        eVChargePointSerial = null;
    }

    /**
     * Internal Getter for EVChargePointConnectorType.
     * Ev chariging connector type
     * @return Returns the Internal Integer
     */
    @JsonGetter("EVChargePointConnectorType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetEVChargePointConnectorType() {
        return this.eVChargePointConnectorType;
    }

    /**
     * Getter for EVChargePointConnectorType.
     * Ev chariging connector type
     * @return Returns the Integer
     */
    public Integer getEVChargePointConnectorType() {
        return OptionalNullable.getFrom(eVChargePointConnectorType);
    }

    /**
     * Setter for EVChargePointConnectorType.
     * Ev chariging connector type
     * @param eVChargePointConnectorType Value for Integer
     */
    @JsonSetter("EVChargePointConnectorType")
    public void setEVChargePointConnectorType(Integer eVChargePointConnectorType) {
        this.eVChargePointConnectorType = OptionalNullable.of(eVChargePointConnectorType);
    }

    /**
     * UnSetter for EVChargePointConnectorType.
     * Ev chariging connector type
     */
    public void unsetEVChargePointConnectorType() {
        eVChargePointConnectorType = null;
    }

    /**
     * Internal Getter for EVChargePointConnectorTypeDescription.
     * EV charging point connector type description
     * @return Returns the Internal String
     */
    @JsonGetter("EVChargePointConnectorTypeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVChargePointConnectorTypeDescription() {
        return this.eVChargePointConnectorTypeDescription;
    }

    /**
     * Getter for EVChargePointConnectorTypeDescription.
     * EV charging point connector type description
     * @return Returns the String
     */
    public String getEVChargePointConnectorTypeDescription() {
        return OptionalNullable.getFrom(eVChargePointConnectorTypeDescription);
    }

    /**
     * Setter for EVChargePointConnectorTypeDescription.
     * EV charging point connector type description
     * @param eVChargePointConnectorTypeDescription Value for String
     */
    @JsonSetter("EVChargePointConnectorTypeDescription")
    public void setEVChargePointConnectorTypeDescription(String eVChargePointConnectorTypeDescription) {
        this.eVChargePointConnectorTypeDescription = OptionalNullable.of(eVChargePointConnectorTypeDescription);
    }

    /**
     * UnSetter for EVChargePointConnectorTypeDescription.
     * EV charging point connector type description
     */
    public void unsetEVChargePointConnectorTypeDescription() {
        eVChargePointConnectorTypeDescription = null;
    }

    /**
     * Internal Getter for EVChargeDuration.
     * Ev charging Duration
     * @return Returns the Internal String
     */
    @JsonGetter("EVChargeDuration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVChargeDuration() {
        return this.eVChargeDuration;
    }

    /**
     * Getter for EVChargeDuration.
     * Ev charging Duration
     * @return Returns the String
     */
    public String getEVChargeDuration() {
        return OptionalNullable.getFrom(eVChargeDuration);
    }

    /**
     * Setter for EVChargeDuration.
     * Ev charging Duration
     * @param eVChargeDuration Value for String
     */
    @JsonSetter("EVChargeDuration")
    public void setEVChargeDuration(String eVChargeDuration) {
        this.eVChargeDuration = OptionalNullable.of(eVChargeDuration);
    }

    /**
     * UnSetter for EVChargeDuration.
     * Ev charging Duration
     */
    public void unsetEVChargeDuration() {
        eVChargeDuration = null;
    }

    /**
     * Internal Getter for EVChargeStartDate.
     * EvCharging start Date
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("EVChargeStartDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetEVChargeStartDate() {
        return this.eVChargeStartDate;
    }

    /**
     * Getter for EVChargeStartDate.
     * EvCharging start Date
     * @return Returns the LocalDate
     */
    public LocalDate getEVChargeStartDate() {
        return OptionalNullable.getFrom(eVChargeStartDate);
    }

    /**
     * Setter for EVChargeStartDate.
     * EvCharging start Date
     * @param eVChargeStartDate Value for LocalDate
     */
    @JsonSetter("EVChargeStartDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setEVChargeStartDate(LocalDate eVChargeStartDate) {
        this.eVChargeStartDate = OptionalNullable.of(eVChargeStartDate);
    }

    /**
     * UnSetter for EVChargeStartDate.
     * EvCharging start Date
     */
    public void unsetEVChargeStartDate() {
        eVChargeStartDate = null;
    }

    /**
     * Internal Getter for EVChargeStartTime.
     * EvCharging start time
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("EVChargeStartTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetEVChargeStartTime() {
        return this.eVChargeStartTime;
    }

    /**
     * Getter for EVChargeStartTime.
     * EvCharging start time
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getEVChargeStartTime() {
        return OptionalNullable.getFrom(eVChargeStartTime);
    }

    /**
     * Setter for EVChargeStartTime.
     * EvCharging start time
     * @param eVChargeStartTime Value for LocalDateTime
     */
    @JsonSetter("EVChargeStartTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setEVChargeStartTime(LocalDateTime eVChargeStartTime) {
        this.eVChargeStartTime = OptionalNullable.of(eVChargeStartTime);
    }

    /**
     * UnSetter for EVChargeStartTime.
     * EvCharging start time
     */
    public void unsetEVChargeStartTime() {
        eVChargeStartTime = null;
    }

    /**
     * Internal Getter for EVChargeEndDate.
     * EvCharging End Date
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("EVChargeEndDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetEVChargeEndDate() {
        return this.eVChargeEndDate;
    }

    /**
     * Getter for EVChargeEndDate.
     * EvCharging End Date
     * @return Returns the LocalDate
     */
    public LocalDate getEVChargeEndDate() {
        return OptionalNullable.getFrom(eVChargeEndDate);
    }

    /**
     * Setter for EVChargeEndDate.
     * EvCharging End Date
     * @param eVChargeEndDate Value for LocalDate
     */
    @JsonSetter("EVChargeEndDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setEVChargeEndDate(LocalDate eVChargeEndDate) {
        this.eVChargeEndDate = OptionalNullable.of(eVChargeEndDate);
    }

    /**
     * UnSetter for EVChargeEndDate.
     * EvCharging End Date
     */
    public void unsetEVChargeEndDate() {
        eVChargeEndDate = null;
    }

    /**
     * Internal Getter for EVChargeEndTime.
     * EvCharging End time
     * @return Returns the Internal LocalDateTime
     */
    @JsonGetter("EVChargeEndTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Rfc8601DateTimeSerializer.class)
    protected OptionalNullable<LocalDateTime> internalGetEVChargeEndTime() {
        return this.eVChargeEndTime;
    }

    /**
     * Getter for EVChargeEndTime.
     * EvCharging End time
     * @return Returns the LocalDateTime
     */
    public LocalDateTime getEVChargeEndTime() {
        return OptionalNullable.getFrom(eVChargeEndTime);
    }

    /**
     * Setter for EVChargeEndTime.
     * EvCharging End time
     * @param eVChargeEndTime Value for LocalDateTime
     */
    @JsonSetter("EVChargeEndTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setEVChargeEndTime(LocalDateTime eVChargeEndTime) {
        this.eVChargeEndTime = OptionalNullable.of(eVChargeEndTime);
    }

    /**
     * UnSetter for EVChargeEndTime.
     * EvCharging End time
     */
    public void unsetEVChargeEndTime() {
        eVChargeEndTime = null;
    }

    /**
     * Internal Getter for HostingCollectingCompanyNumber.
     * @return Returns the Internal Integer
     */
    @JsonGetter("HostingCollectingCompanyNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetHostingCollectingCompanyNumber() {
        return this.hostingCollectingCompanyNumber;
    }

    /**
     * Getter for HostingCollectingCompanyNumber.
     * @return Returns the Integer
     */
    public Integer getHostingCollectingCompanyNumber() {
        return OptionalNullable.getFrom(hostingCollectingCompanyNumber);
    }

    /**
     * Setter for HostingCollectingCompanyNumber.
     * @param hostingCollectingCompanyNumber Value for Integer
     */
    @JsonSetter("HostingCollectingCompanyNumber")
    public void setHostingCollectingCompanyNumber(Integer hostingCollectingCompanyNumber) {
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
    }

    /**
     * UnSetter for HostingCollectingCompanyNumber.
     */
    public void unsetHostingCollectingCompanyNumber() {
        hostingCollectingCompanyNumber = null;
    }

    /**
     * Internal Getter for TransactionId.
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * @return Returns the Double
     */
    public Double getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * @param transactionId Value for Double
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(Double transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Internal Getter for FuelOnly.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelOnly() {
        return this.fuelOnly;
    }

    /**
     * Getter for FuelOnly.
     * @return Returns the Boolean
     */
    public Boolean getFuelOnly() {
        return OptionalNullable.getFrom(fuelOnly);
    }

    /**
     * Setter for FuelOnly.
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = OptionalNullable.of(fuelOnly);
    }

    /**
     * UnSetter for FuelOnly.
     */
    public void unsetFuelOnly() {
        fuelOnly = null;
    }

    /**
     * Converts this PricedResponseData into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PricedResponseData [" + "accountName=" + accountName + ", accountId=" + accountId
                + ", accountNumber=" + accountNumber + ", accountShortName=" + accountShortName
                + ", additional1=" + additional1 + ", additional2=" + additional2 + ", additional3="
                + additional3 + ", additional4=" + additional4 + ", allowClearing=" + allowClearing
                + ", authorisationCode=" + authorisationCode + ", transactionStatus="
                + transactionStatus + ", driverName=" + driverName + ", cardExpiryPeriod="
                + cardExpiryPeriod + ", cardExpiry=" + cardExpiry + ", cardGroupId=" + cardGroupId
                + ", cardGroupName=" + cardGroupName + ", issuerCode=" + issuerCode + ", cardPAN="
                + cardPAN + ", releaseCode=" + releaseCode + ", cardSequenceNumber="
                + cardSequenceNumber + ", cardType=" + cardType + ", colCoCode=" + colCoCode
                + ", unitDiscountInvoiceCurrency=" + unitDiscountInvoiceCurrency
                + ", colCoExchangeRate=" + colCoExchangeRate + ", invoiceCurrencySymbol="
                + invoiceCurrencySymbol + ", correctionFlag=" + correctionFlag + ", cRMNumber="
                + cRMNumber + ", customerCountry=" + customerCountry + ", customerCurrencyCode="
                + customerCurrencyCode + ", customerCurrencySymbol=" + customerCurrencySymbol
                + ", rebateonNetAmountInCustomerCurrency=" + rebateonNetAmountInCustomerCurrency
                + ", effectiveDiscountInCustomerCurrency=" + effectiveDiscountInCustomerCurrency
                + ", effectiveUnitDiscountInCustomerCurrency="
                + effectiveUnitDiscountInCustomerCurrency + ", unitPriceInInvoiceCurrency="
                + unitPriceInInvoiceCurrency + ", invoiceTax=" + invoiceTax
                + ", invoiceGrossAmount=" + invoiceGrossAmount + ", invoiceNetAmount="
                + invoiceNetAmount + ", vATonNetAmountInCustomerCurrency="
                + vATonNetAmountInCustomerCurrency + ", customerRetailPriceUnitGross="
                + customerRetailPriceUnitGross + ", customerRetailValueTotalGross="
                + customerRetailValueTotalGross + ", customerRetailValueTotalNet="
                + customerRetailValueTotalNet + ", transactionTypeDescription="
                + transactionTypeDescription + ", rebateonNetAmountInTransactionCurrency="
                + rebateonNetAmountInTransactionCurrency + ", effectiveDiscountInTrxCurrency="
                + effectiveDiscountInTrxCurrency + ", delCoToColCoExchangeRate="
                + delCoToColCoExchangeRate + ", cards=" + cards
                + ", unitDiscountTransactionCurrency=" + unitDiscountTransactionCurrency
                + ", transactionGrossAmount=" + transactionGrossAmount + ", transactionNetAmount="
                + transactionNetAmount + ", transactionTax=" + transactionTax + ", vATonNetAmount="
                + vATonNetAmount + ", delcoListPriceUnitNet=" + delcoListPriceUnitNet
                + ", delcoRetailPriceUnitGross=" + delcoRetailPriceUnitGross
                + ", unitPriceInTransactionCurrency=" + unitPriceInTransactionCurrency
                + ", delcoRetailPriceUnitNet=" + delcoRetailPriceUnitNet
                + ", delcoRetailValueTotalGross=" + delcoRetailValueTotalGross
                + ", delcoRetailValueTotalNet=" + delcoRetailValueTotalNet
                + ", transactionCurrencySymbol=" + transactionCurrencySymbol + ", discountType="
                + discountType + ", disputeStatus=" + disputeStatus + ", isShellSite=" + isShellSite
                + ", fleetIdInput=" + fleetIdInput + ", incomingProductCode=" + incomingProductCode
                + ", postingDate=" + postingDate + ", postingTime=" + postingTime + ", productCode="
                + productCode + ", productName=" + productName + ", productGroupId="
                + productGroupId + ", incomingCurrencyCode=" + incomingCurrencyCode
                + ", incomingSiteDescription=" + incomingSiteDescription + ", location=" + location
                + ", siteName=" + siteName + ", siteCode=" + siteCode + ", incomingSiteNumber="
                + incomingSiteNumber + ", invoiceCurrencyCode=" + invoiceCurrencyCode
                + ", invoiceDate=" + invoiceDate + ", invoiceNumber=" + invoiceNumber
                + ", fuelProduct=" + fuelProduct + ", vATApplicable=" + vATApplicable
                + ", payerName=" + payerName + ", payerNumber=" + payerNumber
                + ", parentCustomerNumber=" + parentCustomerNumber + ", payerGroup=" + payerGroup
                + ", payerGroupName=" + payerGroupName + ", checkDigit=" + checkDigit
                + ", netInvoiceIndicator=" + netInvoiceIndicator + ", delcoCode=" + delcoCode
                + ", networkCode=" + networkCode + ", purchasedInCountry=" + purchasedInCountry
                + ", siteCountry=" + siteCountry + ", vATCountry=" + vATCountry + ", delcoName="
                + delcoName + ", network=" + network + ", odometerInput=" + odometerInput
                + ", originalSalesItemId=" + originalSalesItemId + ", fleetIDDescription="
                + fleetIDDescription + ", parentCustomerId=" + parentCustomerId + ", pINIndicator="
                + pINIndicator + ", productGroupName=" + productGroupName
                + ", purchasedInCountryCode=" + purchasedInCountryCode + ", quantity=" + quantity
                + ", rebateRate=" + rebateRate + ", receiptNumber=" + receiptNumber
                + ", refundFlag=" + refundFlag + ", siteGroupId=" + siteGroupId + ", siteGroupName="
                + siteGroupName + ", latitude=" + latitude + ", longitude=" + longitude
                + ", delCoExchangeRate=" + delCoExchangeRate + ", euroRebateAmount="
                + euroRebateAmount + ", netEuroAmount=" + netEuroAmount + ", euroVATAmount="
                + euroVATAmount + ", parentCustomerName=" + parentCustomerName + ", isInvoiced="
                + isInvoiced + ", transactionCurrencyCode=" + transactionCurrencyCode
                + ", creditDebitCode=" + creditDebitCode + ", transactionDate=" + transactionDate
                + ", transactionTime=" + transactionTime + ", transactionItemId="
                + transactionItemId + ", trnIdentifier=" + trnIdentifier + ", type=" + type
                + ", transactionLine=" + transactionLine + ", transactionType=" + transactionType
                + ", uTCOffset=" + uTCOffset + ", vATCategory=" + vATCategory + ", vATRate="
                + vATRate + ", vehicleRegistration=" + vehicleRegistration + ", isCancelled="
                + isCancelled + ", colCoGrossAmount=" + colCoGrossAmount + ", colCoNetAmount="
                + colCoNetAmount + ", colCoVATAmount=" + colCoVATAmount
                + ", originalCurrencySymbol=" + originalCurrencySymbol + ", originalCurrencyCode="
                + originalCurrencyCode + ", originalVATAmount=" + originalVATAmount
                + ", embossText=" + embossText + ", originalExchangeRate=" + originalExchangeRate
                + ", originalTransactionItemInvoiceDate=" + originalTransactionItemInvoiceDate
                + ", feeTypeId=" + feeTypeId + ", lineItemDescription=" + lineItemDescription
                + ", feeRuleDescription=" + feeRuleDescription + ", frequency=" + frequency
                + ", feeRuleId=" + feeRuleId + ", systemEntryDate=" + systemEntryDate
                + ", systemEntryTime=" + systemEntryTime + ", isManual=" + isManual
                + ", originalTransactionItemId=" + originalTransactionItemId
                + ", originalTransactionItemInvoiceNumber=" + originalTransactionItemInvoiceNumber
                + ", originalTransactionItemInvoiceId=" + originalTransactionItemInvoiceId
                + ", payerShortName=" + payerShortName + ", reverseCharge=" + reverseCharge
                + ", originalGrossAmount=" + originalGrossAmount + ", originalNetAmount="
                + originalNetAmount + ", unitOfMeasure=" + unitOfMeasure + ", roadType=" + roadType
                + ", customerCountryIsoCode=" + customerCountryIsoCode + ", eVOperator="
                + eVOperator + ", eVSerialId=" + eVSerialId + ", eVChargePointSerial="
                + eVChargePointSerial + ", eVChargePointConnectorType=" + eVChargePointConnectorType
                + ", eVChargePointConnectorTypeDescription=" + eVChargePointConnectorTypeDescription
                + ", eVChargeDuration=" + eVChargeDuration + ", eVChargeStartDate="
                + eVChargeStartDate + ", eVChargeStartTime=" + eVChargeStartTime
                + ", eVChargeEndDate=" + eVChargeEndDate + ", eVChargeEndTime=" + eVChargeEndTime
                + ", hostingCollectingCompanyNumber=" + hostingCollectingCompanyNumber
                + ", transactionId=" + transactionId + ", fuelOnly=" + fuelOnly + "]";
    }

    /**
     * Builds a new {@link PricedResponseData.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PricedResponseData.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .colCoExchangeRate(getColCoExchangeRate())
                .cards(getCards())
                .isShellSite(getIsShellSite())
                .refundFlag(getRefundFlag());
        builder.accountName = internalGetAccountName();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.additional1 = internalGetAdditional1();
        builder.additional2 = internalGetAdditional2();
        builder.additional3 = internalGetAdditional3();
        builder.additional4 = internalGetAdditional4();
        builder.allowClearing = internalGetAllowClearing();
        builder.authorisationCode = internalGetAuthorisationCode();
        builder.transactionStatus = internalGetTransactionStatus();
        builder.driverName = internalGetDriverName();
        builder.cardExpiryPeriod = internalGetCardExpiryPeriod();
        builder.cardExpiry = internalGetCardExpiry();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.issuerCode = internalGetIssuerCode();
        builder.cardPAN = internalGetCardPAN();
        builder.releaseCode = internalGetReleaseCode();
        builder.cardSequenceNumber = internalGetCardSequenceNumber();
        builder.cardType = internalGetCardType();
        builder.colCoCode = internalGetColCoCode();
        builder.unitDiscountInvoiceCurrency = internalGetUnitDiscountInvoiceCurrency();
        builder.invoiceCurrencySymbol = internalGetInvoiceCurrencySymbol();
        builder.correctionFlag = internalGetCorrectionFlag();
        builder.cRMNumber = internalGetCRMNumber();
        builder.customerCountry = internalGetCustomerCountry();
        builder.customerCurrencyCode = internalGetCustomerCurrencyCode();
        builder.customerCurrencySymbol = internalGetCustomerCurrencySymbol();
        builder.rebateonNetAmountInCustomerCurrency =
                internalGetRebateonNetAmountInCustomerCurrency();
        builder.effectiveDiscountInCustomerCurrency =
                internalGetEffectiveDiscountInCustomerCurrency();
        builder.effectiveUnitDiscountInCustomerCurrency =
                internalGetEffectiveUnitDiscountInCustomerCurrency();
        builder.unitPriceInInvoiceCurrency = internalGetUnitPriceInInvoiceCurrency();
        builder.invoiceTax = internalGetInvoiceTax();
        builder.invoiceGrossAmount = internalGetInvoiceGrossAmount();
        builder.invoiceNetAmount = internalGetInvoiceNetAmount();
        builder.vATonNetAmountInCustomerCurrency = internalGetVATonNetAmountInCustomerCurrency();
        builder.customerRetailPriceUnitGross = internalGetCustomerRetailPriceUnitGross();
        builder.customerRetailValueTotalGross = internalGetCustomerRetailValueTotalGross();
        builder.customerRetailValueTotalNet = internalGetCustomerRetailValueTotalNet();
        builder.transactionTypeDescription = internalGetTransactionTypeDescription();
        builder.rebateonNetAmountInTransactionCurrency =
                internalGetRebateonNetAmountInTransactionCurrency();
        builder.effectiveDiscountInTrxCurrency = internalGetEffectiveDiscountInTrxCurrency();
        builder.delCoToColCoExchangeRate = internalGetDelCoToColCoExchangeRate();
        builder.unitDiscountTransactionCurrency = internalGetUnitDiscountTransactionCurrency();
        builder.transactionGrossAmount = internalGetTransactionGrossAmount();
        builder.transactionNetAmount = internalGetTransactionNetAmount();
        builder.transactionTax = internalGetTransactionTax();
        builder.vATonNetAmount = internalGetVATonNetAmount();
        builder.delcoListPriceUnitNet = internalGetDelcoListPriceUnitNet();
        builder.delcoRetailPriceUnitGross = internalGetDelcoRetailPriceUnitGross();
        builder.unitPriceInTransactionCurrency = internalGetUnitPriceInTransactionCurrency();
        builder.delcoRetailPriceUnitNet = internalGetDelcoRetailPriceUnitNet();
        builder.delcoRetailValueTotalGross = internalGetDelcoRetailValueTotalGross();
        builder.delcoRetailValueTotalNet = internalGetDelcoRetailValueTotalNet();
        builder.transactionCurrencySymbol = internalGetTransactionCurrencySymbol();
        builder.discountType = internalGetDiscountType();
        builder.disputeStatus = internalGetDisputeStatus();
        builder.fleetIdInput = internalGetFleetIdInput();
        builder.incomingProductCode = internalGetIncomingProductCode();
        builder.postingDate = internalGetPostingDate();
        builder.postingTime = internalGetPostingTime();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.productGroupId = internalGetProductGroupId();
        builder.incomingCurrencyCode = internalGetIncomingCurrencyCode();
        builder.incomingSiteDescription = internalGetIncomingSiteDescription();
        builder.location = internalGetLocation();
        builder.siteName = internalGetSiteName();
        builder.siteCode = internalGetSiteCode();
        builder.incomingSiteNumber = internalGetIncomingSiteNumber();
        builder.invoiceCurrencyCode = internalGetInvoiceCurrencyCode();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.fuelProduct = internalGetFuelProduct();
        builder.vATApplicable = internalGetVATApplicable();
        builder.payerName = internalGetPayerName();
        builder.payerNumber = internalGetPayerNumber();
        builder.parentCustomerNumber = internalGetParentCustomerNumber();
        builder.payerGroup = internalGetPayerGroup();
        builder.payerGroupName = internalGetPayerGroupName();
        builder.checkDigit = internalGetCheckDigit();
        builder.netInvoiceIndicator = internalGetNetInvoiceIndicator();
        builder.delcoCode = internalGetDelcoCode();
        builder.networkCode = internalGetNetworkCode();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.siteCountry = internalGetSiteCountry();
        builder.vATCountry = internalGetVATCountry();
        builder.delcoName = internalGetDelcoName();
        builder.network = internalGetNetwork();
        builder.odometerInput = internalGetOdometerInput();
        builder.originalSalesItemId = internalGetOriginalSalesItemId();
        builder.fleetIDDescription = internalGetFleetIDDescription();
        builder.parentCustomerId = internalGetParentCustomerId();
        builder.pINIndicator = internalGetPINIndicator();
        builder.productGroupName = internalGetProductGroupName();
        builder.purchasedInCountryCode = internalGetPurchasedInCountryCode();
        builder.quantity = internalGetQuantity();
        builder.rebateRate = internalGetRebateRate();
        builder.receiptNumber = internalGetReceiptNumber();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.siteGroupName = internalGetSiteGroupName();
        builder.latitude = internalGetLatitude();
        builder.longitude = internalGetLongitude();
        builder.delCoExchangeRate = internalGetDelCoExchangeRate();
        builder.euroRebateAmount = internalGetEuroRebateAmount();
        builder.netEuroAmount = internalGetNetEuroAmount();
        builder.euroVATAmount = internalGetEuroVATAmount();
        builder.parentCustomerName = internalGetParentCustomerName();
        builder.isInvoiced = internalGetIsInvoiced();
        builder.transactionCurrencyCode = internalGetTransactionCurrencyCode();
        builder.creditDebitCode = internalGetCreditDebitCode();
        builder.transactionDate = internalGetTransactionDate();
        builder.transactionTime = internalGetTransactionTime();
        builder.transactionItemId = internalGetTransactionItemId();
        builder.trnIdentifier = internalGetTrnIdentifier();
        builder.type = internalGetType();
        builder.transactionLine = internalGetTransactionLine();
        builder.transactionType = internalGetTransactionType();
        builder.uTCOffset = internalGetUTCOffset();
        builder.vATCategory = internalGetVATCategory();
        builder.vATRate = internalGetVATRate();
        builder.vehicleRegistration = internalGetVehicleRegistration();
        builder.isCancelled = internalGetIsCancelled();
        builder.colCoGrossAmount = internalGetColCoGrossAmount();
        builder.colCoNetAmount = internalGetColCoNetAmount();
        builder.colCoVATAmount = internalGetColCoVATAmount();
        builder.originalCurrencySymbol = internalGetOriginalCurrencySymbol();
        builder.originalCurrencyCode = internalGetOriginalCurrencyCode();
        builder.originalVATAmount = internalGetOriginalVATAmount();
        builder.embossText = internalGetEmbossText();
        builder.originalExchangeRate = internalGetOriginalExchangeRate();
        builder.originalTransactionItemInvoiceDate =
                internalGetOriginalTransactionItemInvoiceDate();
        builder.feeTypeId = internalGetFeeTypeId();
        builder.lineItemDescription = internalGetLineItemDescription();
        builder.feeRuleDescription = internalGetFeeRuleDescription();
        builder.frequency = internalGetFrequency();
        builder.feeRuleId = internalGetFeeRuleId();
        builder.systemEntryDate = internalGetSystemEntryDate();
        builder.systemEntryTime = internalGetSystemEntryTime();
        builder.isManual = internalGetIsManual();
        builder.originalTransactionItemId = internalGetOriginalTransactionItemId();
        builder.originalTransactionItemInvoiceNumber =
                internalGetOriginalTransactionItemInvoiceNumber();
        builder.originalTransactionItemInvoiceId = internalGetOriginalTransactionItemInvoiceId();
        builder.payerShortName = internalGetPayerShortName();
        builder.reverseCharge = internalGetReverseCharge();
        builder.originalGrossAmount = internalGetOriginalGrossAmount();
        builder.originalNetAmount = internalGetOriginalNetAmount();
        builder.unitOfMeasure = internalGetUnitOfMeasure();
        builder.roadType = internalGetRoadType();
        builder.customerCountryIsoCode = internalGetCustomerCountryIsoCode();
        builder.eVOperator = internalGetEVOperator();
        builder.eVSerialId = internalGetEVSerialId();
        builder.eVChargePointSerial = internalGetEVChargePointSerial();
        builder.eVChargePointConnectorType = internalGetEVChargePointConnectorType();
        builder.eVChargePointConnectorTypeDescription =
                internalGetEVChargePointConnectorTypeDescription();
        builder.eVChargeDuration = internalGetEVChargeDuration();
        builder.eVChargeStartDate = internalGetEVChargeStartDate();
        builder.eVChargeStartTime = internalGetEVChargeStartTime();
        builder.eVChargeEndDate = internalGetEVChargeEndDate();
        builder.eVChargeEndTime = internalGetEVChargeEndTime();
        builder.hostingCollectingCompanyNumber = internalGetHostingCollectingCompanyNumber();
        builder.transactionId = internalGetTransactionId();
        builder.fuelOnly = internalGetFuelOnly();
        return builder;
    }

    /**
     * Class to build instances of {@link PricedResponseData}.
     */
    public static class Builder {
        private OptionalNullable<String> accountName;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<String> additional1;
        private OptionalNullable<String> additional2;
        private OptionalNullable<String> additional3;
        private OptionalNullable<String> additional4;
        private OptionalNullable<String> allowClearing;
        private OptionalNullable<Integer> authorisationCode;
        private OptionalNullable<String> transactionStatus;
        private OptionalNullable<String> driverName;
        private OptionalNullable<Integer> cardExpiryPeriod;
        private OptionalNullable<LocalDate> cardExpiry;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<Integer> issuerCode;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<Integer> releaseCode;
        private OptionalNullable<Integer> cardSequenceNumber;
        private OptionalNullable<String> cardType;
        private OptionalNullable<String> colCoCode;
        private OptionalNullable<Double> unitDiscountInvoiceCurrency;
        private Double colCoExchangeRate;
        private OptionalNullable<String> invoiceCurrencySymbol;
        private OptionalNullable<Boolean> correctionFlag;
        private OptionalNullable<Double> cRMNumber;
        private OptionalNullable<String> customerCountry;
        private OptionalNullable<String> customerCurrencyCode;
        private OptionalNullable<String> customerCurrencySymbol;
        private OptionalNullable<Double> rebateonNetAmountInCustomerCurrency;
        private OptionalNullable<Double> effectiveDiscountInCustomerCurrency;
        private OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency;
        private OptionalNullable<Double> unitPriceInInvoiceCurrency;
        private OptionalNullable<Double> invoiceTax;
        private OptionalNullable<Double> invoiceGrossAmount;
        private OptionalNullable<Double> invoiceNetAmount;
        private OptionalNullable<Double> vATonNetAmountInCustomerCurrency;
        private OptionalNullable<Double> customerRetailPriceUnitGross;
        private OptionalNullable<Double> customerRetailValueTotalGross;
        private OptionalNullable<Double> customerRetailValueTotalNet;
        private OptionalNullable<Double> transactionTypeDescription;
        private OptionalNullable<Double> rebateonNetAmountInTransactionCurrency;
        private OptionalNullable<Double> effectiveDiscountInTrxCurrency;
        private OptionalNullable<Integer> delCoToColCoExchangeRate;
        private List<Integer> cards;
        private OptionalNullable<Double> unitDiscountTransactionCurrency;
        private OptionalNullable<Double> transactionGrossAmount;
        private OptionalNullable<Double> transactionNetAmount;
        private OptionalNullable<Double> transactionTax;
        private OptionalNullable<Double> vATonNetAmount;
        private OptionalNullable<Double> delcoListPriceUnitNet;
        private OptionalNullable<Double> delcoRetailPriceUnitGross;
        private OptionalNullable<Double> unitPriceInTransactionCurrency;
        private OptionalNullable<Double> delcoRetailPriceUnitNet;
        private OptionalNullable<Double> delcoRetailValueTotalGross;
        private OptionalNullable<Double> delcoRetailValueTotalNet;
        private OptionalNullable<String> transactionCurrencySymbol;
        private OptionalNullable<String> discountType;
        private OptionalNullable<Boolean> disputeStatus = OptionalNullable.of(false);
        private Boolean isShellSite = false;
        private OptionalNullable<String> fleetIdInput;
        private OptionalNullable<Integer> incomingProductCode;
        private OptionalNullable<LocalDate> postingDate;
        private OptionalNullable<LocalDateTime> postingTime;
        private OptionalNullable<Integer> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<Integer> productGroupId;
        private OptionalNullable<String> incomingCurrencyCode;
        private OptionalNullable<String> incomingSiteDescription;
        private OptionalNullable<String> location;
        private OptionalNullable<String> siteName;
        private OptionalNullable<Integer> siteCode;
        private OptionalNullable<Integer> incomingSiteNumber;
        private OptionalNullable<String> invoiceCurrencyCode;
        private OptionalNullable<LocalDate> invoiceDate;
        private OptionalNullable<Double> invoiceNumber;
        private OptionalNullable<Boolean> fuelProduct;
        private OptionalNullable<String> vATApplicable;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> parentCustomerNumber;
        private OptionalNullable<String> payerGroup;
        private OptionalNullable<String> payerGroupName;
        private OptionalNullable<Integer> checkDigit;
        private OptionalNullable<String> netInvoiceIndicator;
        private OptionalNullable<Integer> delcoCode;
        private OptionalNullable<Integer> networkCode;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<String> siteCountry;
        private OptionalNullable<String> vATCountry;
        private OptionalNullable<String> delcoName;
        private OptionalNullable<String> network;
        private OptionalNullable<Integer> odometerInput;
        private OptionalNullable<String> originalSalesItemId;
        private OptionalNullable<String> fleetIDDescription;
        private OptionalNullable<Integer> parentCustomerId;
        private OptionalNullable<String> pINIndicator;
        private OptionalNullable<String> productGroupName;
        private OptionalNullable<String> purchasedInCountryCode;
        private OptionalNullable<Double> quantity;
        private OptionalNullable<Double> rebateRate;
        private OptionalNullable<Integer> receiptNumber;
        private PricedTransactionRespV2RefundFlagEnum refundFlag;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> siteGroupName;
        private OptionalNullable<Double> latitude;
        private OptionalNullable<Double> longitude;
        private OptionalNullable<Double> delCoExchangeRate;
        private OptionalNullable<Double> euroRebateAmount;
        private OptionalNullable<Double> netEuroAmount;
        private OptionalNullable<Double> euroVATAmount;
        private OptionalNullable<String> parentCustomerName;
        private OptionalNullable<Boolean> isInvoiced = OptionalNullable.of(false);
        private OptionalNullable<String> transactionCurrencyCode;
        private OptionalNullable<String> creditDebitCode;
        private OptionalNullable<LocalDate> transactionDate;
        private OptionalNullable<LocalDateTime> transactionTime;
        private OptionalNullable<String> transactionItemId;
        private OptionalNullable<String> trnIdentifier;
        private OptionalNullable<String> type;
        private OptionalNullable<Integer> transactionLine;
        private OptionalNullable<String> transactionType;
        private OptionalNullable<String> uTCOffset;
        private OptionalNullable<String> vATCategory;
        private OptionalNullable<Double> vATRate;
        private OptionalNullable<String> vehicleRegistration;
        private OptionalNullable<String> isCancelled;
        private OptionalNullable<Double> colCoGrossAmount;
        private OptionalNullable<Double> colCoNetAmount;
        private OptionalNullable<Double> colCoVATAmount;
        private OptionalNullable<String> originalCurrencySymbol;
        private OptionalNullable<String> originalCurrencyCode;
        private OptionalNullable<Double> originalVATAmount;
        private OptionalNullable<String> embossText;
        private OptionalNullable<Double> originalExchangeRate;
        private OptionalNullable<LocalDate> originalTransactionItemInvoiceDate;
        private OptionalNullable<Integer> feeTypeId;
        private OptionalNullable<Boolean> lineItemDescription = OptionalNullable.of(false);
        private OptionalNullable<String> feeRuleDescription;
        private OptionalNullable<Integer> frequency;
        private OptionalNullable<Integer> feeRuleId;
        private OptionalNullable<LocalDate> systemEntryDate;
        private OptionalNullable<LocalDateTime> systemEntryTime;
        private OptionalNullable<String> isManual;
        private OptionalNullable<String> originalTransactionItemId;
        private OptionalNullable<Integer> originalTransactionItemInvoiceNumber;
        private OptionalNullable<Integer> originalTransactionItemInvoiceId;
        private OptionalNullable<String> payerShortName;
        private OptionalNullable<String> reverseCharge;
        private OptionalNullable<Double> originalGrossAmount;
        private OptionalNullable<Double> originalNetAmount;
        private OptionalNullable<String> unitOfMeasure;
        private OptionalNullable<String> roadType;
        private OptionalNullable<String> customerCountryIsoCode;
        private OptionalNullable<String> eVOperator;
        private OptionalNullable<String> eVSerialId;
        private OptionalNullable<String> eVChargePointSerial;
        private OptionalNullable<Integer> eVChargePointConnectorType;
        private OptionalNullable<String> eVChargePointConnectorTypeDescription;
        private OptionalNullable<String> eVChargeDuration;
        private OptionalNullable<LocalDate> eVChargeStartDate;
        private OptionalNullable<LocalDateTime> eVChargeStartTime;
        private OptionalNullable<LocalDate> eVChargeEndDate;
        private OptionalNullable<LocalDateTime> eVChargeEndTime;
        private OptionalNullable<Integer> hostingCollectingCompanyNumber;
        private OptionalNullable<Double> transactionId;
        private OptionalNullable<Boolean> fuelOnly;



        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for additional1.
         * @param  additional1  String value for additional1.
         * @return Builder
         */
        public Builder additional1(String additional1) {
            this.additional1 = OptionalNullable.of(additional1);
            return this;
        }

        /**
         * UnSetter for additional1.
         * @return Builder
         */
        public Builder unsetAdditional1() {
            additional1 = null;
            return this;
        }

        /**
         * Setter for additional2.
         * @param  additional2  String value for additional2.
         * @return Builder
         */
        public Builder additional2(String additional2) {
            this.additional2 = OptionalNullable.of(additional2);
            return this;
        }

        /**
         * UnSetter for additional2.
         * @return Builder
         */
        public Builder unsetAdditional2() {
            additional2 = null;
            return this;
        }

        /**
         * Setter for additional3.
         * @param  additional3  String value for additional3.
         * @return Builder
         */
        public Builder additional3(String additional3) {
            this.additional3 = OptionalNullable.of(additional3);
            return this;
        }

        /**
         * UnSetter for additional3.
         * @return Builder
         */
        public Builder unsetAdditional3() {
            additional3 = null;
            return this;
        }

        /**
         * Setter for additional4.
         * @param  additional4  String value for additional4.
         * @return Builder
         */
        public Builder additional4(String additional4) {
            this.additional4 = OptionalNullable.of(additional4);
            return this;
        }

        /**
         * UnSetter for additional4.
         * @return Builder
         */
        public Builder unsetAdditional4() {
            additional4 = null;
            return this;
        }

        /**
         * Setter for allowClearing.
         * @param  allowClearing  String value for allowClearing.
         * @return Builder
         */
        public Builder allowClearing(String allowClearing) {
            this.allowClearing = OptionalNullable.of(allowClearing);
            return this;
        }

        /**
         * UnSetter for allowClearing.
         * @return Builder
         */
        public Builder unsetAllowClearing() {
            allowClearing = null;
            return this;
        }

        /**
         * Setter for authorisationCode.
         * @param  authorisationCode  Integer value for authorisationCode.
         * @return Builder
         */
        public Builder authorisationCode(Integer authorisationCode) {
            this.authorisationCode = OptionalNullable.of(authorisationCode);
            return this;
        }

        /**
         * UnSetter for authorisationCode.
         * @return Builder
         */
        public Builder unsetAuthorisationCode() {
            authorisationCode = null;
            return this;
        }

        /**
         * Setter for transactionStatus.
         * @param  transactionStatus  String value for transactionStatus.
         * @return Builder
         */
        public Builder transactionStatus(String transactionStatus) {
            this.transactionStatus = OptionalNullable.of(transactionStatus);
            return this;
        }

        /**
         * UnSetter for transactionStatus.
         * @return Builder
         */
        public Builder unsetTransactionStatus() {
            transactionStatus = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for cardExpiryPeriod.
         * @param  cardExpiryPeriod  Integer value for cardExpiryPeriod.
         * @return Builder
         */
        public Builder cardExpiryPeriod(Integer cardExpiryPeriod) {
            this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
            return this;
        }

        /**
         * UnSetter for cardExpiryPeriod.
         * @return Builder
         */
        public Builder unsetCardExpiryPeriod() {
            cardExpiryPeriod = null;
            return this;
        }

        /**
         * Setter for cardExpiry.
         * @param  cardExpiry  LocalDate value for cardExpiry.
         * @return Builder
         */
        public Builder cardExpiry(LocalDate cardExpiry) {
            this.cardExpiry = OptionalNullable.of(cardExpiry);
            return this;
        }

        /**
         * UnSetter for cardExpiry.
         * @return Builder
         */
        public Builder unsetCardExpiry() {
            cardExpiry = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for issuerCode.
         * @param  issuerCode  Integer value for issuerCode.
         * @return Builder
         */
        public Builder issuerCode(Integer issuerCode) {
            this.issuerCode = OptionalNullable.of(issuerCode);
            return this;
        }

        /**
         * UnSetter for issuerCode.
         * @return Builder
         */
        public Builder unsetIssuerCode() {
            issuerCode = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for releaseCode.
         * @param  releaseCode  Integer value for releaseCode.
         * @return Builder
         */
        public Builder releaseCode(Integer releaseCode) {
            this.releaseCode = OptionalNullable.of(releaseCode);
            return this;
        }

        /**
         * UnSetter for releaseCode.
         * @return Builder
         */
        public Builder unsetReleaseCode() {
            releaseCode = null;
            return this;
        }

        /**
         * Setter for cardSequenceNumber.
         * @param  cardSequenceNumber  Integer value for cardSequenceNumber.
         * @return Builder
         */
        public Builder cardSequenceNumber(Integer cardSequenceNumber) {
            this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
            return this;
        }

        /**
         * UnSetter for cardSequenceNumber.
         * @return Builder
         */
        public Builder unsetCardSequenceNumber() {
            cardSequenceNumber = null;
            return this;
        }

        /**
         * Setter for cardType.
         * @param  cardType  String value for cardType.
         * @return Builder
         */
        public Builder cardType(String cardType) {
            this.cardType = OptionalNullable.of(cardType);
            return this;
        }

        /**
         * UnSetter for cardType.
         * @return Builder
         */
        public Builder unsetCardType() {
            cardType = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  String value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(String colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for unitDiscountInvoiceCurrency.
         * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unitDiscountInvoiceCurrency(Double unitDiscountInvoiceCurrency) {
            this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountInvoiceCurrency() {
            unitDiscountInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for colCoExchangeRate.
         * @param  colCoExchangeRate  Double value for colCoExchangeRate.
         * @return Builder
         */
        public Builder colCoExchangeRate(Double colCoExchangeRate) {
            this.colCoExchangeRate = colCoExchangeRate;
            return this;
        }

        /**
         * Setter for invoiceCurrencySymbol.
         * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder invoiceCurrencySymbol(String invoiceCurrencySymbol) {
            this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencySymbol() {
            invoiceCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for correctionFlag.
         * @param  correctionFlag  Boolean value for correctionFlag.
         * @return Builder
         */
        public Builder correctionFlag(Boolean correctionFlag) {
            this.correctionFlag = OptionalNullable.of(correctionFlag);
            return this;
        }

        /**
         * UnSetter for correctionFlag.
         * @return Builder
         */
        public Builder unsetCorrectionFlag() {
            correctionFlag = null;
            return this;
        }

        /**
         * Setter for cRMNumber.
         * @param  cRMNumber  Double value for cRMNumber.
         * @return Builder
         */
        public Builder cRMNumber(Double cRMNumber) {
            this.cRMNumber = OptionalNullable.of(cRMNumber);
            return this;
        }

        /**
         * UnSetter for cRMNumber.
         * @return Builder
         */
        public Builder unsetCRMNumber() {
            cRMNumber = null;
            return this;
        }

        /**
         * Setter for customerCountry.
         * @param  customerCountry  String value for customerCountry.
         * @return Builder
         */
        public Builder customerCountry(String customerCountry) {
            this.customerCountry = OptionalNullable.of(customerCountry);
            return this;
        }

        /**
         * UnSetter for customerCountry.
         * @return Builder
         */
        public Builder unsetCustomerCountry() {
            customerCountry = null;
            return this;
        }

        /**
         * Setter for customerCurrencyCode.
         * @param  customerCurrencyCode  String value for customerCurrencyCode.
         * @return Builder
         */
        public Builder customerCurrencyCode(String customerCurrencyCode) {
            this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
            return this;
        }

        /**
         * UnSetter for customerCurrencyCode.
         * @return Builder
         */
        public Builder unsetCustomerCurrencyCode() {
            customerCurrencyCode = null;
            return this;
        }

        /**
         * Setter for customerCurrencySymbol.
         * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
         * @return Builder
         */
        public Builder customerCurrencySymbol(String customerCurrencySymbol) {
            this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for customerCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCustomerCurrencySymbol() {
            customerCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for rebateonNetAmountInCustomerCurrency.
         * @param  rebateonNetAmountInCustomerCurrency  Double value for
         *         rebateonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder rebateonNetAmountInCustomerCurrency(
                Double rebateonNetAmountInCustomerCurrency) {
            this.rebateonNetAmountInCustomerCurrency =
                    OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for rebateonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetRebateonNetAmountInCustomerCurrency() {
            rebateonNetAmountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInCustomerCurrency.
         * @param  effectiveDiscountInCustomerCurrency  Double value for
         *         effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInCustomerCurrency(
                Double effectiveDiscountInCustomerCurrency) {
            this.effectiveDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInCustomerCurrency() {
            effectiveDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for effectiveUnitDiscountInCustomerCurrency.
         * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
         *         effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveUnitDiscountInCustomerCurrency(
                Double effectiveUnitDiscountInCustomerCurrency) {
            this.effectiveUnitDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveUnitDiscountInCustomerCurrency() {
            effectiveUnitDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for unitPriceInInvoiceCurrency.
         * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unitPriceInInvoiceCurrency(Double unitPriceInInvoiceCurrency) {
            this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInInvoiceCurrency() {
            unitPriceInInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for invoiceTax.
         * @param  invoiceTax  Double value for invoiceTax.
         * @return Builder
         */
        public Builder invoiceTax(Double invoiceTax) {
            this.invoiceTax = OptionalNullable.of(invoiceTax);
            return this;
        }

        /**
         * UnSetter for invoiceTax.
         * @return Builder
         */
        public Builder unsetInvoiceTax() {
            invoiceTax = null;
            return this;
        }

        /**
         * Setter for invoiceGrossAmount.
         * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
         * @return Builder
         */
        public Builder invoiceGrossAmount(Double invoiceGrossAmount) {
            this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
            return this;
        }

        /**
         * UnSetter for invoiceGrossAmount.
         * @return Builder
         */
        public Builder unsetInvoiceGrossAmount() {
            invoiceGrossAmount = null;
            return this;
        }

        /**
         * Setter for invoiceNetAmount.
         * @param  invoiceNetAmount  Double value for invoiceNetAmount.
         * @return Builder
         */
        public Builder invoiceNetAmount(Double invoiceNetAmount) {
            this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
            return this;
        }

        /**
         * UnSetter for invoiceNetAmount.
         * @return Builder
         */
        public Builder unsetInvoiceNetAmount() {
            invoiceNetAmount = null;
            return this;
        }

        /**
         * Setter for vATonNetAmountInCustomerCurrency.
         * @param  vATonNetAmountInCustomerCurrency  Double value for
         *         vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder vATonNetAmountInCustomerCurrency(Double vATonNetAmountInCustomerCurrency) {
            this.vATonNetAmountInCustomerCurrency =
                    OptionalNullable.of(vATonNetAmountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetVATonNetAmountInCustomerCurrency() {
            vATonNetAmountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for customerRetailPriceUnitGross.
         * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
         * @return Builder
         */
        public Builder customerRetailPriceUnitGross(Double customerRetailPriceUnitGross) {
            this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
            return this;
        }

        /**
         * UnSetter for customerRetailPriceUnitGross.
         * @return Builder
         */
        public Builder unsetCustomerRetailPriceUnitGross() {
            customerRetailPriceUnitGross = null;
            return this;
        }

        /**
         * Setter for customerRetailValueTotalGross.
         * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
         * @return Builder
         */
        public Builder customerRetailValueTotalGross(Double customerRetailValueTotalGross) {
            this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
            return this;
        }

        /**
         * UnSetter for customerRetailValueTotalGross.
         * @return Builder
         */
        public Builder unsetCustomerRetailValueTotalGross() {
            customerRetailValueTotalGross = null;
            return this;
        }

        /**
         * Setter for customerRetailValueTotalNet.
         * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
         * @return Builder
         */
        public Builder customerRetailValueTotalNet(Double customerRetailValueTotalNet) {
            this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
            return this;
        }

        /**
         * UnSetter for customerRetailValueTotalNet.
         * @return Builder
         */
        public Builder unsetCustomerRetailValueTotalNet() {
            customerRetailValueTotalNet = null;
            return this;
        }

        /**
         * Setter for transactionTypeDescription.
         * @param  transactionTypeDescription  Double value for transactionTypeDescription.
         * @return Builder
         */
        public Builder transactionTypeDescription(Double transactionTypeDescription) {
            this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
            return this;
        }

        /**
         * UnSetter for transactionTypeDescription.
         * @return Builder
         */
        public Builder unsetTransactionTypeDescription() {
            transactionTypeDescription = null;
            return this;
        }

        /**
         * Setter for rebateonNetAmountInTransactionCurrency.
         * @param  rebateonNetAmountInTransactionCurrency  Double value for
         *         rebateonNetAmountInTransactionCurrency.
         * @return Builder
         */
        public Builder rebateonNetAmountInTransactionCurrency(
                Double rebateonNetAmountInTransactionCurrency) {
            this.rebateonNetAmountInTransactionCurrency =
                    OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for rebateonNetAmountInTransactionCurrency.
         * @return Builder
         */
        public Builder unsetRebateonNetAmountInTransactionCurrency() {
            rebateonNetAmountInTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInTrxCurrency.
         * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInTrxCurrency(Double effectiveDiscountInTrxCurrency) {
            this.effectiveDiscountInTrxCurrency =
                    OptionalNullable.of(effectiveDiscountInTrxCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInTrxCurrency() {
            effectiveDiscountInTrxCurrency = null;
            return this;
        }

        /**
         * Setter for delCoToColCoExchangeRate.
         * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder delCoToColCoExchangeRate(Integer delCoToColCoExchangeRate) {
            this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoToColCoExchangeRate() {
            delCoToColCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for cards.
         * @param  cards  List of Integer value for cards.
         * @return Builder
         */
        public Builder cards(List<Integer> cards) {
            this.cards = cards;
            return this;
        }

        /**
         * Setter for unitDiscountTransactionCurrency.
         * @param  unitDiscountTransactionCurrency  Double value for
         *         unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unitDiscountTransactionCurrency(Double unitDiscountTransactionCurrency) {
            this.unitDiscountTransactionCurrency =
                    OptionalNullable.of(unitDiscountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountTransactionCurrency() {
            unitDiscountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for transactionGrossAmount.
         * @param  transactionGrossAmount  Double value for transactionGrossAmount.
         * @return Builder
         */
        public Builder transactionGrossAmount(Double transactionGrossAmount) {
            this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
            return this;
        }

        /**
         * UnSetter for transactionGrossAmount.
         * @return Builder
         */
        public Builder unsetTransactionGrossAmount() {
            transactionGrossAmount = null;
            return this;
        }

        /**
         * Setter for transactionNetAmount.
         * @param  transactionNetAmount  Double value for transactionNetAmount.
         * @return Builder
         */
        public Builder transactionNetAmount(Double transactionNetAmount) {
            this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
            return this;
        }

        /**
         * UnSetter for transactionNetAmount.
         * @return Builder
         */
        public Builder unsetTransactionNetAmount() {
            transactionNetAmount = null;
            return this;
        }

        /**
         * Setter for transactionTax.
         * @param  transactionTax  Double value for transactionTax.
         * @return Builder
         */
        public Builder transactionTax(Double transactionTax) {
            this.transactionTax = OptionalNullable.of(transactionTax);
            return this;
        }

        /**
         * UnSetter for transactionTax.
         * @return Builder
         */
        public Builder unsetTransactionTax() {
            transactionTax = null;
            return this;
        }

        /**
         * Setter for vATonNetAmount.
         * @param  vATonNetAmount  Double value for vATonNetAmount.
         * @return Builder
         */
        public Builder vATonNetAmount(Double vATonNetAmount) {
            this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
            return this;
        }

        /**
         * UnSetter for vATonNetAmount.
         * @return Builder
         */
        public Builder unsetVATonNetAmount() {
            vATonNetAmount = null;
            return this;
        }

        /**
         * Setter for delcoListPriceUnitNet.
         * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
         * @return Builder
         */
        public Builder delcoListPriceUnitNet(Double delcoListPriceUnitNet) {
            this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
            return this;
        }

        /**
         * UnSetter for delcoListPriceUnitNet.
         * @return Builder
         */
        public Builder unsetDelcoListPriceUnitNet() {
            delcoListPriceUnitNet = null;
            return this;
        }

        /**
         * Setter for delcoRetailPriceUnitGross.
         * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
         * @return Builder
         */
        public Builder delcoRetailPriceUnitGross(Double delcoRetailPriceUnitGross) {
            this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
            return this;
        }

        /**
         * UnSetter for delcoRetailPriceUnitGross.
         * @return Builder
         */
        public Builder unsetDelcoRetailPriceUnitGross() {
            delcoRetailPriceUnitGross = null;
            return this;
        }

        /**
         * Setter for unitPriceInTransactionCurrency.
         * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unitPriceInTransactionCurrency(Double unitPriceInTransactionCurrency) {
            this.unitPriceInTransactionCurrency =
                    OptionalNullable.of(unitPriceInTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInTransactionCurrency() {
            unitPriceInTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for delcoRetailPriceUnitNet.
         * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
         * @return Builder
         */
        public Builder delcoRetailPriceUnitNet(Double delcoRetailPriceUnitNet) {
            this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
            return this;
        }

        /**
         * UnSetter for delcoRetailPriceUnitNet.
         * @return Builder
         */
        public Builder unsetDelcoRetailPriceUnitNet() {
            delcoRetailPriceUnitNet = null;
            return this;
        }

        /**
         * Setter for delcoRetailValueTotalGross.
         * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
         * @return Builder
         */
        public Builder delcoRetailValueTotalGross(Double delcoRetailValueTotalGross) {
            this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
            return this;
        }

        /**
         * UnSetter for delcoRetailValueTotalGross.
         * @return Builder
         */
        public Builder unsetDelcoRetailValueTotalGross() {
            delcoRetailValueTotalGross = null;
            return this;
        }

        /**
         * Setter for delcoRetailValueTotalNet.
         * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
         * @return Builder
         */
        public Builder delcoRetailValueTotalNet(Double delcoRetailValueTotalNet) {
            this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
            return this;
        }

        /**
         * UnSetter for delcoRetailValueTotalNet.
         * @return Builder
         */
        public Builder unsetDelcoRetailValueTotalNet() {
            delcoRetailValueTotalNet = null;
            return this;
        }

        /**
         * Setter for transactionCurrencySymbol.
         * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder transactionCurrencySymbol(String transactionCurrencySymbol) {
            this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder unsetTransactionCurrencySymbol() {
            transactionCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for discountType.
         * @param  discountType  String value for discountType.
         * @return Builder
         */
        public Builder discountType(String discountType) {
            this.discountType = OptionalNullable.of(discountType);
            return this;
        }

        /**
         * UnSetter for discountType.
         * @return Builder
         */
        public Builder unsetDiscountType() {
            discountType = null;
            return this;
        }

        /**
         * Setter for disputeStatus.
         * @param  disputeStatus  Boolean value for disputeStatus.
         * @return Builder
         */
        public Builder disputeStatus(Boolean disputeStatus) {
            this.disputeStatus = OptionalNullable.of(disputeStatus);
            return this;
        }

        /**
         * UnSetter for disputeStatus.
         * @return Builder
         */
        public Builder unsetDisputeStatus() {
            disputeStatus = null;
            return this;
        }

        /**
         * Setter for isShellSite.
         * @param  isShellSite  Boolean value for isShellSite.
         * @return Builder
         */
        public Builder isShellSite(Boolean isShellSite) {
            this.isShellSite = isShellSite;
            return this;
        }

        /**
         * Setter for fleetIdInput.
         * @param  fleetIdInput  String value for fleetIdInput.
         * @return Builder
         */
        public Builder fleetIdInput(String fleetIdInput) {
            this.fleetIdInput = OptionalNullable.of(fleetIdInput);
            return this;
        }

        /**
         * UnSetter for fleetIdInput.
         * @return Builder
         */
        public Builder unsetFleetIdInput() {
            fleetIdInput = null;
            return this;
        }

        /**
         * Setter for incomingProductCode.
         * @param  incomingProductCode  Integer value for incomingProductCode.
         * @return Builder
         */
        public Builder incomingProductCode(Integer incomingProductCode) {
            this.incomingProductCode = OptionalNullable.of(incomingProductCode);
            return this;
        }

        /**
         * UnSetter for incomingProductCode.
         * @return Builder
         */
        public Builder unsetIncomingProductCode() {
            incomingProductCode = null;
            return this;
        }

        /**
         * Setter for postingDate.
         * @param  postingDate  LocalDate value for postingDate.
         * @return Builder
         */
        public Builder postingDate(LocalDate postingDate) {
            this.postingDate = OptionalNullable.of(postingDate);
            return this;
        }

        /**
         * UnSetter for postingDate.
         * @return Builder
         */
        public Builder unsetPostingDate() {
            postingDate = null;
            return this;
        }

        /**
         * Setter for postingTime.
         * @param  postingTime  LocalDateTime value for postingTime.
         * @return Builder
         */
        public Builder postingTime(LocalDateTime postingTime) {
            this.postingTime = OptionalNullable.of(postingTime);
            return this;
        }

        /**
         * UnSetter for postingTime.
         * @return Builder
         */
        public Builder unsetPostingTime() {
            postingTime = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  Integer value for productCode.
         * @return Builder
         */
        public Builder productCode(Integer productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for productGroupId.
         * @param  productGroupId  Integer value for productGroupId.
         * @return Builder
         */
        public Builder productGroupId(Integer productGroupId) {
            this.productGroupId = OptionalNullable.of(productGroupId);
            return this;
        }

        /**
         * UnSetter for productGroupId.
         * @return Builder
         */
        public Builder unsetProductGroupId() {
            productGroupId = null;
            return this;
        }

        /**
         * Setter for incomingCurrencyCode.
         * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
         * @return Builder
         */
        public Builder incomingCurrencyCode(String incomingCurrencyCode) {
            this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
            return this;
        }

        /**
         * UnSetter for incomingCurrencyCode.
         * @return Builder
         */
        public Builder unsetIncomingCurrencyCode() {
            incomingCurrencyCode = null;
            return this;
        }

        /**
         * Setter for incomingSiteDescription.
         * @param  incomingSiteDescription  String value for incomingSiteDescription.
         * @return Builder
         */
        public Builder incomingSiteDescription(String incomingSiteDescription) {
            this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
            return this;
        }

        /**
         * UnSetter for incomingSiteDescription.
         * @return Builder
         */
        public Builder unsetIncomingSiteDescription() {
            incomingSiteDescription = null;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = OptionalNullable.of(location);
            return this;
        }

        /**
         * UnSetter for location.
         * @return Builder
         */
        public Builder unsetLocation() {
            location = null;
            return this;
        }

        /**
         * Setter for siteName.
         * @param  siteName  String value for siteName.
         * @return Builder
         */
        public Builder siteName(String siteName) {
            this.siteName = OptionalNullable.of(siteName);
            return this;
        }

        /**
         * UnSetter for siteName.
         * @return Builder
         */
        public Builder unsetSiteName() {
            siteName = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  Integer value for siteCode.
         * @return Builder
         */
        public Builder siteCode(Integer siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for incomingSiteNumber.
         * @param  incomingSiteNumber  Integer value for incomingSiteNumber.
         * @return Builder
         */
        public Builder incomingSiteNumber(Integer incomingSiteNumber) {
            this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
            return this;
        }

        /**
         * UnSetter for incomingSiteNumber.
         * @return Builder
         */
        public Builder unsetIncomingSiteNumber() {
            incomingSiteNumber = null;
            return this;
        }

        /**
         * Setter for invoiceCurrencyCode.
         * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder invoiceCurrencyCode(String invoiceCurrencyCode) {
            this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencyCode() {
            invoiceCurrencyCode = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  LocalDate value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(LocalDate invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  Double value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(Double invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for fuelProduct.
         * @param  fuelProduct  Boolean value for fuelProduct.
         * @return Builder
         */
        public Builder fuelProduct(Boolean fuelProduct) {
            this.fuelProduct = OptionalNullable.of(fuelProduct);
            return this;
        }

        /**
         * UnSetter for fuelProduct.
         * @return Builder
         */
        public Builder unsetFuelProduct() {
            fuelProduct = null;
            return this;
        }

        /**
         * Setter for vATApplicable.
         * @param  vATApplicable  String value for vATApplicable.
         * @return Builder
         */
        public Builder vATApplicable(String vATApplicable) {
            this.vATApplicable = OptionalNullable.of(vATApplicable);
            return this;
        }

        /**
         * UnSetter for vATApplicable.
         * @return Builder
         */
        public Builder unsetVATApplicable() {
            vATApplicable = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for parentCustomerNumber.
         * @param  parentCustomerNumber  String value for parentCustomerNumber.
         * @return Builder
         */
        public Builder parentCustomerNumber(String parentCustomerNumber) {
            this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
            return this;
        }

        /**
         * UnSetter for parentCustomerNumber.
         * @return Builder
         */
        public Builder unsetParentCustomerNumber() {
            parentCustomerNumber = null;
            return this;
        }

        /**
         * Setter for payerGroup.
         * @param  payerGroup  String value for payerGroup.
         * @return Builder
         */
        public Builder payerGroup(String payerGroup) {
            this.payerGroup = OptionalNullable.of(payerGroup);
            return this;
        }

        /**
         * UnSetter for payerGroup.
         * @return Builder
         */
        public Builder unsetPayerGroup() {
            payerGroup = null;
            return this;
        }

        /**
         * Setter for payerGroupName.
         * @param  payerGroupName  String value for payerGroupName.
         * @return Builder
         */
        public Builder payerGroupName(String payerGroupName) {
            this.payerGroupName = OptionalNullable.of(payerGroupName);
            return this;
        }

        /**
         * UnSetter for payerGroupName.
         * @return Builder
         */
        public Builder unsetPayerGroupName() {
            payerGroupName = null;
            return this;
        }

        /**
         * Setter for checkDigit.
         * @param  checkDigit  Integer value for checkDigit.
         * @return Builder
         */
        public Builder checkDigit(Integer checkDigit) {
            this.checkDigit = OptionalNullable.of(checkDigit);
            return this;
        }

        /**
         * UnSetter for checkDigit.
         * @return Builder
         */
        public Builder unsetCheckDigit() {
            checkDigit = null;
            return this;
        }

        /**
         * Setter for netInvoiceIndicator.
         * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
         * @return Builder
         */
        public Builder netInvoiceIndicator(String netInvoiceIndicator) {
            this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
            return this;
        }

        /**
         * UnSetter for netInvoiceIndicator.
         * @return Builder
         */
        public Builder unsetNetInvoiceIndicator() {
            netInvoiceIndicator = null;
            return this;
        }

        /**
         * Setter for delcoCode.
         * @param  delcoCode  Integer value for delcoCode.
         * @return Builder
         */
        public Builder delcoCode(Integer delcoCode) {
            this.delcoCode = OptionalNullable.of(delcoCode);
            return this;
        }

        /**
         * UnSetter for delcoCode.
         * @return Builder
         */
        public Builder unsetDelcoCode() {
            delcoCode = null;
            return this;
        }

        /**
         * Setter for networkCode.
         * @param  networkCode  Integer value for networkCode.
         * @return Builder
         */
        public Builder networkCode(Integer networkCode) {
            this.networkCode = OptionalNullable.of(networkCode);
            return this;
        }

        /**
         * UnSetter for networkCode.
         * @return Builder
         */
        public Builder unsetNetworkCode() {
            networkCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for siteCountry.
         * @param  siteCountry  String value for siteCountry.
         * @return Builder
         */
        public Builder siteCountry(String siteCountry) {
            this.siteCountry = OptionalNullable.of(siteCountry);
            return this;
        }

        /**
         * UnSetter for siteCountry.
         * @return Builder
         */
        public Builder unsetSiteCountry() {
            siteCountry = null;
            return this;
        }

        /**
         * Setter for vATCountry.
         * @param  vATCountry  String value for vATCountry.
         * @return Builder
         */
        public Builder vATCountry(String vATCountry) {
            this.vATCountry = OptionalNullable.of(vATCountry);
            return this;
        }

        /**
         * UnSetter for vATCountry.
         * @return Builder
         */
        public Builder unsetVATCountry() {
            vATCountry = null;
            return this;
        }

        /**
         * Setter for delcoName.
         * @param  delcoName  String value for delcoName.
         * @return Builder
         */
        public Builder delcoName(String delcoName) {
            this.delcoName = OptionalNullable.of(delcoName);
            return this;
        }

        /**
         * UnSetter for delcoName.
         * @return Builder
         */
        public Builder unsetDelcoName() {
            delcoName = null;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = OptionalNullable.of(network);
            return this;
        }

        /**
         * UnSetter for network.
         * @return Builder
         */
        public Builder unsetNetwork() {
            network = null;
            return this;
        }

        /**
         * Setter for odometerInput.
         * @param  odometerInput  Integer value for odometerInput.
         * @return Builder
         */
        public Builder odometerInput(Integer odometerInput) {
            this.odometerInput = OptionalNullable.of(odometerInput);
            return this;
        }

        /**
         * UnSetter for odometerInput.
         * @return Builder
         */
        public Builder unsetOdometerInput() {
            odometerInput = null;
            return this;
        }

        /**
         * Setter for originalSalesItemId.
         * @param  originalSalesItemId  String value for originalSalesItemId.
         * @return Builder
         */
        public Builder originalSalesItemId(String originalSalesItemId) {
            this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
            return this;
        }

        /**
         * UnSetter for originalSalesItemId.
         * @return Builder
         */
        public Builder unsetOriginalSalesItemId() {
            originalSalesItemId = null;
            return this;
        }

        /**
         * Setter for fleetIDDescription.
         * @param  fleetIDDescription  String value for fleetIDDescription.
         * @return Builder
         */
        public Builder fleetIDDescription(String fleetIDDescription) {
            this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
            return this;
        }

        /**
         * UnSetter for fleetIDDescription.
         * @return Builder
         */
        public Builder unsetFleetIDDescription() {
            fleetIDDescription = null;
            return this;
        }

        /**
         * Setter for parentCustomerId.
         * @param  parentCustomerId  Integer value for parentCustomerId.
         * @return Builder
         */
        public Builder parentCustomerId(Integer parentCustomerId) {
            this.parentCustomerId = OptionalNullable.of(parentCustomerId);
            return this;
        }

        /**
         * UnSetter for parentCustomerId.
         * @return Builder
         */
        public Builder unsetParentCustomerId() {
            parentCustomerId = null;
            return this;
        }

        /**
         * Setter for pINIndicator.
         * @param  pINIndicator  String value for pINIndicator.
         * @return Builder
         */
        public Builder pINIndicator(String pINIndicator) {
            this.pINIndicator = OptionalNullable.of(pINIndicator);
            return this;
        }

        /**
         * UnSetter for pINIndicator.
         * @return Builder
         */
        public Builder unsetPINIndicator() {
            pINIndicator = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Setter for purchasedInCountryCode.
         * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
         * @return Builder
         */
        public Builder purchasedInCountryCode(String purchasedInCountryCode) {
            this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
            return this;
        }

        /**
         * UnSetter for purchasedInCountryCode.
         * @return Builder
         */
        public Builder unsetPurchasedInCountryCode() {
            purchasedInCountryCode = null;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Double value for quantity.
         * @return Builder
         */
        public Builder quantity(Double quantity) {
            this.quantity = OptionalNullable.of(quantity);
            return this;
        }

        /**
         * UnSetter for quantity.
         * @return Builder
         */
        public Builder unsetQuantity() {
            quantity = null;
            return this;
        }

        /**
         * Setter for rebateRate.
         * @param  rebateRate  Double value for rebateRate.
         * @return Builder
         */
        public Builder rebateRate(Double rebateRate) {
            this.rebateRate = OptionalNullable.of(rebateRate);
            return this;
        }

        /**
         * UnSetter for rebateRate.
         * @return Builder
         */
        public Builder unsetRebateRate() {
            rebateRate = null;
            return this;
        }

        /**
         * Setter for receiptNumber.
         * @param  receiptNumber  Integer value for receiptNumber.
         * @return Builder
         */
        public Builder receiptNumber(Integer receiptNumber) {
            this.receiptNumber = OptionalNullable.of(receiptNumber);
            return this;
        }

        /**
         * UnSetter for receiptNumber.
         * @return Builder
         */
        public Builder unsetReceiptNumber() {
            receiptNumber = null;
            return this;
        }

        /**
         * Setter for refundFlag.
         * @param  refundFlag  PricedTransactionRespV2RefundFlagEnum value for refundFlag.
         * @return Builder
         */
        public Builder refundFlag(PricedTransactionRespV2RefundFlagEnum refundFlag) {
            this.refundFlag = refundFlag;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for siteGroupName.
         * @param  siteGroupName  String value for siteGroupName.
         * @return Builder
         */
        public Builder siteGroupName(String siteGroupName) {
            this.siteGroupName = OptionalNullable.of(siteGroupName);
            return this;
        }

        /**
         * UnSetter for siteGroupName.
         * @return Builder
         */
        public Builder unsetSiteGroupName() {
            siteGroupName = null;
            return this;
        }

        /**
         * Setter for latitude.
         * @param  latitude  Double value for latitude.
         * @return Builder
         */
        public Builder latitude(Double latitude) {
            this.latitude = OptionalNullable.of(latitude);
            return this;
        }

        /**
         * UnSetter for latitude.
         * @return Builder
         */
        public Builder unsetLatitude() {
            latitude = null;
            return this;
        }

        /**
         * Setter for longitude.
         * @param  longitude  Double value for longitude.
         * @return Builder
         */
        public Builder longitude(Double longitude) {
            this.longitude = OptionalNullable.of(longitude);
            return this;
        }

        /**
         * UnSetter for longitude.
         * @return Builder
         */
        public Builder unsetLongitude() {
            longitude = null;
            return this;
        }

        /**
         * Setter for delCoExchangeRate.
         * @param  delCoExchangeRate  Double value for delCoExchangeRate.
         * @return Builder
         */
        public Builder delCoExchangeRate(Double delCoExchangeRate) {
            this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoExchangeRate() {
            delCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for euroRebateAmount.
         * @param  euroRebateAmount  Double value for euroRebateAmount.
         * @return Builder
         */
        public Builder euroRebateAmount(Double euroRebateAmount) {
            this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
            return this;
        }

        /**
         * UnSetter for euroRebateAmount.
         * @return Builder
         */
        public Builder unsetEuroRebateAmount() {
            euroRebateAmount = null;
            return this;
        }

        /**
         * Setter for netEuroAmount.
         * @param  netEuroAmount  Double value for netEuroAmount.
         * @return Builder
         */
        public Builder netEuroAmount(Double netEuroAmount) {
            this.netEuroAmount = OptionalNullable.of(netEuroAmount);
            return this;
        }

        /**
         * UnSetter for netEuroAmount.
         * @return Builder
         */
        public Builder unsetNetEuroAmount() {
            netEuroAmount = null;
            return this;
        }

        /**
         * Setter for euroVATAmount.
         * @param  euroVATAmount  Double value for euroVATAmount.
         * @return Builder
         */
        public Builder euroVATAmount(Double euroVATAmount) {
            this.euroVATAmount = OptionalNullable.of(euroVATAmount);
            return this;
        }

        /**
         * UnSetter for euroVATAmount.
         * @return Builder
         */
        public Builder unsetEuroVATAmount() {
            euroVATAmount = null;
            return this;
        }

        /**
         * Setter for parentCustomerName.
         * @param  parentCustomerName  String value for parentCustomerName.
         * @return Builder
         */
        public Builder parentCustomerName(String parentCustomerName) {
            this.parentCustomerName = OptionalNullable.of(parentCustomerName);
            return this;
        }

        /**
         * UnSetter for parentCustomerName.
         * @return Builder
         */
        public Builder unsetParentCustomerName() {
            parentCustomerName = null;
            return this;
        }

        /**
         * Setter for isInvoiced.
         * @param  isInvoiced  Boolean value for isInvoiced.
         * @return Builder
         */
        public Builder isInvoiced(Boolean isInvoiced) {
            this.isInvoiced = OptionalNullable.of(isInvoiced);
            return this;
        }

        /**
         * UnSetter for isInvoiced.
         * @return Builder
         */
        public Builder unsetIsInvoiced() {
            isInvoiced = null;
            return this;
        }

        /**
         * Setter for transactionCurrencyCode.
         * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
         * @return Builder
         */
        public Builder transactionCurrencyCode(String transactionCurrencyCode) {
            this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
            return this;
        }

        /**
         * UnSetter for transactionCurrencyCode.
         * @return Builder
         */
        public Builder unsetTransactionCurrencyCode() {
            transactionCurrencyCode = null;
            return this;
        }

        /**
         * Setter for creditDebitCode.
         * @param  creditDebitCode  String value for creditDebitCode.
         * @return Builder
         */
        public Builder creditDebitCode(String creditDebitCode) {
            this.creditDebitCode = OptionalNullable.of(creditDebitCode);
            return this;
        }

        /**
         * UnSetter for creditDebitCode.
         * @return Builder
         */
        public Builder unsetCreditDebitCode() {
            creditDebitCode = null;
            return this;
        }

        /**
         * Setter for transactionDate.
         * @param  transactionDate  LocalDate value for transactionDate.
         * @return Builder
         */
        public Builder transactionDate(LocalDate transactionDate) {
            this.transactionDate = OptionalNullable.of(transactionDate);
            return this;
        }

        /**
         * UnSetter for transactionDate.
         * @return Builder
         */
        public Builder unsetTransactionDate() {
            transactionDate = null;
            return this;
        }

        /**
         * Setter for transactionTime.
         * @param  transactionTime  LocalDateTime value for transactionTime.
         * @return Builder
         */
        public Builder transactionTime(LocalDateTime transactionTime) {
            this.transactionTime = OptionalNullable.of(transactionTime);
            return this;
        }

        /**
         * UnSetter for transactionTime.
         * @return Builder
         */
        public Builder unsetTransactionTime() {
            transactionTime = null;
            return this;
        }

        /**
         * Setter for transactionItemId.
         * @param  transactionItemId  String value for transactionItemId.
         * @return Builder
         */
        public Builder transactionItemId(String transactionItemId) {
            this.transactionItemId = OptionalNullable.of(transactionItemId);
            return this;
        }

        /**
         * UnSetter for transactionItemId.
         * @return Builder
         */
        public Builder unsetTransactionItemId() {
            transactionItemId = null;
            return this;
        }

        /**
         * Setter for trnIdentifier.
         * @param  trnIdentifier  String value for trnIdentifier.
         * @return Builder
         */
        public Builder trnIdentifier(String trnIdentifier) {
            this.trnIdentifier = OptionalNullable.of(trnIdentifier);
            return this;
        }

        /**
         * UnSetter for trnIdentifier.
         * @return Builder
         */
        public Builder unsetTrnIdentifier() {
            trnIdentifier = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for transactionLine.
         * @param  transactionLine  Integer value for transactionLine.
         * @return Builder
         */
        public Builder transactionLine(Integer transactionLine) {
            this.transactionLine = OptionalNullable.of(transactionLine);
            return this;
        }

        /**
         * UnSetter for transactionLine.
         * @return Builder
         */
        public Builder unsetTransactionLine() {
            transactionLine = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = OptionalNullable.of(transactionType);
            return this;
        }

        /**
         * UnSetter for transactionType.
         * @return Builder
         */
        public Builder unsetTransactionType() {
            transactionType = null;
            return this;
        }

        /**
         * Setter for uTCOffset.
         * @param  uTCOffset  String value for uTCOffset.
         * @return Builder
         */
        public Builder uTCOffset(String uTCOffset) {
            this.uTCOffset = OptionalNullable.of(uTCOffset);
            return this;
        }

        /**
         * UnSetter for uTCOffset.
         * @return Builder
         */
        public Builder unsetUTCOffset() {
            uTCOffset = null;
            return this;
        }

        /**
         * Setter for vATCategory.
         * @param  vATCategory  String value for vATCategory.
         * @return Builder
         */
        public Builder vATCategory(String vATCategory) {
            this.vATCategory = OptionalNullable.of(vATCategory);
            return this;
        }

        /**
         * UnSetter for vATCategory.
         * @return Builder
         */
        public Builder unsetVATCategory() {
            vATCategory = null;
            return this;
        }

        /**
         * Setter for vATRate.
         * @param  vATRate  Double value for vATRate.
         * @return Builder
         */
        public Builder vATRate(Double vATRate) {
            this.vATRate = OptionalNullable.of(vATRate);
            return this;
        }

        /**
         * UnSetter for vATRate.
         * @return Builder
         */
        public Builder unsetVATRate() {
            vATRate = null;
            return this;
        }

        /**
         * Setter for vehicleRegistration.
         * @param  vehicleRegistration  String value for vehicleRegistration.
         * @return Builder
         */
        public Builder vehicleRegistration(String vehicleRegistration) {
            this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
            return this;
        }

        /**
         * UnSetter for vehicleRegistration.
         * @return Builder
         */
        public Builder unsetVehicleRegistration() {
            vehicleRegistration = null;
            return this;
        }

        /**
         * Setter for isCancelled.
         * @param  isCancelled  String value for isCancelled.
         * @return Builder
         */
        public Builder isCancelled(String isCancelled) {
            this.isCancelled = OptionalNullable.of(isCancelled);
            return this;
        }

        /**
         * UnSetter for isCancelled.
         * @return Builder
         */
        public Builder unsetIsCancelled() {
            isCancelled = null;
            return this;
        }

        /**
         * Setter for colCoGrossAmount.
         * @param  colCoGrossAmount  Double value for colCoGrossAmount.
         * @return Builder
         */
        public Builder colCoGrossAmount(Double colCoGrossAmount) {
            this.colCoGrossAmount = OptionalNullable.of(colCoGrossAmount);
            return this;
        }

        /**
         * UnSetter for colCoGrossAmount.
         * @return Builder
         */
        public Builder unsetColCoGrossAmount() {
            colCoGrossAmount = null;
            return this;
        }

        /**
         * Setter for colCoNetAmount.
         * @param  colCoNetAmount  Double value for colCoNetAmount.
         * @return Builder
         */
        public Builder colCoNetAmount(Double colCoNetAmount) {
            this.colCoNetAmount = OptionalNullable.of(colCoNetAmount);
            return this;
        }

        /**
         * UnSetter for colCoNetAmount.
         * @return Builder
         */
        public Builder unsetColCoNetAmount() {
            colCoNetAmount = null;
            return this;
        }

        /**
         * Setter for colCoVATAmount.
         * @param  colCoVATAmount  Double value for colCoVATAmount.
         * @return Builder
         */
        public Builder colCoVATAmount(Double colCoVATAmount) {
            this.colCoVATAmount = OptionalNullable.of(colCoVATAmount);
            return this;
        }

        /**
         * UnSetter for colCoVATAmount.
         * @return Builder
         */
        public Builder unsetColCoVATAmount() {
            colCoVATAmount = null;
            return this;
        }

        /**
         * Setter for originalCurrencySymbol.
         * @param  originalCurrencySymbol  String value for originalCurrencySymbol.
         * @return Builder
         */
        public Builder originalCurrencySymbol(String originalCurrencySymbol) {
            this.originalCurrencySymbol = OptionalNullable.of(originalCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for originalCurrencySymbol.
         * @return Builder
         */
        public Builder unsetOriginalCurrencySymbol() {
            originalCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for originalCurrencyCode.
         * @param  originalCurrencyCode  String value for originalCurrencyCode.
         * @return Builder
         */
        public Builder originalCurrencyCode(String originalCurrencyCode) {
            this.originalCurrencyCode = OptionalNullable.of(originalCurrencyCode);
            return this;
        }

        /**
         * UnSetter for originalCurrencyCode.
         * @return Builder
         */
        public Builder unsetOriginalCurrencyCode() {
            originalCurrencyCode = null;
            return this;
        }

        /**
         * Setter for originalVATAmount.
         * @param  originalVATAmount  Double value for originalVATAmount.
         * @return Builder
         */
        public Builder originalVATAmount(Double originalVATAmount) {
            this.originalVATAmount = OptionalNullable.of(originalVATAmount);
            return this;
        }

        /**
         * UnSetter for originalVATAmount.
         * @return Builder
         */
        public Builder unsetOriginalVATAmount() {
            originalVATAmount = null;
            return this;
        }

        /**
         * Setter for embossText.
         * @param  embossText  String value for embossText.
         * @return Builder
         */
        public Builder embossText(String embossText) {
            this.embossText = OptionalNullable.of(embossText);
            return this;
        }

        /**
         * UnSetter for embossText.
         * @return Builder
         */
        public Builder unsetEmbossText() {
            embossText = null;
            return this;
        }

        /**
         * Setter for originalExchangeRate.
         * @param  originalExchangeRate  Double value for originalExchangeRate.
         * @return Builder
         */
        public Builder originalExchangeRate(Double originalExchangeRate) {
            this.originalExchangeRate = OptionalNullable.of(originalExchangeRate);
            return this;
        }

        /**
         * UnSetter for originalExchangeRate.
         * @return Builder
         */
        public Builder unsetOriginalExchangeRate() {
            originalExchangeRate = null;
            return this;
        }

        /**
         * Setter for originalTransactionItemInvoiceDate.
         * @param  originalTransactionItemInvoiceDate  LocalDate value for
         *         originalTransactionItemInvoiceDate.
         * @return Builder
         */
        public Builder originalTransactionItemInvoiceDate(
                LocalDate originalTransactionItemInvoiceDate) {
            this.originalTransactionItemInvoiceDate =
                    OptionalNullable.of(originalTransactionItemInvoiceDate);
            return this;
        }

        /**
         * UnSetter for originalTransactionItemInvoiceDate.
         * @return Builder
         */
        public Builder unsetOriginalTransactionItemInvoiceDate() {
            originalTransactionItemInvoiceDate = null;
            return this;
        }

        /**
         * Setter for feeTypeId.
         * @param  feeTypeId  Integer value for feeTypeId.
         * @return Builder
         */
        public Builder feeTypeId(Integer feeTypeId) {
            this.feeTypeId = OptionalNullable.of(feeTypeId);
            return this;
        }

        /**
         * UnSetter for feeTypeId.
         * @return Builder
         */
        public Builder unsetFeeTypeId() {
            feeTypeId = null;
            return this;
        }

        /**
         * Setter for lineItemDescription.
         * @param  lineItemDescription  Boolean value for lineItemDescription.
         * @return Builder
         */
        public Builder lineItemDescription(Boolean lineItemDescription) {
            this.lineItemDescription = OptionalNullable.of(lineItemDescription);
            return this;
        }

        /**
         * UnSetter for lineItemDescription.
         * @return Builder
         */
        public Builder unsetLineItemDescription() {
            lineItemDescription = null;
            return this;
        }

        /**
         * Setter for feeRuleDescription.
         * @param  feeRuleDescription  String value for feeRuleDescription.
         * @return Builder
         */
        public Builder feeRuleDescription(String feeRuleDescription) {
            this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
            return this;
        }

        /**
         * UnSetter for feeRuleDescription.
         * @return Builder
         */
        public Builder unsetFeeRuleDescription() {
            feeRuleDescription = null;
            return this;
        }

        /**
         * Setter for frequency.
         * @param  frequency  Integer value for frequency.
         * @return Builder
         */
        public Builder frequency(Integer frequency) {
            this.frequency = OptionalNullable.of(frequency);
            return this;
        }

        /**
         * UnSetter for frequency.
         * @return Builder
         */
        public Builder unsetFrequency() {
            frequency = null;
            return this;
        }

        /**
         * Setter for feeRuleId.
         * @param  feeRuleId  Integer value for feeRuleId.
         * @return Builder
         */
        public Builder feeRuleId(Integer feeRuleId) {
            this.feeRuleId = OptionalNullable.of(feeRuleId);
            return this;
        }

        /**
         * UnSetter for feeRuleId.
         * @return Builder
         */
        public Builder unsetFeeRuleId() {
            feeRuleId = null;
            return this;
        }

        /**
         * Setter for systemEntryDate.
         * @param  systemEntryDate  LocalDate value for systemEntryDate.
         * @return Builder
         */
        public Builder systemEntryDate(LocalDate systemEntryDate) {
            this.systemEntryDate = OptionalNullable.of(systemEntryDate);
            return this;
        }

        /**
         * UnSetter for systemEntryDate.
         * @return Builder
         */
        public Builder unsetSystemEntryDate() {
            systemEntryDate = null;
            return this;
        }

        /**
         * Setter for systemEntryTime.
         * @param  systemEntryTime  LocalDateTime value for systemEntryTime.
         * @return Builder
         */
        public Builder systemEntryTime(LocalDateTime systemEntryTime) {
            this.systemEntryTime = OptionalNullable.of(systemEntryTime);
            return this;
        }

        /**
         * UnSetter for systemEntryTime.
         * @return Builder
         */
        public Builder unsetSystemEntryTime() {
            systemEntryTime = null;
            return this;
        }

        /**
         * Setter for isManual.
         * @param  isManual  String value for isManual.
         * @return Builder
         */
        public Builder isManual(String isManual) {
            this.isManual = OptionalNullable.of(isManual);
            return this;
        }

        /**
         * UnSetter for isManual.
         * @return Builder
         */
        public Builder unsetIsManual() {
            isManual = null;
            return this;
        }

        /**
         * Setter for originalTransactionItemId.
         * @param  originalTransactionItemId  String value for originalTransactionItemId.
         * @return Builder
         */
        public Builder originalTransactionItemId(String originalTransactionItemId) {
            this.originalTransactionItemId = OptionalNullable.of(originalTransactionItemId);
            return this;
        }

        /**
         * UnSetter for originalTransactionItemId.
         * @return Builder
         */
        public Builder unsetOriginalTransactionItemId() {
            originalTransactionItemId = null;
            return this;
        }

        /**
         * Setter for originalTransactionItemInvoiceNumber.
         * @param  originalTransactionItemInvoiceNumber  Integer value for
         *         originalTransactionItemInvoiceNumber.
         * @return Builder
         */
        public Builder originalTransactionItemInvoiceNumber(
                Integer originalTransactionItemInvoiceNumber) {
            this.originalTransactionItemInvoiceNumber =
                    OptionalNullable.of(originalTransactionItemInvoiceNumber);
            return this;
        }

        /**
         * UnSetter for originalTransactionItemInvoiceNumber.
         * @return Builder
         */
        public Builder unsetOriginalTransactionItemInvoiceNumber() {
            originalTransactionItemInvoiceNumber = null;
            return this;
        }

        /**
         * Setter for originalTransactionItemInvoiceId.
         * @param  originalTransactionItemInvoiceId  Integer value for
         *         originalTransactionItemInvoiceId.
         * @return Builder
         */
        public Builder originalTransactionItemInvoiceId(
                Integer originalTransactionItemInvoiceId) {
            this.originalTransactionItemInvoiceId =
                    OptionalNullable.of(originalTransactionItemInvoiceId);
            return this;
        }

        /**
         * UnSetter for originalTransactionItemInvoiceId.
         * @return Builder
         */
        public Builder unsetOriginalTransactionItemInvoiceId() {
            originalTransactionItemInvoiceId = null;
            return this;
        }

        /**
         * Setter for payerShortName.
         * @param  payerShortName  String value for payerShortName.
         * @return Builder
         */
        public Builder payerShortName(String payerShortName) {
            this.payerShortName = OptionalNullable.of(payerShortName);
            return this;
        }

        /**
         * UnSetter for payerShortName.
         * @return Builder
         */
        public Builder unsetPayerShortName() {
            payerShortName = null;
            return this;
        }

        /**
         * Setter for reverseCharge.
         * @param  reverseCharge  String value for reverseCharge.
         * @return Builder
         */
        public Builder reverseCharge(String reverseCharge) {
            this.reverseCharge = OptionalNullable.of(reverseCharge);
            return this;
        }

        /**
         * UnSetter for reverseCharge.
         * @return Builder
         */
        public Builder unsetReverseCharge() {
            reverseCharge = null;
            return this;
        }

        /**
         * Setter for originalGrossAmount.
         * @param  originalGrossAmount  Double value for originalGrossAmount.
         * @return Builder
         */
        public Builder originalGrossAmount(Double originalGrossAmount) {
            this.originalGrossAmount = OptionalNullable.of(originalGrossAmount);
            return this;
        }

        /**
         * UnSetter for originalGrossAmount.
         * @return Builder
         */
        public Builder unsetOriginalGrossAmount() {
            originalGrossAmount = null;
            return this;
        }

        /**
         * Setter for originalNetAmount.
         * @param  originalNetAmount  Double value for originalNetAmount.
         * @return Builder
         */
        public Builder originalNetAmount(Double originalNetAmount) {
            this.originalNetAmount = OptionalNullable.of(originalNetAmount);
            return this;
        }

        /**
         * UnSetter for originalNetAmount.
         * @return Builder
         */
        public Builder unsetOriginalNetAmount() {
            originalNetAmount = null;
            return this;
        }

        /**
         * Setter for unitOfMeasure.
         * @param  unitOfMeasure  String value for unitOfMeasure.
         * @return Builder
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * UnSetter for unitOfMeasure.
         * @return Builder
         */
        public Builder unsetUnitOfMeasure() {
            unitOfMeasure = null;
            return this;
        }

        /**
         * Setter for roadType.
         * @param  roadType  String value for roadType.
         * @return Builder
         */
        public Builder roadType(String roadType) {
            this.roadType = OptionalNullable.of(roadType);
            return this;
        }

        /**
         * UnSetter for roadType.
         * @return Builder
         */
        public Builder unsetRoadType() {
            roadType = null;
            return this;
        }

        /**
         * Setter for customerCountryIsoCode.
         * @param  customerCountryIsoCode  String value for customerCountryIsoCode.
         * @return Builder
         */
        public Builder customerCountryIsoCode(String customerCountryIsoCode) {
            this.customerCountryIsoCode = OptionalNullable.of(customerCountryIsoCode);
            return this;
        }

        /**
         * UnSetter for customerCountryIsoCode.
         * @return Builder
         */
        public Builder unsetCustomerCountryIsoCode() {
            customerCountryIsoCode = null;
            return this;
        }

        /**
         * Setter for eVOperator.
         * @param  eVOperator  String value for eVOperator.
         * @return Builder
         */
        public Builder eVOperator(String eVOperator) {
            this.eVOperator = OptionalNullable.of(eVOperator);
            return this;
        }

        /**
         * UnSetter for eVOperator.
         * @return Builder
         */
        public Builder unsetEVOperator() {
            eVOperator = null;
            return this;
        }

        /**
         * Setter for eVSerialId.
         * @param  eVSerialId  String value for eVSerialId.
         * @return Builder
         */
        public Builder eVSerialId(String eVSerialId) {
            this.eVSerialId = OptionalNullable.of(eVSerialId);
            return this;
        }

        /**
         * UnSetter for eVSerialId.
         * @return Builder
         */
        public Builder unsetEVSerialId() {
            eVSerialId = null;
            return this;
        }

        /**
         * Setter for eVChargePointSerial.
         * @param  eVChargePointSerial  String value for eVChargePointSerial.
         * @return Builder
         */
        public Builder eVChargePointSerial(String eVChargePointSerial) {
            this.eVChargePointSerial = OptionalNullable.of(eVChargePointSerial);
            return this;
        }

        /**
         * UnSetter for eVChargePointSerial.
         * @return Builder
         */
        public Builder unsetEVChargePointSerial() {
            eVChargePointSerial = null;
            return this;
        }

        /**
         * Setter for eVChargePointConnectorType.
         * @param  eVChargePointConnectorType  Integer value for eVChargePointConnectorType.
         * @return Builder
         */
        public Builder eVChargePointConnectorType(Integer eVChargePointConnectorType) {
            this.eVChargePointConnectorType = OptionalNullable.of(eVChargePointConnectorType);
            return this;
        }

        /**
         * UnSetter for eVChargePointConnectorType.
         * @return Builder
         */
        public Builder unsetEVChargePointConnectorType() {
            eVChargePointConnectorType = null;
            return this;
        }

        /**
         * Setter for eVChargePointConnectorTypeDescription.
         * @param  eVChargePointConnectorTypeDescription  String value for
         *         eVChargePointConnectorTypeDescription.
         * @return Builder
         */
        public Builder eVChargePointConnectorTypeDescription(
                String eVChargePointConnectorTypeDescription) {
            this.eVChargePointConnectorTypeDescription =
                    OptionalNullable.of(eVChargePointConnectorTypeDescription);
            return this;
        }

        /**
         * UnSetter for eVChargePointConnectorTypeDescription.
         * @return Builder
         */
        public Builder unsetEVChargePointConnectorTypeDescription() {
            eVChargePointConnectorTypeDescription = null;
            return this;
        }

        /**
         * Setter for eVChargeDuration.
         * @param  eVChargeDuration  String value for eVChargeDuration.
         * @return Builder
         */
        public Builder eVChargeDuration(String eVChargeDuration) {
            this.eVChargeDuration = OptionalNullable.of(eVChargeDuration);
            return this;
        }

        /**
         * UnSetter for eVChargeDuration.
         * @return Builder
         */
        public Builder unsetEVChargeDuration() {
            eVChargeDuration = null;
            return this;
        }

        /**
         * Setter for eVChargeStartDate.
         * @param  eVChargeStartDate  LocalDate value for eVChargeStartDate.
         * @return Builder
         */
        public Builder eVChargeStartDate(LocalDate eVChargeStartDate) {
            this.eVChargeStartDate = OptionalNullable.of(eVChargeStartDate);
            return this;
        }

        /**
         * UnSetter for eVChargeStartDate.
         * @return Builder
         */
        public Builder unsetEVChargeStartDate() {
            eVChargeStartDate = null;
            return this;
        }

        /**
         * Setter for eVChargeStartTime.
         * @param  eVChargeStartTime  LocalDateTime value for eVChargeStartTime.
         * @return Builder
         */
        public Builder eVChargeStartTime(LocalDateTime eVChargeStartTime) {
            this.eVChargeStartTime = OptionalNullable.of(eVChargeStartTime);
            return this;
        }

        /**
         * UnSetter for eVChargeStartTime.
         * @return Builder
         */
        public Builder unsetEVChargeStartTime() {
            eVChargeStartTime = null;
            return this;
        }

        /**
         * Setter for eVChargeEndDate.
         * @param  eVChargeEndDate  LocalDate value for eVChargeEndDate.
         * @return Builder
         */
        public Builder eVChargeEndDate(LocalDate eVChargeEndDate) {
            this.eVChargeEndDate = OptionalNullable.of(eVChargeEndDate);
            return this;
        }

        /**
         * UnSetter for eVChargeEndDate.
         * @return Builder
         */
        public Builder unsetEVChargeEndDate() {
            eVChargeEndDate = null;
            return this;
        }

        /**
         * Setter for eVChargeEndTime.
         * @param  eVChargeEndTime  LocalDateTime value for eVChargeEndTime.
         * @return Builder
         */
        public Builder eVChargeEndTime(LocalDateTime eVChargeEndTime) {
            this.eVChargeEndTime = OptionalNullable.of(eVChargeEndTime);
            return this;
        }

        /**
         * UnSetter for eVChargeEndTime.
         * @return Builder
         */
        public Builder unsetEVChargeEndTime() {
            eVChargeEndTime = null;
            return this;
        }

        /**
         * Setter for hostingCollectingCompanyNumber.
         * @param  hostingCollectingCompanyNumber  Integer value for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder hostingCollectingCompanyNumber(Integer hostingCollectingCompanyNumber) {
            this.hostingCollectingCompanyNumber =
                    OptionalNullable.of(hostingCollectingCompanyNumber);
            return this;
        }

        /**
         * UnSetter for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder unsetHostingCollectingCompanyNumber() {
            hostingCollectingCompanyNumber = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  Double value for transactionId.
         * @return Builder
         */
        public Builder transactionId(Double transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = OptionalNullable.of(fuelOnly);
            return this;
        }

        /**
         * UnSetter for fuelOnly.
         * @return Builder
         */
        public Builder unsetFuelOnly() {
            fuelOnly = null;
            return this;
        }

        /**
         * Builds a new {@link PricedResponseData} object using the set fields.
         * @return {@link PricedResponseData}
         */
        public PricedResponseData build() {
            return new PricedResponseData(accountName, accountId, accountNumber, accountShortName,
                    additional1, additional2, additional3, additional4, allowClearing,
                    authorisationCode, transactionStatus, driverName, cardExpiryPeriod, cardExpiry,
                    cardGroupId, cardGroupName, issuerCode, cardPAN, releaseCode,
                    cardSequenceNumber, cardType, colCoCode, unitDiscountInvoiceCurrency,
                    colCoExchangeRate, invoiceCurrencySymbol, correctionFlag, cRMNumber,
                    customerCountry, customerCurrencyCode, customerCurrencySymbol,
                    rebateonNetAmountInCustomerCurrency, effectiveDiscountInCustomerCurrency,
                    effectiveUnitDiscountInCustomerCurrency, unitPriceInInvoiceCurrency, invoiceTax,
                    invoiceGrossAmount, invoiceNetAmount, vATonNetAmountInCustomerCurrency,
                    customerRetailPriceUnitGross, customerRetailValueTotalGross,
                    customerRetailValueTotalNet, transactionTypeDescription,
                    rebateonNetAmountInTransactionCurrency, effectiveDiscountInTrxCurrency,
                    delCoToColCoExchangeRate, cards, unitDiscountTransactionCurrency,
                    transactionGrossAmount, transactionNetAmount, transactionTax, vATonNetAmount,
                    delcoListPriceUnitNet, delcoRetailPriceUnitGross,
                    unitPriceInTransactionCurrency, delcoRetailPriceUnitNet,
                    delcoRetailValueTotalGross, delcoRetailValueTotalNet, transactionCurrencySymbol,
                    discountType, disputeStatus, isShellSite, fleetIdInput, incomingProductCode,
                    postingDate, postingTime, productCode, productName, productGroupId,
                    incomingCurrencyCode, incomingSiteDescription, location, siteName, siteCode,
                    incomingSiteNumber, invoiceCurrencyCode, invoiceDate, invoiceNumber,
                    fuelProduct, vATApplicable, payerName, payerNumber, parentCustomerNumber,
                    payerGroup, payerGroupName, checkDigit, netInvoiceIndicator, delcoCode,
                    networkCode, purchasedInCountry, siteCountry, vATCountry, delcoName, network,
                    odometerInput, originalSalesItemId, fleetIDDescription, parentCustomerId,
                    pINIndicator, productGroupName, purchasedInCountryCode, quantity, rebateRate,
                    receiptNumber, refundFlag, siteGroupId, siteGroupName, latitude, longitude,
                    delCoExchangeRate, euroRebateAmount, netEuroAmount, euroVATAmount,
                    parentCustomerName, isInvoiced, transactionCurrencyCode, creditDebitCode,
                    transactionDate, transactionTime, transactionItemId, trnIdentifier, type,
                    transactionLine, transactionType, uTCOffset, vATCategory, vATRate,
                    vehicleRegistration, isCancelled, colCoGrossAmount, colCoNetAmount,
                    colCoVATAmount, originalCurrencySymbol, originalCurrencyCode, originalVATAmount,
                    embossText, originalExchangeRate, originalTransactionItemInvoiceDate, feeTypeId,
                    lineItemDescription, feeRuleDescription, frequency, feeRuleId, systemEntryDate,
                    systemEntryTime, isManual, originalTransactionItemId,
                    originalTransactionItemInvoiceNumber, originalTransactionItemInvoiceId,
                    payerShortName, reverseCharge, originalGrossAmount, originalNetAmount,
                    unitOfMeasure, roadType, customerCountryIsoCode, eVOperator, eVSerialId,
                    eVChargePointSerial, eVChargePointConnectorType,
                    eVChargePointConnectorTypeDescription, eVChargeDuration, eVChargeStartDate,
                    eVChargeStartTime, eVChargeEndDate, eVChargeEndTime,
                    hostingCollectingCompanyNumber, transactionId, fuelOnly);
        }
    }
}
