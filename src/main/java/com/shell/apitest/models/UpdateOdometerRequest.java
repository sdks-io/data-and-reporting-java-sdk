/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for UpdateOdometerRequest type.
 */
public class UpdateOdometerRequest {
    private Integer colCoId;
    private Integer colCoCode;
    private Integer payerId;
    private Integer accountId;
    private String accountNumber;
    private List<UpdateOdometer> updateOdometers;
    private Boolean notifyCaller;
    private String caller;

    /**
     * Default constructor.
     */
    public UpdateOdometerRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  updateOdometers  List of UpdateOdometer value for updateOdometers.
     * @param  notifyCaller  Boolean value for notifyCaller.
     * @param  caller  String value for caller.
     */
    public UpdateOdometerRequest(
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            Integer accountId,
            String accountNumber,
            List<UpdateOdometer> updateOdometers,
            Boolean notifyCaller,
            String caller) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.updateOdometers = updateOdometers;
        this.notifyCaller = notifyCaller;
        this.caller = caller;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided.
     * @return Returns the Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer in Cards Platform) of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * Payer Id (i.e. Customer Id of the Payment Customer in Cards Platform) of the selected payer.
     * Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = payerId;
    }

    /**
     * Getter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account. Optional if
     * AccountNumber is passed else Mandatory
     * @return Returns the Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAccountId() {
        return accountId;
    }

    /**
     * Setter for AccountId.
     * Account Id (i.e. Customer Id of the Sub Account in GFN) of the selected account. Optional if
     * AccountNumber is passed else Mandatory
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    /**
     * Getter for AccountNumber.
     * Account Number (ex: GB000000123) of the selected account. Optional if AccountId is passed
     * else Mandatory
     * @return Returns the String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Setter for AccountNumber.
     * Account Number (ex: GB000000123) of the selected account. Optional if AccountId is passed
     * else Mandatory
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Getter for UpdateOdometers.
     * @return Returns the List of UpdateOdometer
     */
    @JsonGetter("UpdateOdometers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<UpdateOdometer> getUpdateOdometers() {
        return updateOdometers;
    }

    /**
     * Setter for UpdateOdometers.
     * @param updateOdometers Value for List of UpdateOdometer
     */
    @JsonSetter("UpdateOdometers")
    public void setUpdateOdometers(List<UpdateOdometer> updateOdometers) {
        this.updateOdometers = updateOdometers;
    }

    /**
     * Getter for NotifyCaller.
     * True/False. Optional. Default: False If true, the caller would be notified back with the
     * status as success or failure after the update odometer is processed.
     * @return Returns the Boolean
     */
    @JsonGetter("NotifyCaller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getNotifyCaller() {
        return notifyCaller;
    }

    /**
     * Setter for NotifyCaller.
     * True/False. Optional. Default: False If true, the caller would be notified back with the
     * status as success or failure after the update odometer is processed.
     * @param notifyCaller Value for Boolean
     */
    @JsonSetter("NotifyCaller")
    public void setNotifyCaller(Boolean notifyCaller) {
        this.notifyCaller = notifyCaller;
    }

    /**
     * Getter for Caller.
     * The caller to be notified with the status of the update odometer. Mandatory, if NotifyCaller
     * is true.
     * @return Returns the String
     */
    @JsonGetter("Caller")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCaller() {
        return caller;
    }

    /**
     * Setter for Caller.
     * The caller to be notified with the status of the update odometer. Mandatory, if NotifyCaller
     * is true.
     * @param caller Value for String
     */
    @JsonSetter("Caller")
    public void setCaller(String caller) {
        this.caller = caller;
    }

    /**
     * Converts this UpdateOdometerRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UpdateOdometerRequest [" + "colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", payerId=" + payerId + ", accountId=" + accountId + ", accountNumber="
                + accountNumber + ", updateOdometers=" + updateOdometers + ", notifyCaller="
                + notifyCaller + ", caller=" + caller + "]";
    }

    /**
     * Builds a new {@link UpdateOdometerRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UpdateOdometerRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .colCoId(getColCoId())
                .colCoCode(getColCoCode())
                .payerId(getPayerId())
                .accountId(getAccountId())
                .accountNumber(getAccountNumber())
                .updateOdometers(getUpdateOdometers())
                .notifyCaller(getNotifyCaller())
                .caller(getCaller());
        return builder;
    }

    /**
     * Class to build instances of {@link UpdateOdometerRequest}.
     */
    public static class Builder {
        private Integer colCoId;
        private Integer colCoCode;
        private Integer payerId;
        private Integer accountId;
        private String accountNumber;
        private List<UpdateOdometer> updateOdometers;
        private Boolean notifyCaller;
        private String caller;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Setter for updateOdometers.
         * @param  updateOdometers  List of UpdateOdometer value for updateOdometers.
         * @return Builder
         */
        public Builder updateOdometers(List<UpdateOdometer> updateOdometers) {
            this.updateOdometers = updateOdometers;
            return this;
        }

        /**
         * Setter for notifyCaller.
         * @param  notifyCaller  Boolean value for notifyCaller.
         * @return Builder
         */
        public Builder notifyCaller(Boolean notifyCaller) {
            this.notifyCaller = notifyCaller;
            return this;
        }

        /**
         * Setter for caller.
         * @param  caller  String value for caller.
         * @return Builder
         */
        public Builder caller(String caller) {
            this.caller = caller;
            return this;
        }

        /**
         * Builds a new {@link UpdateOdometerRequest} object using the set fields.
         * @return {@link UpdateOdometerRequest}
         */
        public UpdateOdometerRequest build() {
            return new UpdateOdometerRequest(colCoId, colCoCode, payerId, accountId, accountNumber,
                    updateOdometers, notifyCaller, caller);
        }
    }
}
