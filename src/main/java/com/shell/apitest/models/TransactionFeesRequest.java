/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for TransactionFeesRequest type.
 */
public class TransactionFeesRequest {
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private List<Accounts> accounts;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> invoiceStatus;
    private OptionalNullable<String> feeTypeGroup;
    private OptionalNullable<Integer> feeTypeId;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<Integer> period;
    private OptionalNullable<Boolean> includeCancelledItems;
    private OptionalNullable<Integer> productId;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> lineItemDescription;
    private OptionalNullable<String> sortOrder;
    private OptionalNullable<Integer> currentPage;
    private OptionalNullable<Integer> pageSize;

    /**
     * Default constructor.
     */
    public TransactionFeesRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  List of Accounts value for accounts.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  feeTypeGroup  String value for feeTypeGroup.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  includeCancelledItems  Boolean value for includeCancelledItems.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  lineItemDescription  String value for lineItemDescription.
     * @param  sortOrder  String value for sortOrder.
     * @param  currentPage  Integer value for currentPage.
     * @param  pageSize  Integer value for pageSize.
     */
    public TransactionFeesRequest(
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            List<Accounts> accounts,
            Integer cardId,
            String cardPAN,
            String invoiceStatus,
            String feeTypeGroup,
            Integer feeTypeId,
            String fromDate,
            String toDate,
            Integer period,
            Boolean includeCancelledItems,
            Integer productId,
            String productCode,
            String lineItemDescription,
            String sortOrder,
            Integer currentPage,
            Integer pageSize) {
        this.colCoId = OptionalNullable.of(colCoId);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.accounts = accounts;
        this.cardId = OptionalNullable.of(cardId);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
        this.feeTypeGroup = OptionalNullable.of(feeTypeGroup);
        this.feeTypeId = OptionalNullable.of(feeTypeId);
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.period = OptionalNullable.of(period);
        this.includeCancelledItems = OptionalNullable.of(includeCancelledItems);
        this.productId = OptionalNullable.of(productId);
        this.productCode = OptionalNullable.of(productCode);
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
        this.sortOrder = OptionalNullable.of(sortOrder);
        this.currentPage = OptionalNullable.of(currentPage);
        this.pageSize = OptionalNullable.of(pageSize);
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  List of Accounts value for accounts.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  feeTypeGroup  String value for feeTypeGroup.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  includeCancelledItems  Boolean value for includeCancelledItems.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  lineItemDescription  String value for lineItemDescription.
     * @param  sortOrder  String value for sortOrder.
     * @param  currentPage  Integer value for currentPage.
     * @param  pageSize  Integer value for pageSize.
     */

    protected TransactionFeesRequest(OptionalNullable<Integer> colCoId,
            OptionalNullable<Integer> colCoCode, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, List<Accounts> accounts,
            OptionalNullable<Integer> cardId, OptionalNullable<String> cardPAN,
            OptionalNullable<String> invoiceStatus, OptionalNullable<String> feeTypeGroup,
            OptionalNullable<Integer> feeTypeId, OptionalNullable<String> fromDate,
            OptionalNullable<String> toDate, OptionalNullable<Integer> period,
            OptionalNullable<Boolean> includeCancelledItems, OptionalNullable<Integer> productId,
            OptionalNullable<String> productCode, OptionalNullable<String> lineItemDescription,
            OptionalNullable<String> sortOrder, OptionalNullable<Integer> currentPage,
            OptionalNullable<Integer> pageSize) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accounts = accounts;
        this.cardId = cardId;
        this.cardPAN = cardPAN;
        this.invoiceStatus = invoiceStatus;
        this.feeTypeGroup = feeTypeGroup;
        this.feeTypeId = feeTypeId;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.includeCancelledItems = includeCancelledItems;
        this.productId = productId;
        this.productCode = productCode;
        this.lineItemDescription = lineItemDescription;
        this.sortOrder = sortOrder;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86 for Philippines 5 for UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Mandatory for serviced OUs such
     * as Romania, Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if
     * ColCoID is provided. Example: 86 for Philippines 5 for UK
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Getter for Accounts.
     * @return Returns the List of Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Accounts> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for List of Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<Accounts> accounts) {
        this.accounts = accounts;
    }

    /**
     * Internal Getter for CardId.
     * Card Id Optional When both Card Id and Card PAN are not present on request, the response will
     * have all the fee items under the selected payer or account. Example: 275549
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Card Id Optional When both Card Id and Card PAN are not present on request, the response will
     * have all the fee items under the selected payer or account. Example: 275549
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Card Id Optional When both Card Id and Card PAN are not present on request, the response will
     * have all the fee items under the selected payer or account. Example: 275549
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Card Id Optional When both Card Id and Card PAN are not present on request, the response will
     * have all the fee items under the selected payer or account. Example: 275549
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have all the fee items under the selected payer or account or card group.
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have all the fee items under the selected payer or account or card group.
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have all the fee items under the selected payer or account or card group.
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have all the fee items under the selected payer or account or card group.
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for InvoiceStatus.
     * Invoice status of the fee items Mandatory Possible options: I - Invoiced U – Un-Invoiced A –
     * All
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceStatus() {
        return this.invoiceStatus;
    }

    /**
     * Getter for InvoiceStatus.
     * Invoice status of the fee items Mandatory Possible options: I - Invoiced U – Un-Invoiced A –
     * All
     * @return Returns the String
     */
    public String getInvoiceStatus() {
        return OptionalNullable.getFrom(invoiceStatus);
    }

    /**
     * Setter for InvoiceStatus.
     * Invoice status of the fee items Mandatory Possible options: I - Invoiced U – Un-Invoiced A –
     * All
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
    }

    /**
     * UnSetter for InvoiceStatus.
     * Invoice status of the fee items Mandatory Possible options: I - Invoiced U – Un-Invoiced A –
     * All
     */
    public void unsetInvoiceStatus() {
        invoiceStatus = null;
    }

    /**
     * Internal Getter for FeeTypeGroup.
     * Fee type group in under which the Fee item is generated. Optional. Allowed values: - Account
     * Charges - Card Charges - Others Charges
     * @return Returns the Internal String
     */
    @JsonGetter("FeeTypeGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeTypeGroup() {
        return this.feeTypeGroup;
    }

    /**
     * Getter for FeeTypeGroup.
     * Fee type group in under which the Fee item is generated. Optional. Allowed values: - Account
     * Charges - Card Charges - Others Charges
     * @return Returns the String
     */
    public String getFeeTypeGroup() {
        return OptionalNullable.getFrom(feeTypeGroup);
    }

    /**
     * Setter for FeeTypeGroup.
     * Fee type group in under which the Fee item is generated. Optional. Allowed values: - Account
     * Charges - Card Charges - Others Charges
     * @param feeTypeGroup Value for String
     */
    @JsonSetter("FeeTypeGroup")
    public void setFeeTypeGroup(String feeTypeGroup) {
        this.feeTypeGroup = OptionalNullable.of(feeTypeGroup);
    }

    /**
     * UnSetter for FeeTypeGroup.
     * Fee type group in under which the Fee item is generated. Optional. Allowed values: - Account
     * Charges - Card Charges - Others Charges
     */
    public void unsetFeeTypeGroup() {
        feeTypeGroup = null;
    }

    /**
     * Internal Getter for FeeTypeId.
     * Fee Type Id. Optional. Example: 1. Simple Fee 2. Card Event Fee 3. Customer Event Fee
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeTypeId() {
        return this.feeTypeId;
    }

    /**
     * Getter for FeeTypeId.
     * Fee Type Id. Optional. Example: 1. Simple Fee 2. Card Event Fee 3. Customer Event Fee
     * @return Returns the Integer
     */
    public Integer getFeeTypeId() {
        return OptionalNullable.getFrom(feeTypeId);
    }

    /**
     * Setter for FeeTypeId.
     * Fee Type Id. Optional. Example: 1. Simple Fee 2. Card Event Fee 3. Customer Event Fee
     * @param feeTypeId Value for Integer
     */
    @JsonSetter("FeeTypeId")
    public void setFeeTypeId(Integer feeTypeId) {
        this.feeTypeId = OptionalNullable.of(feeTypeId);
    }

    /**
     * UnSetter for FeeTypeId.
     * Fee Type Id. Optional. Example: 1. Simple Fee 2. Card Event Fee 3. Customer Event Fee
     */
    public void unsetFeeTypeId() {
        feeTypeId = null;
    }

    /**
     * Internal Getter for FromDate.
     * Fee Item FromDate/Time Should be with in last 24 months Optional Maximum of 210 days duration
     * allowed per search, its configurable. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * Fee Item FromDate/Time Should be with in last 24 months Optional Maximum of 210 days duration
     * allowed per search, its configurable. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * Fee Item FromDate/Time Should be with in last 24 months Optional Maximum of 210 days duration
     * allowed per search, its configurable. Format: yyyyMMdd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * Fee Item FromDate/Time Should be with in last 24 months Optional Maximum of 210 days duration
     * allowed per search, its configurable. Format: yyyyMMdd
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Fee Item To Date/Time Optional When blank and FromDate is provided on the input, all fee
     * items took place after the given from date/time should be returned. Note that the search is
     * allowed for the maximum of 60 days. Hence if the FromDate is older than 60 days from current
     * date then the fee items for 60 days from FromDate will be returned. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Fee Item To Date/Time Optional When blank and FromDate is provided on the input, all fee
     * items took place after the given from date/time should be returned. Note that the search is
     * allowed for the maximum of 60 days. Hence if the FromDate is older than 60 days from current
     * date then the fee items for 60 days from FromDate will be returned. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Fee Item To Date/Time Optional When blank and FromDate is provided on the input, all fee
     * items took place after the given from date/time should be returned. Note that the search is
     * allowed for the maximum of 60 days. Hence if the FromDate is older than 60 days from current
     * date then the fee items for 60 days from FromDate will be returned. Format: yyyyMMdd
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Fee Item To Date/Time Optional When blank and FromDate is provided on the input, all fee
     * items took place after the given from date/time should be returned. Note that the search is
     * allowed for the maximum of 60 days. Hence if the FromDate is older than 60 days from current
     * date then the fee items for 60 days from FromDate will be returned. Format: yyyyMMdd
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request. 1.	Last 7
     * Days 2.	Last 30 Days 3.	Last 90 Days 4.	Last 180 Days Example : Pass 1 for Last 7 days fee
     * items
     * @return Returns the Internal Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPeriod() {
        return this.period;
    }

    /**
     * Getter for Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request. 1.	Last 7
     * Days 2.	Last 30 Days 3.	Last 90 Days 4.	Last 180 Days Example : Pass 1 for Last 7 days fee
     * items
     * @return Returns the Integer
     */
    public Integer getPeriod() {
        return OptionalNullable.getFrom(period);
    }

    /**
     * Setter for Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request. 1.	Last 7
     * Days 2.	Last 30 Days 3.	Last 90 Days 4.	Last 180 Days Example : Pass 1 for Last 7 days fee
     * items
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = OptionalNullable.of(period);
    }

    /**
     * UnSetter for Period.
     * Fee items Period. This is ignored when FromDate/Todate is supplied on the request. 1.	Last 7
     * Days 2.	Last 30 Days 3.	Last 90 Days 4.	Last 180 Days Example : Pass 1 for Last 7 days fee
     * items
     */
    public void unsetPeriod() {
        period = null;
    }

    /**
     * Internal Getter for IncludeCancelledItems.
     * True or False. When True, cancelled fee items are included on API response
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeCancelledItems")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeCancelledItems() {
        return this.includeCancelledItems;
    }

    /**
     * Getter for IncludeCancelledItems.
     * True or False. When True, cancelled fee items are included on API response
     * @return Returns the Boolean
     */
    public Boolean getIncludeCancelledItems() {
        return OptionalNullable.getFrom(includeCancelledItems);
    }

    /**
     * Setter for IncludeCancelledItems.
     * True or False. When True, cancelled fee items are included on API response
     * @param includeCancelledItems Value for Boolean
     */
    @JsonSetter("IncludeCancelledItems")
    public void setIncludeCancelledItems(Boolean includeCancelledItems) {
        this.includeCancelledItems = OptionalNullable.of(includeCancelledItems);
    }

    /**
     * UnSetter for IncludeCancelledItems.
     * True or False. When True, cancelled fee items are included on API response
     */
    public void unsetIncludeCancelledItems() {
        includeCancelledItems = null;
    }

    /**
     * Internal Getter for ProductId.
     * Product Id Optional Example: Sample list of product ids and description. 100	Service fee
     * 102	Invoice production fee 103	Account fee 104	Transaction fee 105	Card membership fee
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductId() {
        return this.productId;
    }

    /**
     * Getter for ProductId.
     * Product Id Optional Example: Sample list of product ids and description. 100	Service fee
     * 102	Invoice production fee 103	Account fee 104	Transaction fee 105	Card membership fee
     * @return Returns the Integer
     */
    public Integer getProductId() {
        return OptionalNullable.getFrom(productId);
    }

    /**
     * Setter for ProductId.
     * Product Id Optional Example: Sample list of product ids and description. 100	Service fee
     * 102	Invoice production fee 103	Account fee 104	Transaction fee 105	Card membership fee
     * @param productId Value for Integer
     */
    @JsonSetter("ProductId")
    public void setProductId(Integer productId) {
        this.productId = OptionalNullable.of(productId);
    }

    /**
     * UnSetter for ProductId.
     * Product Id Optional Example: Sample list of product ids and description. 100	Service fee
     * 102	Invoice production fee 103	Account fee 104	Transaction fee 105	Card membership fee
     */
    public void unsetProductId() {
        productId = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code Optional Example: 1. Service fee 2. Invoice production fee 3. Account fee 4.
     * Transaction fee 5. Card membership fee
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code Optional Example: 1. Service fee 2. Invoice production fee 3. Account fee 4.
     * Transaction fee 5. Card membership fee
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code Optional Example: 1. Service fee 2. Invoice production fee 3. Account fee 4.
     * Transaction fee 5. Card membership fee
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code Optional Example: 1. Service fee 2. Invoice production fee 3. Account fee 4.
     * Transaction fee 5. Card membership fee
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for LineItemDescription.
     * Line item description. Optional Minimum of 4 characters should be provided else not
     * considered Those fee items that have the entered value at any part of the line item
     * description will be returned.
     * @return Returns the Internal String
     */
    @JsonGetter("LineItemDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLineItemDescription() {
        return this.lineItemDescription;
    }

    /**
     * Getter for LineItemDescription.
     * Line item description. Optional Minimum of 4 characters should be provided else not
     * considered Those fee items that have the entered value at any part of the line item
     * description will be returned.
     * @return Returns the String
     */
    public String getLineItemDescription() {
        return OptionalNullable.getFrom(lineItemDescription);
    }

    /**
     * Setter for LineItemDescription.
     * Line item description. Optional Minimum of 4 characters should be provided else not
     * considered Those fee items that have the entered value at any part of the line item
     * description will be returned.
     * @param lineItemDescription Value for String
     */
    @JsonSetter("LineItemDescription")
    public void setLineItemDescription(String lineItemDescription) {
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
    }

    /**
     * UnSetter for LineItemDescription.
     * Line item description. Optional Minimum of 4 characters should be provided else not
     * considered Those fee items that have the entered value at any part of the line item
     * description will be returned.
     */
    public void unsetLineItemDescription() {
        lineItemDescription = null;
    }

    /**
     * Internal Getter for SortOrder.
     * Allowed Sorting Options: •	FeeDateAscending •	FeeDateDescending •	NetAmountAscending
     * •	NetAmountDescending Optional. Default: 1
     * @return Returns the Internal String
     */
    @JsonGetter("SortOrder")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSortOrder() {
        return this.sortOrder;
    }

    /**
     * Getter for SortOrder.
     * Allowed Sorting Options: •	FeeDateAscending •	FeeDateDescending •	NetAmountAscending
     * •	NetAmountDescending Optional. Default: 1
     * @return Returns the String
     */
    public String getSortOrder() {
        return OptionalNullable.getFrom(sortOrder);
    }

    /**
     * Setter for SortOrder.
     * Allowed Sorting Options: •	FeeDateAscending •	FeeDateDescending •	NetAmountAscending
     * •	NetAmountDescending Optional. Default: 1
     * @param sortOrder Value for String
     */
    @JsonSetter("SortOrder")
    public void setSortOrder(String sortOrder) {
        this.sortOrder = OptionalNullable.of(sortOrder);
    }

    /**
     * UnSetter for SortOrder.
     * Allowed Sorting Options: •	FeeDateAscending •	FeeDateDescending •	NetAmountAscending
     * •	NetAmountDescending Optional. Default: 1
     */
    public void unsetSortOrder() {
        sortOrder = null;
    }

    /**
     * Internal Getter for CurrentPage.
     * Page Number
     * @return Returns the Internal Integer
     */
    @JsonGetter("CurrentPage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCurrentPage() {
        return this.currentPage;
    }

    /**
     * Getter for CurrentPage.
     * Page Number
     * @return Returns the Integer
     */
    public Integer getCurrentPage() {
        return OptionalNullable.getFrom(currentPage);
    }

    /**
     * Setter for CurrentPage.
     * Page Number
     * @param currentPage Value for Integer
     */
    @JsonSetter("CurrentPage")
    public void setCurrentPage(Integer currentPage) {
        this.currentPage = OptionalNullable.of(currentPage);
    }

    /**
     * UnSetter for CurrentPage.
     * Page Number
     */
    public void unsetCurrentPage() {
        currentPage = null;
    }

    /**
     * Internal Getter for PageSize.
     * Page Size – Number of records to show on a page
     * @return Returns the Internal Integer
     */
    @JsonGetter("PageSize")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPageSize() {
        return this.pageSize;
    }

    /**
     * Getter for PageSize.
     * Page Size – Number of records to show on a page
     * @return Returns the Integer
     */
    public Integer getPageSize() {
        return OptionalNullable.getFrom(pageSize);
    }

    /**
     * Setter for PageSize.
     * Page Size – Number of records to show on a page
     * @param pageSize Value for Integer
     */
    @JsonSetter("PageSize")
    public void setPageSize(Integer pageSize) {
        this.pageSize = OptionalNullable.of(pageSize);
    }

    /**
     * UnSetter for PageSize.
     * Page Size – Number of records to show on a page
     */
    public void unsetPageSize() {
        pageSize = null;
    }

    /**
     * Converts this TransactionFeesRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TransactionFeesRequest [" + "colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", accounts=" + accounts
                + ", cardId=" + cardId + ", cardPAN=" + cardPAN + ", invoiceStatus=" + invoiceStatus
                + ", feeTypeGroup=" + feeTypeGroup + ", feeTypeId=" + feeTypeId + ", fromDate="
                + fromDate + ", toDate=" + toDate + ", period=" + period
                + ", includeCancelledItems=" + includeCancelledItems + ", productId=" + productId
                + ", productCode=" + productCode + ", lineItemDescription=" + lineItemDescription
                + ", sortOrder=" + sortOrder + ", currentPage=" + currentPage + ", pageSize="
                + pageSize + "]";
    }

    /**
     * Builds a new {@link TransactionFeesRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TransactionFeesRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accounts(getAccounts());
        builder.colCoId = internalGetColCoId();
        builder.colCoCode = internalGetColCoCode();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.cardId = internalGetCardId();
        builder.cardPAN = internalGetCardPAN();
        builder.invoiceStatus = internalGetInvoiceStatus();
        builder.feeTypeGroup = internalGetFeeTypeGroup();
        builder.feeTypeId = internalGetFeeTypeId();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.period = internalGetPeriod();
        builder.includeCancelledItems = internalGetIncludeCancelledItems();
        builder.productId = internalGetProductId();
        builder.productCode = internalGetProductCode();
        builder.lineItemDescription = internalGetLineItemDescription();
        builder.sortOrder = internalGetSortOrder();
        builder.currentPage = internalGetCurrentPage();
        builder.pageSize = internalGetPageSize();
        return builder;
    }

    /**
     * Class to build instances of {@link TransactionFeesRequest}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private List<Accounts> accounts;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> invoiceStatus;
        private OptionalNullable<String> feeTypeGroup;
        private OptionalNullable<Integer> feeTypeId;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<Integer> period;
        private OptionalNullable<Boolean> includeCancelledItems;
        private OptionalNullable<Integer> productId;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> lineItemDescription;
        private OptionalNullable<String> sortOrder;
        private OptionalNullable<Integer> currentPage;
        private OptionalNullable<Integer> pageSize;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(List<Accounts> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = OptionalNullable.of(invoiceStatus);
            return this;
        }

        /**
         * UnSetter for invoiceStatus.
         * @return Builder
         */
        public Builder unsetInvoiceStatus() {
            invoiceStatus = null;
            return this;
        }

        /**
         * Setter for feeTypeGroup.
         * @param  feeTypeGroup  String value for feeTypeGroup.
         * @return Builder
         */
        public Builder feeTypeGroup(String feeTypeGroup) {
            this.feeTypeGroup = OptionalNullable.of(feeTypeGroup);
            return this;
        }

        /**
         * UnSetter for feeTypeGroup.
         * @return Builder
         */
        public Builder unsetFeeTypeGroup() {
            feeTypeGroup = null;
            return this;
        }

        /**
         * Setter for feeTypeId.
         * @param  feeTypeId  Integer value for feeTypeId.
         * @return Builder
         */
        public Builder feeTypeId(Integer feeTypeId) {
            this.feeTypeId = OptionalNullable.of(feeTypeId);
            return this;
        }

        /**
         * UnSetter for feeTypeId.
         * @return Builder
         */
        public Builder unsetFeeTypeId() {
            feeTypeId = null;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = OptionalNullable.of(period);
            return this;
        }

        /**
         * UnSetter for period.
         * @return Builder
         */
        public Builder unsetPeriod() {
            period = null;
            return this;
        }

        /**
         * Setter for includeCancelledItems.
         * @param  includeCancelledItems  Boolean value for includeCancelledItems.
         * @return Builder
         */
        public Builder includeCancelledItems(Boolean includeCancelledItems) {
            this.includeCancelledItems = OptionalNullable.of(includeCancelledItems);
            return this;
        }

        /**
         * UnSetter for includeCancelledItems.
         * @return Builder
         */
        public Builder unsetIncludeCancelledItems() {
            includeCancelledItems = null;
            return this;
        }

        /**
         * Setter for productId.
         * @param  productId  Integer value for productId.
         * @return Builder
         */
        public Builder productId(Integer productId) {
            this.productId = OptionalNullable.of(productId);
            return this;
        }

        /**
         * UnSetter for productId.
         * @return Builder
         */
        public Builder unsetProductId() {
            productId = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for lineItemDescription.
         * @param  lineItemDescription  String value for lineItemDescription.
         * @return Builder
         */
        public Builder lineItemDescription(String lineItemDescription) {
            this.lineItemDescription = OptionalNullable.of(lineItemDescription);
            return this;
        }

        /**
         * UnSetter for lineItemDescription.
         * @return Builder
         */
        public Builder unsetLineItemDescription() {
            lineItemDescription = null;
            return this;
        }

        /**
         * Setter for sortOrder.
         * @param  sortOrder  String value for sortOrder.
         * @return Builder
         */
        public Builder sortOrder(String sortOrder) {
            this.sortOrder = OptionalNullable.of(sortOrder);
            return this;
        }

        /**
         * UnSetter for sortOrder.
         * @return Builder
         */
        public Builder unsetSortOrder() {
            sortOrder = null;
            return this;
        }

        /**
         * Setter for currentPage.
         * @param  currentPage  Integer value for currentPage.
         * @return Builder
         */
        public Builder currentPage(Integer currentPage) {
            this.currentPage = OptionalNullable.of(currentPage);
            return this;
        }

        /**
         * UnSetter for currentPage.
         * @return Builder
         */
        public Builder unsetCurrentPage() {
            currentPage = null;
            return this;
        }

        /**
         * Setter for pageSize.
         * @param  pageSize  Integer value for pageSize.
         * @return Builder
         */
        public Builder pageSize(Integer pageSize) {
            this.pageSize = OptionalNullable.of(pageSize);
            return this;
        }

        /**
         * UnSetter for pageSize.
         * @return Builder
         */
        public Builder unsetPageSize() {
            pageSize = null;
            return this;
        }

        /**
         * Builds a new {@link TransactionFeesRequest} object using the set fields.
         * @return {@link TransactionFeesRequest}
         */
        public TransactionFeesRequest build() {
            return new TransactionFeesRequest(colCoId, colCoCode, payerId, payerNumber, accounts,
                    cardId, cardPAN, invoiceStatus, feeTypeGroup, feeTypeId, fromDate, toDate,
                    period, includeCancelledItems, productId, productCode, lineItemDescription,
                    sortOrder, currentPage, pageSize);
        }
    }
}
