/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for PricedRequestData type.
 */
public class PricedRequestData {
    private String colCoCode;
    private PricedTransactionReqV2InvoiceStatusEnum invoiceStatus;
    private String payerNumber;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> driverName;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<String> siteCode;
    private OptionalNullable<String> incomingSiteNumber;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> purchasedInCountryCode;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> vehicleRegistrationNumber;
    private OptionalNullable<Integer> feeTypeId;
    private OptionalNullable<String> lineItemDescription;
    private List<Integer> cards;
    private PricedTransactionReqV2SortOrderEnum sortOrder;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private PricedTransactionReqV2PeriodEnum period;
    private OptionalNullable<String> postingDateFrom;
    private OptionalNullable<String> postingDateTo;
    private OptionalNullable<String> transactionItemId;
    private OptionalNullable<Boolean> fuelOnly;
    private OptionalNullable<Boolean> includeFees;
    private Boolean isMultipayer;
    private Boolean validInvoiceDateOnly;
    private OptionalNullable<String> invoiceFromDate;
    private OptionalNullable<String> invoiceToDate;
    private OptionalNullable<String> hostingCollectingCompanyNumber;
    private OptionalNullable<String> search;
    private OptionalNullable<String> transactionId;

    /**
     * Default constructor.
     */
    public PricedRequestData() {
        fuelOnly = OptionalNullable.of(false);
        validInvoiceDateOnly = false;
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  String value for colCoCode.
     * @param  invoiceStatus  PricedTransactionReqV2InvoiceStatusEnum value for invoiceStatus.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  driverName  String value for driverName.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardPAN  String value for cardPAN.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  siteCode  String value for siteCode.
     * @param  incomingSiteNumber  String value for incomingSiteNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  lineItemDescription  String value for lineItemDescription.
     * @param  cards  List of Integer value for cards.
     * @param  sortOrder  PricedTransactionReqV2SortOrderEnum value for sortOrder.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  PricedTransactionReqV2PeriodEnum value for period.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  transactionItemId  String value for transactionItemId.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     * @param  isMultipayer  Boolean value for isMultipayer.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
     * @param  search  String value for search.
     * @param  transactionId  String value for transactionId.
     */
    public PricedRequestData(
            String colCoCode,
            PricedTransactionReqV2InvoiceStatusEnum invoiceStatus,
            String payerNumber,
            Integer accountId,
            String accountNumber,
            String driverName,
            Integer cardGroupId,
            String cardPAN,
            String productCode,
            String productName,
            String siteCode,
            String incomingSiteNumber,
            String invoiceDate,
            String invoiceNumber,
            String purchasedInCountryCode,
            String purchasedInCountry,
            Integer siteGroupId,
            String vehicleRegistrationNumber,
            Integer feeTypeId,
            String lineItemDescription,
            List<Integer> cards,
            PricedTransactionReqV2SortOrderEnum sortOrder,
            String fromDate,
            String toDate,
            PricedTransactionReqV2PeriodEnum period,
            String postingDateFrom,
            String postingDateTo,
            String transactionItemId,
            Boolean fuelOnly,
            Boolean includeFees,
            Boolean isMultipayer,
            Boolean validInvoiceDateOnly,
            String invoiceFromDate,
            String invoiceToDate,
            String hostingCollectingCompanyNumber,
            String search,
            String transactionId) {
        this.colCoCode = colCoCode;
        this.invoiceStatus = invoiceStatus;
        this.payerNumber = payerNumber;
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.driverName = OptionalNullable.of(driverName);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.siteCode = OptionalNullable.of(siteCode);
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
        this.feeTypeId = OptionalNullable.of(feeTypeId);
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
        this.cards = cards;
        this.sortOrder = sortOrder;
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.period = period;
        this.postingDateFrom = OptionalNullable.of(postingDateFrom);
        this.postingDateTo = OptionalNullable.of(postingDateTo);
        this.transactionItemId = OptionalNullable.of(transactionItemId);
        this.fuelOnly = OptionalNullable.of(fuelOnly);
        this.includeFees = OptionalNullable.of(includeFees);
        this.isMultipayer = isMultipayer;
        this.validInvoiceDateOnly = validInvoiceDateOnly;
        this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
        this.invoiceToDate = OptionalNullable.of(invoiceToDate);
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
        this.search = OptionalNullable.of(search);
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  String value for colCoCode.
     * @param  invoiceStatus  PricedTransactionReqV2InvoiceStatusEnum value for invoiceStatus.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  driverName  String value for driverName.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardPAN  String value for cardPAN.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  siteCode  String value for siteCode.
     * @param  incomingSiteNumber  String value for incomingSiteNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  feeTypeId  Integer value for feeTypeId.
     * @param  lineItemDescription  String value for lineItemDescription.
     * @param  cards  List of Integer value for cards.
     * @param  sortOrder  PricedTransactionReqV2SortOrderEnum value for sortOrder.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  PricedTransactionReqV2PeriodEnum value for period.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  transactionItemId  String value for transactionItemId.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     * @param  isMultipayer  Boolean value for isMultipayer.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
     * @param  search  String value for search.
     * @param  transactionId  String value for transactionId.
     */

    protected PricedRequestData(String colCoCode,
            PricedTransactionReqV2InvoiceStatusEnum invoiceStatus, String payerNumber,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<String> driverName, OptionalNullable<Integer> cardGroupId,
            OptionalNullable<String> cardPAN, OptionalNullable<String> productCode,
            OptionalNullable<String> productName, OptionalNullable<String> siteCode,
            OptionalNullable<String> incomingSiteNumber, OptionalNullable<String> invoiceDate,
            OptionalNullable<String> invoiceNumber, OptionalNullable<String> purchasedInCountryCode,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<Integer> siteGroupId,
            OptionalNullable<String> vehicleRegistrationNumber, OptionalNullable<Integer> feeTypeId,
            OptionalNullable<String> lineItemDescription, List<Integer> cards,
            PricedTransactionReqV2SortOrderEnum sortOrder, OptionalNullable<String> fromDate,
            OptionalNullable<String> toDate, PricedTransactionReqV2PeriodEnum period,
            OptionalNullable<String> postingDateFrom, OptionalNullable<String> postingDateTo,
            OptionalNullable<String> transactionItemId, OptionalNullable<Boolean> fuelOnly,
            OptionalNullable<Boolean> includeFees, Boolean isMultipayer,
            Boolean validInvoiceDateOnly, OptionalNullable<String> invoiceFromDate,
            OptionalNullable<String> invoiceToDate,
            OptionalNullable<String> hostingCollectingCompanyNumber,
            OptionalNullable<String> search, OptionalNullable<String> transactionId) {
        this.colCoCode = colCoCode;
        this.invoiceStatus = invoiceStatus;
        this.payerNumber = payerNumber;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.driverName = driverName;
        this.cardGroupId = cardGroupId;
        this.cardPAN = cardPAN;
        this.productCode = productCode;
        this.productName = productName;
        this.siteCode = siteCode;
        this.incomingSiteNumber = incomingSiteNumber;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.purchasedInCountryCode = purchasedInCountryCode;
        this.purchasedInCountry = purchasedInCountry;
        this.siteGroupId = siteGroupId;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.feeTypeId = feeTypeId;
        this.lineItemDescription = lineItemDescription;
        this.cards = cards;
        this.sortOrder = sortOrder;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.postingDateFrom = postingDateFrom;
        this.postingDateTo = postingDateTo;
        this.transactionItemId = transactionItemId;
        this.fuelOnly = fuelOnly;
        this.includeFees = includeFees;
        this.isMultipayer = isMultipayer;
        this.validInvoiceDateOnly = validInvoiceDateOnly;
        this.invoiceFromDate = invoiceFromDate;
        this.invoiceToDate = invoiceToDate;
        this.hostingCollectingCompanyNumber = hostingCollectingCompanyNumber;
        this.search = search;
        this.transactionId = transactionId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     * @return Returns the String
     */
    @JsonGetter("ColCoCode")
    public String getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer.
     * @param colCoCode Value for String
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(String colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options:I - Invoiced, U – Un-Invoiced,
     * A – All
     * @return Returns the PricedTransactionReqV2InvoiceStatusEnum
     */
    @JsonGetter("InvoiceStatus")
    public PricedTransactionReqV2InvoiceStatusEnum getInvoiceStatus() {
        return invoiceStatus;
    }

    /**
     * Setter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options:I - Invoiced, U – Un-Invoiced,
     * A – All
     * @param invoiceStatus Value for PricedTransactionReqV2InvoiceStatusEnum
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(PricedTransactionReqV2InvoiceStatusEnum invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer.
     * @return Returns the String
     */
    @JsonGetter("PayerNumber")
    public String getPayerNumber() {
        return payerNumber;
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = payerNumber;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id (GFN customer id)
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id (GFN customer id)
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id (GFN customer id)
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id (GFN customer id)
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the selected account.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the selected account.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the selected account.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the selected account.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name (of Card record)
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name (of Card record)
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name (of Card record)
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name (of Card record)
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card Group Id in GFN
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card Group Id in GFN
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card Group Id in GFN
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card Group Id in GFN
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Full Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Full Card PAN
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Full Card PAN
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Full Card PAN
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code – Global as per GFN configuration
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code – Global as per GFN configuration
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code – Global as per GFN configuration
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code – Global as per GFN configuration
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * Product Name – Global as per GFN configuration
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * Product Name – Global as per GFN configuration
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * Product Name – Global as per GFN configuration
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * Product Name – Global as per GFN configuration
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for SiteCode.
     * Site Code in GFN
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * Site Code in GFN
     * @return Returns the String
     */
    public String getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * Site Code in GFN
     * @param siteCode Value for String
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(String siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * Site Code in GFN
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for IncomingSiteNumber.
     * Site Code as configured in GFN
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingSiteNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingSiteNumber() {
        return this.incomingSiteNumber;
    }

    /**
     * Getter for IncomingSiteNumber.
     * Site Code as configured in GFN
     * @return Returns the String
     */
    public String getIncomingSiteNumber() {
        return OptionalNullable.getFrom(incomingSiteNumber);
    }

    /**
     * Setter for IncomingSiteNumber.
     * Site Code as configured in GFN
     * @param incomingSiteNumber Value for String
     */
    @JsonSetter("IncomingSiteNumber")
    public void setIncomingSiteNumber(String incomingSiteNumber) {
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
    }

    /**
     * UnSetter for IncomingSiteNumber.
     * Site Code as configured in GFN
     */
    public void unsetIncomingSiteNumber() {
        incomingSiteNumber = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Returns the billed transaction for the given invoice date
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Returns the billed transaction for the given invoice date
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Returns the billed transaction for the given invoice date
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Returns the billed transaction for the given invoice date
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Returns the billed transaction for the given invoice number
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Returns the billed transaction for the given invoice number
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Returns the billed transaction for the given invoice number
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Returns the billed transaction for the given invoice number
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for PurchasedInCountryCode.
     * Purchased InCountryCode
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountryCode() {
        return this.purchasedInCountryCode;
    }

    /**
     * Getter for PurchasedInCountryCode.
     * Purchased InCountryCode
     * @return Returns the String
     */
    public String getPurchasedInCountryCode() {
        return OptionalNullable.getFrom(purchasedInCountryCode);
    }

    /**
     * Setter for PurchasedInCountryCode.
     * Purchased InCountryCode
     * @param purchasedInCountryCode Value for String
     */
    @JsonSetter("PurchasedInCountryCode")
    public void setPurchasedInCountryCode(String purchasedInCountryCode) {
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
    }

    /**
     * UnSetter for PurchasedInCountryCode.
     * Purchased InCountryCode
     */
    public void unsetPurchasedInCountryCode() {
        purchasedInCountryCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Network Delco PurchasedCountryName
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Network Delco PurchasedCountryName
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Network Delco PurchasedCountryName
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Network Delco PurchasedCountryName
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Site Group Id in GFN
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id in GFN
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id in GFN
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Site Group Id in GFN
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record)
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistrationNumber() {
        return this.vehicleRegistrationNumber;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record)
     * @return Returns the String
     */
    public String getVehicleRegistrationNumber() {
        return OptionalNullable.getFrom(vehicleRegistrationNumber);
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record)
     * @param vehicleRegistrationNumber Value for String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(String vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
    }

    /**
     * UnSetter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record)
     */
    public void unsetVehicleRegistrationNumber() {
        vehicleRegistrationNumber = null;
    }

    /**
     * Internal Getter for FeeTypeId.
     * Card Id (i.e. Unique Card Id in GFN)
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeTypeId() {
        return this.feeTypeId;
    }

    /**
     * Getter for FeeTypeId.
     * Card Id (i.e. Unique Card Id in GFN)
     * @return Returns the Integer
     */
    public Integer getFeeTypeId() {
        return OptionalNullable.getFrom(feeTypeId);
    }

    /**
     * Setter for FeeTypeId.
     * Card Id (i.e. Unique Card Id in GFN)
     * @param feeTypeId Value for Integer
     */
    @JsonSetter("FeeTypeId")
    public void setFeeTypeId(Integer feeTypeId) {
        this.feeTypeId = OptionalNullable.of(feeTypeId);
    }

    /**
     * UnSetter for FeeTypeId.
     * Card Id (i.e. Unique Card Id in GFN)
     */
    public void unsetFeeTypeId() {
        feeTypeId = null;
    }

    /**
     * Internal Getter for LineItemDescription.
     * Item identifier in the transaction.
     * @return Returns the Internal String
     */
    @JsonGetter("LineItemDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLineItemDescription() {
        return this.lineItemDescription;
    }

    /**
     * Getter for LineItemDescription.
     * Item identifier in the transaction.
     * @return Returns the String
     */
    public String getLineItemDescription() {
        return OptionalNullable.getFrom(lineItemDescription);
    }

    /**
     * Setter for LineItemDescription.
     * Item identifier in the transaction.
     * @param lineItemDescription Value for String
     */
    @JsonSetter("LineItemDescription")
    public void setLineItemDescription(String lineItemDescription) {
        this.lineItemDescription = OptionalNullable.of(lineItemDescription);
    }

    /**
     * UnSetter for LineItemDescription.
     * Item identifier in the transaction.
     */
    public void unsetLineItemDescription() {
        lineItemDescription = null;
    }

    /**
     * Getter for Cards.
     * This entity accepts the list of CardId to filter in the response. Note: The number of cardId
     * allowed to be passed in the request is configurable to a maximum of 500 cards.
     * @return Returns the List of Integer
     */
    @JsonGetter("Cards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integer> getCards() {
        return cards;
    }

    /**
     * Setter for Cards.
     * This entity accepts the list of CardId to filter in the response. Note: The number of cardId
     * allowed to be passed in the request is configurable to a maximum of 500 cards.
     * @param cards Value for List of Integer
     */
    @JsonSetter("Cards")
    public void setCards(List<Integer> cards) {
        this.cards = cards;
    }

    /**
     * Getter for SortOrder.
     * Allowed Sorting Options 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. NetAmountAscending 6. NetAmountDescensding
     * @return Returns the PricedTransactionReqV2SortOrderEnum
     */
    @JsonGetter("SortOrder")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PricedTransactionReqV2SortOrderEnum getSortOrder() {
        return sortOrder;
    }

    /**
     * Setter for SortOrder.
     * Allowed Sorting Options 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. NetAmountAscending 6. NetAmountDescensding
     * @param sortOrder Value for PricedTransactionReqV2SortOrderEnum
     */
    @JsonSetter("SortOrder")
    public void setSortOrder(PricedTransactionReqV2SortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
    }

    /**
     * Internal Getter for FromDate.
     * From transaction delivery date
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * From transaction delivery date
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * From transaction delivery date
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * From transaction delivery date
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * To transaction delivery date
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * To transaction delivery date
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * To transaction delivery date
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * To transaction delivery date
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Getter for Period.
     * Pass below one of the value as per the required transaction period 1. Last 7 Days 2. Last 30
     * Days 3. Last 90 Days
     * @return Returns the PricedTransactionReqV2PeriodEnum
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PricedTransactionReqV2PeriodEnum getPeriod() {
        return period;
    }

    /**
     * Setter for Period.
     * Pass below one of the value as per the required transaction period 1. Last 7 Days 2. Last 30
     * Days 3. Last 90 Days
     * @param period Value for PricedTransactionReqV2PeriodEnum
     */
    @JsonSetter("Period")
    public void setPeriod(PricedTransactionReqV2PeriodEnum period) {
        this.period = period;
    }

    /**
     * Internal Getter for PostingDateFrom.
     * Transaction posting start date and time
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDateFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDateFrom() {
        return this.postingDateFrom;
    }

    /**
     * Getter for PostingDateFrom.
     * Transaction posting start date and time
     * @return Returns the String
     */
    public String getPostingDateFrom() {
        return OptionalNullable.getFrom(postingDateFrom);
    }

    /**
     * Setter for PostingDateFrom.
     * Transaction posting start date and time
     * @param postingDateFrom Value for String
     */
    @JsonSetter("PostingDateFrom")
    public void setPostingDateFrom(String postingDateFrom) {
        this.postingDateFrom = OptionalNullable.of(postingDateFrom);
    }

    /**
     * UnSetter for PostingDateFrom.
     * Transaction posting start date and time
     */
    public void unsetPostingDateFrom() {
        postingDateFrom = null;
    }

    /**
     * Internal Getter for PostingDateTo.
     * Transaction posting end date and time
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDateTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDateTo() {
        return this.postingDateTo;
    }

    /**
     * Getter for PostingDateTo.
     * Transaction posting end date and time
     * @return Returns the String
     */
    public String getPostingDateTo() {
        return OptionalNullable.getFrom(postingDateTo);
    }

    /**
     * Setter for PostingDateTo.
     * Transaction posting end date and time
     * @param postingDateTo Value for String
     */
    @JsonSetter("PostingDateTo")
    public void setPostingDateTo(String postingDateTo) {
        this.postingDateTo = OptionalNullable.of(postingDateTo);
    }

    /**
     * UnSetter for PostingDateTo.
     * Transaction posting end date and time
     */
    public void unsetPostingDateTo() {
        postingDateTo = null;
    }

    /**
     * Internal Getter for TransactionItemId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionItemId() {
        return this.transactionItemId;
    }

    /**
     * Getter for TransactionItemId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the String
     */
    public String getTransactionItemId() {
        return OptionalNullable.getFrom(transactionItemId);
    }

    /**
     * Setter for TransactionItemId.
     * Unique id of the transaction that may include one or more salesitems
     * @param transactionItemId Value for String
     */
    @JsonSetter("TransactionItemId")
    public void setTransactionItemId(String transactionItemId) {
        this.transactionItemId = OptionalNullable.of(transactionItemId);
    }

    /**
     * UnSetter for TransactionItemId.
     * Unique id of the transaction that may include one or more salesitems
     */
    public void unsetTransactionItemId() {
        transactionItemId = null;
    }

    /**
     * Internal Getter for FuelOnly.
     * Is FuelOnly indicator
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelOnly() {
        return this.fuelOnly;
    }

    /**
     * Getter for FuelOnly.
     * Is FuelOnly indicator
     * @return Returns the Boolean
     */
    public Boolean getFuelOnly() {
        return OptionalNullable.getFrom(fuelOnly);
    }

    /**
     * Setter for FuelOnly.
     * Is FuelOnly indicator
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = OptionalNullable.of(fuelOnly);
    }

    /**
     * UnSetter for FuelOnly.
     * Is FuelOnly indicator
     */
    public void unsetFuelOnly() {
        fuelOnly = null;
    }

    /**
     * Internal Getter for IncludeFees.
     * When passed as ‘true’ then all sales items along with fees will be included in the response
     * and the follwoing filteres will be ignored * InvoiceNumber * InvoiceDate * PostingDateFrom *
     * PostingDateTo
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeFees() {
        return this.includeFees;
    }

    /**
     * Getter for IncludeFees.
     * When passed as ‘true’ then all sales items along with fees will be included in the response
     * and the follwoing filteres will be ignored * InvoiceNumber * InvoiceDate * PostingDateFrom *
     * PostingDateTo
     * @return Returns the Boolean
     */
    public Boolean getIncludeFees() {
        return OptionalNullable.getFrom(includeFees);
    }

    /**
     * Setter for IncludeFees.
     * When passed as ‘true’ then all sales items along with fees will be included in the response
     * and the follwoing filteres will be ignored * InvoiceNumber * InvoiceDate * PostingDateFrom *
     * PostingDateTo
     * @param includeFees Value for Boolean
     */
    @JsonSetter("IncludeFees")
    public void setIncludeFees(Boolean includeFees) {
        this.includeFees = OptionalNullable.of(includeFees);
    }

    /**
     * UnSetter for IncludeFees.
     * When passed as ‘true’ then all sales items along with fees will be included in the response
     * and the follwoing filteres will be ignored * InvoiceNumber * InvoiceDate * PostingDateFrom *
     * PostingDateTo
     */
    public void unsetIncludeFees() {
        includeFees = null;
    }

    /**
     * Getter for IsMultipayer.
     * If true then returns all the data linked tothe payer group of the provided PayerNumberin the
     * request
     * @return Returns the Boolean
     */
    @JsonGetter("IsMultipayer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsMultipayer() {
        return isMultipayer;
    }

    /**
     * Setter for IsMultipayer.
     * If true then returns all the data linked tothe payer group of the provided PayerNumberin the
     * request
     * @param isMultipayer Value for Boolean
     */
    @JsonSetter("IsMultipayer")
    public void setIsMultipayer(Boolean isMultipayer) {
        this.isMultipayer = isMultipayer;
    }

    /**
     * Getter for ValidInvoiceDateOnly.
     * When passed as ‘True’ the transactions records with report date not equal to 9999-12-30 will
     * be returned. When passed as ‘False’ the above condition will not be checked.
     * @return Returns the Boolean
     */
    @JsonGetter("ValidInvoiceDateOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getValidInvoiceDateOnly() {
        return validInvoiceDateOnly;
    }

    /**
     * Setter for ValidInvoiceDateOnly.
     * When passed as ‘True’ the transactions records with report date not equal to 9999-12-30 will
     * be returned. When passed as ‘False’ the above condition will not be checked.
     * @param validInvoiceDateOnly Value for Boolean
     */
    @JsonSetter("ValidInvoiceDateOnly")
    public void setValidInvoiceDateOnly(Boolean validInvoiceDateOnly) {
        this.validInvoiceDateOnly = validInvoiceDateOnly;
    }

    /**
     * Internal Getter for InvoiceFromDate.
     * Invoice From Date, this is a search criterion to filter invoiced transactions with invoice
     * date from this date.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceFromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceFromDate() {
        return this.invoiceFromDate;
    }

    /**
     * Getter for InvoiceFromDate.
     * Invoice From Date, this is a search criterion to filter invoiced transactions with invoice
     * date from this date.
     * @return Returns the String
     */
    public String getInvoiceFromDate() {
        return OptionalNullable.getFrom(invoiceFromDate);
    }

    /**
     * Setter for InvoiceFromDate.
     * Invoice From Date, this is a search criterion to filter invoiced transactions with invoice
     * date from this date.
     * @param invoiceFromDate Value for String
     */
    @JsonSetter("InvoiceFromDate")
    public void setInvoiceFromDate(String invoiceFromDate) {
        this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
    }

    /**
     * UnSetter for InvoiceFromDate.
     * Invoice From Date, this is a search criterion to filter invoiced transactions with invoice
     * date from this date.
     */
    public void unsetInvoiceFromDate() {
        invoiceFromDate = null;
    }

    /**
     * Internal Getter for InvoiceToDate.
     * Invoice To Date, this is a search criterion to filter invoiced transactions with invoice date
     * until this date.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceToDate() {
        return this.invoiceToDate;
    }

    /**
     * Getter for InvoiceToDate.
     * Invoice To Date, this is a search criterion to filter invoiced transactions with invoice date
     * until this date.
     * @return Returns the String
     */
    public String getInvoiceToDate() {
        return OptionalNullable.getFrom(invoiceToDate);
    }

    /**
     * Setter for InvoiceToDate.
     * Invoice To Date, this is a search criterion to filter invoiced transactions with invoice date
     * until this date.
     * @param invoiceToDate Value for String
     */
    @JsonSetter("InvoiceToDate")
    public void setInvoiceToDate(String invoiceToDate) {
        this.invoiceToDate = OptionalNullable.of(invoiceToDate);
    }

    /**
     * UnSetter for InvoiceToDate.
     * Invoice To Date, this is a search criterion to filter invoiced transactions with invoice date
     * until this date.
     */
    public void unsetInvoiceToDate() {
        invoiceToDate = null;
    }

    /**
     * Internal Getter for HostingCollectingCompanyNumber.
     * Hosting Collecting Company Number of the selected payer.
     * @return Returns the Internal String
     */
    @JsonGetter("HostingCollectingCompanyNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHostingCollectingCompanyNumber() {
        return this.hostingCollectingCompanyNumber;
    }

    /**
     * Getter for HostingCollectingCompanyNumber.
     * Hosting Collecting Company Number of the selected payer.
     * @return Returns the String
     */
    public String getHostingCollectingCompanyNumber() {
        return OptionalNullable.getFrom(hostingCollectingCompanyNumber);
    }

    /**
     * Setter for HostingCollectingCompanyNumber.
     * Hosting Collecting Company Number of the selected payer.
     * @param hostingCollectingCompanyNumber Value for String
     */
    @JsonSetter("HostingCollectingCompanyNumber")
    public void setHostingCollectingCompanyNumber(String hostingCollectingCompanyNumber) {
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
    }

    /**
     * UnSetter for HostingCollectingCompanyNumber.
     * Hosting Collecting Company Number of the selected payer.
     */
    public void unsetHostingCollectingCompanyNumber() {
        hostingCollectingCompanyNumber = null;
    }

    /**
     * Internal Getter for Search.
     * Search based on DriverName or VRN
     * @return Returns the Internal String
     */
    @JsonGetter("Search")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSearch() {
        return this.search;
    }

    /**
     * Getter for Search.
     * Search based on DriverName or VRN
     * @return Returns the String
     */
    public String getSearch() {
        return OptionalNullable.getFrom(search);
    }

    /**
     * Setter for Search.
     * Search based on DriverName or VRN
     * @param search Value for String
     */
    @JsonSetter("Search")
    public void setSearch(String search) {
        this.search = OptionalNullable.of(search);
    }

    /**
     * UnSetter for Search.
     * Search based on DriverName or VRN
     */
    public void unsetSearch() {
        search = null;
    }

    /**
     * Internal Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the String
     */
    public String getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Converts this PricedRequestData into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PricedRequestData [" + "colCoCode=" + colCoCode + ", invoiceStatus=" + invoiceStatus
                + ", payerNumber=" + payerNumber + ", accountId=" + accountId + ", accountNumber="
                + accountNumber + ", driverName=" + driverName + ", cardGroupId=" + cardGroupId
                + ", cardPAN=" + cardPAN + ", productCode=" + productCode + ", productName="
                + productName + ", siteCode=" + siteCode + ", incomingSiteNumber="
                + incomingSiteNumber + ", invoiceDate=" + invoiceDate + ", invoiceNumber="
                + invoiceNumber + ", purchasedInCountryCode=" + purchasedInCountryCode
                + ", purchasedInCountry=" + purchasedInCountry + ", siteGroupId=" + siteGroupId
                + ", vehicleRegistrationNumber=" + vehicleRegistrationNumber + ", feeTypeId="
                + feeTypeId + ", lineItemDescription=" + lineItemDescription + ", cards=" + cards
                + ", sortOrder=" + sortOrder + ", fromDate=" + fromDate + ", toDate=" + toDate
                + ", period=" + period + ", postingDateFrom=" + postingDateFrom + ", postingDateTo="
                + postingDateTo + ", transactionItemId=" + transactionItemId + ", fuelOnly="
                + fuelOnly + ", includeFees=" + includeFees + ", isMultipayer=" + isMultipayer
                + ", validInvoiceDateOnly=" + validInvoiceDateOnly + ", invoiceFromDate="
                + invoiceFromDate + ", invoiceToDate=" + invoiceToDate
                + ", hostingCollectingCompanyNumber=" + hostingCollectingCompanyNumber + ", search="
                + search + ", transactionId=" + transactionId + "]";
    }

    /**
     * Builds a new {@link PricedRequestData.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PricedRequestData.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(colCoCode, invoiceStatus, payerNumber)
                .cards(getCards())
                .sortOrder(getSortOrder())
                .period(getPeriod())
                .isMultipayer(getIsMultipayer())
                .validInvoiceDateOnly(getValidInvoiceDateOnly());
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.driverName = internalGetDriverName();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardPAN = internalGetCardPAN();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.siteCode = internalGetSiteCode();
        builder.incomingSiteNumber = internalGetIncomingSiteNumber();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.purchasedInCountryCode = internalGetPurchasedInCountryCode();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.vehicleRegistrationNumber = internalGetVehicleRegistrationNumber();
        builder.feeTypeId = internalGetFeeTypeId();
        builder.lineItemDescription = internalGetLineItemDescription();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.postingDateFrom = internalGetPostingDateFrom();
        builder.postingDateTo = internalGetPostingDateTo();
        builder.transactionItemId = internalGetTransactionItemId();
        builder.fuelOnly = internalGetFuelOnly();
        builder.includeFees = internalGetIncludeFees();
        builder.invoiceFromDate = internalGetInvoiceFromDate();
        builder.invoiceToDate = internalGetInvoiceToDate();
        builder.hostingCollectingCompanyNumber = internalGetHostingCollectingCompanyNumber();
        builder.search = internalGetSearch();
        builder.transactionId = internalGetTransactionId();
        return builder;
    }

    /**
     * Class to build instances of {@link PricedRequestData}.
     */
    public static class Builder {
        private String colCoCode;
        private PricedTransactionReqV2InvoiceStatusEnum invoiceStatus;
        private String payerNumber;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> driverName;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<String> siteCode;
        private OptionalNullable<String> incomingSiteNumber;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> purchasedInCountryCode;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> vehicleRegistrationNumber;
        private OptionalNullable<Integer> feeTypeId;
        private OptionalNullable<String> lineItemDescription;
        private List<Integer> cards;
        private PricedTransactionReqV2SortOrderEnum sortOrder;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private PricedTransactionReqV2PeriodEnum period;
        private OptionalNullable<String> postingDateFrom;
        private OptionalNullable<String> postingDateTo;
        private OptionalNullable<String> transactionItemId;
        private OptionalNullable<Boolean> fuelOnly = OptionalNullable.of(false);
        private OptionalNullable<Boolean> includeFees;
        private Boolean isMultipayer;
        private Boolean validInvoiceDateOnly = false;
        private OptionalNullable<String> invoiceFromDate;
        private OptionalNullable<String> invoiceToDate;
        private OptionalNullable<String> hostingCollectingCompanyNumber;
        private OptionalNullable<String> search;
        private OptionalNullable<String> transactionId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  colCoCode  String value for colCoCode.
         * @param  invoiceStatus  PricedTransactionReqV2InvoiceStatusEnum value for invoiceStatus.
         * @param  payerNumber  String value for payerNumber.
         */
        public Builder(String colCoCode, PricedTransactionReqV2InvoiceStatusEnum invoiceStatus,
                String payerNumber) {
            this.colCoCode = colCoCode;
            this.invoiceStatus = invoiceStatus;
            this.payerNumber = payerNumber;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  String value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(String colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  PricedTransactionReqV2InvoiceStatusEnum value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(PricedTransactionReqV2InvoiceStatusEnum invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = payerNumber;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  String value for siteCode.
         * @return Builder
         */
        public Builder siteCode(String siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for incomingSiteNumber.
         * @param  incomingSiteNumber  String value for incomingSiteNumber.
         * @return Builder
         */
        public Builder incomingSiteNumber(String incomingSiteNumber) {
            this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
            return this;
        }

        /**
         * UnSetter for incomingSiteNumber.
         * @return Builder
         */
        public Builder unsetIncomingSiteNumber() {
            incomingSiteNumber = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for purchasedInCountryCode.
         * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
         * @return Builder
         */
        public Builder purchasedInCountryCode(String purchasedInCountryCode) {
            this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
            return this;
        }

        /**
         * UnSetter for purchasedInCountryCode.
         * @return Builder
         */
        public Builder unsetPurchasedInCountryCode() {
            purchasedInCountryCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(String vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
            return this;
        }

        /**
         * UnSetter for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder unsetVehicleRegistrationNumber() {
            vehicleRegistrationNumber = null;
            return this;
        }

        /**
         * Setter for feeTypeId.
         * @param  feeTypeId  Integer value for feeTypeId.
         * @return Builder
         */
        public Builder feeTypeId(Integer feeTypeId) {
            this.feeTypeId = OptionalNullable.of(feeTypeId);
            return this;
        }

        /**
         * UnSetter for feeTypeId.
         * @return Builder
         */
        public Builder unsetFeeTypeId() {
            feeTypeId = null;
            return this;
        }

        /**
         * Setter for lineItemDescription.
         * @param  lineItemDescription  String value for lineItemDescription.
         * @return Builder
         */
        public Builder lineItemDescription(String lineItemDescription) {
            this.lineItemDescription = OptionalNullable.of(lineItemDescription);
            return this;
        }

        /**
         * UnSetter for lineItemDescription.
         * @return Builder
         */
        public Builder unsetLineItemDescription() {
            lineItemDescription = null;
            return this;
        }

        /**
         * Setter for cards.
         * @param  cards  List of Integer value for cards.
         * @return Builder
         */
        public Builder cards(List<Integer> cards) {
            this.cards = cards;
            return this;
        }

        /**
         * Setter for sortOrder.
         * @param  sortOrder  PricedTransactionReqV2SortOrderEnum value for sortOrder.
         * @return Builder
         */
        public Builder sortOrder(PricedTransactionReqV2SortOrderEnum sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  PricedTransactionReqV2PeriodEnum value for period.
         * @return Builder
         */
        public Builder period(PricedTransactionReqV2PeriodEnum period) {
            this.period = period;
            return this;
        }

        /**
         * Setter for postingDateFrom.
         * @param  postingDateFrom  String value for postingDateFrom.
         * @return Builder
         */
        public Builder postingDateFrom(String postingDateFrom) {
            this.postingDateFrom = OptionalNullable.of(postingDateFrom);
            return this;
        }

        /**
         * UnSetter for postingDateFrom.
         * @return Builder
         */
        public Builder unsetPostingDateFrom() {
            postingDateFrom = null;
            return this;
        }

        /**
         * Setter for postingDateTo.
         * @param  postingDateTo  String value for postingDateTo.
         * @return Builder
         */
        public Builder postingDateTo(String postingDateTo) {
            this.postingDateTo = OptionalNullable.of(postingDateTo);
            return this;
        }

        /**
         * UnSetter for postingDateTo.
         * @return Builder
         */
        public Builder unsetPostingDateTo() {
            postingDateTo = null;
            return this;
        }

        /**
         * Setter for transactionItemId.
         * @param  transactionItemId  String value for transactionItemId.
         * @return Builder
         */
        public Builder transactionItemId(String transactionItemId) {
            this.transactionItemId = OptionalNullable.of(transactionItemId);
            return this;
        }

        /**
         * UnSetter for transactionItemId.
         * @return Builder
         */
        public Builder unsetTransactionItemId() {
            transactionItemId = null;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = OptionalNullable.of(fuelOnly);
            return this;
        }

        /**
         * UnSetter for fuelOnly.
         * @return Builder
         */
        public Builder unsetFuelOnly() {
            fuelOnly = null;
            return this;
        }

        /**
         * Setter for includeFees.
         * @param  includeFees  Boolean value for includeFees.
         * @return Builder
         */
        public Builder includeFees(Boolean includeFees) {
            this.includeFees = OptionalNullable.of(includeFees);
            return this;
        }

        /**
         * UnSetter for includeFees.
         * @return Builder
         */
        public Builder unsetIncludeFees() {
            includeFees = null;
            return this;
        }

        /**
         * Setter for isMultipayer.
         * @param  isMultipayer  Boolean value for isMultipayer.
         * @return Builder
         */
        public Builder isMultipayer(Boolean isMultipayer) {
            this.isMultipayer = isMultipayer;
            return this;
        }

        /**
         * Setter for validInvoiceDateOnly.
         * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
         * @return Builder
         */
        public Builder validInvoiceDateOnly(Boolean validInvoiceDateOnly) {
            this.validInvoiceDateOnly = validInvoiceDateOnly;
            return this;
        }

        /**
         * Setter for invoiceFromDate.
         * @param  invoiceFromDate  String value for invoiceFromDate.
         * @return Builder
         */
        public Builder invoiceFromDate(String invoiceFromDate) {
            this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
            return this;
        }

        /**
         * UnSetter for invoiceFromDate.
         * @return Builder
         */
        public Builder unsetInvoiceFromDate() {
            invoiceFromDate = null;
            return this;
        }

        /**
         * Setter for invoiceToDate.
         * @param  invoiceToDate  String value for invoiceToDate.
         * @return Builder
         */
        public Builder invoiceToDate(String invoiceToDate) {
            this.invoiceToDate = OptionalNullable.of(invoiceToDate);
            return this;
        }

        /**
         * UnSetter for invoiceToDate.
         * @return Builder
         */
        public Builder unsetInvoiceToDate() {
            invoiceToDate = null;
            return this;
        }

        /**
         * Setter for hostingCollectingCompanyNumber.
         * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder hostingCollectingCompanyNumber(String hostingCollectingCompanyNumber) {
            this.hostingCollectingCompanyNumber =
                    OptionalNullable.of(hostingCollectingCompanyNumber);
            return this;
        }

        /**
         * UnSetter for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder unsetHostingCollectingCompanyNumber() {
            hostingCollectingCompanyNumber = null;
            return this;
        }

        /**
         * Setter for search.
         * @param  search  String value for search.
         * @return Builder
         */
        public Builder search(String search) {
            this.search = OptionalNullable.of(search);
            return this;
        }

        /**
         * UnSetter for search.
         * @return Builder
         */
        public Builder unsetSearch() {
            search = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Builds a new {@link PricedRequestData} object using the set fields.
         * @return {@link PricedRequestData}
         */
        public PricedRequestData build() {
            return new PricedRequestData(colCoCode, invoiceStatus, payerNumber, accountId,
                    accountNumber, driverName, cardGroupId, cardPAN, productCode, productName,
                    siteCode, incomingSiteNumber, invoiceDate, invoiceNumber,
                    purchasedInCountryCode, purchasedInCountry, siteGroupId,
                    vehicleRegistrationNumber, feeTypeId, lineItemDescription, cards, sortOrder,
                    fromDate, toDate, period, postingDateFrom, postingDateTo, transactionItemId,
                    fuelOnly, includeFees, isMultipayer, validInvoiceDateOnly, invoiceFromDate,
                    invoiceToDate, hostingCollectingCompanyNumber, search, transactionId);
        }
    }
}
