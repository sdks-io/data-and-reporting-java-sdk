/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for MultiPricedTransactionResponseTransactionsItems type.
 */
public class MultiPricedTransactionResponseTransactionsItems {
    private OptionalNullable<String> type;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> cardExpiry;
    private OptionalNullable<String> transactionDate;
    private OptionalNullable<String> transactionTime;
    private OptionalNullable<String> uTCOffset;
    private OptionalNullable<String> fleetIdInput;
    private OptionalNullable<Integer> odometerInput;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> vehicleRegistration;
    private OptionalNullable<String> invoiceCurrencyCode;
    private OptionalNullable<String> invoiceCurrencySymbol;
    private OptionalNullable<String> transactionCurrencyCode;
    private OptionalNullable<String> transactionCurrencySymbol;
    private OptionalNullable<Integer> transactionNetAmount;
    private OptionalNullable<Integer> transactionTax;
    private OptionalNullable<Integer> transactionGrossAmount;
    private OptionalNullable<Integer> invoiceNetAmount;
    private OptionalNullable<Integer> invoiceTax;
    private OptionalNullable<Integer> invoiceGrossAmount;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> quantity;
    private OptionalNullable<Boolean> fuelProduct;
    private OptionalNullable<Integer> unitPriceInTransactionCurrency;
    private OptionalNullable<Integer> unitPriceInInvoiceCurrency;
    private OptionalNullable<Integer> unitDiscountTransactionCurrency;
    private OptionalNullable<Integer> unitDiscountInvoiceCurrency;
    private OptionalNullable<Boolean> isInvoiced;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> siteCode;
    private OptionalNullable<String> siteName;
    private OptionalNullable<String> siteCountry;
    private List<SiteLocation> location;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<String> receiptNumber;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<Integer> productGroupId;
    private OptionalNullable<String> productGroupName;
    private OptionalNullable<Double> delCoExchangeRate;
    private OptionalNullable<Integer> colCoExchangeRate;
    private OptionalNullable<Boolean> isShellSite;
    private OptionalNullable<String> network;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> siteGroupName;
    private OptionalNullable<String> postingDate;
    private OptionalNullable<String> issuerCode;
    private OptionalNullable<String> purchasedInCountryCode;
    private OptionalNullable<String> customerCountryCode;
    private OptionalNullable<String> customerCountry;
    private OptionalNullable<String> releaseCode;
    private OptionalNullable<String> cardGroupId;
    private OptionalNullable<String> cardSequenceNumber;
    private OptionalNullable<String> checkDigit;
    private OptionalNullable<String> fleetIDDescription;
    private OptionalNullable<Double> vATRate;
    private OptionalNullable<String> vATCategory;
    private OptionalNullable<String> vATCountry;
    private OptionalNullable<Double> effectiveDiscountInTrxCurrency;
    private OptionalNullable<String> transactionType;
    private OptionalNullable<String> pINIndicator;
    private OptionalNullable<String> vATApplicable;
    private OptionalNullable<String> netInvoiceIndicator;
    private OptionalNullable<String> customerCurrencyCode;
    private OptionalNullable<String> customerCurrencySymbol;
    private OptionalNullable<Integer> effectiveUnitDiscountInCustomerCurrency;
    private OptionalNullable<Integer> effectiveDiscountInCustomerCurrency;
    private OptionalNullable<Integer> vATonNetAmountInCustomerCurrency;
    private OptionalNullable<String> discountType;
    private OptionalNullable<String> transactionStatus;
    private OptionalNullable<Integer> salesItemId;
    private OptionalNullable<String> payerGroup;
    private OptionalNullable<String> payerGroupName;
    private OptionalNullable<String> refundFlag;
    private OptionalNullable<String> originalSalesItemId;
    private OptionalNullable<String> delcoName;
    private OptionalNullable<String> delcoCode;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> cardExpiryPeriod;
    private OptionalNullable<String> authorisationCode;
    private OptionalNullable<String> transactionId;
    private OptionalNullable<String> transactionLine;
    private OptionalNullable<String> allowClearing;
    private OptionalNullable<String> cRMNumber;
    private OptionalNullable<String> disputeStatus;
    private OptionalNullable<Double> rebateRate;
    private OptionalNullable<Integer> delCoToColCoExchangeRate;
    private OptionalNullable<Double> netEuroAmount;
    private OptionalNullable<Integer> euroRebateAmount;
    private OptionalNullable<Double> euroVATAmount;
    private OptionalNullable<String> parentCustomerNumber;
    private OptionalNullable<String> parentCustomerName;
    private OptionalNullable<Integer> parentCustomerId;
    private OptionalNullable<String> incomingSiteNumber;
    private OptionalNullable<String> incomingSiteDescription;
    private OptionalNullable<String> incomingCurrencyCode;
    private OptionalNullable<String> incomingProductCode;
    private OptionalNullable<String> creditDebitCode;
    private OptionalNullable<String> correctionFlag;
    private OptionalNullable<String> additional1;
    private OptionalNullable<String> additional2;
    private OptionalNullable<String> additional3;
    private OptionalNullable<String> additional4;
    private OptionalNullable<Double> rebateonNetAmountInCustomerCurrency;
    private OptionalNullable<Double> rebateonNetAmountInTransactionCurrency;
    private OptionalNullable<String> networkCode;
    private OptionalNullable<String> trnIdentifier;
    private OptionalNullable<String> cardType;
    private OptionalNullable<Double> delcoListPriceUnitNet;
    private OptionalNullable<Double> delcoRetailPriceUnitNet;
    private OptionalNullable<Double> delcoRetailPriceUnitGross;
    private OptionalNullable<Double> delcoRetailValueTotalNet;
    private OptionalNullable<Double> delcoRetailValueTotalGross;
    private OptionalNullable<Double> customerRetailPriceUnitGross;
    private OptionalNullable<Double> customerRetailValueTotalGross;
    private OptionalNullable<Double> customerRetailValueTotalNet;
    private OptionalNullable<String> transactionTypeDescription;

    /**
     * Default constructor.
     */
    public MultiPricedTransactionResponseTransactionsItems() {
    }

    /**
     * Initialization constructor.
     * @param  type  String value for type.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardExpiry  String value for cardExpiry.
     * @param  transactionDate  String value for transactionDate.
     * @param  transactionTime  String value for transactionTime.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  transactionNetAmount  Integer value for transactionNetAmount.
     * @param  transactionTax  Integer value for transactionTax.
     * @param  transactionGrossAmount  Integer value for transactionGrossAmount.
     * @param  invoiceNetAmount  Integer value for invoiceNetAmount.
     * @param  invoiceTax  Integer value for invoiceTax.
     * @param  invoiceGrossAmount  Integer value for invoiceGrossAmount.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  accountShortName  String value for accountShortName.
     * @param  quantity  Integer value for quantity.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  unitPriceInTransactionCurrency  Integer value for unitPriceInTransactionCurrency.
     * @param  unitPriceInInvoiceCurrency  Integer value for unitPriceInInvoiceCurrency.
     * @param  unitDiscountTransactionCurrency  Integer value for unitDiscountTransactionCurrency.
     * @param  unitDiscountInvoiceCurrency  Integer value for unitDiscountInvoiceCurrency.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  siteCode  String value for siteCode.
     * @param  siteName  String value for siteName.
     * @param  siteCountry  String value for siteCountry.
     * @param  location  List of SiteLocation value for location.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  receiptNumber  String value for receiptNumber.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  productGroupName  String value for productGroupName.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  colCoExchangeRate  Integer value for colCoExchangeRate.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  network  String value for network.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  postingDate  String value for postingDate.
     * @param  issuerCode  String value for issuerCode.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  customerCountryCode  String value for customerCountryCode.
     * @param  customerCountry  String value for customerCountry.
     * @param  releaseCode  String value for releaseCode.
     * @param  cardGroupId  String value for cardGroupId.
     * @param  cardSequenceNumber  String value for cardSequenceNumber.
     * @param  checkDigit  String value for checkDigit.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  vATRate  Double value for vATRate.
     * @param  vATCategory  String value for vATCategory.
     * @param  vATCountry  String value for vATCountry.
     * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
     * @param  transactionType  String value for transactionType.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  effectiveUnitDiscountInCustomerCurrency  Integer value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Integer value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  vATonNetAmountInCustomerCurrency  Integer value for vATonNetAmountInCustomerCurrency.
     * @param  discountType  String value for discountType.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  salesItemId  Integer value for salesItemId.
     * @param  payerGroup  String value for payerGroup.
     * @param  payerGroupName  String value for payerGroupName.
     * @param  refundFlag  String value for refundFlag.
     * @param  originalSalesItemId  String value for originalSalesItemId.
     * @param  delcoName  String value for delcoName.
     * @param  delcoCode  String value for delcoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
     * @param  authorisationCode  String value for authorisationCode.
     * @param  transactionId  String value for transactionId.
     * @param  transactionLine  String value for transactionLine.
     * @param  allowClearing  String value for allowClearing.
     * @param  cRMNumber  String value for cRMNumber.
     * @param  disputeStatus  String value for disputeStatus.
     * @param  rebateRate  Double value for rebateRate.
     * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroRebateAmount  Integer value for euroRebateAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  parentCustomerName  String value for parentCustomerName.
     * @param  parentCustomerId  Integer value for parentCustomerId.
     * @param  incomingSiteNumber  String value for incomingSiteNumber.
     * @param  incomingSiteDescription  String value for incomingSiteDescription.
     * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
     * @param  incomingProductCode  String value for incomingProductCode.
     * @param  creditDebitCode  String value for creditDebitCode.
     * @param  correctionFlag  String value for correctionFlag.
     * @param  additional1  String value for additional1.
     * @param  additional2  String value for additional2.
     * @param  additional3  String value for additional3.
     * @param  additional4  String value for additional4.
     * @param  rebateonNetAmountInCustomerCurrency  Double value for
     *         rebateonNetAmountInCustomerCurrency.
     * @param  rebateonNetAmountInTransactionCurrency  Double value for
     *         rebateonNetAmountInTransactionCurrency.
     * @param  networkCode  String value for networkCode.
     * @param  trnIdentifier  String value for trnIdentifier.
     * @param  cardType  String value for cardType.
     * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
     * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
     * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
     * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
     * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
     * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
     * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
     * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
     * @param  transactionTypeDescription  String value for transactionTypeDescription.
     */
    public MultiPricedTransactionResponseTransactionsItems(
            String type,
            Integer cardId,
            String cardPAN,
            String cardExpiry,
            String transactionDate,
            String transactionTime,
            String uTCOffset,
            String fleetIdInput,
            Integer odometerInput,
            String driverName,
            String vehicleRegistration,
            String invoiceCurrencyCode,
            String invoiceCurrencySymbol,
            String transactionCurrencyCode,
            String transactionCurrencySymbol,
            Integer transactionNetAmount,
            Integer transactionTax,
            Integer transactionGrossAmount,
            Integer invoiceNetAmount,
            Integer invoiceTax,
            Integer invoiceGrossAmount,
            String purchasedInCountry,
            Integer accountId,
            String accountNumber,
            String accountName,
            String accountShortName,
            Integer quantity,
            Boolean fuelProduct,
            Integer unitPriceInTransactionCurrency,
            Integer unitPriceInInvoiceCurrency,
            Integer unitDiscountTransactionCurrency,
            Integer unitDiscountInvoiceCurrency,
            Boolean isInvoiced,
            String invoiceNumber,
            String invoiceDate,
            String siteCode,
            String siteName,
            String siteCountry,
            List<SiteLocation> location,
            String cardGroupName,
            String receiptNumber,
            String productCode,
            String productName,
            Integer productGroupId,
            String productGroupName,
            Double delCoExchangeRate,
            Integer colCoExchangeRate,
            Boolean isShellSite,
            String network,
            Integer siteGroupId,
            String siteGroupName,
            String postingDate,
            String issuerCode,
            String purchasedInCountryCode,
            String customerCountryCode,
            String customerCountry,
            String releaseCode,
            String cardGroupId,
            String cardSequenceNumber,
            String checkDigit,
            String fleetIDDescription,
            Double vATRate,
            String vATCategory,
            String vATCountry,
            Double effectiveDiscountInTrxCurrency,
            String transactionType,
            String pINIndicator,
            String vATApplicable,
            String netInvoiceIndicator,
            String customerCurrencyCode,
            String customerCurrencySymbol,
            Integer effectiveUnitDiscountInCustomerCurrency,
            Integer effectiveDiscountInCustomerCurrency,
            Integer vATonNetAmountInCustomerCurrency,
            String discountType,
            String transactionStatus,
            Integer salesItemId,
            String payerGroup,
            String payerGroupName,
            String refundFlag,
            String originalSalesItemId,
            String delcoName,
            String delcoCode,
            String payerNumber,
            String payerName,
            String cardExpiryPeriod,
            String authorisationCode,
            String transactionId,
            String transactionLine,
            String allowClearing,
            String cRMNumber,
            String disputeStatus,
            Double rebateRate,
            Integer delCoToColCoExchangeRate,
            Double netEuroAmount,
            Integer euroRebateAmount,
            Double euroVATAmount,
            String parentCustomerNumber,
            String parentCustomerName,
            Integer parentCustomerId,
            String incomingSiteNumber,
            String incomingSiteDescription,
            String incomingCurrencyCode,
            String incomingProductCode,
            String creditDebitCode,
            String correctionFlag,
            String additional1,
            String additional2,
            String additional3,
            String additional4,
            Double rebateonNetAmountInCustomerCurrency,
            Double rebateonNetAmountInTransactionCurrency,
            String networkCode,
            String trnIdentifier,
            String cardType,
            Double delcoListPriceUnitNet,
            Double delcoRetailPriceUnitNet,
            Double delcoRetailPriceUnitGross,
            Double delcoRetailValueTotalNet,
            Double delcoRetailValueTotalGross,
            Double customerRetailPriceUnitGross,
            Double customerRetailValueTotalGross,
            Double customerRetailValueTotalNet,
            String transactionTypeDescription) {
        this.type = OptionalNullable.of(type);
        this.cardId = OptionalNullable.of(cardId);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.cardExpiry = OptionalNullable.of(cardExpiry);
        this.transactionDate = OptionalNullable.of(transactionDate);
        this.transactionTime = OptionalNullable.of(transactionTime);
        this.uTCOffset = OptionalNullable.of(uTCOffset);
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
        this.odometerInput = OptionalNullable.of(odometerInput);
        this.driverName = OptionalNullable.of(driverName);
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
        this.transactionTax = OptionalNullable.of(transactionTax);
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
        this.invoiceTax = OptionalNullable.of(invoiceTax);
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountName = OptionalNullable.of(accountName);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.quantity = OptionalNullable.of(quantity);
        this.fuelProduct = OptionalNullable.of(fuelProduct);
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
        this.isInvoiced = OptionalNullable.of(isInvoiced);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.siteCode = OptionalNullable.of(siteCode);
        this.siteName = OptionalNullable.of(siteName);
        this.siteCountry = OptionalNullable.of(siteCountry);
        this.location = location;
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.receiptNumber = OptionalNullable.of(receiptNumber);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.productGroupId = OptionalNullable.of(productGroupId);
        this.productGroupName = OptionalNullable.of(productGroupName);
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
        this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
        this.isShellSite = OptionalNullable.of(isShellSite);
        this.network = OptionalNullable.of(network);
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.siteGroupName = OptionalNullable.of(siteGroupName);
        this.postingDate = OptionalNullable.of(postingDate);
        this.issuerCode = OptionalNullable.of(issuerCode);
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
        this.customerCountryCode = OptionalNullable.of(customerCountryCode);
        this.customerCountry = OptionalNullable.of(customerCountry);
        this.releaseCode = OptionalNullable.of(releaseCode);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
        this.checkDigit = OptionalNullable.of(checkDigit);
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
        this.vATRate = OptionalNullable.of(vATRate);
        this.vATCategory = OptionalNullable.of(vATCategory);
        this.vATCountry = OptionalNullable.of(vATCountry);
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
        this.transactionType = OptionalNullable.of(transactionType);
        this.pINIndicator = OptionalNullable.of(pINIndicator);
        this.vATApplicable = OptionalNullable.of(vATApplicable);
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
        this.effectiveUnitDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
        this.effectiveDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveDiscountInCustomerCurrency);
        this.vATonNetAmountInCustomerCurrency =
                OptionalNullable.of(vATonNetAmountInCustomerCurrency);
        this.discountType = OptionalNullable.of(discountType);
        this.transactionStatus = OptionalNullable.of(transactionStatus);
        this.salesItemId = OptionalNullable.of(salesItemId);
        this.payerGroup = OptionalNullable.of(payerGroup);
        this.payerGroupName = OptionalNullable.of(payerGroupName);
        this.refundFlag = OptionalNullable.of(refundFlag);
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
        this.delcoName = OptionalNullable.of(delcoName);
        this.delcoCode = OptionalNullable.of(delcoCode);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerName = OptionalNullable.of(payerName);
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
        this.authorisationCode = OptionalNullable.of(authorisationCode);
        this.transactionId = OptionalNullable.of(transactionId);
        this.transactionLine = OptionalNullable.of(transactionLine);
        this.allowClearing = OptionalNullable.of(allowClearing);
        this.cRMNumber = OptionalNullable.of(cRMNumber);
        this.disputeStatus = OptionalNullable.of(disputeStatus);
        this.rebateRate = OptionalNullable.of(rebateRate);
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
        this.parentCustomerName = OptionalNullable.of(parentCustomerName);
        this.parentCustomerId = OptionalNullable.of(parentCustomerId);
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
        this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
        this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
        this.creditDebitCode = OptionalNullable.of(creditDebitCode);
        this.correctionFlag = OptionalNullable.of(correctionFlag);
        this.additional1 = OptionalNullable.of(additional1);
        this.additional2 = OptionalNullable.of(additional2);
        this.additional3 = OptionalNullable.of(additional3);
        this.additional4 = OptionalNullable.of(additional4);
        this.rebateonNetAmountInCustomerCurrency =
                OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
        this.rebateonNetAmountInTransactionCurrency =
                OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
        this.networkCode = OptionalNullable.of(networkCode);
        this.trnIdentifier = OptionalNullable.of(trnIdentifier);
        this.cardType = OptionalNullable.of(cardType);
        this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
        this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
        this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
        this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
        this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
        this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
        this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
        this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
        this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
    }

    /**
     * Initialization constructor.
     * @param  type  String value for type.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardExpiry  String value for cardExpiry.
     * @param  transactionDate  String value for transactionDate.
     * @param  transactionTime  String value for transactionTime.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  transactionNetAmount  Integer value for transactionNetAmount.
     * @param  transactionTax  Integer value for transactionTax.
     * @param  transactionGrossAmount  Integer value for transactionGrossAmount.
     * @param  invoiceNetAmount  Integer value for invoiceNetAmount.
     * @param  invoiceTax  Integer value for invoiceTax.
     * @param  invoiceGrossAmount  Integer value for invoiceGrossAmount.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  accountShortName  String value for accountShortName.
     * @param  quantity  Integer value for quantity.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  unitPriceInTransactionCurrency  Integer value for unitPriceInTransactionCurrency.
     * @param  unitPriceInInvoiceCurrency  Integer value for unitPriceInInvoiceCurrency.
     * @param  unitDiscountTransactionCurrency  Integer value for unitDiscountTransactionCurrency.
     * @param  unitDiscountInvoiceCurrency  Integer value for unitDiscountInvoiceCurrency.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  siteCode  String value for siteCode.
     * @param  siteName  String value for siteName.
     * @param  siteCountry  String value for siteCountry.
     * @param  location  List of SiteLocation value for location.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  receiptNumber  String value for receiptNumber.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  productGroupName  String value for productGroupName.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  colCoExchangeRate  Integer value for colCoExchangeRate.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  network  String value for network.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  postingDate  String value for postingDate.
     * @param  issuerCode  String value for issuerCode.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  customerCountryCode  String value for customerCountryCode.
     * @param  customerCountry  String value for customerCountry.
     * @param  releaseCode  String value for releaseCode.
     * @param  cardGroupId  String value for cardGroupId.
     * @param  cardSequenceNumber  String value for cardSequenceNumber.
     * @param  checkDigit  String value for checkDigit.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  vATRate  Double value for vATRate.
     * @param  vATCategory  String value for vATCategory.
     * @param  vATCountry  String value for vATCountry.
     * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
     * @param  transactionType  String value for transactionType.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  effectiveUnitDiscountInCustomerCurrency  Integer value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Integer value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  vATonNetAmountInCustomerCurrency  Integer value for vATonNetAmountInCustomerCurrency.
     * @param  discountType  String value for discountType.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  salesItemId  Integer value for salesItemId.
     * @param  payerGroup  String value for payerGroup.
     * @param  payerGroupName  String value for payerGroupName.
     * @param  refundFlag  String value for refundFlag.
     * @param  originalSalesItemId  String value for originalSalesItemId.
     * @param  delcoName  String value for delcoName.
     * @param  delcoCode  String value for delcoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
     * @param  authorisationCode  String value for authorisationCode.
     * @param  transactionId  String value for transactionId.
     * @param  transactionLine  String value for transactionLine.
     * @param  allowClearing  String value for allowClearing.
     * @param  cRMNumber  String value for cRMNumber.
     * @param  disputeStatus  String value for disputeStatus.
     * @param  rebateRate  Double value for rebateRate.
     * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroRebateAmount  Integer value for euroRebateAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  parentCustomerName  String value for parentCustomerName.
     * @param  parentCustomerId  Integer value for parentCustomerId.
     * @param  incomingSiteNumber  String value for incomingSiteNumber.
     * @param  incomingSiteDescription  String value for incomingSiteDescription.
     * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
     * @param  incomingProductCode  String value for incomingProductCode.
     * @param  creditDebitCode  String value for creditDebitCode.
     * @param  correctionFlag  String value for correctionFlag.
     * @param  additional1  String value for additional1.
     * @param  additional2  String value for additional2.
     * @param  additional3  String value for additional3.
     * @param  additional4  String value for additional4.
     * @param  rebateonNetAmountInCustomerCurrency  Double value for
     *         rebateonNetAmountInCustomerCurrency.
     * @param  rebateonNetAmountInTransactionCurrency  Double value for
     *         rebateonNetAmountInTransactionCurrency.
     * @param  networkCode  String value for networkCode.
     * @param  trnIdentifier  String value for trnIdentifier.
     * @param  cardType  String value for cardType.
     * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
     * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
     * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
     * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
     * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
     * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
     * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
     * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
     * @param  transactionTypeDescription  String value for transactionTypeDescription.
     */

    protected MultiPricedTransactionResponseTransactionsItems(OptionalNullable<String> type,
            OptionalNullable<Integer> cardId, OptionalNullable<String> cardPAN,
            OptionalNullable<String> cardExpiry, OptionalNullable<String> transactionDate,
            OptionalNullable<String> transactionTime, OptionalNullable<String> uTCOffset,
            OptionalNullable<String> fleetIdInput, OptionalNullable<Integer> odometerInput,
            OptionalNullable<String> driverName, OptionalNullable<String> vehicleRegistration,
            OptionalNullable<String> invoiceCurrencyCode,
            OptionalNullable<String> invoiceCurrencySymbol,
            OptionalNullable<String> transactionCurrencyCode,
            OptionalNullable<String> transactionCurrencySymbol,
            OptionalNullable<Integer> transactionNetAmount,
            OptionalNullable<Integer> transactionTax,
            OptionalNullable<Integer> transactionGrossAmount,
            OptionalNullable<Integer> invoiceNetAmount, OptionalNullable<Integer> invoiceTax,
            OptionalNullable<Integer> invoiceGrossAmount,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountName,
            OptionalNullable<String> accountShortName, OptionalNullable<Integer> quantity,
            OptionalNullable<Boolean> fuelProduct,
            OptionalNullable<Integer> unitPriceInTransactionCurrency,
            OptionalNullable<Integer> unitPriceInInvoiceCurrency,
            OptionalNullable<Integer> unitDiscountTransactionCurrency,
            OptionalNullable<Integer> unitDiscountInvoiceCurrency,
            OptionalNullable<Boolean> isInvoiced, OptionalNullable<String> invoiceNumber,
            OptionalNullable<String> invoiceDate, OptionalNullable<String> siteCode,
            OptionalNullable<String> siteName, OptionalNullable<String> siteCountry,
            List<SiteLocation> location, OptionalNullable<String> cardGroupName,
            OptionalNullable<String> receiptNumber, OptionalNullable<String> productCode,
            OptionalNullable<String> productName, OptionalNullable<Integer> productGroupId,
            OptionalNullable<String> productGroupName, OptionalNullable<Double> delCoExchangeRate,
            OptionalNullable<Integer> colCoExchangeRate, OptionalNullable<Boolean> isShellSite,
            OptionalNullable<String> network, OptionalNullable<Integer> siteGroupId,
            OptionalNullable<String> siteGroupName, OptionalNullable<String> postingDate,
            OptionalNullable<String> issuerCode, OptionalNullable<String> purchasedInCountryCode,
            OptionalNullable<String> customerCountryCode, OptionalNullable<String> customerCountry,
            OptionalNullable<String> releaseCode, OptionalNullable<String> cardGroupId,
            OptionalNullable<String> cardSequenceNumber, OptionalNullable<String> checkDigit,
            OptionalNullable<String> fleetIDDescription, OptionalNullable<Double> vATRate,
            OptionalNullable<String> vATCategory, OptionalNullable<String> vATCountry,
            OptionalNullable<Double> effectiveDiscountInTrxCurrency,
            OptionalNullable<String> transactionType, OptionalNullable<String> pINIndicator,
            OptionalNullable<String> vATApplicable, OptionalNullable<String> netInvoiceIndicator,
            OptionalNullable<String> customerCurrencyCode,
            OptionalNullable<String> customerCurrencySymbol,
            OptionalNullable<Integer> effectiveUnitDiscountInCustomerCurrency,
            OptionalNullable<Integer> effectiveDiscountInCustomerCurrency,
            OptionalNullable<Integer> vATonNetAmountInCustomerCurrency,
            OptionalNullable<String> discountType, OptionalNullable<String> transactionStatus,
            OptionalNullable<Integer> salesItemId, OptionalNullable<String> payerGroup,
            OptionalNullable<String> payerGroupName, OptionalNullable<String> refundFlag,
            OptionalNullable<String> originalSalesItemId, OptionalNullable<String> delcoName,
            OptionalNullable<String> delcoCode, OptionalNullable<String> payerNumber,
            OptionalNullable<String> payerName, OptionalNullable<String> cardExpiryPeriod,
            OptionalNullable<String> authorisationCode, OptionalNullable<String> transactionId,
            OptionalNullable<String> transactionLine, OptionalNullable<String> allowClearing,
            OptionalNullable<String> cRMNumber, OptionalNullable<String> disputeStatus,
            OptionalNullable<Double> rebateRate, OptionalNullable<Integer> delCoToColCoExchangeRate,
            OptionalNullable<Double> netEuroAmount, OptionalNullable<Integer> euroRebateAmount,
            OptionalNullable<Double> euroVATAmount, OptionalNullable<String> parentCustomerNumber,
            OptionalNullable<String> parentCustomerName, OptionalNullable<Integer> parentCustomerId,
            OptionalNullable<String> incomingSiteNumber,
            OptionalNullable<String> incomingSiteDescription,
            OptionalNullable<String> incomingCurrencyCode,
            OptionalNullable<String> incomingProductCode, OptionalNullable<String> creditDebitCode,
            OptionalNullable<String> correctionFlag, OptionalNullable<String> additional1,
            OptionalNullable<String> additional2, OptionalNullable<String> additional3,
            OptionalNullable<String> additional4,
            OptionalNullable<Double> rebateonNetAmountInCustomerCurrency,
            OptionalNullable<Double> rebateonNetAmountInTransactionCurrency,
            OptionalNullable<String> networkCode, OptionalNullable<String> trnIdentifier,
            OptionalNullable<String> cardType, OptionalNullable<Double> delcoListPriceUnitNet,
            OptionalNullable<Double> delcoRetailPriceUnitNet,
            OptionalNullable<Double> delcoRetailPriceUnitGross,
            OptionalNullable<Double> delcoRetailValueTotalNet,
            OptionalNullable<Double> delcoRetailValueTotalGross,
            OptionalNullable<Double> customerRetailPriceUnitGross,
            OptionalNullable<Double> customerRetailValueTotalGross,
            OptionalNullable<Double> customerRetailValueTotalNet,
            OptionalNullable<String> transactionTypeDescription) {
        this.type = type;
        this.cardId = cardId;
        this.cardPAN = cardPAN;
        this.cardExpiry = cardExpiry;
        this.transactionDate = transactionDate;
        this.transactionTime = transactionTime;
        this.uTCOffset = uTCOffset;
        this.fleetIdInput = fleetIdInput;
        this.odometerInput = odometerInput;
        this.driverName = driverName;
        this.vehicleRegistration = vehicleRegistration;
        this.invoiceCurrencyCode = invoiceCurrencyCode;
        this.invoiceCurrencySymbol = invoiceCurrencySymbol;
        this.transactionCurrencyCode = transactionCurrencyCode;
        this.transactionCurrencySymbol = transactionCurrencySymbol;
        this.transactionNetAmount = transactionNetAmount;
        this.transactionTax = transactionTax;
        this.transactionGrossAmount = transactionGrossAmount;
        this.invoiceNetAmount = invoiceNetAmount;
        this.invoiceTax = invoiceTax;
        this.invoiceGrossAmount = invoiceGrossAmount;
        this.purchasedInCountry = purchasedInCountry;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.accountShortName = accountShortName;
        this.quantity = quantity;
        this.fuelProduct = fuelProduct;
        this.unitPriceInTransactionCurrency = unitPriceInTransactionCurrency;
        this.unitPriceInInvoiceCurrency = unitPriceInInvoiceCurrency;
        this.unitDiscountTransactionCurrency = unitDiscountTransactionCurrency;
        this.unitDiscountInvoiceCurrency = unitDiscountInvoiceCurrency;
        this.isInvoiced = isInvoiced;
        this.invoiceNumber = invoiceNumber;
        this.invoiceDate = invoiceDate;
        this.siteCode = siteCode;
        this.siteName = siteName;
        this.siteCountry = siteCountry;
        this.location = location;
        this.cardGroupName = cardGroupName;
        this.receiptNumber = receiptNumber;
        this.productCode = productCode;
        this.productName = productName;
        this.productGroupId = productGroupId;
        this.productGroupName = productGroupName;
        this.delCoExchangeRate = delCoExchangeRate;
        this.colCoExchangeRate = colCoExchangeRate;
        this.isShellSite = isShellSite;
        this.network = network;
        this.siteGroupId = siteGroupId;
        this.siteGroupName = siteGroupName;
        this.postingDate = postingDate;
        this.issuerCode = issuerCode;
        this.purchasedInCountryCode = purchasedInCountryCode;
        this.customerCountryCode = customerCountryCode;
        this.customerCountry = customerCountry;
        this.releaseCode = releaseCode;
        this.cardGroupId = cardGroupId;
        this.cardSequenceNumber = cardSequenceNumber;
        this.checkDigit = checkDigit;
        this.fleetIDDescription = fleetIDDescription;
        this.vATRate = vATRate;
        this.vATCategory = vATCategory;
        this.vATCountry = vATCountry;
        this.effectiveDiscountInTrxCurrency = effectiveDiscountInTrxCurrency;
        this.transactionType = transactionType;
        this.pINIndicator = pINIndicator;
        this.vATApplicable = vATApplicable;
        this.netInvoiceIndicator = netInvoiceIndicator;
        this.customerCurrencyCode = customerCurrencyCode;
        this.customerCurrencySymbol = customerCurrencySymbol;
        this.effectiveUnitDiscountInCustomerCurrency = effectiveUnitDiscountInCustomerCurrency;
        this.effectiveDiscountInCustomerCurrency = effectiveDiscountInCustomerCurrency;
        this.vATonNetAmountInCustomerCurrency = vATonNetAmountInCustomerCurrency;
        this.discountType = discountType;
        this.transactionStatus = transactionStatus;
        this.salesItemId = salesItemId;
        this.payerGroup = payerGroup;
        this.payerGroupName = payerGroupName;
        this.refundFlag = refundFlag;
        this.originalSalesItemId = originalSalesItemId;
        this.delcoName = delcoName;
        this.delcoCode = delcoCode;
        this.payerNumber = payerNumber;
        this.payerName = payerName;
        this.cardExpiryPeriod = cardExpiryPeriod;
        this.authorisationCode = authorisationCode;
        this.transactionId = transactionId;
        this.transactionLine = transactionLine;
        this.allowClearing = allowClearing;
        this.cRMNumber = cRMNumber;
        this.disputeStatus = disputeStatus;
        this.rebateRate = rebateRate;
        this.delCoToColCoExchangeRate = delCoToColCoExchangeRate;
        this.netEuroAmount = netEuroAmount;
        this.euroRebateAmount = euroRebateAmount;
        this.euroVATAmount = euroVATAmount;
        this.parentCustomerNumber = parentCustomerNumber;
        this.parentCustomerName = parentCustomerName;
        this.parentCustomerId = parentCustomerId;
        this.incomingSiteNumber = incomingSiteNumber;
        this.incomingSiteDescription = incomingSiteDescription;
        this.incomingCurrencyCode = incomingCurrencyCode;
        this.incomingProductCode = incomingProductCode;
        this.creditDebitCode = creditDebitCode;
        this.correctionFlag = correctionFlag;
        this.additional1 = additional1;
        this.additional2 = additional2;
        this.additional3 = additional3;
        this.additional4 = additional4;
        this.rebateonNetAmountInCustomerCurrency = rebateonNetAmountInCustomerCurrency;
        this.rebateonNetAmountInTransactionCurrency = rebateonNetAmountInTransactionCurrency;
        this.networkCode = networkCode;
        this.trnIdentifier = trnIdentifier;
        this.cardType = cardType;
        this.delcoListPriceUnitNet = delcoListPriceUnitNet;
        this.delcoRetailPriceUnitNet = delcoRetailPriceUnitNet;
        this.delcoRetailPriceUnitGross = delcoRetailPriceUnitGross;
        this.delcoRetailValueTotalNet = delcoRetailValueTotalNet;
        this.delcoRetailValueTotalGross = delcoRetailValueTotalGross;
        this.customerRetailPriceUnitGross = customerRetailPriceUnitGross;
        this.customerRetailValueTotalGross = customerRetailValueTotalGross;
        this.customerRetailValueTotalNet = customerRetailValueTotalNet;
        this.transactionTypeDescription = transactionTypeDescription;
    }

    /**
     * Internal Getter for Type.
     * TransactionType is the type of transaction. Example: SalesItem /FeeItem
     * @return Returns the Internal String
     */
    @JsonGetter("Type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * TransactionType is the type of transaction. Example: SalesItem /FeeItem
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * TransactionType is the type of transaction. Example: SalesItem /FeeItem
     * @param type Value for String
     */
    @JsonSetter("Type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * TransactionType is the type of transaction. Example: SalesItem /FeeItem
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Id in GFN Example: 275549
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Id in GFN Example: 275549
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Id in GFN Example: 275549
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Id in GFN Example: 275549
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Card PAN Mask PAN if enabled at Microservices configuration (Mask all digits except the Last
     * 6 digits of the PAN) Example: 7002051006629890645
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Card PAN Mask PAN if enabled at Microservices configuration (Mask all digits except the Last
     * 6 digits of the PAN) Example: 7002051006629890645
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Card PAN Mask PAN if enabled at Microservices configuration (Mask all digits except the Last
     * 6 digits of the PAN) Example: 7002051006629890645
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Card PAN Mask PAN if enabled at Microservices configuration (Mask all digits except the Last
     * 6 digits of the PAN) Example: 7002051006629890645
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("CardExpiry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardExpiry() {
        return this.cardExpiry;
    }

    /**
     * Getter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @return Returns the String
     */
    public String getCardExpiry() {
        return OptionalNullable.getFrom(cardExpiry);
    }

    /**
     * Setter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @param cardExpiry Value for String
     */
    @JsonSetter("CardExpiry")
    public void setCardExpiry(String cardExpiry) {
        this.cardExpiry = OptionalNullable.of(cardExpiry);
    }

    /**
     * UnSetter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     */
    public void unsetCardExpiry() {
        cardExpiry = null;
    }

    /**
     * Internal Getter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd Note: For a fee
     * item, this parameter will be populated with fee date.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionDate() {
        return this.transactionDate;
    }

    /**
     * Getter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd Note: For a fee
     * item, this parameter will be populated with fee date.
     * @return Returns the String
     */
    public String getTransactionDate() {
        return OptionalNullable.getFrom(transactionDate);
    }

    /**
     * Setter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd Note: For a fee
     * item, this parameter will be populated with fee date.
     * @param transactionDate Value for String
     */
    @JsonSetter("TransactionDate")
    public void setTransactionDate(String transactionDate) {
        this.transactionDate = OptionalNullable.of(transactionDate);
    }

    /**
     * UnSetter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd Note: For a fee
     * item, this parameter will be populated with fee date.
     */
    public void unsetTransactionDate() {
        transactionDate = null;
    }

    /**
     * Internal Getter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * Note: For a fee item, this parameter will be populated with fee date.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionTime() {
        return this.transactionTime;
    }

    /**
     * Getter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * Note: For a fee item, this parameter will be populated with fee date.
     * @return Returns the String
     */
    public String getTransactionTime() {
        return OptionalNullable.getFrom(transactionTime);
    }

    /**
     * Setter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * Note: For a fee item, this parameter will be populated with fee date.
     * @param transactionTime Value for String
     */
    @JsonSetter("TransactionTime")
    public void setTransactionTime(String transactionTime) {
        this.transactionTime = OptionalNullable.of(transactionTime);
    }

    /**
     * UnSetter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * Note: For a fee item, this parameter will be populated with fee date.
     */
    public void unsetTransactionTime() {
        transactionTime = null;
    }

    /**
     * Internal Getter for UTCOffset.
     * UTC Offset extracted from Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @return Returns the Internal String
     */
    @JsonGetter("UTCOffset")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUTCOffset() {
        return this.uTCOffset;
    }

    /**
     * Getter for UTCOffset.
     * UTC Offset extracted from Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @return Returns the String
     */
    public String getUTCOffset() {
        return OptionalNullable.getFrom(uTCOffset);
    }

    /**
     * Setter for UTCOffset.
     * UTC Offset extracted from Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @param uTCOffset Value for String
     */
    @JsonSetter("UTCOffset")
    public void setUTCOffset(String uTCOffset) {
        this.uTCOffset = OptionalNullable.of(uTCOffset);
    }

    /**
     * UnSetter for UTCOffset.
     * UTC Offset extracted from Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     */
    public void unsetUTCOffset() {
        uTCOffset = null;
    }

    /**
     * Internal Getter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction Example: XYZ1234 Note: -
     * The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIdInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIdInput() {
        return this.fleetIdInput;
    }

    /**
     * Getter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction Example: XYZ1234 Note: -
     * The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getFleetIdInput() {
        return OptionalNullable.getFrom(fleetIdInput);
    }

    /**
     * Setter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction Example: XYZ1234 Note: -
     * The value could be null/blank for fees item.
     * @param fleetIdInput Value for String
     */
    @JsonSetter("FleetIdInput")
    public void setFleetIdInput(String fleetIdInput) {
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
    }

    /**
     * UnSetter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction Example: XYZ1234 Note: -
     * The value could be null/blank for fees item.
     */
    public void unsetFleetIdInput() {
        fleetIdInput = null;
    }

    /**
     * Internal Getter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction Example: 12345 Note: -
     * The value could be null/blank for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("OdometerInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetOdometerInput() {
        return this.odometerInput;
    }

    /**
     * Getter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction Example: 12345 Note: -
     * The value could be null/blank for fees item.
     * @return Returns the Integer
     */
    public Integer getOdometerInput() {
        return OptionalNullable.getFrom(odometerInput);
    }

    /**
     * Setter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction Example: 12345 Note: -
     * The value could be null/blank for fees item.
     * @param odometerInput Value for Integer
     */
    @JsonSetter("OdometerInput")
    public void setOdometerInput(Integer odometerInput) {
        this.odometerInput = OptionalNullable.of(odometerInput);
    }

    /**
     * UnSetter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction Example: 12345 Note: -
     * The value could be null/blank for fees item.
     */
    public void unsetOdometerInput() {
        odometerInput = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name embossed on the card Example: ANDREW GILBERRY
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name embossed on the card Example: ANDREW GILBERRY
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name embossed on the card Example: ANDREW GILBERRY
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name embossed on the card Example: ANDREW GILBERRY
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistration() {
        return this.vehicleRegistration;
    }

    /**
     * Getter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @return Returns the String
     */
    public String getVehicleRegistration() {
        return OptionalNullable.getFrom(vehicleRegistration);
    }

    /**
     * Setter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @param vehicleRegistration Value for String
     */
    @JsonSetter("VehicleRegistration")
    public void setVehicleRegistration(String vehicleRegistration) {
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
    }

    /**
     * UnSetter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     */
    public void unsetVehicleRegistration() {
        vehicleRegistration = null;
    }

    /**
     * Internal Getter for InvoiceCurrencyCode.
     * ISO currency code
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencyCode() {
        return this.invoiceCurrencyCode;
    }

    /**
     * Getter for InvoiceCurrencyCode.
     * ISO currency code
     * @return Returns the String
     */
    public String getInvoiceCurrencyCode() {
        return OptionalNullable.getFrom(invoiceCurrencyCode);
    }

    /**
     * Setter for InvoiceCurrencyCode.
     * ISO currency code
     * @param invoiceCurrencyCode Value for String
     */
    @JsonSetter("InvoiceCurrencyCode")
    public void setInvoiceCurrencyCode(String invoiceCurrencyCode) {
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
    }

    /**
     * UnSetter for InvoiceCurrencyCode.
     * ISO currency code
     */
    public void unsetInvoiceCurrencyCode() {
        invoiceCurrencyCode = null;
    }

    /**
     * Internal Getter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code Example: £, $
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencySymbol() {
        return this.invoiceCurrencySymbol;
    }

    /**
     * Getter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code Example: £, $
     * @return Returns the String
     */
    public String getInvoiceCurrencySymbol() {
        return OptionalNullable.getFrom(invoiceCurrencySymbol);
    }

    /**
     * Setter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code Example: £, $
     * @param invoiceCurrencySymbol Value for String
     */
    @JsonSetter("InvoiceCurrencySymbol")
    public void setInvoiceCurrencySymbol(String invoiceCurrencySymbol) {
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
    }

    /**
     * UnSetter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code Example: £, $
     */
    public void unsetInvoiceCurrencySymbol() {
        invoiceCurrencySymbol = null;
    }

    /**
     * Internal Getter for TransactionCurrencyCode.
     * ISO currency code Example: GBP
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencyCode() {
        return this.transactionCurrencyCode;
    }

    /**
     * Getter for TransactionCurrencyCode.
     * ISO currency code Example: GBP
     * @return Returns the String
     */
    public String getTransactionCurrencyCode() {
        return OptionalNullable.getFrom(transactionCurrencyCode);
    }

    /**
     * Setter for TransactionCurrencyCode.
     * ISO currency code Example: GBP
     * @param transactionCurrencyCode Value for String
     */
    @JsonSetter("TransactionCurrencyCode")
    public void setTransactionCurrencyCode(String transactionCurrencyCode) {
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
    }

    /**
     * UnSetter for TransactionCurrencyCode.
     * ISO currency code Example: GBP
     */
    public void unsetTransactionCurrencyCode() {
        transactionCurrencyCode = null;
    }

    /**
     * Internal Getter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code Example: £, $
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencySymbol() {
        return this.transactionCurrencySymbol;
    }

    /**
     * Getter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code Example: £, $
     * @return Returns the String
     */
    public String getTransactionCurrencySymbol() {
        return OptionalNullable.getFrom(transactionCurrencySymbol);
    }

    /**
     * Setter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code Example: £, $
     * @param transactionCurrencySymbol Value for String
     */
    @JsonSetter("TransactionCurrencySymbol")
    public void setTransactionCurrencySymbol(String transactionCurrencySymbol) {
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
    }

    /**
     * UnSetter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code Example: £, $
     */
    public void unsetTransactionCurrencySymbol() {
        transactionCurrencySymbol = null;
    }

    /**
     * Internal Getter for TransactionNetAmount.
     * Net Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("TransactionNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTransactionNetAmount() {
        return this.transactionNetAmount;
    }

    /**
     * Getter for TransactionNetAmount.
     * Net Amount
     * @return Returns the Integer
     */
    public Integer getTransactionNetAmount() {
        return OptionalNullable.getFrom(transactionNetAmount);
    }

    /**
     * Setter for TransactionNetAmount.
     * Net Amount
     * @param transactionNetAmount Value for Integer
     */
    @JsonSetter("TransactionNetAmount")
    public void setTransactionNetAmount(Integer transactionNetAmount) {
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
    }

    /**
     * UnSetter for TransactionNetAmount.
     * Net Amount
     */
    public void unsetTransactionNetAmount() {
        transactionNetAmount = null;
    }

    /**
     * Internal Getter for TransactionTax.
     * Tax Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("TransactionTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTransactionTax() {
        return this.transactionTax;
    }

    /**
     * Getter for TransactionTax.
     * Tax Amount
     * @return Returns the Integer
     */
    public Integer getTransactionTax() {
        return OptionalNullable.getFrom(transactionTax);
    }

    /**
     * Setter for TransactionTax.
     * Tax Amount
     * @param transactionTax Value for Integer
     */
    @JsonSetter("TransactionTax")
    public void setTransactionTax(Integer transactionTax) {
        this.transactionTax = OptionalNullable.of(transactionTax);
    }

    /**
     * UnSetter for TransactionTax.
     * Tax Amount
     */
    public void unsetTransactionTax() {
        transactionTax = null;
    }

    /**
     * Internal Getter for TransactionGrossAmount.
     * Gross Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("TransactionGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTransactionGrossAmount() {
        return this.transactionGrossAmount;
    }

    /**
     * Getter for TransactionGrossAmount.
     * Gross Amount
     * @return Returns the Integer
     */
    public Integer getTransactionGrossAmount() {
        return OptionalNullable.getFrom(transactionGrossAmount);
    }

    /**
     * Setter for TransactionGrossAmount.
     * Gross Amount
     * @param transactionGrossAmount Value for Integer
     */
    @JsonSetter("TransactionGrossAmount")
    public void setTransactionGrossAmount(Integer transactionGrossAmount) {
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
    }

    /**
     * UnSetter for TransactionGrossAmount.
     * Gross Amount
     */
    public void unsetTransactionGrossAmount() {
        transactionGrossAmount = null;
    }

    /**
     * Internal Getter for InvoiceNetAmount.
     * Invoiced Net Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceNetAmount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceNetAmount() {
        return this.invoiceNetAmount;
    }

    /**
     * Getter for InvoiceNetAmount.
     * Invoiced Net Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceNetAmount.
     * @return Returns the Integer
     */
    public Integer getInvoiceNetAmount() {
        return OptionalNullable.getFrom(invoiceNetAmount);
    }

    /**
     * Setter for InvoiceNetAmount.
     * Invoiced Net Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceNetAmount.
     * @param invoiceNetAmount Value for Integer
     */
    @JsonSetter("InvoiceNetAmount")
    public void setInvoiceNetAmount(Integer invoiceNetAmount) {
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
    }

    /**
     * UnSetter for InvoiceNetAmount.
     * Invoiced Net Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceNetAmount.
     */
    public void unsetInvoiceNetAmount() {
        invoiceNetAmount = null;
    }

    /**
     * Internal Getter for InvoiceTax.
     * Invoiced Tax Amount
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceTax() {
        return this.invoiceTax;
    }

    /**
     * Getter for InvoiceTax.
     * Invoiced Tax Amount
     * @return Returns the Integer
     */
    public Integer getInvoiceTax() {
        return OptionalNullable.getFrom(invoiceTax);
    }

    /**
     * Setter for InvoiceTax.
     * Invoiced Tax Amount
     * @param invoiceTax Value for Integer
     */
    @JsonSetter("InvoiceTax")
    public void setInvoiceTax(Integer invoiceTax) {
        this.invoiceTax = OptionalNullable.of(invoiceTax);
    }

    /**
     * UnSetter for InvoiceTax.
     * Invoiced Tax Amount
     */
    public void unsetInvoiceTax() {
        invoiceTax = null;
    }

    /**
     * Internal Getter for InvoiceGrossAmount.
     * Invoice Gross Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceGrossAmount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceGrossAmount() {
        return this.invoiceGrossAmount;
    }

    /**
     * Getter for InvoiceGrossAmount.
     * Invoice Gross Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceGrossAmount.
     * @return Returns the Integer
     */
    public Integer getInvoiceGrossAmount() {
        return OptionalNullable.getFrom(invoiceGrossAmount);
    }

    /**
     * Setter for InvoiceGrossAmount.
     * Invoice Gross Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceGrossAmount.
     * @param invoiceGrossAmount Value for Integer
     */
    @JsonSetter("InvoiceGrossAmount")
    public void setInvoiceGrossAmount(Integer invoiceGrossAmount) {
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
    }

    /**
     * UnSetter for InvoiceGrossAmount.
     * Invoice Gross Amount Note: For a fee item, this parameter will be populated with fee
     * InvoiceGrossAmount.
     */
    public void unsetInvoiceGrossAmount() {
        invoiceGrossAmount = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Country of Purchase Example: France, Germany Note: - The value could be null/blank for fees
     * item.
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Country of Purchase Example: France, Germany Note: - The value could be null/blank for fees
     * item.
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Country of Purchase Example: France, Germany Note: - The value could be null/blank for fees
     * item.
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Country of Purchase Example: France, Germany Note: - The value could be null/blank for fees
     * item.
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountName.
     * Account Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Account Name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Account Name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Account Name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for Quantity.
     * Quantity/Volume
     * @return Returns the Internal Integer
     */
    @JsonGetter("Quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Quantity.
     * Quantity/Volume
     * @return Returns the Integer
     */
    public Integer getQuantity() {
        return OptionalNullable.getFrom(quantity);
    }

    /**
     * Setter for Quantity.
     * Quantity/Volume
     * @param quantity Value for Integer
     */
    @JsonSetter("Quantity")
    public void setQuantity(Integer quantity) {
        this.quantity = OptionalNullable.of(quantity);
    }

    /**
     * UnSetter for Quantity.
     * Quantity/Volume
     */
    public void unsetQuantity() {
        quantity = null;
    }

    /**
     * Internal Getter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelProduct() {
        return this.fuelProduct;
    }

    /**
     * Getter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @return Returns the Boolean
     */
    public Boolean getFuelProduct() {
        return OptionalNullable.getFrom(fuelProduct);
    }

    /**
     * Setter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @param fuelProduct Value for Boolean
     */
    @JsonSetter("FuelProduct")
    public void setFuelProduct(Boolean fuelProduct) {
        this.fuelProduct = OptionalNullable.of(fuelProduct);
    }

    /**
     * UnSetter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     */
    public void unsetFuelProduct() {
        fuelProduct = null;
    }

    /**
     * Internal Getter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency Note: - The value could be null/blank for fees
     * item
     * @return Returns the Internal Integer
     */
    @JsonGetter("UnitPriceInTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetUnitPriceInTransactionCurrency() {
        return this.unitPriceInTransactionCurrency;
    }

    /**
     * Getter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency Note: - The value could be null/blank for fees
     * item
     * @return Returns the Integer
     */
    public Integer getUnitPriceInTransactionCurrency() {
        return OptionalNullable.getFrom(unitPriceInTransactionCurrency);
    }

    /**
     * Setter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency Note: - The value could be null/blank for fees
     * item
     * @param unitPriceInTransactionCurrency Value for Integer
     */
    @JsonSetter("UnitPriceInTransactionCurrency")
    public void setUnitPriceInTransactionCurrency(Integer unitPriceInTransactionCurrency) {
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
    }

    /**
     * UnSetter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency Note: - The value could be null/blank for fees
     * item
     */
    public void unsetUnitPriceInTransactionCurrency() {
        unitPriceInTransactionCurrency = null;
    }

    /**
     * Internal Getter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency Note: - The value could be null/blank for fees item
     * @return Returns the Internal Integer
     */
    @JsonGetter("UnitPriceInInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetUnitPriceInInvoiceCurrency() {
        return this.unitPriceInInvoiceCurrency;
    }

    /**
     * Getter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency Note: - The value could be null/blank for fees item
     * @return Returns the Integer
     */
    public Integer getUnitPriceInInvoiceCurrency() {
        return OptionalNullable.getFrom(unitPriceInInvoiceCurrency);
    }

    /**
     * Setter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency Note: - The value could be null/blank for fees item
     * @param unitPriceInInvoiceCurrency Value for Integer
     */
    @JsonSetter("UnitPriceInInvoiceCurrency")
    public void setUnitPriceInInvoiceCurrency(Integer unitPriceInInvoiceCurrency) {
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
    }

    /**
     * UnSetter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency Note: - The value could be null/blank for fees item
     */
    public void unsetUnitPriceInInvoiceCurrency() {
        unitPriceInInvoiceCurrency = null;
    }

    /**
     * Internal Getter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency Note: - The value could be null/blank for fees item
     * @return Returns the Internal Integer
     */
    @JsonGetter("UnitDiscountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetUnitDiscountTransactionCurrency() {
        return this.unitDiscountTransactionCurrency;
    }

    /**
     * Getter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency Note: - The value could be null/blank for fees item
     * @return Returns the Integer
     */
    public Integer getUnitDiscountTransactionCurrency() {
        return OptionalNullable.getFrom(unitDiscountTransactionCurrency);
    }

    /**
     * Setter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency Note: - The value could be null/blank for fees item
     * @param unitDiscountTransactionCurrency Value for Integer
     */
    @JsonSetter("UnitDiscountTransactionCurrency")
    public void setUnitDiscountTransactionCurrency(Integer unitDiscountTransactionCurrency) {
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
    }

    /**
     * UnSetter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency Note: - The value could be null/blank for fees item
     */
    public void unsetUnitDiscountTransactionCurrency() {
        unitDiscountTransactionCurrency = null;
    }

    /**
     * Internal Getter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("UnitDiscountInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetUnitDiscountInvoiceCurrency() {
        return this.unitDiscountInvoiceCurrency;
    }

    /**
     * Getter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency Note: - The value could be null/blank for fees item.
     * @return Returns the Integer
     */
    public Integer getUnitDiscountInvoiceCurrency() {
        return OptionalNullable.getFrom(unitDiscountInvoiceCurrency);
    }

    /**
     * Setter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency Note: - The value could be null/blank for fees item.
     * @param unitDiscountInvoiceCurrency Value for Integer
     */
    @JsonSetter("UnitDiscountInvoiceCurrency")
    public void setUnitDiscountInvoiceCurrency(Integer unitDiscountInvoiceCurrency) {
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
    }

    /**
     * UnSetter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency Note: - The value could be null/blank for fees item.
     */
    public void unsetUnitDiscountInvoiceCurrency() {
        unitDiscountInvoiceCurrency = null;
    }

    /**
     * Internal Getter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInvoiced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInvoiced() {
        return this.isInvoiced;
    }

    /**
     * Getter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @return Returns the Boolean
     */
    public Boolean getIsInvoiced() {
        return OptionalNullable.getFrom(isInvoiced);
    }

    /**
     * Setter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @param isInvoiced Value for Boolean
     */
    @JsonSetter("IsInvoiced")
    public void setIsInvoiced(Boolean isInvoiced) {
        this.isInvoiced = OptionalNullable.of(isInvoiced);
    }

    /**
     * UnSetter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     */
    public void unsetIsInvoiced() {
        isInvoiced = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice Number if invoiced Example: S04500493 S04478304 S04490319
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice Number if invoiced Example: S04500493 S04478304 S04490319
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice Number if invoiced Example: S04500493 S04478304 S04490319
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice Number if invoiced Example: S04500493 S04478304 S04490319
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for SiteCode.
     * Site Code Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * Site Code Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @return Returns the String
     */
    public String getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * Site Code Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @param siteCode Value for String
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(String siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * Site Code Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for SiteName.
     * Site Name Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @return Returns the Internal String
     */
    @JsonGetter("SiteName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteName() {
        return this.siteName;
    }

    /**
     * Getter for SiteName.
     * Site Name Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @return Returns the String
     */
    public String getSiteName() {
        return OptionalNullable.getFrom(siteName);
    }

    /**
     * Setter for SiteName.
     * Site Name Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     * @param siteName Value for String
     */
    @JsonSetter("SiteName")
    public void setSiteName(String siteName) {
        this.siteName = OptionalNullable.of(siteName);
    }

    /**
     * UnSetter for SiteName.
     * Site Name Example: 050001 -	CHARNOCK RICHARD NTHBOUND MWSA 0755
     */
    public void unsetSiteName() {
        siteName = null;
    }

    /**
     * Internal Getter for SiteCountry.
     * Site Country Example: France, Germany
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCountry() {
        return this.siteCountry;
    }

    /**
     * Getter for SiteCountry.
     * Site Country Example: France, Germany
     * @return Returns the String
     */
    public String getSiteCountry() {
        return OptionalNullable.getFrom(siteCountry);
    }

    /**
     * Setter for SiteCountry.
     * Site Country Example: France, Germany
     * @param siteCountry Value for String
     */
    @JsonSetter("SiteCountry")
    public void setSiteCountry(String siteCountry) {
        this.siteCountry = OptionalNullable.of(siteCountry);
    }

    /**
     * UnSetter for SiteCountry.
     * Site Country Example: France, Germany
     */
    public void unsetSiteCountry() {
        siteCountry = null;
    }

    /**
     * Getter for Location.
     * @return Returns the List of SiteLocation
     */
    @JsonGetter("Location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<SiteLocation> getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for List of SiteLocation
     */
    @JsonSetter("Location")
    public void setLocation(List<SiteLocation> location) {
        this.location = location;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card Group Name
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card Group Name
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card Group Name
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card Group Name
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for ReceiptNumber.
     * ReceiptNumber
     * @return Returns the Internal String
     */
    @JsonGetter("ReceiptNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReceiptNumber() {
        return this.receiptNumber;
    }

    /**
     * Getter for ReceiptNumber.
     * ReceiptNumber
     * @return Returns the String
     */
    public String getReceiptNumber() {
        return OptionalNullable.getFrom(receiptNumber);
    }

    /**
     * Setter for ReceiptNumber.
     * ReceiptNumber
     * @param receiptNumber Value for String
     */
    @JsonSetter("ReceiptNumber")
    public void setReceiptNumber(String receiptNumber) {
        this.receiptNumber = OptionalNullable.of(receiptNumber);
    }

    /**
     * UnSetter for ReceiptNumber.
     * ReceiptNumber
     */
    public void unsetReceiptNumber() {
        receiptNumber = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code 10	TMF Charges 11	Tunnel/Bridges 12	Motorway toll
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code 10	TMF Charges 11	Tunnel/Bridges 12	Motorway toll
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code 10	TMF Charges 11	Tunnel/Bridges 12	Motorway toll
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code 10	TMF Charges 11	Tunnel/Bridges 12	Motorway toll
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * Product Name Example: Unleaded - High octane Unleaded - Medium octane Unleaded - Low octane
     * Unleaded Environmental
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * Product Name Example: Unleaded - High octane Unleaded - Medium octane Unleaded - Low octane
     * Unleaded Environmental
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * Product Name Example: Unleaded - High octane Unleaded - Medium octane Unleaded - Low octane
     * Unleaded Environmental
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * Product Name Example: Unleaded - High octane Unleaded - Medium octane Unleaded - Low octane
     * Unleaded Environmental
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for ProductGroupId.
     * Product Group Id Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductGroupId() {
        return this.productGroupId;
    }

    /**
     * Getter for ProductGroupId.
     * Product Group Id Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @return Returns the Integer
     */
    public Integer getProductGroupId() {
        return OptionalNullable.getFrom(productGroupId);
    }

    /**
     * Setter for ProductGroupId.
     * Product Group Id Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @param productGroupId Value for Integer
     */
    @JsonSetter("ProductGroupId")
    public void setProductGroupId(Integer productGroupId) {
        this.productGroupId = OptionalNullable.of(productGroupId);
    }

    /**
     * UnSetter for ProductGroupId.
     * Product Group Id Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     */
    public void unsetProductGroupId() {
        productGroupId = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * Product Group Name Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * Product Group Name Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * Product Group Name Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * Product Group Name Example: 1	Parent Product Group 2	All Fuels 3	Motor gasoline 4	2 stroke
     * 5	Autogas
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Internal Getter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate) Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Double
     */
    @JsonGetter("DelCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelCoExchangeRate() {
        return this.delCoExchangeRate;
    }

    /**
     * Getter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate) Note: - The value could be null/blank for fees item.
     * @return Returns the Double
     */
    public Double getDelCoExchangeRate() {
        return OptionalNullable.getFrom(delCoExchangeRate);
    }

    /**
     * Setter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate) Note: - The value could be null/blank for fees item.
     * @param delCoExchangeRate Value for Double
     */
    @JsonSetter("DelCoExchangeRate")
    public void setDelCoExchangeRate(Double delCoExchangeRate) {
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
    }

    /**
     * UnSetter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate) Note: - The value could be null/blank for fees item.
     */
    public void unsetDelCoExchangeRate() {
        delCoExchangeRate = null;
    }

    /**
     * Internal Getter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoExchangeRate() {
        return this.colCoExchangeRate;
    }

    /**
     * Getter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @return Returns the Integer
     */
    public Integer getColCoExchangeRate() {
        return OptionalNullable.getFrom(colCoExchangeRate);
    }

    /**
     * Setter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @param colCoExchangeRate Value for Integer
     */
    @JsonSetter("ColCoExchangeRate")
    public void setColCoExchangeRate(Integer colCoExchangeRate) {
        this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
    }

    /**
     * UnSetter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     */
    public void unsetColCoExchangeRate() {
        colCoExchangeRate = null;
    }

    /**
     * Internal Getter for IsShellSite.
     * True when transaction occurred at a Shell site else return False Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsShellSite")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsShellSite() {
        return this.isShellSite;
    }

    /**
     * Getter for IsShellSite.
     * True when transaction occurred at a Shell site else return False Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Boolean
     */
    public Boolean getIsShellSite() {
        return OptionalNullable.getFrom(isShellSite);
    }

    /**
     * Setter for IsShellSite.
     * True when transaction occurred at a Shell site else return False Note: - The value could be
     * null/blank for fees item.
     * @param isShellSite Value for Boolean
     */
    @JsonSetter("IsShellSite")
    public void setIsShellSite(Boolean isShellSite) {
        this.isShellSite = OptionalNullable.of(isShellSite);
    }

    /**
     * UnSetter for IsShellSite.
     * True when transaction occurred at a Shell site else return False Note: - The value could be
     * null/blank for fees item.
     */
    public void unsetIsShellSite() {
        isShellSite = null;
    }

    /**
     * Internal Getter for Network.
     * Network (Shell PH, ESSO, etc.,) 100013	STEINDORFER 100015	S.A. BELGIAN SHELL N.V. 100016	ESSO
     * BE Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("Network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetwork() {
        return this.network;
    }

    /**
     * Getter for Network.
     * Network (Shell PH, ESSO, etc.,) 100013	STEINDORFER 100015	S.A. BELGIAN SHELL N.V. 100016	ESSO
     * BE Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getNetwork() {
        return OptionalNullable.getFrom(network);
    }

    /**
     * Setter for Network.
     * Network (Shell PH, ESSO, etc.,) 100013	STEINDORFER 100015	S.A. BELGIAN SHELL N.V. 100016	ESSO
     * BE Note: - The value could be null/blank for fees item.
     * @param network Value for String
     */
    @JsonSetter("Network")
    public void setNetwork(String network) {
        this.network = OptionalNullable.of(network);
    }

    /**
     * UnSetter for Network.
     * Network (Shell PH, ESSO, etc.,) 100013	STEINDORFER 100015	S.A. BELGIAN SHELL N.V. 100016	ESSO
     * BE Note: - The value could be null/blank for fees item.
     */
    public void unsetNetwork() {
        network = null;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Site Group Id Example: 202 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id Example: 202 Note: - The value could be null/blank for fees item.
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id Example: 202 Note: - The value could be null/blank for fees item.
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Site Group Id Example: 202 Note: - The value could be null/blank for fees item.
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for SiteGroupName.
     * Site GroupName Example: CZ 9100 ECONOMY NETWORK Note: - The value could be null/blank for
     * fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("SiteGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteGroupName() {
        return this.siteGroupName;
    }

    /**
     * Getter for SiteGroupName.
     * Site GroupName Example: CZ 9100 ECONOMY NETWORK Note: - The value could be null/blank for
     * fees item.
     * @return Returns the String
     */
    public String getSiteGroupName() {
        return OptionalNullable.getFrom(siteGroupName);
    }

    /**
     * Setter for SiteGroupName.
     * Site GroupName Example: CZ 9100 ECONOMY NETWORK Note: - The value could be null/blank for
     * fees item.
     * @param siteGroupName Value for String
     */
    @JsonSetter("SiteGroupName")
    public void setSiteGroupName(String siteGroupName) {
        this.siteGroupName = OptionalNullable.of(siteGroupName);
    }

    /**
     * UnSetter for SiteGroupName.
     * Site GroupName Example: CZ 9100 ECONOMY NETWORK Note: - The value could be null/blank for
     * fees item.
     */
    public void unsetSiteGroupName() {
        siteGroupName = null;
    }

    /**
     * Internal Getter for PostingDate.
     * Transaction Posting Date Format: yyyyMMdd HHmmss
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDate() {
        return this.postingDate;
    }

    /**
     * Getter for PostingDate.
     * Transaction Posting Date Format: yyyyMMdd HHmmss
     * @return Returns the String
     */
    public String getPostingDate() {
        return OptionalNullable.getFrom(postingDate);
    }

    /**
     * Setter for PostingDate.
     * Transaction Posting Date Format: yyyyMMdd HHmmss
     * @param postingDate Value for String
     */
    @JsonSetter("PostingDate")
    public void setPostingDate(String postingDate) {
        this.postingDate = OptionalNullable.of(postingDate);
    }

    /**
     * UnSetter for PostingDate.
     * Transaction Posting Date Format: yyyyMMdd HHmmss
     */
    public void unsetPostingDate() {
        postingDate = null;
    }

    /**
     * Internal Getter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet
     * @return Returns the Internal String
     */
    @JsonGetter("IssuerCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuerCode() {
        return this.issuerCode;
    }

    /**
     * Getter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet
     * @return Returns the String
     */
    public String getIssuerCode() {
        return OptionalNullable.getFrom(issuerCode);
    }

    /**
     * Setter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet
     * @param issuerCode Value for String
     */
    @JsonSetter("IssuerCode")
    public void setIssuerCode(String issuerCode) {
        this.issuerCode = OptionalNullable.of(issuerCode);
    }

    /**
     * UnSetter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet
     */
    public void unsetIssuerCode() {
        issuerCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place Example: “NL” Note: - The value
     * could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountryCode() {
        return this.purchasedInCountryCode;
    }

    /**
     * Getter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place Example: “NL” Note: - The value
     * could be null/blank for fees item.
     * @return Returns the String
     */
    public String getPurchasedInCountryCode() {
        return OptionalNullable.getFrom(purchasedInCountryCode);
    }

    /**
     * Setter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place Example: “NL” Note: - The value
     * could be null/blank for fees item.
     * @param purchasedInCountryCode Value for String
     */
    @JsonSetter("PurchasedInCountryCode")
    public void setPurchasedInCountryCode(String purchasedInCountryCode) {
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
    }

    /**
     * UnSetter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place Example: “NL” Note: - The value
     * could be null/blank for fees item.
     */
    public void unsetPurchasedInCountryCode() {
        purchasedInCountryCode = null;
    }

    /**
     * Internal Getter for CustomerCountryCode.
     * ISO code of the Customer Country Example: NL
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountryCode() {
        return this.customerCountryCode;
    }

    /**
     * Getter for CustomerCountryCode.
     * ISO code of the Customer Country Example: NL
     * @return Returns the String
     */
    public String getCustomerCountryCode() {
        return OptionalNullable.getFrom(customerCountryCode);
    }

    /**
     * Setter for CustomerCountryCode.
     * ISO code of the Customer Country Example: NL
     * @param customerCountryCode Value for String
     */
    @JsonSetter("CustomerCountryCode")
    public void setCustomerCountryCode(String customerCountryCode) {
        this.customerCountryCode = OptionalNullable.of(customerCountryCode);
    }

    /**
     * UnSetter for CustomerCountryCode.
     * ISO code of the Customer Country Example: NL
     */
    public void unsetCustomerCountryCode() {
        customerCountryCode = null;
    }

    /**
     * Internal Getter for CustomerCountry.
     * Name of the Customer Country Example: Netherlands
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountry() {
        return this.customerCountry;
    }

    /**
     * Getter for CustomerCountry.
     * Name of the Customer Country Example: Netherlands
     * @return Returns the String
     */
    public String getCustomerCountry() {
        return OptionalNullable.getFrom(customerCountry);
    }

    /**
     * Setter for CustomerCountry.
     * Name of the Customer Country Example: Netherlands
     * @param customerCountry Value for String
     */
    @JsonSetter("CustomerCountry")
    public void setCustomerCountry(String customerCountry) {
        this.customerCountry = OptionalNullable.of(customerCountry);
    }

    /**
     * UnSetter for CustomerCountry.
     * Name of the Customer Country Example: Netherlands
     */
    public void unsetCustomerCountry() {
        customerCountry = null;
    }

    /**
     * Internal Getter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN Example: 8 for 7021882
     * @return Returns the Internal String
     */
    @JsonGetter("ReleaseCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReleaseCode() {
        return this.releaseCode;
    }

    /**
     * Getter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN Example: 8 for 7021882
     * @return Returns the String
     */
    public String getReleaseCode() {
        return OptionalNullable.getFrom(releaseCode);
    }

    /**
     * Setter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN Example: 8 for 7021882
     * @param releaseCode Value for String
     */
    @JsonSetter("ReleaseCode")
    public void setReleaseCode(String releaseCode) {
        this.releaseCode = OptionalNullable.of(releaseCode);
    }

    /**
     * UnSetter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN Example: 8 for 7021882
     */
    public void unsetReleaseCode() {
        releaseCode = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID
     * @return Returns the String
     */
    public String getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID
     * @param cardGroupId Value for String
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(String cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @return Returns the Internal String
     */
    @JsonGetter("CardSequenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardSequenceNumber() {
        return this.cardSequenceNumber;
    }

    /**
     * Getter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @return Returns the String
     */
    public String getCardSequenceNumber() {
        return OptionalNullable.getFrom(cardSequenceNumber);
    }

    /**
     * Setter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @param cardSequenceNumber Value for String
     */
    @JsonSetter("CardSequenceNumber")
    public void setCardSequenceNumber(String cardSequenceNumber) {
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
    }

    /**
     * UnSetter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     */
    public void unsetCardSequenceNumber() {
        cardSequenceNumber = null;
    }

    /**
     * Internal Getter for CheckDigit.
     * Check digit, Last number of the card pan
     * @return Returns the Internal String
     */
    @JsonGetter("CheckDigit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCheckDigit() {
        return this.checkDigit;
    }

    /**
     * Getter for CheckDigit.
     * Check digit, Last number of the card pan
     * @return Returns the String
     */
    public String getCheckDigit() {
        return OptionalNullable.getFrom(checkDigit);
    }

    /**
     * Setter for CheckDigit.
     * Check digit, Last number of the card pan
     * @param checkDigit Value for String
     */
    @JsonSetter("CheckDigit")
    public void setCheckDigit(String checkDigit) {
        this.checkDigit = OptionalNullable.of(checkDigit);
    }

    /**
     * UnSetter for CheckDigit.
     * Check digit, Last number of the card pan
     */
    public void unsetCheckDigit() {
        checkDigit = null;
    }

    /**
     * Internal Getter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIDDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIDDescription() {
        return this.fleetIDDescription;
    }

    /**
     * Getter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @return Returns the String
     */
    public String getFleetIDDescription() {
        return OptionalNullable.getFrom(fleetIDDescription);
    }

    /**
     * Setter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @param fleetIDDescription Value for String
     */
    @JsonSetter("FleetIDDescription")
    public void setFleetIDDescription(String fleetIDDescription) {
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
    }

    /**
     * UnSetter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     */
    public void unsetFleetIDDescription() {
        fleetIDDescription = null;
    }

    /**
     * Internal Getter for VATRate.
     * VAT Percentage 0.20 for 20% Note: This parameter will be populated in the response for both
     * SalesItem and FeeItem
     * @return Returns the Internal Double
     */
    @JsonGetter("VATRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATRate() {
        return this.vATRate;
    }

    /**
     * Getter for VATRate.
     * VAT Percentage 0.20 for 20% Note: This parameter will be populated in the response for both
     * SalesItem and FeeItem
     * @return Returns the Double
     */
    public Double getVATRate() {
        return OptionalNullable.getFrom(vATRate);
    }

    /**
     * Setter for VATRate.
     * VAT Percentage 0.20 for 20% Note: This parameter will be populated in the response for both
     * SalesItem and FeeItem
     * @param vATRate Value for Double
     */
    @JsonSetter("VATRate")
    public void setVATRate(Double vATRate) {
        this.vATRate = OptionalNullable.of(vATRate);
    }

    /**
     * UnSetter for VATRate.
     * VAT Percentage 0.20 for 20% Note: This parameter will be populated in the response for both
     * SalesItem and FeeItem
     */
    public void unsetVATRate() {
        vATRate = null;
    }

    /**
     * Internal Getter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated
     * @return Returns the Internal String
     */
    @JsonGetter("VATCategory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCategory() {
        return this.vATCategory;
    }

    /**
     * Getter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated
     * @return Returns the String
     */
    public String getVATCategory() {
        return OptionalNullable.getFrom(vATCategory);
    }

    /**
     * Setter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated
     * @param vATCategory Value for String
     */
    @JsonSetter("VATCategory")
    public void setVATCategory(String vATCategory) {
        this.vATCategory = OptionalNullable.of(vATCategory);
    }

    /**
     * UnSetter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated
     */
    public void unsetVATCategory() {
        vATCategory = null;
    }

    /**
     * Internal Getter for VATCountry.
     * VAT Country Example: Netherlands
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountry() {
        return this.vATCountry;
    }

    /**
     * Getter for VATCountry.
     * VAT Country Example: Netherlands
     * @return Returns the String
     */
    public String getVATCountry() {
        return OptionalNullable.getFrom(vATCountry);
    }

    /**
     * Setter for VATCountry.
     * VAT Country Example: Netherlands
     * @param vATCountry Value for String
     */
    @JsonSetter("VATCountry")
    public void setVATCountry(String vATCountry) {
        this.vATCountry = OptionalNullable.of(vATCountry);
    }

    /**
     * UnSetter for VATCountry.
     * VAT Country Example: Netherlands
     */
    public void unsetVATCountry() {
        vATCountry = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits Example: 0.0000
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveDiscountInTrxCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveDiscountInTrxCurrency() {
        return this.effectiveDiscountInTrxCurrency;
    }

    /**
     * Getter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits Example: 0.0000
     * @return Returns the Double
     */
    public Double getEffectiveDiscountInTrxCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInTrxCurrency);
    }

    /**
     * Setter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits Example: 0.0000
     * @param effectiveDiscountInTrxCurrency Value for Double
     */
    @JsonSetter("EffectiveDiscountInTrxCurrency")
    public void setEffectiveDiscountInTrxCurrency(Double effectiveDiscountInTrxCurrency) {
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits Example: 0.0000
     */
    public void unsetEffectiveDiscountInTrxCurrency() {
        effectiveDiscountInTrxCurrency = null;
    }

    /**
     * Internal Getter for TransactionType.
     * Transaction Type Example: Purchase when Card is Present else Blank Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionType() {
        return this.transactionType;
    }

    /**
     * Getter for TransactionType.
     * Transaction Type Example: Purchase when Card is Present else Blank Note: - The value could be
     * null/blank for fees item.
     * @return Returns the String
     */
    public String getTransactionType() {
        return OptionalNullable.getFrom(transactionType);
    }

    /**
     * Setter for TransactionType.
     * Transaction Type Example: Purchase when Card is Present else Blank Note: - The value could be
     * null/blank for fees item.
     * @param transactionType Value for String
     */
    @JsonSetter("TransactionType")
    public void setTransactionType(String transactionType) {
        this.transactionType = OptionalNullable.of(transactionType);
    }

    /**
     * UnSetter for TransactionType.
     * Transaction Type Example: Purchase when Card is Present else Blank Note: - The value could be
     * null/blank for fees item.
     */
    public void unsetTransactionType() {
        transactionType = null;
    }

    /**
     * Internal Getter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction) Example:
     * “PIN Used'” or “No PIN” or “Unknown” Note: - The value could be null/blank for fees item
     * @return Returns the Internal String
     */
    @JsonGetter("PINIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPINIndicator() {
        return this.pINIndicator;
    }

    /**
     * Getter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction) Example:
     * “PIN Used'” or “No PIN” or “Unknown” Note: - The value could be null/blank for fees item
     * @return Returns the String
     */
    public String getPINIndicator() {
        return OptionalNullable.getFrom(pINIndicator);
    }

    /**
     * Setter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction) Example:
     * “PIN Used'” or “No PIN” or “Unknown” Note: - The value could be null/blank for fees item
     * @param pINIndicator Value for String
     */
    @JsonSetter("PINIndicator")
    public void setPINIndicator(String pINIndicator) {
        this.pINIndicator = OptionalNullable.of(pINIndicator);
    }

    /**
     * UnSetter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction) Example:
     * “PIN Used'” or “No PIN” or “Unknown” Note: - The value could be null/blank for fees item
     */
    public void unsetPINIndicator() {
        pINIndicator = null;
    }

    /**
     * Internal Getter for VATApplicable.
     * Is VAT Applicable for this transaction Example: “Y” or “N”
     * @return Returns the Internal String
     */
    @JsonGetter("VATApplicable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATApplicable() {
        return this.vATApplicable;
    }

    /**
     * Getter for VATApplicable.
     * Is VAT Applicable for this transaction Example: “Y” or “N”
     * @return Returns the String
     */
    public String getVATApplicable() {
        return OptionalNullable.getFrom(vATApplicable);
    }

    /**
     * Setter for VATApplicable.
     * Is VAT Applicable for this transaction Example: “Y” or “N”
     * @param vATApplicable Value for String
     */
    @JsonSetter("VATApplicable")
    public void setVATApplicable(String vATApplicable) {
        this.vATApplicable = OptionalNullable.of(vATApplicable);
    }

    /**
     * UnSetter for VATApplicable.
     * Is VAT Applicable for this transaction Example: “Y” or “N”
     */
    public void unsetVATApplicable() {
        vATApplicable = null;
    }

    /**
     * Internal Getter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("NetInvoiceIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetInvoiceIndicator() {
        return this.netInvoiceIndicator;
    }

    /**
     * Getter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getNetInvoiceIndicator() {
        return OptionalNullable.getFrom(netInvoiceIndicator);
    }

    /**
     * Setter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * Note: - The value could be null/blank for fees item.
     * @param netInvoiceIndicator Value for String
     */
    @JsonSetter("NetInvoiceIndicator")
    public void setNetInvoiceIndicator(String netInvoiceIndicator) {
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
    }

    /**
     * UnSetter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * Note: - The value could be null/blank for fees item.
     */
    public void unsetNetInvoiceIndicator() {
        netInvoiceIndicator = null;
    }

    /**
     * Internal Getter for CustomerCurrencyCode.
     * Customer currency code Example: GBP
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencyCode() {
        return this.customerCurrencyCode;
    }

    /**
     * Getter for CustomerCurrencyCode.
     * Customer currency code Example: GBP
     * @return Returns the String
     */
    public String getCustomerCurrencyCode() {
        return OptionalNullable.getFrom(customerCurrencyCode);
    }

    /**
     * Setter for CustomerCurrencyCode.
     * Customer currency code Example: GBP
     * @param customerCurrencyCode Value for String
     */
    @JsonSetter("CustomerCurrencyCode")
    public void setCustomerCurrencyCode(String customerCurrencyCode) {
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
    }

    /**
     * UnSetter for CustomerCurrencyCode.
     * Customer currency code Example: GBP
     */
    public void unsetCustomerCurrencyCode() {
        customerCurrencyCode = null;
    }

    /**
     * Internal Getter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencySymbol() {
        return this.customerCurrencySymbol;
    }

    /**
     * Getter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @return Returns the String
     */
    public String getCustomerCurrencySymbol() {
        return OptionalNullable.getFrom(customerCurrencySymbol);
    }

    /**
     * Setter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @param customerCurrencySymbol Value for String
     */
    @JsonSetter("CustomerCurrencySymbol")
    public void setCustomerCurrencySymbol(String customerCurrencySymbol) {
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
    }

    /**
     * UnSetter for CustomerCurrencySymbol.
     * Customer currency Symbol
     */
    public void unsetCustomerCurrencySymbol() {
        customerCurrencySymbol = null;
    }

    /**
     * Internal Getter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount (excluding VAT in Customer currency) Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("EffectiveUnitDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetEffectiveUnitDiscountInCustomerCurrency() {
        return this.effectiveUnitDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount (excluding VAT in Customer currency) Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Integer
     */
    public Integer getEffectiveUnitDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount (excluding VAT in Customer currency) Note: - The value could be
     * null/blank for fees item.
     * @param effectiveUnitDiscountInCustomerCurrency Value for Integer
     */
    @JsonSetter("EffectiveUnitDiscountInCustomerCurrency")
    public void setEffectiveUnitDiscountInCustomerCurrency(Integer effectiveUnitDiscountInCustomerCurrency) {
        this.effectiveUnitDiscountInCustomerCurrency = OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount (excluding VAT in Customer currency) Note: - The value could be
     * null/blank for fees item.
     */
    public void unsetEffectiveUnitDiscountInCustomerCurrency() {
        effectiveUnitDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount (excluding VAT in Customer currency) Note: - The value could be null/blank
     * for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("EffectiveDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetEffectiveDiscountInCustomerCurrency() {
        return this.effectiveDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount (excluding VAT in Customer currency) Note: - The value could be null/blank
     * for fees item.
     * @return Returns the Integer
     */
    public Integer getEffectiveDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount (excluding VAT in Customer currency) Note: - The value could be null/blank
     * for fees item.
     * @param effectiveDiscountInCustomerCurrency Value for Integer
     */
    @JsonSetter("EffectiveDiscountInCustomerCurrency")
    public void setEffectiveDiscountInCustomerCurrency(Integer effectiveDiscountInCustomerCurrency) {
        this.effectiveDiscountInCustomerCurrency = OptionalNullable.of(effectiveDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount (excluding VAT in Customer currency) Note: - The value could be null/blank
     * for fees item.
     */
    public void unsetEffectiveDiscountInCustomerCurrency() {
        effectiveDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount (in Customer currency)
     * @return Returns the Internal Integer
     */
    @JsonGetter("VATonNetAmountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetVATonNetAmountInCustomerCurrency() {
        return this.vATonNetAmountInCustomerCurrency;
    }

    /**
     * Getter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount (in Customer currency)
     * @return Returns the Integer
     */
    public Integer getVATonNetAmountInCustomerCurrency() {
        return OptionalNullable.getFrom(vATonNetAmountInCustomerCurrency);
    }

    /**
     * Setter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount (in Customer currency)
     * @param vATonNetAmountInCustomerCurrency Value for Integer
     */
    @JsonSetter("VATonNetAmountInCustomerCurrency")
    public void setVATonNetAmountInCustomerCurrency(Integer vATonNetAmountInCustomerCurrency) {
        this.vATonNetAmountInCustomerCurrency = OptionalNullable.of(vATonNetAmountInCustomerCurrency);
    }

    /**
     * UnSetter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount (in Customer currency)
     */
    public void unsetVATonNetAmountInCustomerCurrency() {
        vATonNetAmountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit
     * @return Returns the Internal String
     */
    @JsonGetter("DiscountType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDiscountType() {
        return this.discountType;
    }

    /**
     * Getter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit
     * @return Returns the String
     */
    public String getDiscountType() {
        return OptionalNullable.getFrom(discountType);
    }

    /**
     * Setter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit
     * @param discountType Value for String
     */
    @JsonSetter("DiscountType")
    public void setDiscountType(String discountType) {
        this.discountType = OptionalNullable.of(discountType);
    }

    /**
     * UnSetter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit
     */
    public void unsetDiscountType() {
        discountType = null;
    }

    /**
     * Internal Getter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionStatus() {
        return this.transactionStatus;
    }

    /**
     * Getter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @return Returns the String
     */
    public String getTransactionStatus() {
        return OptionalNullable.getFrom(transactionStatus);
    }

    /**
     * Setter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @param transactionStatus Value for String
     */
    @JsonSetter("TransactionStatus")
    public void setTransactionStatus(String transactionStatus) {
        this.transactionStatus = OptionalNullable.of(transactionStatus);
    }

    /**
     * UnSetter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     */
    public void unsetTransactionStatus() {
        transactionStatus = null;
    }

    /**
     * Internal Getter for SalesItemId.
     * Unique Sales Item Identifier Example: 18315958002 Note: For a fee item, this parameter will
     * be populated with SalesItemId.
     * @return Returns the Internal Integer
     */
    @JsonGetter("SalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSalesItemId() {
        return this.salesItemId;
    }

    /**
     * Getter for SalesItemId.
     * Unique Sales Item Identifier Example: 18315958002 Note: For a fee item, this parameter will
     * be populated with SalesItemId.
     * @return Returns the Integer
     */
    public Integer getSalesItemId() {
        return OptionalNullable.getFrom(salesItemId);
    }

    /**
     * Setter for SalesItemId.
     * Unique Sales Item Identifier Example: 18315958002 Note: For a fee item, this parameter will
     * be populated with SalesItemId.
     * @param salesItemId Value for Integer
     */
    @JsonSetter("SalesItemId")
    public void setSalesItemId(Integer salesItemId) {
        this.salesItemId = OptionalNullable.of(salesItemId);
    }

    /**
     * UnSetter for SalesItemId.
     * Unique Sales Item Identifier Example: 18315958002 Note: For a fee item, this parameter will
     * be populated with SalesItemId.
     */
    public void unsetSalesItemId() {
        salesItemId = null;
    }

    /**
     * Internal Getter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @return Returns the Internal String
     */
    @JsonGetter("PayerGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerGroup() {
        return this.payerGroup;
    }

    /**
     * Getter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @return Returns the String
     */
    public String getPayerGroup() {
        return OptionalNullable.getFrom(payerGroup);
    }

    /**
     * Setter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @param payerGroup Value for String
     */
    @JsonSetter("PayerGroup")
    public void setPayerGroup(String payerGroup) {
        this.payerGroup = OptionalNullable.of(payerGroup);
    }

    /**
     * UnSetter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     */
    public void unsetPayerGroup() {
        payerGroup = null;
    }

    /**
     * Internal Getter for PayerGroupName.
     * Payer Group Name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerGroupName() {
        return this.payerGroupName;
    }

    /**
     * Getter for PayerGroupName.
     * Payer Group Name
     * @return Returns the String
     */
    public String getPayerGroupName() {
        return OptionalNullable.getFrom(payerGroupName);
    }

    /**
     * Setter for PayerGroupName.
     * Payer Group Name
     * @param payerGroupName Value for String
     */
    @JsonSetter("PayerGroupName")
    public void setPayerGroupName(String payerGroupName) {
        this.payerGroupName = OptionalNullable.of(payerGroupName);
    }

    /**
     * UnSetter for PayerGroupName.
     * Payer Group Name
     */
    public void unsetPayerGroupName() {
        payerGroupName = null;
    }

    /**
     * Internal Getter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded. Note: - The value could be null/blank
     * for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("RefundFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRefundFlag() {
        return this.refundFlag;
    }

    /**
     * Getter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded. Note: - The value could be null/blank
     * for fees item.
     * @return Returns the String
     */
    public String getRefundFlag() {
        return OptionalNullable.getFrom(refundFlag);
    }

    /**
     * Setter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded. Note: - The value could be null/blank
     * for fees item.
     * @param refundFlag Value for String
     */
    @JsonSetter("RefundFlag")
    public void setRefundFlag(String refundFlag) {
        this.refundFlag = OptionalNullable.of(refundFlag);
    }

    /**
     * UnSetter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded. Note: - The value could be null/blank
     * for fees item.
     */
    public void unsetRefundFlag() {
        refundFlag = null;
    }

    /**
     * Internal Getter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @return Returns the Internal String
     */
    @JsonGetter("OriginalSalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOriginalSalesItemId() {
        return this.originalSalesItemId;
    }

    /**
     * Getter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @return Returns the String
     */
    public String getOriginalSalesItemId() {
        return OptionalNullable.getFrom(originalSalesItemId);
    }

    /**
     * Setter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @param originalSalesItemId Value for String
     */
    @JsonSetter("OriginalSalesItemId")
    public void setOriginalSalesItemId(String originalSalesItemId) {
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
    }

    /**
     * UnSetter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     */
    public void unsetOriginalSalesItemId() {
        originalSalesItemId = null;
    }

    /**
     * Internal Getter for DelcoName.
     * Delco Name Example: SHELL NEDERLAND VERKOOPMAATSCHAPPIJ BV
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoName() {
        return this.delcoName;
    }

    /**
     * Getter for DelcoName.
     * Delco Name Example: SHELL NEDERLAND VERKOOPMAATSCHAPPIJ BV
     * @return Returns the String
     */
    public String getDelcoName() {
        return OptionalNullable.getFrom(delcoName);
    }

    /**
     * Setter for DelcoName.
     * Delco Name Example: SHELL NEDERLAND VERKOOPMAATSCHAPPIJ BV
     * @param delcoName Value for String
     */
    @JsonSetter("DelcoName")
    public void setDelcoName(String delcoName) {
        this.delcoName = OptionalNullable.of(delcoName);
    }

    /**
     * UnSetter for DelcoName.
     * Delco Name Example: SHELL NEDERLAND VERKOOPMAATSCHAPPIJ BV
     */
    public void unsetDelcoName() {
        delcoName = null;
    }

    /**
     * Internal Getter for DelcoCode.
     * Delco Code 014, 018, etc.,
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoCode() {
        return this.delcoCode;
    }

    /**
     * Getter for DelcoCode.
     * Delco Code 014, 018, etc.,
     * @return Returns the String
     */
    public String getDelcoCode() {
        return OptionalNullable.getFrom(delcoCode);
    }

    /**
     * Setter for DelcoCode.
     * Delco Code 014, 018, etc.,
     * @param delcoCode Value for String
     */
    @JsonSetter("DelcoCode")
    public void setDelcoCode(String delcoCode) {
        this.delcoCode = OptionalNullable.of(delcoCode);
    }

    /**
     * UnSetter for DelcoCode.
     * Delco Code 014, 018, etc.,
     */
    public void unsetDelcoCode() {
        delcoCode = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer number (Country code+8 digits) Example: NL10042616
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer number (Country code+8 digits) Example: NL10042616
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer number (Country code+8 digits) Example: NL10042616
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer number (Country code+8 digits) Example: NL10042616
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerName.
     * Payer name Example: V.M. LE COMTE
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Payer name Example: V.M. LE COMTE
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Payer name Example: V.M. LE COMTE
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Payer name Example: V.M. LE COMTE
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction Example: 1901
     * @return Returns the Internal String
     */
    @JsonGetter("CardExpiryPeriod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardExpiryPeriod() {
        return this.cardExpiryPeriod;
    }

    /**
     * Getter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction Example: 1901
     * @return Returns the String
     */
    public String getCardExpiryPeriod() {
        return OptionalNullable.getFrom(cardExpiryPeriod);
    }

    /**
     * Setter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction Example: 1901
     * @param cardExpiryPeriod Value for String
     */
    @JsonSetter("CardExpiryPeriod")
    public void setCardExpiryPeriod(String cardExpiryPeriod) {
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
    }

    /**
     * UnSetter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction Example: 1901
     */
    public void unsetCardExpiryPeriod() {
        cardExpiryPeriod = null;
    }

    /**
     * Internal Getter for AuthorisationCode.
     * Authorisation code of the transaction Example: 011256 Note: - The value could be null/blank
     * for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("AuthorisationCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAuthorisationCode() {
        return this.authorisationCode;
    }

    /**
     * Getter for AuthorisationCode.
     * Authorisation code of the transaction Example: 011256 Note: - The value could be null/blank
     * for fees item.
     * @return Returns the String
     */
    public String getAuthorisationCode() {
        return OptionalNullable.getFrom(authorisationCode);
    }

    /**
     * Setter for AuthorisationCode.
     * Authorisation code of the transaction Example: 011256 Note: - The value could be null/blank
     * for fees item.
     * @param authorisationCode Value for String
     */
    @JsonSetter("AuthorisationCode")
    public void setAuthorisationCode(String authorisationCode) {
        this.authorisationCode = OptionalNullable.of(authorisationCode);
    }

    /**
     * UnSetter for AuthorisationCode.
     * Authorisation code of the transaction Example: 011256 Note: - The value could be null/blank
     * for fees item.
     */
    public void unsetAuthorisationCode() {
        authorisationCode = null;
    }

    /**
     * Internal Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems Example:
     * io9KVXk1UkW57XWKyeaHHg Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems Example:
     * io9KVXk1UkW57XWKyeaHHg Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems Example:
     * io9KVXk1UkW57XWKyeaHHg Note: - The value could be null/blank for fees item.
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems Example:
     * io9KVXk1UkW57XWKyeaHHg Note: - The value could be null/blank for fees item.
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Internal Getter for TransactionLine.
     * Transaction line item number Example: 1 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionLine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionLine() {
        return this.transactionLine;
    }

    /**
     * Getter for TransactionLine.
     * Transaction line item number Example: 1 Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getTransactionLine() {
        return OptionalNullable.getFrom(transactionLine);
    }

    /**
     * Setter for TransactionLine.
     * Transaction line item number Example: 1 Note: - The value could be null/blank for fees item.
     * @param transactionLine Value for String
     */
    @JsonSetter("TransactionLine")
    public void setTransactionLine(String transactionLine) {
        this.transactionLine = OptionalNullable.of(transactionLine);
    }

    /**
     * UnSetter for TransactionLine.
     * Transaction line item number Example: 1 Note: - The value could be null/blank for fees item.
     */
    public void unsetTransactionLine() {
        transactionLine = null;
    }

    /**
     * Internal Getter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N” Note: - The
     * value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("AllowClearing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAllowClearing() {
        return this.allowClearing;
    }

    /**
     * Getter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N” Note: - The
     * value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getAllowClearing() {
        return OptionalNullable.getFrom(allowClearing);
    }

    /**
     * Setter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N” Note: - The
     * value could be null/blank for fees item.
     * @param allowClearing Value for String
     */
    @JsonSetter("AllowClearing")
    public void setAllowClearing(String allowClearing) {
        this.allowClearing = OptionalNullable.of(allowClearing);
    }

    /**
     * UnSetter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N” Note: - The
     * value could be null/blank for fees item.
     */
    public void unsetAllowClearing() {
        allowClearing = null;
    }

    /**
     * Internal Getter for CRMNumber.
     * CRM Case number if the sales item is in dispute. Note: - The value could be null/blank for
     * fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("CRMNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCRMNumber() {
        return this.cRMNumber;
    }

    /**
     * Getter for CRMNumber.
     * CRM Case number if the sales item is in dispute. Note: - The value could be null/blank for
     * fees item.
     * @return Returns the String
     */
    public String getCRMNumber() {
        return OptionalNullable.getFrom(cRMNumber);
    }

    /**
     * Setter for CRMNumber.
     * CRM Case number if the sales item is in dispute. Note: - The value could be null/blank for
     * fees item.
     * @param cRMNumber Value for String
     */
    @JsonSetter("CRMNumber")
    public void setCRMNumber(String cRMNumber) {
        this.cRMNumber = OptionalNullable.of(cRMNumber);
    }

    /**
     * UnSetter for CRMNumber.
     * CRM Case number if the sales item is in dispute. Note: - The value could be null/blank for
     * fees item.
     */
    public void unsetCRMNumber() {
        cRMNumber = null;
    }

    /**
     * Internal Getter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0	No Dispute 1	In Dispute 2	Re-Instated 3	Adjusted
     * 4	Written Off by Colco 5	Written Off by Delco 6	Charged Back to Site
     * @return Returns the Internal String
     */
    @JsonGetter("DisputeStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDisputeStatus() {
        return this.disputeStatus;
    }

    /**
     * Getter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0	No Dispute 1	In Dispute 2	Re-Instated 3	Adjusted
     * 4	Written Off by Colco 5	Written Off by Delco 6	Charged Back to Site
     * @return Returns the String
     */
    public String getDisputeStatus() {
        return OptionalNullable.getFrom(disputeStatus);
    }

    /**
     * Setter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0	No Dispute 1	In Dispute 2	Re-Instated 3	Adjusted
     * 4	Written Off by Colco 5	Written Off by Delco 6	Charged Back to Site
     * @param disputeStatus Value for String
     */
    @JsonSetter("DisputeStatus")
    public void setDisputeStatus(String disputeStatus) {
        this.disputeStatus = OptionalNullable.of(disputeStatus);
    }

    /**
     * UnSetter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0	No Dispute 1	In Dispute 2	Re-Instated 3	Adjusted
     * 4	Written Off by Colco 5	Written Off by Delco 6	Charged Back to Site
     */
    public void unsetDisputeStatus() {
        disputeStatus = null;
    }

    /**
     * Internal Getter for RebateRate.
     * Unit discount in customer currency. Example: 28.279000
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateRate() {
        return this.rebateRate;
    }

    /**
     * Getter for RebateRate.
     * Unit discount in customer currency. Example: 28.279000
     * @return Returns the Double
     */
    public Double getRebateRate() {
        return OptionalNullable.getFrom(rebateRate);
    }

    /**
     * Setter for RebateRate.
     * Unit discount in customer currency. Example: 28.279000
     * @param rebateRate Value for Double
     */
    @JsonSetter("RebateRate")
    public void setRebateRate(Double rebateRate) {
        this.rebateRate = OptionalNullable.of(rebateRate);
    }

    /**
     * UnSetter for RebateRate.
     * Unit discount in customer currency. Example: 28.279000
     */
    public void unsetRebateRate() {
        rebateRate = null;
    }

    /**
     * Internal Getter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency. Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("DelCoToColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDelCoToColCoExchangeRate() {
        return this.delCoToColCoExchangeRate;
    }

    /**
     * Getter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency. Example: 1
     * @return Returns the Integer
     */
    public Integer getDelCoToColCoExchangeRate() {
        return OptionalNullable.getFrom(delCoToColCoExchangeRate);
    }

    /**
     * Setter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency. Example: 1
     * @param delCoToColCoExchangeRate Value for Integer
     */
    @JsonSetter("DelCoToColCoExchangeRate")
    public void setDelCoToColCoExchangeRate(Integer delCoToColCoExchangeRate) {
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
    }

    /**
     * UnSetter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency. Example: 1
     */
    public void unsetDelCoToColCoExchangeRate() {
        delCoToColCoExchangeRate = null;
    }

    /**
     * Internal Getter for NetEuroAmount.
     * Net euro amount. Example: 37.93 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetEuroAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetEuroAmount() {
        return this.netEuroAmount;
    }

    /**
     * Getter for NetEuroAmount.
     * Net euro amount. Example: 37.93 Note: - The value could be null/blank for fees item.
     * @return Returns the Double
     */
    public Double getNetEuroAmount() {
        return OptionalNullable.getFrom(netEuroAmount);
    }

    /**
     * Setter for NetEuroAmount.
     * Net euro amount. Example: 37.93 Note: - The value could be null/blank for fees item.
     * @param netEuroAmount Value for Double
     */
    @JsonSetter("NetEuroAmount")
    public void setNetEuroAmount(Double netEuroAmount) {
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
    }

    /**
     * UnSetter for NetEuroAmount.
     * Net euro amount. Example: 37.93 Note: - The value could be null/blank for fees item.
     */
    public void unsetNetEuroAmount() {
        netEuroAmount = null;
    }

    /**
     * Internal Getter for EuroRebateAmount.
     * Euro rebate amount. Example: 0 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Integer
     */
    @JsonGetter("EuroRebateAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetEuroRebateAmount() {
        return this.euroRebateAmount;
    }

    /**
     * Getter for EuroRebateAmount.
     * Euro rebate amount. Example: 0 Note: - The value could be null/blank for fees item.
     * @return Returns the Integer
     */
    public Integer getEuroRebateAmount() {
        return OptionalNullable.getFrom(euroRebateAmount);
    }

    /**
     * Setter for EuroRebateAmount.
     * Euro rebate amount. Example: 0 Note: - The value could be null/blank for fees item.
     * @param euroRebateAmount Value for Integer
     */
    @JsonSetter("EuroRebateAmount")
    public void setEuroRebateAmount(Integer euroRebateAmount) {
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
    }

    /**
     * UnSetter for EuroRebateAmount.
     * Euro rebate amount. Example: 0 Note: - The value could be null/blank for fees item.
     */
    public void unsetEuroRebateAmount() {
        euroRebateAmount = null;
    }

    /**
     * Internal Getter for EuroVATAmount.
     * Euro VAT amount. Example: 7.96 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal Double
     */
    @JsonGetter("EuroVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEuroVATAmount() {
        return this.euroVATAmount;
    }

    /**
     * Getter for EuroVATAmount.
     * Euro VAT amount. Example: 7.96 Note: - The value could be null/blank for fees item.
     * @return Returns the Double
     */
    public Double getEuroVATAmount() {
        return OptionalNullable.getFrom(euroVATAmount);
    }

    /**
     * Setter for EuroVATAmount.
     * Euro VAT amount. Example: 7.96 Note: - The value could be null/blank for fees item.
     * @param euroVATAmount Value for Double
     */
    @JsonSetter("EuroVATAmount")
    public void setEuroVATAmount(Double euroVATAmount) {
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
    }

    /**
     * UnSetter for EuroVATAmount.
     * Euro VAT amount. Example: 7.96 Note: - The value could be null/blank for fees item.
     */
    public void unsetEuroVATAmount() {
        euroVATAmount = null;
    }

    /**
     * Internal Getter for ParentCustomerNumber.
     * Parent customer number
     * @return Returns the Internal String
     */
    @JsonGetter("ParentCustomerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetParentCustomerNumber() {
        return this.parentCustomerNumber;
    }

    /**
     * Getter for ParentCustomerNumber.
     * Parent customer number
     * @return Returns the String
     */
    public String getParentCustomerNumber() {
        return OptionalNullable.getFrom(parentCustomerNumber);
    }

    /**
     * Setter for ParentCustomerNumber.
     * Parent customer number
     * @param parentCustomerNumber Value for String
     */
    @JsonSetter("ParentCustomerNumber")
    public void setParentCustomerNumber(String parentCustomerNumber) {
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
    }

    /**
     * UnSetter for ParentCustomerNumber.
     * Parent customer number
     */
    public void unsetParentCustomerNumber() {
        parentCustomerNumber = null;
    }

    /**
     * Internal Getter for ParentCustomerName.
     * Parent customer name.
     * @return Returns the Internal String
     */
    @JsonGetter("ParentCustomerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetParentCustomerName() {
        return this.parentCustomerName;
    }

    /**
     * Getter for ParentCustomerName.
     * Parent customer name.
     * @return Returns the String
     */
    public String getParentCustomerName() {
        return OptionalNullable.getFrom(parentCustomerName);
    }

    /**
     * Setter for ParentCustomerName.
     * Parent customer name.
     * @param parentCustomerName Value for String
     */
    @JsonSetter("ParentCustomerName")
    public void setParentCustomerName(String parentCustomerName) {
        this.parentCustomerName = OptionalNullable.of(parentCustomerName);
    }

    /**
     * UnSetter for ParentCustomerName.
     * Parent customer name.
     */
    public void unsetParentCustomerName() {
        parentCustomerName = null;
    }

    /**
     * Internal Getter for ParentCustomerId.
     * Parent customer id.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ParentCustomerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetParentCustomerId() {
        return this.parentCustomerId;
    }

    /**
     * Getter for ParentCustomerId.
     * Parent customer id.
     * @return Returns the Integer
     */
    public Integer getParentCustomerId() {
        return OptionalNullable.getFrom(parentCustomerId);
    }

    /**
     * Setter for ParentCustomerId.
     * Parent customer id.
     * @param parentCustomerId Value for Integer
     */
    @JsonSetter("ParentCustomerId")
    public void setParentCustomerId(Integer parentCustomerId) {
        this.parentCustomerId = OptionalNullable.of(parentCustomerId);
    }

    /**
     * UnSetter for ParentCustomerId.
     * Parent customer id.
     */
    public void unsetParentCustomerId() {
        parentCustomerId = null;
    }

    /**
     * Internal Getter for IncomingSiteNumber.
     * Incoming Site Number Example: 100021 Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingSiteNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingSiteNumber() {
        return this.incomingSiteNumber;
    }

    /**
     * Getter for IncomingSiteNumber.
     * Incoming Site Number Example: 100021 Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getIncomingSiteNumber() {
        return OptionalNullable.getFrom(incomingSiteNumber);
    }

    /**
     * Setter for IncomingSiteNumber.
     * Incoming Site Number Example: 100021 Note: - The value could be null/blank for fees item.
     * @param incomingSiteNumber Value for String
     */
    @JsonSetter("IncomingSiteNumber")
    public void setIncomingSiteNumber(String incomingSiteNumber) {
        this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
    }

    /**
     * UnSetter for IncomingSiteNumber.
     * Incoming Site Number Example: 100021 Note: - The value could be null/blank for fees item.
     */
    public void unsetIncomingSiteNumber() {
        incomingSiteNumber = null;
    }

    /**
     * Internal Getter for IncomingSiteDescription.
     * Incoming Site Description Example: HN3 INTI_02-82.02 Note: - The value could be null/blank
     * for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingSiteDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingSiteDescription() {
        return this.incomingSiteDescription;
    }

    /**
     * Getter for IncomingSiteDescription.
     * Incoming Site Description Example: HN3 INTI_02-82.02 Note: - The value could be null/blank
     * for fees item.
     * @return Returns the String
     */
    public String getIncomingSiteDescription() {
        return OptionalNullable.getFrom(incomingSiteDescription);
    }

    /**
     * Setter for IncomingSiteDescription.
     * Incoming Site Description Example: HN3 INTI_02-82.02 Note: - The value could be null/blank
     * for fees item.
     * @param incomingSiteDescription Value for String
     */
    @JsonSetter("IncomingSiteDescription")
    public void setIncomingSiteDescription(String incomingSiteDescription) {
        this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
    }

    /**
     * UnSetter for IncomingSiteDescription.
     * Incoming Site Description Example: HN3 INTI_02-82.02 Note: - The value could be null/blank
     * for fees item.
     */
    public void unsetIncomingSiteDescription() {
        incomingSiteDescription = null;
    }

    /**
     * Internal Getter for IncomingCurrencyCode.
     * Incoming Currency Code Example: GBP Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingCurrencyCode() {
        return this.incomingCurrencyCode;
    }

    /**
     * Getter for IncomingCurrencyCode.
     * Incoming Currency Code Example: GBP Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getIncomingCurrencyCode() {
        return OptionalNullable.getFrom(incomingCurrencyCode);
    }

    /**
     * Setter for IncomingCurrencyCode.
     * Incoming Currency Code Example: GBP Note: - The value could be null/blank for fees item.
     * @param incomingCurrencyCode Value for String
     */
    @JsonSetter("IncomingCurrencyCode")
    public void setIncomingCurrencyCode(String incomingCurrencyCode) {
        this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
    }

    /**
     * UnSetter for IncomingCurrencyCode.
     * Incoming Currency Code Example: GBP Note: - The value could be null/blank for fees item.
     */
    public void unsetIncomingCurrencyCode() {
        incomingCurrencyCode = null;
    }

    /**
     * Internal Getter for IncomingProductCode.
     * Incoming Product Code Example: 30
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingProductCode() {
        return this.incomingProductCode;
    }

    /**
     * Getter for IncomingProductCode.
     * Incoming Product Code Example: 30
     * @return Returns the String
     */
    public String getIncomingProductCode() {
        return OptionalNullable.getFrom(incomingProductCode);
    }

    /**
     * Setter for IncomingProductCode.
     * Incoming Product Code Example: 30
     * @param incomingProductCode Value for String
     */
    @JsonSetter("IncomingProductCode")
    public void setIncomingProductCode(String incomingProductCode) {
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
    }

    /**
     * UnSetter for IncomingProductCode.
     * Incoming Product Code Example: 30
     */
    public void unsetIncomingProductCode() {
        incomingProductCode = null;
    }

    /**
     * Internal Getter for CreditDebitCode.
     * Credit Debit Code Example: “D” or “C” The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("CreditDebitCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditDebitCode() {
        return this.creditDebitCode;
    }

    /**
     * Getter for CreditDebitCode.
     * Credit Debit Code Example: “D” or “C” The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getCreditDebitCode() {
        return OptionalNullable.getFrom(creditDebitCode);
    }

    /**
     * Setter for CreditDebitCode.
     * Credit Debit Code Example: “D” or “C” The value could be null/blank for fees item.
     * @param creditDebitCode Value for String
     */
    @JsonSetter("CreditDebitCode")
    public void setCreditDebitCode(String creditDebitCode) {
        this.creditDebitCode = OptionalNullable.of(creditDebitCode);
    }

    /**
     * UnSetter for CreditDebitCode.
     * Credit Debit Code Example: “D” or “C” The value could be null/blank for fees item.
     */
    public void unsetCreditDebitCode() {
        creditDebitCode = null;
    }

    /**
     * Internal Getter for CorrectionFlag.
     * Correction Flag Example: “Y” or “N” Note: - The value could be null/blank for fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("CorrectionFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCorrectionFlag() {
        return this.correctionFlag;
    }

    /**
     * Getter for CorrectionFlag.
     * Correction Flag Example: “Y” or “N” Note: - The value could be null/blank for fees item.
     * @return Returns the String
     */
    public String getCorrectionFlag() {
        return OptionalNullable.getFrom(correctionFlag);
    }

    /**
     * Setter for CorrectionFlag.
     * Correction Flag Example: “Y” or “N” Note: - The value could be null/blank for fees item.
     * @param correctionFlag Value for String
     */
    @JsonSetter("CorrectionFlag")
    public void setCorrectionFlag(String correctionFlag) {
        this.correctionFlag = OptionalNullable.of(correctionFlag);
    }

    /**
     * UnSetter for CorrectionFlag.
     * Correction Flag Example: “Y” or “N” Note: - The value could be null/blank for fees item.
     */
    public void unsetCorrectionFlag() {
        correctionFlag = null;
    }

    /**
     * Internal Getter for Additional1.
     * Additional details
     * @return Returns the Internal String
     */
    @JsonGetter("Additional1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional1() {
        return this.additional1;
    }

    /**
     * Getter for Additional1.
     * Additional details
     * @return Returns the String
     */
    public String getAdditional1() {
        return OptionalNullable.getFrom(additional1);
    }

    /**
     * Setter for Additional1.
     * Additional details
     * @param additional1 Value for String
     */
    @JsonSetter("Additional1")
    public void setAdditional1(String additional1) {
        this.additional1 = OptionalNullable.of(additional1);
    }

    /**
     * UnSetter for Additional1.
     * Additional details
     */
    public void unsetAdditional1() {
        additional1 = null;
    }

    /**
     * Internal Getter for Additional2.
     * Additional details
     * @return Returns the Internal String
     */
    @JsonGetter("Additional2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional2() {
        return this.additional2;
    }

    /**
     * Getter for Additional2.
     * Additional details
     * @return Returns the String
     */
    public String getAdditional2() {
        return OptionalNullable.getFrom(additional2);
    }

    /**
     * Setter for Additional2.
     * Additional details
     * @param additional2 Value for String
     */
    @JsonSetter("Additional2")
    public void setAdditional2(String additional2) {
        this.additional2 = OptionalNullable.of(additional2);
    }

    /**
     * UnSetter for Additional2.
     * Additional details
     */
    public void unsetAdditional2() {
        additional2 = null;
    }

    /**
     * Internal Getter for Additional3.
     * Additional details
     * @return Returns the Internal String
     */
    @JsonGetter("Additional3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional3() {
        return this.additional3;
    }

    /**
     * Getter for Additional3.
     * Additional details
     * @return Returns the String
     */
    public String getAdditional3() {
        return OptionalNullable.getFrom(additional3);
    }

    /**
     * Setter for Additional3.
     * Additional details
     * @param additional3 Value for String
     */
    @JsonSetter("Additional3")
    public void setAdditional3(String additional3) {
        this.additional3 = OptionalNullable.of(additional3);
    }

    /**
     * UnSetter for Additional3.
     * Additional details
     */
    public void unsetAdditional3() {
        additional3 = null;
    }

    /**
     * Internal Getter for Additional4.
     * Additional details
     * @return Returns the Internal String
     */
    @JsonGetter("Additional4")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAdditional4() {
        return this.additional4;
    }

    /**
     * Getter for Additional4.
     * Additional details
     * @return Returns the String
     */
    public String getAdditional4() {
        return OptionalNullable.getFrom(additional4);
    }

    /**
     * Setter for Additional4.
     * Additional details
     * @param additional4 Value for String
     */
    @JsonSetter("Additional4")
    public void setAdditional4(String additional4) {
        this.additional4 = OptionalNullable.of(additional4);
    }

    /**
     * UnSetter for Additional4.
     * Additional details
     */
    public void unsetAdditional4() {
        additional4 = null;
    }

    /**
     * Internal Getter for RebateonNetAmountInCustomerCurrency.
     * Rebate on Net Amount in Customer Currency Example: -0.735000000000 Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateonNetAmountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateonNetAmountInCustomerCurrency() {
        return this.rebateonNetAmountInCustomerCurrency;
    }

    /**
     * Getter for RebateonNetAmountInCustomerCurrency.
     * Rebate on Net Amount in Customer Currency Example: -0.735000000000 Note: - The value could be
     * null/blank for fees item.
     * @return Returns the Double
     */
    public Double getRebateonNetAmountInCustomerCurrency() {
        return OptionalNullable.getFrom(rebateonNetAmountInCustomerCurrency);
    }

    /**
     * Setter for RebateonNetAmountInCustomerCurrency.
     * Rebate on Net Amount in Customer Currency Example: -0.735000000000 Note: - The value could be
     * null/blank for fees item.
     * @param rebateonNetAmountInCustomerCurrency Value for Double
     */
    @JsonSetter("RebateonNetAmountInCustomerCurrency")
    public void setRebateonNetAmountInCustomerCurrency(Double rebateonNetAmountInCustomerCurrency) {
        this.rebateonNetAmountInCustomerCurrency = OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
    }

    /**
     * UnSetter for RebateonNetAmountInCustomerCurrency.
     * Rebate on Net Amount in Customer Currency Example: -0.735000000000 Note: - The value could be
     * null/blank for fees item.
     */
    public void unsetRebateonNetAmountInCustomerCurrency() {
        rebateonNetAmountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for RebateonNetAmountInTransactionCurrency.
     * Rebate on Net Amount in Transaction Currency Example: -0.735000000000 Note: - The value could
     * be null/blank for fees item.
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateonNetAmountInTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateonNetAmountInTransactionCurrency() {
        return this.rebateonNetAmountInTransactionCurrency;
    }

    /**
     * Getter for RebateonNetAmountInTransactionCurrency.
     * Rebate on Net Amount in Transaction Currency Example: -0.735000000000 Note: - The value could
     * be null/blank for fees item.
     * @return Returns the Double
     */
    public Double getRebateonNetAmountInTransactionCurrency() {
        return OptionalNullable.getFrom(rebateonNetAmountInTransactionCurrency);
    }

    /**
     * Setter for RebateonNetAmountInTransactionCurrency.
     * Rebate on Net Amount in Transaction Currency Example: -0.735000000000 Note: - The value could
     * be null/blank for fees item.
     * @param rebateonNetAmountInTransactionCurrency Value for Double
     */
    @JsonSetter("RebateonNetAmountInTransactionCurrency")
    public void setRebateonNetAmountInTransactionCurrency(Double rebateonNetAmountInTransactionCurrency) {
        this.rebateonNetAmountInTransactionCurrency = OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
    }

    /**
     * UnSetter for RebateonNetAmountInTransactionCurrency.
     * Rebate on Net Amount in Transaction Currency Example: -0.735000000000 Note: - The value could
     * be null/blank for fees item.
     */
    public void unsetRebateonNetAmountInTransactionCurrency() {
        rebateonNetAmountInTransactionCurrency = null;
    }

    /**
     * Internal Getter for NetworkCode.
     * Network Code Example: AVEE PTUAZONW CUBFAO COSFS Note: - The value could be null/blank for
     * fees item.
     * @return Returns the Internal String
     */
    @JsonGetter("NetworkCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetworkCode() {
        return this.networkCode;
    }

    /**
     * Getter for NetworkCode.
     * Network Code Example: AVEE PTUAZONW CUBFAO COSFS Note: - The value could be null/blank for
     * fees item.
     * @return Returns the String
     */
    public String getNetworkCode() {
        return OptionalNullable.getFrom(networkCode);
    }

    /**
     * Setter for NetworkCode.
     * Network Code Example: AVEE PTUAZONW CUBFAO COSFS Note: - The value could be null/blank for
     * fees item.
     * @param networkCode Value for String
     */
    @JsonSetter("NetworkCode")
    public void setNetworkCode(String networkCode) {
        this.networkCode = OptionalNullable.of(networkCode);
    }

    /**
     * UnSetter for NetworkCode.
     * Network Code Example: AVEE PTUAZONW CUBFAO COSFS Note: - The value could be null/blank for
     * fees item.
     */
    public void unsetNetworkCode() {
        networkCode = null;
    }

    /**
     * Internal Getter for TrnIdentifier.
     * Transaction Identifier
     * @return Returns the Internal String
     */
    @JsonGetter("TrnIdentifier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTrnIdentifier() {
        return this.trnIdentifier;
    }

    /**
     * Getter for TrnIdentifier.
     * Transaction Identifier
     * @return Returns the String
     */
    public String getTrnIdentifier() {
        return OptionalNullable.getFrom(trnIdentifier);
    }

    /**
     * Setter for TrnIdentifier.
     * Transaction Identifier
     * @param trnIdentifier Value for String
     */
    @JsonSetter("TrnIdentifier")
    public void setTrnIdentifier(String trnIdentifier) {
        this.trnIdentifier = OptionalNullable.of(trnIdentifier);
    }

    /**
     * UnSetter for TrnIdentifier.
     * Transaction Identifier
     */
    public void unsetTrnIdentifier() {
        trnIdentifier = null;
    }

    /**
     * Internal Getter for CardType.
     * Card Type
     * @return Returns the Internal String
     */
    @JsonGetter("CardType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardType() {
        return this.cardType;
    }

    /**
     * Getter for CardType.
     * Card Type
     * @return Returns the String
     */
    public String getCardType() {
        return OptionalNullable.getFrom(cardType);
    }

    /**
     * Setter for CardType.
     * Card Type
     * @param cardType Value for String
     */
    @JsonSetter("CardType")
    public void setCardType(String cardType) {
        this.cardType = OptionalNullable.of(cardType);
    }

    /**
     * UnSetter for CardType.
     * Card Type
     */
    public void unsetCardType() {
        cardType = null;
    }

    /**
     * Internal Getter for DelcoListPriceUnitNet.
     * Delco List Price Unit Net Example: 30.500000 Note: - The value could be null/blank for fees
     * item
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoListPriceUnitNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoListPriceUnitNet() {
        return this.delcoListPriceUnitNet;
    }

    /**
     * Getter for DelcoListPriceUnitNet.
     * Delco List Price Unit Net Example: 30.500000 Note: - The value could be null/blank for fees
     * item
     * @return Returns the Double
     */
    public Double getDelcoListPriceUnitNet() {
        return OptionalNullable.getFrom(delcoListPriceUnitNet);
    }

    /**
     * Setter for DelcoListPriceUnitNet.
     * Delco List Price Unit Net Example: 30.500000 Note: - The value could be null/blank for fees
     * item
     * @param delcoListPriceUnitNet Value for Double
     */
    @JsonSetter("DelcoListPriceUnitNet")
    public void setDelcoListPriceUnitNet(Double delcoListPriceUnitNet) {
        this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
    }

    /**
     * UnSetter for DelcoListPriceUnitNet.
     * Delco List Price Unit Net Example: 30.500000 Note: - The value could be null/blank for fees
     * item
     */
    public void unsetDelcoListPriceUnitNet() {
        delcoListPriceUnitNet = null;
    }

    /**
     * Internal Getter for DelcoRetailPriceUnitNet.
     * Retail Net Price (or pump net price) per Unit in transaction currency Example: 1.921000 Note:
     * - The value could be null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailPriceUnitNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailPriceUnitNet() {
        return this.delcoRetailPriceUnitNet;
    }

    /**
     * Getter for DelcoRetailPriceUnitNet.
     * Retail Net Price (or pump net price) per Unit in transaction currency Example: 1.921000 Note:
     * - The value could be null/blank for fees item
     * @return Returns the Double
     */
    public Double getDelcoRetailPriceUnitNet() {
        return OptionalNullable.getFrom(delcoRetailPriceUnitNet);
    }

    /**
     * Setter for DelcoRetailPriceUnitNet.
     * Retail Net Price (or pump net price) per Unit in transaction currency Example: 1.921000 Note:
     * - The value could be null/blank for fees item
     * @param delcoRetailPriceUnitNet Value for Double
     */
    @JsonSetter("DelcoRetailPriceUnitNet")
    public void setDelcoRetailPriceUnitNet(Double delcoRetailPriceUnitNet) {
        this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
    }

    /**
     * UnSetter for DelcoRetailPriceUnitNet.
     * Retail Net Price (or pump net price) per Unit in transaction currency Example: 1.921000 Note:
     * - The value could be null/blank for fees item
     */
    public void unsetDelcoRetailPriceUnitNet() {
        delcoRetailPriceUnitNet = null;
    }

    /**
     * Internal Getter for DelcoRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in transaction currency Note: - The value
     * could be null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailPriceUnitGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailPriceUnitGross() {
        return this.delcoRetailPriceUnitGross;
    }

    /**
     * Getter for DelcoRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in transaction currency Note: - The value
     * could be null/blank for fees item
     * @return Returns the Double
     */
    public Double getDelcoRetailPriceUnitGross() {
        return OptionalNullable.getFrom(delcoRetailPriceUnitGross);
    }

    /**
     * Setter for DelcoRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in transaction currency Note: - The value
     * could be null/blank for fees item
     * @param delcoRetailPriceUnitGross Value for Double
     */
    @JsonSetter("DelcoRetailPriceUnitGross")
    public void setDelcoRetailPriceUnitGross(Double delcoRetailPriceUnitGross) {
        this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
    }

    /**
     * UnSetter for DelcoRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in transaction currency Note: - The value
     * could be null/blank for fees item
     */
    public void unsetDelcoRetailPriceUnitGross() {
        delcoRetailPriceUnitGross = null;
    }

    /**
     * Internal Getter for DelcoRetailValueTotalNet.
     * Retail net price (or net pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailValueTotalNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailValueTotalNet() {
        return this.delcoRetailValueTotalNet;
    }

    /**
     * Getter for DelcoRetailValueTotalNet.
     * Retail net price (or net pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Double
     */
    public Double getDelcoRetailValueTotalNet() {
        return OptionalNullable.getFrom(delcoRetailValueTotalNet);
    }

    /**
     * Setter for DelcoRetailValueTotalNet.
     * Retail net price (or net pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @param delcoRetailValueTotalNet Value for Double
     */
    @JsonSetter("DelcoRetailValueTotalNet")
    public void setDelcoRetailValueTotalNet(Double delcoRetailValueTotalNet) {
        this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
    }

    /**
     * UnSetter for DelcoRetailValueTotalNet.
     * Retail net price (or net pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     */
    public void unsetDelcoRetailValueTotalNet() {
        delcoRetailValueTotalNet = null;
    }

    /**
     * Internal Getter for DelcoRetailValueTotalGross.
     * Retail gross price (or gross pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("DelcoRetailValueTotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelcoRetailValueTotalGross() {
        return this.delcoRetailValueTotalGross;
    }

    /**
     * Getter for DelcoRetailValueTotalGross.
     * Retail gross price (or gross pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Double
     */
    public Double getDelcoRetailValueTotalGross() {
        return OptionalNullable.getFrom(delcoRetailValueTotalGross);
    }

    /**
     * Setter for DelcoRetailValueTotalGross.
     * Retail gross price (or gross pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     * @param delcoRetailValueTotalGross Value for Double
     */
    @JsonSetter("DelcoRetailValueTotalGross")
    public void setDelcoRetailValueTotalGross(Double delcoRetailValueTotalGross) {
        this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
    }

    /**
     * UnSetter for DelcoRetailValueTotalGross.
     * Retail gross price (or gross pump price) in transaction currency Note: - The value could be
     * null/blank for fees item
     */
    public void unsetDelcoRetailValueTotalGross() {
        delcoRetailValueTotalGross = null;
    }

    /**
     * Internal Getter for CustomerRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in customer currency Note: - The value
     * could be null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailPriceUnitGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailPriceUnitGross() {
        return this.customerRetailPriceUnitGross;
    }

    /**
     * Getter for CustomerRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in customer currency Note: - The value
     * could be null/blank for fees item
     * @return Returns the Double
     */
    public Double getCustomerRetailPriceUnitGross() {
        return OptionalNullable.getFrom(customerRetailPriceUnitGross);
    }

    /**
     * Setter for CustomerRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in customer currency Note: - The value
     * could be null/blank for fees item
     * @param customerRetailPriceUnitGross Value for Double
     */
    @JsonSetter("CustomerRetailPriceUnitGross")
    public void setCustomerRetailPriceUnitGross(Double customerRetailPriceUnitGross) {
        this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
    }

    /**
     * UnSetter for CustomerRetailPriceUnitGross.
     * Retail gross price (or pump gross price) per unit in customer currency Note: - The value
     * could be null/blank for fees item
     */
    public void unsetCustomerRetailPriceUnitGross() {
        customerRetailPriceUnitGross = null;
    }

    /**
     * Internal Getter for CustomerRetailValueTotalGross.
     * Retail gross price (or gross pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailValueTotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailValueTotalGross() {
        return this.customerRetailValueTotalGross;
    }

    /**
     * Getter for CustomerRetailValueTotalGross.
     * Retail gross price (or gross pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Double
     */
    public Double getCustomerRetailValueTotalGross() {
        return OptionalNullable.getFrom(customerRetailValueTotalGross);
    }

    /**
     * Setter for CustomerRetailValueTotalGross.
     * Retail gross price (or gross pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @param customerRetailValueTotalGross Value for Double
     */
    @JsonSetter("CustomerRetailValueTotalGross")
    public void setCustomerRetailValueTotalGross(Double customerRetailValueTotalGross) {
        this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
    }

    /**
     * UnSetter for CustomerRetailValueTotalGross.
     * Retail gross price (or gross pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     */
    public void unsetCustomerRetailValueTotalGross() {
        customerRetailValueTotalGross = null;
    }

    /**
     * Internal Getter for CustomerRetailValueTotalNet.
     * Retail net price (or net pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerRetailValueTotalNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerRetailValueTotalNet() {
        return this.customerRetailValueTotalNet;
    }

    /**
     * Getter for CustomerRetailValueTotalNet.
     * Retail net price (or net pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @return Returns the Double
     */
    public Double getCustomerRetailValueTotalNet() {
        return OptionalNullable.getFrom(customerRetailValueTotalNet);
    }

    /**
     * Setter for CustomerRetailValueTotalNet.
     * Retail net price (or net pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     * @param customerRetailValueTotalNet Value for Double
     */
    @JsonSetter("CustomerRetailValueTotalNet")
    public void setCustomerRetailValueTotalNet(Double customerRetailValueTotalNet) {
        this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
    }

    /**
     * UnSetter for CustomerRetailValueTotalNet.
     * Retail net price (or net pump price) in customer currency Note: - The value could be
     * null/blank for fees item
     */
    public void unsetCustomerRetailValueTotalNet() {
        customerRetailValueTotalNet = null;
    }

    /**
     * Internal Getter for TransactionTypeDescription.
     * Transaction Type Description Note: - The value could be null/blank for fees item
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionTypeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionTypeDescription() {
        return this.transactionTypeDescription;
    }

    /**
     * Getter for TransactionTypeDescription.
     * Transaction Type Description Note: - The value could be null/blank for fees item
     * @return Returns the String
     */
    public String getTransactionTypeDescription() {
        return OptionalNullable.getFrom(transactionTypeDescription);
    }

    /**
     * Setter for TransactionTypeDescription.
     * Transaction Type Description Note: - The value could be null/blank for fees item
     * @param transactionTypeDescription Value for String
     */
    @JsonSetter("TransactionTypeDescription")
    public void setTransactionTypeDescription(String transactionTypeDescription) {
        this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
    }

    /**
     * UnSetter for TransactionTypeDescription.
     * Transaction Type Description Note: - The value could be null/blank for fees item
     */
    public void unsetTransactionTypeDescription() {
        transactionTypeDescription = null;
    }

    /**
     * Converts this MultiPricedTransactionResponseTransactionsItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MultiPricedTransactionResponseTransactionsItems [" + "type=" + type + ", cardId="
                + cardId + ", cardPAN=" + cardPAN + ", cardExpiry=" + cardExpiry
                + ", transactionDate=" + transactionDate + ", transactionTime=" + transactionTime
                + ", uTCOffset=" + uTCOffset + ", fleetIdInput=" + fleetIdInput + ", odometerInput="
                + odometerInput + ", driverName=" + driverName + ", vehicleRegistration="
                + vehicleRegistration + ", invoiceCurrencyCode=" + invoiceCurrencyCode
                + ", invoiceCurrencySymbol=" + invoiceCurrencySymbol + ", transactionCurrencyCode="
                + transactionCurrencyCode + ", transactionCurrencySymbol="
                + transactionCurrencySymbol + ", transactionNetAmount=" + transactionNetAmount
                + ", transactionTax=" + transactionTax + ", transactionGrossAmount="
                + transactionGrossAmount + ", invoiceNetAmount=" + invoiceNetAmount
                + ", invoiceTax=" + invoiceTax + ", invoiceGrossAmount=" + invoiceGrossAmount
                + ", purchasedInCountry=" + purchasedInCountry + ", accountId=" + accountId
                + ", accountNumber=" + accountNumber + ", accountName=" + accountName
                + ", accountShortName=" + accountShortName + ", quantity=" + quantity
                + ", fuelProduct=" + fuelProduct + ", unitPriceInTransactionCurrency="
                + unitPriceInTransactionCurrency + ", unitPriceInInvoiceCurrency="
                + unitPriceInInvoiceCurrency + ", unitDiscountTransactionCurrency="
                + unitDiscountTransactionCurrency + ", unitDiscountInvoiceCurrency="
                + unitDiscountInvoiceCurrency + ", isInvoiced=" + isInvoiced + ", invoiceNumber="
                + invoiceNumber + ", invoiceDate=" + invoiceDate + ", siteCode=" + siteCode
                + ", siteName=" + siteName + ", siteCountry=" + siteCountry + ", location="
                + location + ", cardGroupName=" + cardGroupName + ", receiptNumber=" + receiptNumber
                + ", productCode=" + productCode + ", productName=" + productName
                + ", productGroupId=" + productGroupId + ", productGroupName=" + productGroupName
                + ", delCoExchangeRate=" + delCoExchangeRate + ", colCoExchangeRate="
                + colCoExchangeRate + ", isShellSite=" + isShellSite + ", network=" + network
                + ", siteGroupId=" + siteGroupId + ", siteGroupName=" + siteGroupName
                + ", postingDate=" + postingDate + ", issuerCode=" + issuerCode
                + ", purchasedInCountryCode=" + purchasedInCountryCode + ", customerCountryCode="
                + customerCountryCode + ", customerCountry=" + customerCountry + ", releaseCode="
                + releaseCode + ", cardGroupId=" + cardGroupId + ", cardSequenceNumber="
                + cardSequenceNumber + ", checkDigit=" + checkDigit + ", fleetIDDescription="
                + fleetIDDescription + ", vATRate=" + vATRate + ", vATCategory=" + vATCategory
                + ", vATCountry=" + vATCountry + ", effectiveDiscountInTrxCurrency="
                + effectiveDiscountInTrxCurrency + ", transactionType=" + transactionType
                + ", pINIndicator=" + pINIndicator + ", vATApplicable=" + vATApplicable
                + ", netInvoiceIndicator=" + netInvoiceIndicator + ", customerCurrencyCode="
                + customerCurrencyCode + ", customerCurrencySymbol=" + customerCurrencySymbol
                + ", effectiveUnitDiscountInCustomerCurrency="
                + effectiveUnitDiscountInCustomerCurrency + ", effectiveDiscountInCustomerCurrency="
                + effectiveDiscountInCustomerCurrency + ", vATonNetAmountInCustomerCurrency="
                + vATonNetAmountInCustomerCurrency + ", discountType=" + discountType
                + ", transactionStatus=" + transactionStatus + ", salesItemId=" + salesItemId
                + ", payerGroup=" + payerGroup + ", payerGroupName=" + payerGroupName
                + ", refundFlag=" + refundFlag + ", originalSalesItemId=" + originalSalesItemId
                + ", delcoName=" + delcoName + ", delcoCode=" + delcoCode + ", payerNumber="
                + payerNumber + ", payerName=" + payerName + ", cardExpiryPeriod="
                + cardExpiryPeriod + ", authorisationCode=" + authorisationCode + ", transactionId="
                + transactionId + ", transactionLine=" + transactionLine + ", allowClearing="
                + allowClearing + ", cRMNumber=" + cRMNumber + ", disputeStatus=" + disputeStatus
                + ", rebateRate=" + rebateRate + ", delCoToColCoExchangeRate="
                + delCoToColCoExchangeRate + ", netEuroAmount=" + netEuroAmount
                + ", euroRebateAmount=" + euroRebateAmount + ", euroVATAmount=" + euroVATAmount
                + ", parentCustomerNumber=" + parentCustomerNumber + ", parentCustomerName="
                + parentCustomerName + ", parentCustomerId=" + parentCustomerId
                + ", incomingSiteNumber=" + incomingSiteNumber + ", incomingSiteDescription="
                + incomingSiteDescription + ", incomingCurrencyCode=" + incomingCurrencyCode
                + ", incomingProductCode=" + incomingProductCode + ", creditDebitCode="
                + creditDebitCode + ", correctionFlag=" + correctionFlag + ", additional1="
                + additional1 + ", additional2=" + additional2 + ", additional3=" + additional3
                + ", additional4=" + additional4 + ", rebateonNetAmountInCustomerCurrency="
                + rebateonNetAmountInCustomerCurrency + ", rebateonNetAmountInTransactionCurrency="
                + rebateonNetAmountInTransactionCurrency + ", networkCode=" + networkCode
                + ", trnIdentifier=" + trnIdentifier + ", cardType=" + cardType
                + ", delcoListPriceUnitNet=" + delcoListPriceUnitNet + ", delcoRetailPriceUnitNet="
                + delcoRetailPriceUnitNet + ", delcoRetailPriceUnitGross="
                + delcoRetailPriceUnitGross + ", delcoRetailValueTotalNet="
                + delcoRetailValueTotalNet + ", delcoRetailValueTotalGross="
                + delcoRetailValueTotalGross + ", customerRetailPriceUnitGross="
                + customerRetailPriceUnitGross + ", customerRetailValueTotalGross="
                + customerRetailValueTotalGross + ", customerRetailValueTotalNet="
                + customerRetailValueTotalNet + ", transactionTypeDescription="
                + transactionTypeDescription + "]";
    }

    /**
     * Builds a new {@link MultiPricedTransactionResponseTransactionsItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MultiPricedTransactionResponseTransactionsItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .location(getLocation());
        builder.type = internalGetType();
        builder.cardId = internalGetCardId();
        builder.cardPAN = internalGetCardPAN();
        builder.cardExpiry = internalGetCardExpiry();
        builder.transactionDate = internalGetTransactionDate();
        builder.transactionTime = internalGetTransactionTime();
        builder.uTCOffset = internalGetUTCOffset();
        builder.fleetIdInput = internalGetFleetIdInput();
        builder.odometerInput = internalGetOdometerInput();
        builder.driverName = internalGetDriverName();
        builder.vehicleRegistration = internalGetVehicleRegistration();
        builder.invoiceCurrencyCode = internalGetInvoiceCurrencyCode();
        builder.invoiceCurrencySymbol = internalGetInvoiceCurrencySymbol();
        builder.transactionCurrencyCode = internalGetTransactionCurrencyCode();
        builder.transactionCurrencySymbol = internalGetTransactionCurrencySymbol();
        builder.transactionNetAmount = internalGetTransactionNetAmount();
        builder.transactionTax = internalGetTransactionTax();
        builder.transactionGrossAmount = internalGetTransactionGrossAmount();
        builder.invoiceNetAmount = internalGetInvoiceNetAmount();
        builder.invoiceTax = internalGetInvoiceTax();
        builder.invoiceGrossAmount = internalGetInvoiceGrossAmount();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountName = internalGetAccountName();
        builder.accountShortName = internalGetAccountShortName();
        builder.quantity = internalGetQuantity();
        builder.fuelProduct = internalGetFuelProduct();
        builder.unitPriceInTransactionCurrency = internalGetUnitPriceInTransactionCurrency();
        builder.unitPriceInInvoiceCurrency = internalGetUnitPriceInInvoiceCurrency();
        builder.unitDiscountTransactionCurrency = internalGetUnitDiscountTransactionCurrency();
        builder.unitDiscountInvoiceCurrency = internalGetUnitDiscountInvoiceCurrency();
        builder.isInvoiced = internalGetIsInvoiced();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.siteCode = internalGetSiteCode();
        builder.siteName = internalGetSiteName();
        builder.siteCountry = internalGetSiteCountry();
        builder.cardGroupName = internalGetCardGroupName();
        builder.receiptNumber = internalGetReceiptNumber();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.productGroupId = internalGetProductGroupId();
        builder.productGroupName = internalGetProductGroupName();
        builder.delCoExchangeRate = internalGetDelCoExchangeRate();
        builder.colCoExchangeRate = internalGetColCoExchangeRate();
        builder.isShellSite = internalGetIsShellSite();
        builder.network = internalGetNetwork();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.siteGroupName = internalGetSiteGroupName();
        builder.postingDate = internalGetPostingDate();
        builder.issuerCode = internalGetIssuerCode();
        builder.purchasedInCountryCode = internalGetPurchasedInCountryCode();
        builder.customerCountryCode = internalGetCustomerCountryCode();
        builder.customerCountry = internalGetCustomerCountry();
        builder.releaseCode = internalGetReleaseCode();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardSequenceNumber = internalGetCardSequenceNumber();
        builder.checkDigit = internalGetCheckDigit();
        builder.fleetIDDescription = internalGetFleetIDDescription();
        builder.vATRate = internalGetVATRate();
        builder.vATCategory = internalGetVATCategory();
        builder.vATCountry = internalGetVATCountry();
        builder.effectiveDiscountInTrxCurrency = internalGetEffectiveDiscountInTrxCurrency();
        builder.transactionType = internalGetTransactionType();
        builder.pINIndicator = internalGetPINIndicator();
        builder.vATApplicable = internalGetVATApplicable();
        builder.netInvoiceIndicator = internalGetNetInvoiceIndicator();
        builder.customerCurrencyCode = internalGetCustomerCurrencyCode();
        builder.customerCurrencySymbol = internalGetCustomerCurrencySymbol();
        builder.effectiveUnitDiscountInCustomerCurrency =
                internalGetEffectiveUnitDiscountInCustomerCurrency();
        builder.effectiveDiscountInCustomerCurrency =
                internalGetEffectiveDiscountInCustomerCurrency();
        builder.vATonNetAmountInCustomerCurrency = internalGetVATonNetAmountInCustomerCurrency();
        builder.discountType = internalGetDiscountType();
        builder.transactionStatus = internalGetTransactionStatus();
        builder.salesItemId = internalGetSalesItemId();
        builder.payerGroup = internalGetPayerGroup();
        builder.payerGroupName = internalGetPayerGroupName();
        builder.refundFlag = internalGetRefundFlag();
        builder.originalSalesItemId = internalGetOriginalSalesItemId();
        builder.delcoName = internalGetDelcoName();
        builder.delcoCode = internalGetDelcoCode();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerName = internalGetPayerName();
        builder.cardExpiryPeriod = internalGetCardExpiryPeriod();
        builder.authorisationCode = internalGetAuthorisationCode();
        builder.transactionId = internalGetTransactionId();
        builder.transactionLine = internalGetTransactionLine();
        builder.allowClearing = internalGetAllowClearing();
        builder.cRMNumber = internalGetCRMNumber();
        builder.disputeStatus = internalGetDisputeStatus();
        builder.rebateRate = internalGetRebateRate();
        builder.delCoToColCoExchangeRate = internalGetDelCoToColCoExchangeRate();
        builder.netEuroAmount = internalGetNetEuroAmount();
        builder.euroRebateAmount = internalGetEuroRebateAmount();
        builder.euroVATAmount = internalGetEuroVATAmount();
        builder.parentCustomerNumber = internalGetParentCustomerNumber();
        builder.parentCustomerName = internalGetParentCustomerName();
        builder.parentCustomerId = internalGetParentCustomerId();
        builder.incomingSiteNumber = internalGetIncomingSiteNumber();
        builder.incomingSiteDescription = internalGetIncomingSiteDescription();
        builder.incomingCurrencyCode = internalGetIncomingCurrencyCode();
        builder.incomingProductCode = internalGetIncomingProductCode();
        builder.creditDebitCode = internalGetCreditDebitCode();
        builder.correctionFlag = internalGetCorrectionFlag();
        builder.additional1 = internalGetAdditional1();
        builder.additional2 = internalGetAdditional2();
        builder.additional3 = internalGetAdditional3();
        builder.additional4 = internalGetAdditional4();
        builder.rebateonNetAmountInCustomerCurrency =
                internalGetRebateonNetAmountInCustomerCurrency();
        builder.rebateonNetAmountInTransactionCurrency =
                internalGetRebateonNetAmountInTransactionCurrency();
        builder.networkCode = internalGetNetworkCode();
        builder.trnIdentifier = internalGetTrnIdentifier();
        builder.cardType = internalGetCardType();
        builder.delcoListPriceUnitNet = internalGetDelcoListPriceUnitNet();
        builder.delcoRetailPriceUnitNet = internalGetDelcoRetailPriceUnitNet();
        builder.delcoRetailPriceUnitGross = internalGetDelcoRetailPriceUnitGross();
        builder.delcoRetailValueTotalNet = internalGetDelcoRetailValueTotalNet();
        builder.delcoRetailValueTotalGross = internalGetDelcoRetailValueTotalGross();
        builder.customerRetailPriceUnitGross = internalGetCustomerRetailPriceUnitGross();
        builder.customerRetailValueTotalGross = internalGetCustomerRetailValueTotalGross();
        builder.customerRetailValueTotalNet = internalGetCustomerRetailValueTotalNet();
        builder.transactionTypeDescription = internalGetTransactionTypeDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link MultiPricedTransactionResponseTransactionsItems}.
     */
    public static class Builder {
        private OptionalNullable<String> type;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> cardExpiry;
        private OptionalNullable<String> transactionDate;
        private OptionalNullable<String> transactionTime;
        private OptionalNullable<String> uTCOffset;
        private OptionalNullable<String> fleetIdInput;
        private OptionalNullable<Integer> odometerInput;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> vehicleRegistration;
        private OptionalNullable<String> invoiceCurrencyCode;
        private OptionalNullable<String> invoiceCurrencySymbol;
        private OptionalNullable<String> transactionCurrencyCode;
        private OptionalNullable<String> transactionCurrencySymbol;
        private OptionalNullable<Integer> transactionNetAmount;
        private OptionalNullable<Integer> transactionTax;
        private OptionalNullable<Integer> transactionGrossAmount;
        private OptionalNullable<Integer> invoiceNetAmount;
        private OptionalNullable<Integer> invoiceTax;
        private OptionalNullable<Integer> invoiceGrossAmount;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> quantity;
        private OptionalNullable<Boolean> fuelProduct;
        private OptionalNullable<Integer> unitPriceInTransactionCurrency;
        private OptionalNullable<Integer> unitPriceInInvoiceCurrency;
        private OptionalNullable<Integer> unitDiscountTransactionCurrency;
        private OptionalNullable<Integer> unitDiscountInvoiceCurrency;
        private OptionalNullable<Boolean> isInvoiced;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> siteCode;
        private OptionalNullable<String> siteName;
        private OptionalNullable<String> siteCountry;
        private List<SiteLocation> location;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<String> receiptNumber;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<Integer> productGroupId;
        private OptionalNullable<String> productGroupName;
        private OptionalNullable<Double> delCoExchangeRate;
        private OptionalNullable<Integer> colCoExchangeRate;
        private OptionalNullable<Boolean> isShellSite;
        private OptionalNullable<String> network;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> siteGroupName;
        private OptionalNullable<String> postingDate;
        private OptionalNullable<String> issuerCode;
        private OptionalNullable<String> purchasedInCountryCode;
        private OptionalNullable<String> customerCountryCode;
        private OptionalNullable<String> customerCountry;
        private OptionalNullable<String> releaseCode;
        private OptionalNullable<String> cardGroupId;
        private OptionalNullable<String> cardSequenceNumber;
        private OptionalNullable<String> checkDigit;
        private OptionalNullable<String> fleetIDDescription;
        private OptionalNullable<Double> vATRate;
        private OptionalNullable<String> vATCategory;
        private OptionalNullable<String> vATCountry;
        private OptionalNullable<Double> effectiveDiscountInTrxCurrency;
        private OptionalNullable<String> transactionType;
        private OptionalNullable<String> pINIndicator;
        private OptionalNullable<String> vATApplicable;
        private OptionalNullable<String> netInvoiceIndicator;
        private OptionalNullable<String> customerCurrencyCode;
        private OptionalNullable<String> customerCurrencySymbol;
        private OptionalNullable<Integer> effectiveUnitDiscountInCustomerCurrency;
        private OptionalNullable<Integer> effectiveDiscountInCustomerCurrency;
        private OptionalNullable<Integer> vATonNetAmountInCustomerCurrency;
        private OptionalNullable<String> discountType;
        private OptionalNullable<String> transactionStatus;
        private OptionalNullable<Integer> salesItemId;
        private OptionalNullable<String> payerGroup;
        private OptionalNullable<String> payerGroupName;
        private OptionalNullable<String> refundFlag;
        private OptionalNullable<String> originalSalesItemId;
        private OptionalNullable<String> delcoName;
        private OptionalNullable<String> delcoCode;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> cardExpiryPeriod;
        private OptionalNullable<String> authorisationCode;
        private OptionalNullable<String> transactionId;
        private OptionalNullable<String> transactionLine;
        private OptionalNullable<String> allowClearing;
        private OptionalNullable<String> cRMNumber;
        private OptionalNullable<String> disputeStatus;
        private OptionalNullable<Double> rebateRate;
        private OptionalNullable<Integer> delCoToColCoExchangeRate;
        private OptionalNullable<Double> netEuroAmount;
        private OptionalNullable<Integer> euroRebateAmount;
        private OptionalNullable<Double> euroVATAmount;
        private OptionalNullable<String> parentCustomerNumber;
        private OptionalNullable<String> parentCustomerName;
        private OptionalNullable<Integer> parentCustomerId;
        private OptionalNullable<String> incomingSiteNumber;
        private OptionalNullable<String> incomingSiteDescription;
        private OptionalNullable<String> incomingCurrencyCode;
        private OptionalNullable<String> incomingProductCode;
        private OptionalNullable<String> creditDebitCode;
        private OptionalNullable<String> correctionFlag;
        private OptionalNullable<String> additional1;
        private OptionalNullable<String> additional2;
        private OptionalNullable<String> additional3;
        private OptionalNullable<String> additional4;
        private OptionalNullable<Double> rebateonNetAmountInCustomerCurrency;
        private OptionalNullable<Double> rebateonNetAmountInTransactionCurrency;
        private OptionalNullable<String> networkCode;
        private OptionalNullable<String> trnIdentifier;
        private OptionalNullable<String> cardType;
        private OptionalNullable<Double> delcoListPriceUnitNet;
        private OptionalNullable<Double> delcoRetailPriceUnitNet;
        private OptionalNullable<Double> delcoRetailPriceUnitGross;
        private OptionalNullable<Double> delcoRetailValueTotalNet;
        private OptionalNullable<Double> delcoRetailValueTotalGross;
        private OptionalNullable<Double> customerRetailPriceUnitGross;
        private OptionalNullable<Double> customerRetailValueTotalGross;
        private OptionalNullable<Double> customerRetailValueTotalNet;
        private OptionalNullable<String> transactionTypeDescription;



        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for cardExpiry.
         * @param  cardExpiry  String value for cardExpiry.
         * @return Builder
         */
        public Builder cardExpiry(String cardExpiry) {
            this.cardExpiry = OptionalNullable.of(cardExpiry);
            return this;
        }

        /**
         * UnSetter for cardExpiry.
         * @return Builder
         */
        public Builder unsetCardExpiry() {
            cardExpiry = null;
            return this;
        }

        /**
         * Setter for transactionDate.
         * @param  transactionDate  String value for transactionDate.
         * @return Builder
         */
        public Builder transactionDate(String transactionDate) {
            this.transactionDate = OptionalNullable.of(transactionDate);
            return this;
        }

        /**
         * UnSetter for transactionDate.
         * @return Builder
         */
        public Builder unsetTransactionDate() {
            transactionDate = null;
            return this;
        }

        /**
         * Setter for transactionTime.
         * @param  transactionTime  String value for transactionTime.
         * @return Builder
         */
        public Builder transactionTime(String transactionTime) {
            this.transactionTime = OptionalNullable.of(transactionTime);
            return this;
        }

        /**
         * UnSetter for transactionTime.
         * @return Builder
         */
        public Builder unsetTransactionTime() {
            transactionTime = null;
            return this;
        }

        /**
         * Setter for uTCOffset.
         * @param  uTCOffset  String value for uTCOffset.
         * @return Builder
         */
        public Builder uTCOffset(String uTCOffset) {
            this.uTCOffset = OptionalNullable.of(uTCOffset);
            return this;
        }

        /**
         * UnSetter for uTCOffset.
         * @return Builder
         */
        public Builder unsetUTCOffset() {
            uTCOffset = null;
            return this;
        }

        /**
         * Setter for fleetIdInput.
         * @param  fleetIdInput  String value for fleetIdInput.
         * @return Builder
         */
        public Builder fleetIdInput(String fleetIdInput) {
            this.fleetIdInput = OptionalNullable.of(fleetIdInput);
            return this;
        }

        /**
         * UnSetter for fleetIdInput.
         * @return Builder
         */
        public Builder unsetFleetIdInput() {
            fleetIdInput = null;
            return this;
        }

        /**
         * Setter for odometerInput.
         * @param  odometerInput  Integer value for odometerInput.
         * @return Builder
         */
        public Builder odometerInput(Integer odometerInput) {
            this.odometerInput = OptionalNullable.of(odometerInput);
            return this;
        }

        /**
         * UnSetter for odometerInput.
         * @return Builder
         */
        public Builder unsetOdometerInput() {
            odometerInput = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for vehicleRegistration.
         * @param  vehicleRegistration  String value for vehicleRegistration.
         * @return Builder
         */
        public Builder vehicleRegistration(String vehicleRegistration) {
            this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
            return this;
        }

        /**
         * UnSetter for vehicleRegistration.
         * @return Builder
         */
        public Builder unsetVehicleRegistration() {
            vehicleRegistration = null;
            return this;
        }

        /**
         * Setter for invoiceCurrencyCode.
         * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder invoiceCurrencyCode(String invoiceCurrencyCode) {
            this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencyCode() {
            invoiceCurrencyCode = null;
            return this;
        }

        /**
         * Setter for invoiceCurrencySymbol.
         * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder invoiceCurrencySymbol(String invoiceCurrencySymbol) {
            this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencySymbol() {
            invoiceCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for transactionCurrencyCode.
         * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
         * @return Builder
         */
        public Builder transactionCurrencyCode(String transactionCurrencyCode) {
            this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
            return this;
        }

        /**
         * UnSetter for transactionCurrencyCode.
         * @return Builder
         */
        public Builder unsetTransactionCurrencyCode() {
            transactionCurrencyCode = null;
            return this;
        }

        /**
         * Setter for transactionCurrencySymbol.
         * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder transactionCurrencySymbol(String transactionCurrencySymbol) {
            this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder unsetTransactionCurrencySymbol() {
            transactionCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for transactionNetAmount.
         * @param  transactionNetAmount  Integer value for transactionNetAmount.
         * @return Builder
         */
        public Builder transactionNetAmount(Integer transactionNetAmount) {
            this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
            return this;
        }

        /**
         * UnSetter for transactionNetAmount.
         * @return Builder
         */
        public Builder unsetTransactionNetAmount() {
            transactionNetAmount = null;
            return this;
        }

        /**
         * Setter for transactionTax.
         * @param  transactionTax  Integer value for transactionTax.
         * @return Builder
         */
        public Builder transactionTax(Integer transactionTax) {
            this.transactionTax = OptionalNullable.of(transactionTax);
            return this;
        }

        /**
         * UnSetter for transactionTax.
         * @return Builder
         */
        public Builder unsetTransactionTax() {
            transactionTax = null;
            return this;
        }

        /**
         * Setter for transactionGrossAmount.
         * @param  transactionGrossAmount  Integer value for transactionGrossAmount.
         * @return Builder
         */
        public Builder transactionGrossAmount(Integer transactionGrossAmount) {
            this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
            return this;
        }

        /**
         * UnSetter for transactionGrossAmount.
         * @return Builder
         */
        public Builder unsetTransactionGrossAmount() {
            transactionGrossAmount = null;
            return this;
        }

        /**
         * Setter for invoiceNetAmount.
         * @param  invoiceNetAmount  Integer value for invoiceNetAmount.
         * @return Builder
         */
        public Builder invoiceNetAmount(Integer invoiceNetAmount) {
            this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
            return this;
        }

        /**
         * UnSetter for invoiceNetAmount.
         * @return Builder
         */
        public Builder unsetInvoiceNetAmount() {
            invoiceNetAmount = null;
            return this;
        }

        /**
         * Setter for invoiceTax.
         * @param  invoiceTax  Integer value for invoiceTax.
         * @return Builder
         */
        public Builder invoiceTax(Integer invoiceTax) {
            this.invoiceTax = OptionalNullable.of(invoiceTax);
            return this;
        }

        /**
         * UnSetter for invoiceTax.
         * @return Builder
         */
        public Builder unsetInvoiceTax() {
            invoiceTax = null;
            return this;
        }

        /**
         * Setter for invoiceGrossAmount.
         * @param  invoiceGrossAmount  Integer value for invoiceGrossAmount.
         * @return Builder
         */
        public Builder invoiceGrossAmount(Integer invoiceGrossAmount) {
            this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
            return this;
        }

        /**
         * UnSetter for invoiceGrossAmount.
         * @return Builder
         */
        public Builder unsetInvoiceGrossAmount() {
            invoiceGrossAmount = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Integer value for quantity.
         * @return Builder
         */
        public Builder quantity(Integer quantity) {
            this.quantity = OptionalNullable.of(quantity);
            return this;
        }

        /**
         * UnSetter for quantity.
         * @return Builder
         */
        public Builder unsetQuantity() {
            quantity = null;
            return this;
        }

        /**
         * Setter for fuelProduct.
         * @param  fuelProduct  Boolean value for fuelProduct.
         * @return Builder
         */
        public Builder fuelProduct(Boolean fuelProduct) {
            this.fuelProduct = OptionalNullable.of(fuelProduct);
            return this;
        }

        /**
         * UnSetter for fuelProduct.
         * @return Builder
         */
        public Builder unsetFuelProduct() {
            fuelProduct = null;
            return this;
        }

        /**
         * Setter for unitPriceInTransactionCurrency.
         * @param  unitPriceInTransactionCurrency  Integer value for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unitPriceInTransactionCurrency(Integer unitPriceInTransactionCurrency) {
            this.unitPriceInTransactionCurrency =
                    OptionalNullable.of(unitPriceInTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInTransactionCurrency() {
            unitPriceInTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for unitPriceInInvoiceCurrency.
         * @param  unitPriceInInvoiceCurrency  Integer value for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unitPriceInInvoiceCurrency(Integer unitPriceInInvoiceCurrency) {
            this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInInvoiceCurrency() {
            unitPriceInInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for unitDiscountTransactionCurrency.
         * @param  unitDiscountTransactionCurrency  Integer value for
         *         unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unitDiscountTransactionCurrency(Integer unitDiscountTransactionCurrency) {
            this.unitDiscountTransactionCurrency =
                    OptionalNullable.of(unitDiscountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountTransactionCurrency() {
            unitDiscountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for unitDiscountInvoiceCurrency.
         * @param  unitDiscountInvoiceCurrency  Integer value for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unitDiscountInvoiceCurrency(Integer unitDiscountInvoiceCurrency) {
            this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountInvoiceCurrency() {
            unitDiscountInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for isInvoiced.
         * @param  isInvoiced  Boolean value for isInvoiced.
         * @return Builder
         */
        public Builder isInvoiced(Boolean isInvoiced) {
            this.isInvoiced = OptionalNullable.of(isInvoiced);
            return this;
        }

        /**
         * UnSetter for isInvoiced.
         * @return Builder
         */
        public Builder unsetIsInvoiced() {
            isInvoiced = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  String value for siteCode.
         * @return Builder
         */
        public Builder siteCode(String siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for siteName.
         * @param  siteName  String value for siteName.
         * @return Builder
         */
        public Builder siteName(String siteName) {
            this.siteName = OptionalNullable.of(siteName);
            return this;
        }

        /**
         * UnSetter for siteName.
         * @return Builder
         */
        public Builder unsetSiteName() {
            siteName = null;
            return this;
        }

        /**
         * Setter for siteCountry.
         * @param  siteCountry  String value for siteCountry.
         * @return Builder
         */
        public Builder siteCountry(String siteCountry) {
            this.siteCountry = OptionalNullable.of(siteCountry);
            return this;
        }

        /**
         * UnSetter for siteCountry.
         * @return Builder
         */
        public Builder unsetSiteCountry() {
            siteCountry = null;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  List of SiteLocation value for location.
         * @return Builder
         */
        public Builder location(List<SiteLocation> location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for receiptNumber.
         * @param  receiptNumber  String value for receiptNumber.
         * @return Builder
         */
        public Builder receiptNumber(String receiptNumber) {
            this.receiptNumber = OptionalNullable.of(receiptNumber);
            return this;
        }

        /**
         * UnSetter for receiptNumber.
         * @return Builder
         */
        public Builder unsetReceiptNumber() {
            receiptNumber = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for productGroupId.
         * @param  productGroupId  Integer value for productGroupId.
         * @return Builder
         */
        public Builder productGroupId(Integer productGroupId) {
            this.productGroupId = OptionalNullable.of(productGroupId);
            return this;
        }

        /**
         * UnSetter for productGroupId.
         * @return Builder
         */
        public Builder unsetProductGroupId() {
            productGroupId = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Setter for delCoExchangeRate.
         * @param  delCoExchangeRate  Double value for delCoExchangeRate.
         * @return Builder
         */
        public Builder delCoExchangeRate(Double delCoExchangeRate) {
            this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoExchangeRate() {
            delCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for colCoExchangeRate.
         * @param  colCoExchangeRate  Integer value for colCoExchangeRate.
         * @return Builder
         */
        public Builder colCoExchangeRate(Integer colCoExchangeRate) {
            this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for colCoExchangeRate.
         * @return Builder
         */
        public Builder unsetColCoExchangeRate() {
            colCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for isShellSite.
         * @param  isShellSite  Boolean value for isShellSite.
         * @return Builder
         */
        public Builder isShellSite(Boolean isShellSite) {
            this.isShellSite = OptionalNullable.of(isShellSite);
            return this;
        }

        /**
         * UnSetter for isShellSite.
         * @return Builder
         */
        public Builder unsetIsShellSite() {
            isShellSite = null;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = OptionalNullable.of(network);
            return this;
        }

        /**
         * UnSetter for network.
         * @return Builder
         */
        public Builder unsetNetwork() {
            network = null;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for siteGroupName.
         * @param  siteGroupName  String value for siteGroupName.
         * @return Builder
         */
        public Builder siteGroupName(String siteGroupName) {
            this.siteGroupName = OptionalNullable.of(siteGroupName);
            return this;
        }

        /**
         * UnSetter for siteGroupName.
         * @return Builder
         */
        public Builder unsetSiteGroupName() {
            siteGroupName = null;
            return this;
        }

        /**
         * Setter for postingDate.
         * @param  postingDate  String value for postingDate.
         * @return Builder
         */
        public Builder postingDate(String postingDate) {
            this.postingDate = OptionalNullable.of(postingDate);
            return this;
        }

        /**
         * UnSetter for postingDate.
         * @return Builder
         */
        public Builder unsetPostingDate() {
            postingDate = null;
            return this;
        }

        /**
         * Setter for issuerCode.
         * @param  issuerCode  String value for issuerCode.
         * @return Builder
         */
        public Builder issuerCode(String issuerCode) {
            this.issuerCode = OptionalNullable.of(issuerCode);
            return this;
        }

        /**
         * UnSetter for issuerCode.
         * @return Builder
         */
        public Builder unsetIssuerCode() {
            issuerCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountryCode.
         * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
         * @return Builder
         */
        public Builder purchasedInCountryCode(String purchasedInCountryCode) {
            this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
            return this;
        }

        /**
         * UnSetter for purchasedInCountryCode.
         * @return Builder
         */
        public Builder unsetPurchasedInCountryCode() {
            purchasedInCountryCode = null;
            return this;
        }

        /**
         * Setter for customerCountryCode.
         * @param  customerCountryCode  String value for customerCountryCode.
         * @return Builder
         */
        public Builder customerCountryCode(String customerCountryCode) {
            this.customerCountryCode = OptionalNullable.of(customerCountryCode);
            return this;
        }

        /**
         * UnSetter for customerCountryCode.
         * @return Builder
         */
        public Builder unsetCustomerCountryCode() {
            customerCountryCode = null;
            return this;
        }

        /**
         * Setter for customerCountry.
         * @param  customerCountry  String value for customerCountry.
         * @return Builder
         */
        public Builder customerCountry(String customerCountry) {
            this.customerCountry = OptionalNullable.of(customerCountry);
            return this;
        }

        /**
         * UnSetter for customerCountry.
         * @return Builder
         */
        public Builder unsetCustomerCountry() {
            customerCountry = null;
            return this;
        }

        /**
         * Setter for releaseCode.
         * @param  releaseCode  String value for releaseCode.
         * @return Builder
         */
        public Builder releaseCode(String releaseCode) {
            this.releaseCode = OptionalNullable.of(releaseCode);
            return this;
        }

        /**
         * UnSetter for releaseCode.
         * @return Builder
         */
        public Builder unsetReleaseCode() {
            releaseCode = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  String value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(String cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardSequenceNumber.
         * @param  cardSequenceNumber  String value for cardSequenceNumber.
         * @return Builder
         */
        public Builder cardSequenceNumber(String cardSequenceNumber) {
            this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
            return this;
        }

        /**
         * UnSetter for cardSequenceNumber.
         * @return Builder
         */
        public Builder unsetCardSequenceNumber() {
            cardSequenceNumber = null;
            return this;
        }

        /**
         * Setter for checkDigit.
         * @param  checkDigit  String value for checkDigit.
         * @return Builder
         */
        public Builder checkDigit(String checkDigit) {
            this.checkDigit = OptionalNullable.of(checkDigit);
            return this;
        }

        /**
         * UnSetter for checkDigit.
         * @return Builder
         */
        public Builder unsetCheckDigit() {
            checkDigit = null;
            return this;
        }

        /**
         * Setter for fleetIDDescription.
         * @param  fleetIDDescription  String value for fleetIDDescription.
         * @return Builder
         */
        public Builder fleetIDDescription(String fleetIDDescription) {
            this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
            return this;
        }

        /**
         * UnSetter for fleetIDDescription.
         * @return Builder
         */
        public Builder unsetFleetIDDescription() {
            fleetIDDescription = null;
            return this;
        }

        /**
         * Setter for vATRate.
         * @param  vATRate  Double value for vATRate.
         * @return Builder
         */
        public Builder vATRate(Double vATRate) {
            this.vATRate = OptionalNullable.of(vATRate);
            return this;
        }

        /**
         * UnSetter for vATRate.
         * @return Builder
         */
        public Builder unsetVATRate() {
            vATRate = null;
            return this;
        }

        /**
         * Setter for vATCategory.
         * @param  vATCategory  String value for vATCategory.
         * @return Builder
         */
        public Builder vATCategory(String vATCategory) {
            this.vATCategory = OptionalNullable.of(vATCategory);
            return this;
        }

        /**
         * UnSetter for vATCategory.
         * @return Builder
         */
        public Builder unsetVATCategory() {
            vATCategory = null;
            return this;
        }

        /**
         * Setter for vATCountry.
         * @param  vATCountry  String value for vATCountry.
         * @return Builder
         */
        public Builder vATCountry(String vATCountry) {
            this.vATCountry = OptionalNullable.of(vATCountry);
            return this;
        }

        /**
         * UnSetter for vATCountry.
         * @return Builder
         */
        public Builder unsetVATCountry() {
            vATCountry = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInTrxCurrency.
         * @param  effectiveDiscountInTrxCurrency  Double value for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInTrxCurrency(Double effectiveDiscountInTrxCurrency) {
            this.effectiveDiscountInTrxCurrency =
                    OptionalNullable.of(effectiveDiscountInTrxCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInTrxCurrency() {
            effectiveDiscountInTrxCurrency = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = OptionalNullable.of(transactionType);
            return this;
        }

        /**
         * UnSetter for transactionType.
         * @return Builder
         */
        public Builder unsetTransactionType() {
            transactionType = null;
            return this;
        }

        /**
         * Setter for pINIndicator.
         * @param  pINIndicator  String value for pINIndicator.
         * @return Builder
         */
        public Builder pINIndicator(String pINIndicator) {
            this.pINIndicator = OptionalNullable.of(pINIndicator);
            return this;
        }

        /**
         * UnSetter for pINIndicator.
         * @return Builder
         */
        public Builder unsetPINIndicator() {
            pINIndicator = null;
            return this;
        }

        /**
         * Setter for vATApplicable.
         * @param  vATApplicable  String value for vATApplicable.
         * @return Builder
         */
        public Builder vATApplicable(String vATApplicable) {
            this.vATApplicable = OptionalNullable.of(vATApplicable);
            return this;
        }

        /**
         * UnSetter for vATApplicable.
         * @return Builder
         */
        public Builder unsetVATApplicable() {
            vATApplicable = null;
            return this;
        }

        /**
         * Setter for netInvoiceIndicator.
         * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
         * @return Builder
         */
        public Builder netInvoiceIndicator(String netInvoiceIndicator) {
            this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
            return this;
        }

        /**
         * UnSetter for netInvoiceIndicator.
         * @return Builder
         */
        public Builder unsetNetInvoiceIndicator() {
            netInvoiceIndicator = null;
            return this;
        }

        /**
         * Setter for customerCurrencyCode.
         * @param  customerCurrencyCode  String value for customerCurrencyCode.
         * @return Builder
         */
        public Builder customerCurrencyCode(String customerCurrencyCode) {
            this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
            return this;
        }

        /**
         * UnSetter for customerCurrencyCode.
         * @return Builder
         */
        public Builder unsetCustomerCurrencyCode() {
            customerCurrencyCode = null;
            return this;
        }

        /**
         * Setter for customerCurrencySymbol.
         * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
         * @return Builder
         */
        public Builder customerCurrencySymbol(String customerCurrencySymbol) {
            this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for customerCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCustomerCurrencySymbol() {
            customerCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for effectiveUnitDiscountInCustomerCurrency.
         * @param  effectiveUnitDiscountInCustomerCurrency  Integer value for
         *         effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveUnitDiscountInCustomerCurrency(
                Integer effectiveUnitDiscountInCustomerCurrency) {
            this.effectiveUnitDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveUnitDiscountInCustomerCurrency() {
            effectiveUnitDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInCustomerCurrency.
         * @param  effectiveDiscountInCustomerCurrency  Integer value for
         *         effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInCustomerCurrency(
                Integer effectiveDiscountInCustomerCurrency) {
            this.effectiveDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInCustomerCurrency() {
            effectiveDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for vATonNetAmountInCustomerCurrency.
         * @param  vATonNetAmountInCustomerCurrency  Integer value for
         *         vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder vATonNetAmountInCustomerCurrency(
                Integer vATonNetAmountInCustomerCurrency) {
            this.vATonNetAmountInCustomerCurrency =
                    OptionalNullable.of(vATonNetAmountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetVATonNetAmountInCustomerCurrency() {
            vATonNetAmountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for discountType.
         * @param  discountType  String value for discountType.
         * @return Builder
         */
        public Builder discountType(String discountType) {
            this.discountType = OptionalNullable.of(discountType);
            return this;
        }

        /**
         * UnSetter for discountType.
         * @return Builder
         */
        public Builder unsetDiscountType() {
            discountType = null;
            return this;
        }

        /**
         * Setter for transactionStatus.
         * @param  transactionStatus  String value for transactionStatus.
         * @return Builder
         */
        public Builder transactionStatus(String transactionStatus) {
            this.transactionStatus = OptionalNullable.of(transactionStatus);
            return this;
        }

        /**
         * UnSetter for transactionStatus.
         * @return Builder
         */
        public Builder unsetTransactionStatus() {
            transactionStatus = null;
            return this;
        }

        /**
         * Setter for salesItemId.
         * @param  salesItemId  Integer value for salesItemId.
         * @return Builder
         */
        public Builder salesItemId(Integer salesItemId) {
            this.salesItemId = OptionalNullable.of(salesItemId);
            return this;
        }

        /**
         * UnSetter for salesItemId.
         * @return Builder
         */
        public Builder unsetSalesItemId() {
            salesItemId = null;
            return this;
        }

        /**
         * Setter for payerGroup.
         * @param  payerGroup  String value for payerGroup.
         * @return Builder
         */
        public Builder payerGroup(String payerGroup) {
            this.payerGroup = OptionalNullable.of(payerGroup);
            return this;
        }

        /**
         * UnSetter for payerGroup.
         * @return Builder
         */
        public Builder unsetPayerGroup() {
            payerGroup = null;
            return this;
        }

        /**
         * Setter for payerGroupName.
         * @param  payerGroupName  String value for payerGroupName.
         * @return Builder
         */
        public Builder payerGroupName(String payerGroupName) {
            this.payerGroupName = OptionalNullable.of(payerGroupName);
            return this;
        }

        /**
         * UnSetter for payerGroupName.
         * @return Builder
         */
        public Builder unsetPayerGroupName() {
            payerGroupName = null;
            return this;
        }

        /**
         * Setter for refundFlag.
         * @param  refundFlag  String value for refundFlag.
         * @return Builder
         */
        public Builder refundFlag(String refundFlag) {
            this.refundFlag = OptionalNullable.of(refundFlag);
            return this;
        }

        /**
         * UnSetter for refundFlag.
         * @return Builder
         */
        public Builder unsetRefundFlag() {
            refundFlag = null;
            return this;
        }

        /**
         * Setter for originalSalesItemId.
         * @param  originalSalesItemId  String value for originalSalesItemId.
         * @return Builder
         */
        public Builder originalSalesItemId(String originalSalesItemId) {
            this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
            return this;
        }

        /**
         * UnSetter for originalSalesItemId.
         * @return Builder
         */
        public Builder unsetOriginalSalesItemId() {
            originalSalesItemId = null;
            return this;
        }

        /**
         * Setter for delcoName.
         * @param  delcoName  String value for delcoName.
         * @return Builder
         */
        public Builder delcoName(String delcoName) {
            this.delcoName = OptionalNullable.of(delcoName);
            return this;
        }

        /**
         * UnSetter for delcoName.
         * @return Builder
         */
        public Builder unsetDelcoName() {
            delcoName = null;
            return this;
        }

        /**
         * Setter for delcoCode.
         * @param  delcoCode  String value for delcoCode.
         * @return Builder
         */
        public Builder delcoCode(String delcoCode) {
            this.delcoCode = OptionalNullable.of(delcoCode);
            return this;
        }

        /**
         * UnSetter for delcoCode.
         * @return Builder
         */
        public Builder unsetDelcoCode() {
            delcoCode = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for cardExpiryPeriod.
         * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
         * @return Builder
         */
        public Builder cardExpiryPeriod(String cardExpiryPeriod) {
            this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
            return this;
        }

        /**
         * UnSetter for cardExpiryPeriod.
         * @return Builder
         */
        public Builder unsetCardExpiryPeriod() {
            cardExpiryPeriod = null;
            return this;
        }

        /**
         * Setter for authorisationCode.
         * @param  authorisationCode  String value for authorisationCode.
         * @return Builder
         */
        public Builder authorisationCode(String authorisationCode) {
            this.authorisationCode = OptionalNullable.of(authorisationCode);
            return this;
        }

        /**
         * UnSetter for authorisationCode.
         * @return Builder
         */
        public Builder unsetAuthorisationCode() {
            authorisationCode = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Setter for transactionLine.
         * @param  transactionLine  String value for transactionLine.
         * @return Builder
         */
        public Builder transactionLine(String transactionLine) {
            this.transactionLine = OptionalNullable.of(transactionLine);
            return this;
        }

        /**
         * UnSetter for transactionLine.
         * @return Builder
         */
        public Builder unsetTransactionLine() {
            transactionLine = null;
            return this;
        }

        /**
         * Setter for allowClearing.
         * @param  allowClearing  String value for allowClearing.
         * @return Builder
         */
        public Builder allowClearing(String allowClearing) {
            this.allowClearing = OptionalNullable.of(allowClearing);
            return this;
        }

        /**
         * UnSetter for allowClearing.
         * @return Builder
         */
        public Builder unsetAllowClearing() {
            allowClearing = null;
            return this;
        }

        /**
         * Setter for cRMNumber.
         * @param  cRMNumber  String value for cRMNumber.
         * @return Builder
         */
        public Builder cRMNumber(String cRMNumber) {
            this.cRMNumber = OptionalNullable.of(cRMNumber);
            return this;
        }

        /**
         * UnSetter for cRMNumber.
         * @return Builder
         */
        public Builder unsetCRMNumber() {
            cRMNumber = null;
            return this;
        }

        /**
         * Setter for disputeStatus.
         * @param  disputeStatus  String value for disputeStatus.
         * @return Builder
         */
        public Builder disputeStatus(String disputeStatus) {
            this.disputeStatus = OptionalNullable.of(disputeStatus);
            return this;
        }

        /**
         * UnSetter for disputeStatus.
         * @return Builder
         */
        public Builder unsetDisputeStatus() {
            disputeStatus = null;
            return this;
        }

        /**
         * Setter for rebateRate.
         * @param  rebateRate  Double value for rebateRate.
         * @return Builder
         */
        public Builder rebateRate(Double rebateRate) {
            this.rebateRate = OptionalNullable.of(rebateRate);
            return this;
        }

        /**
         * UnSetter for rebateRate.
         * @return Builder
         */
        public Builder unsetRebateRate() {
            rebateRate = null;
            return this;
        }

        /**
         * Setter for delCoToColCoExchangeRate.
         * @param  delCoToColCoExchangeRate  Integer value for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder delCoToColCoExchangeRate(Integer delCoToColCoExchangeRate) {
            this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoToColCoExchangeRate() {
            delCoToColCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for netEuroAmount.
         * @param  netEuroAmount  Double value for netEuroAmount.
         * @return Builder
         */
        public Builder netEuroAmount(Double netEuroAmount) {
            this.netEuroAmount = OptionalNullable.of(netEuroAmount);
            return this;
        }

        /**
         * UnSetter for netEuroAmount.
         * @return Builder
         */
        public Builder unsetNetEuroAmount() {
            netEuroAmount = null;
            return this;
        }

        /**
         * Setter for euroRebateAmount.
         * @param  euroRebateAmount  Integer value for euroRebateAmount.
         * @return Builder
         */
        public Builder euroRebateAmount(Integer euroRebateAmount) {
            this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
            return this;
        }

        /**
         * UnSetter for euroRebateAmount.
         * @return Builder
         */
        public Builder unsetEuroRebateAmount() {
            euroRebateAmount = null;
            return this;
        }

        /**
         * Setter for euroVATAmount.
         * @param  euroVATAmount  Double value for euroVATAmount.
         * @return Builder
         */
        public Builder euroVATAmount(Double euroVATAmount) {
            this.euroVATAmount = OptionalNullable.of(euroVATAmount);
            return this;
        }

        /**
         * UnSetter for euroVATAmount.
         * @return Builder
         */
        public Builder unsetEuroVATAmount() {
            euroVATAmount = null;
            return this;
        }

        /**
         * Setter for parentCustomerNumber.
         * @param  parentCustomerNumber  String value for parentCustomerNumber.
         * @return Builder
         */
        public Builder parentCustomerNumber(String parentCustomerNumber) {
            this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
            return this;
        }

        /**
         * UnSetter for parentCustomerNumber.
         * @return Builder
         */
        public Builder unsetParentCustomerNumber() {
            parentCustomerNumber = null;
            return this;
        }

        /**
         * Setter for parentCustomerName.
         * @param  parentCustomerName  String value for parentCustomerName.
         * @return Builder
         */
        public Builder parentCustomerName(String parentCustomerName) {
            this.parentCustomerName = OptionalNullable.of(parentCustomerName);
            return this;
        }

        /**
         * UnSetter for parentCustomerName.
         * @return Builder
         */
        public Builder unsetParentCustomerName() {
            parentCustomerName = null;
            return this;
        }

        /**
         * Setter for parentCustomerId.
         * @param  parentCustomerId  Integer value for parentCustomerId.
         * @return Builder
         */
        public Builder parentCustomerId(Integer parentCustomerId) {
            this.parentCustomerId = OptionalNullable.of(parentCustomerId);
            return this;
        }

        /**
         * UnSetter for parentCustomerId.
         * @return Builder
         */
        public Builder unsetParentCustomerId() {
            parentCustomerId = null;
            return this;
        }

        /**
         * Setter for incomingSiteNumber.
         * @param  incomingSiteNumber  String value for incomingSiteNumber.
         * @return Builder
         */
        public Builder incomingSiteNumber(String incomingSiteNumber) {
            this.incomingSiteNumber = OptionalNullable.of(incomingSiteNumber);
            return this;
        }

        /**
         * UnSetter for incomingSiteNumber.
         * @return Builder
         */
        public Builder unsetIncomingSiteNumber() {
            incomingSiteNumber = null;
            return this;
        }

        /**
         * Setter for incomingSiteDescription.
         * @param  incomingSiteDescription  String value for incomingSiteDescription.
         * @return Builder
         */
        public Builder incomingSiteDescription(String incomingSiteDescription) {
            this.incomingSiteDescription = OptionalNullable.of(incomingSiteDescription);
            return this;
        }

        /**
         * UnSetter for incomingSiteDescription.
         * @return Builder
         */
        public Builder unsetIncomingSiteDescription() {
            incomingSiteDescription = null;
            return this;
        }

        /**
         * Setter for incomingCurrencyCode.
         * @param  incomingCurrencyCode  String value for incomingCurrencyCode.
         * @return Builder
         */
        public Builder incomingCurrencyCode(String incomingCurrencyCode) {
            this.incomingCurrencyCode = OptionalNullable.of(incomingCurrencyCode);
            return this;
        }

        /**
         * UnSetter for incomingCurrencyCode.
         * @return Builder
         */
        public Builder unsetIncomingCurrencyCode() {
            incomingCurrencyCode = null;
            return this;
        }

        /**
         * Setter for incomingProductCode.
         * @param  incomingProductCode  String value for incomingProductCode.
         * @return Builder
         */
        public Builder incomingProductCode(String incomingProductCode) {
            this.incomingProductCode = OptionalNullable.of(incomingProductCode);
            return this;
        }

        /**
         * UnSetter for incomingProductCode.
         * @return Builder
         */
        public Builder unsetIncomingProductCode() {
            incomingProductCode = null;
            return this;
        }

        /**
         * Setter for creditDebitCode.
         * @param  creditDebitCode  String value for creditDebitCode.
         * @return Builder
         */
        public Builder creditDebitCode(String creditDebitCode) {
            this.creditDebitCode = OptionalNullable.of(creditDebitCode);
            return this;
        }

        /**
         * UnSetter for creditDebitCode.
         * @return Builder
         */
        public Builder unsetCreditDebitCode() {
            creditDebitCode = null;
            return this;
        }

        /**
         * Setter for correctionFlag.
         * @param  correctionFlag  String value for correctionFlag.
         * @return Builder
         */
        public Builder correctionFlag(String correctionFlag) {
            this.correctionFlag = OptionalNullable.of(correctionFlag);
            return this;
        }

        /**
         * UnSetter for correctionFlag.
         * @return Builder
         */
        public Builder unsetCorrectionFlag() {
            correctionFlag = null;
            return this;
        }

        /**
         * Setter for additional1.
         * @param  additional1  String value for additional1.
         * @return Builder
         */
        public Builder additional1(String additional1) {
            this.additional1 = OptionalNullable.of(additional1);
            return this;
        }

        /**
         * UnSetter for additional1.
         * @return Builder
         */
        public Builder unsetAdditional1() {
            additional1 = null;
            return this;
        }

        /**
         * Setter for additional2.
         * @param  additional2  String value for additional2.
         * @return Builder
         */
        public Builder additional2(String additional2) {
            this.additional2 = OptionalNullable.of(additional2);
            return this;
        }

        /**
         * UnSetter for additional2.
         * @return Builder
         */
        public Builder unsetAdditional2() {
            additional2 = null;
            return this;
        }

        /**
         * Setter for additional3.
         * @param  additional3  String value for additional3.
         * @return Builder
         */
        public Builder additional3(String additional3) {
            this.additional3 = OptionalNullable.of(additional3);
            return this;
        }

        /**
         * UnSetter for additional3.
         * @return Builder
         */
        public Builder unsetAdditional3() {
            additional3 = null;
            return this;
        }

        /**
         * Setter for additional4.
         * @param  additional4  String value for additional4.
         * @return Builder
         */
        public Builder additional4(String additional4) {
            this.additional4 = OptionalNullable.of(additional4);
            return this;
        }

        /**
         * UnSetter for additional4.
         * @return Builder
         */
        public Builder unsetAdditional4() {
            additional4 = null;
            return this;
        }

        /**
         * Setter for rebateonNetAmountInCustomerCurrency.
         * @param  rebateonNetAmountInCustomerCurrency  Double value for
         *         rebateonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder rebateonNetAmountInCustomerCurrency(
                Double rebateonNetAmountInCustomerCurrency) {
            this.rebateonNetAmountInCustomerCurrency =
                    OptionalNullable.of(rebateonNetAmountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for rebateonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetRebateonNetAmountInCustomerCurrency() {
            rebateonNetAmountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for rebateonNetAmountInTransactionCurrency.
         * @param  rebateonNetAmountInTransactionCurrency  Double value for
         *         rebateonNetAmountInTransactionCurrency.
         * @return Builder
         */
        public Builder rebateonNetAmountInTransactionCurrency(
                Double rebateonNetAmountInTransactionCurrency) {
            this.rebateonNetAmountInTransactionCurrency =
                    OptionalNullable.of(rebateonNetAmountInTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for rebateonNetAmountInTransactionCurrency.
         * @return Builder
         */
        public Builder unsetRebateonNetAmountInTransactionCurrency() {
            rebateonNetAmountInTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for networkCode.
         * @param  networkCode  String value for networkCode.
         * @return Builder
         */
        public Builder networkCode(String networkCode) {
            this.networkCode = OptionalNullable.of(networkCode);
            return this;
        }

        /**
         * UnSetter for networkCode.
         * @return Builder
         */
        public Builder unsetNetworkCode() {
            networkCode = null;
            return this;
        }

        /**
         * Setter for trnIdentifier.
         * @param  trnIdentifier  String value for trnIdentifier.
         * @return Builder
         */
        public Builder trnIdentifier(String trnIdentifier) {
            this.trnIdentifier = OptionalNullable.of(trnIdentifier);
            return this;
        }

        /**
         * UnSetter for trnIdentifier.
         * @return Builder
         */
        public Builder unsetTrnIdentifier() {
            trnIdentifier = null;
            return this;
        }

        /**
         * Setter for cardType.
         * @param  cardType  String value for cardType.
         * @return Builder
         */
        public Builder cardType(String cardType) {
            this.cardType = OptionalNullable.of(cardType);
            return this;
        }

        /**
         * UnSetter for cardType.
         * @return Builder
         */
        public Builder unsetCardType() {
            cardType = null;
            return this;
        }

        /**
         * Setter for delcoListPriceUnitNet.
         * @param  delcoListPriceUnitNet  Double value for delcoListPriceUnitNet.
         * @return Builder
         */
        public Builder delcoListPriceUnitNet(Double delcoListPriceUnitNet) {
            this.delcoListPriceUnitNet = OptionalNullable.of(delcoListPriceUnitNet);
            return this;
        }

        /**
         * UnSetter for delcoListPriceUnitNet.
         * @return Builder
         */
        public Builder unsetDelcoListPriceUnitNet() {
            delcoListPriceUnitNet = null;
            return this;
        }

        /**
         * Setter for delcoRetailPriceUnitNet.
         * @param  delcoRetailPriceUnitNet  Double value for delcoRetailPriceUnitNet.
         * @return Builder
         */
        public Builder delcoRetailPriceUnitNet(Double delcoRetailPriceUnitNet) {
            this.delcoRetailPriceUnitNet = OptionalNullable.of(delcoRetailPriceUnitNet);
            return this;
        }

        /**
         * UnSetter for delcoRetailPriceUnitNet.
         * @return Builder
         */
        public Builder unsetDelcoRetailPriceUnitNet() {
            delcoRetailPriceUnitNet = null;
            return this;
        }

        /**
         * Setter for delcoRetailPriceUnitGross.
         * @param  delcoRetailPriceUnitGross  Double value for delcoRetailPriceUnitGross.
         * @return Builder
         */
        public Builder delcoRetailPriceUnitGross(Double delcoRetailPriceUnitGross) {
            this.delcoRetailPriceUnitGross = OptionalNullable.of(delcoRetailPriceUnitGross);
            return this;
        }

        /**
         * UnSetter for delcoRetailPriceUnitGross.
         * @return Builder
         */
        public Builder unsetDelcoRetailPriceUnitGross() {
            delcoRetailPriceUnitGross = null;
            return this;
        }

        /**
         * Setter for delcoRetailValueTotalNet.
         * @param  delcoRetailValueTotalNet  Double value for delcoRetailValueTotalNet.
         * @return Builder
         */
        public Builder delcoRetailValueTotalNet(Double delcoRetailValueTotalNet) {
            this.delcoRetailValueTotalNet = OptionalNullable.of(delcoRetailValueTotalNet);
            return this;
        }

        /**
         * UnSetter for delcoRetailValueTotalNet.
         * @return Builder
         */
        public Builder unsetDelcoRetailValueTotalNet() {
            delcoRetailValueTotalNet = null;
            return this;
        }

        /**
         * Setter for delcoRetailValueTotalGross.
         * @param  delcoRetailValueTotalGross  Double value for delcoRetailValueTotalGross.
         * @return Builder
         */
        public Builder delcoRetailValueTotalGross(Double delcoRetailValueTotalGross) {
            this.delcoRetailValueTotalGross = OptionalNullable.of(delcoRetailValueTotalGross);
            return this;
        }

        /**
         * UnSetter for delcoRetailValueTotalGross.
         * @return Builder
         */
        public Builder unsetDelcoRetailValueTotalGross() {
            delcoRetailValueTotalGross = null;
            return this;
        }

        /**
         * Setter for customerRetailPriceUnitGross.
         * @param  customerRetailPriceUnitGross  Double value for customerRetailPriceUnitGross.
         * @return Builder
         */
        public Builder customerRetailPriceUnitGross(Double customerRetailPriceUnitGross) {
            this.customerRetailPriceUnitGross = OptionalNullable.of(customerRetailPriceUnitGross);
            return this;
        }

        /**
         * UnSetter for customerRetailPriceUnitGross.
         * @return Builder
         */
        public Builder unsetCustomerRetailPriceUnitGross() {
            customerRetailPriceUnitGross = null;
            return this;
        }

        /**
         * Setter for customerRetailValueTotalGross.
         * @param  customerRetailValueTotalGross  Double value for customerRetailValueTotalGross.
         * @return Builder
         */
        public Builder customerRetailValueTotalGross(Double customerRetailValueTotalGross) {
            this.customerRetailValueTotalGross = OptionalNullable.of(customerRetailValueTotalGross);
            return this;
        }

        /**
         * UnSetter for customerRetailValueTotalGross.
         * @return Builder
         */
        public Builder unsetCustomerRetailValueTotalGross() {
            customerRetailValueTotalGross = null;
            return this;
        }

        /**
         * Setter for customerRetailValueTotalNet.
         * @param  customerRetailValueTotalNet  Double value for customerRetailValueTotalNet.
         * @return Builder
         */
        public Builder customerRetailValueTotalNet(Double customerRetailValueTotalNet) {
            this.customerRetailValueTotalNet = OptionalNullable.of(customerRetailValueTotalNet);
            return this;
        }

        /**
         * UnSetter for customerRetailValueTotalNet.
         * @return Builder
         */
        public Builder unsetCustomerRetailValueTotalNet() {
            customerRetailValueTotalNet = null;
            return this;
        }

        /**
         * Setter for transactionTypeDescription.
         * @param  transactionTypeDescription  String value for transactionTypeDescription.
         * @return Builder
         */
        public Builder transactionTypeDescription(String transactionTypeDescription) {
            this.transactionTypeDescription = OptionalNullable.of(transactionTypeDescription);
            return this;
        }

        /**
         * UnSetter for transactionTypeDescription.
         * @return Builder
         */
        public Builder unsetTransactionTypeDescription() {
            transactionTypeDescription = null;
            return this;
        }

        /**
         * Builds a new {@link MultiPricedTransactionResponseTransactionsItems} object using the set
         * fields.
         * @return {@link MultiPricedTransactionResponseTransactionsItems}
         */
        public MultiPricedTransactionResponseTransactionsItems build() {
            return new MultiPricedTransactionResponseTransactionsItems(type, cardId, cardPAN,
                    cardExpiry, transactionDate, transactionTime, uTCOffset, fleetIdInput,
                    odometerInput, driverName, vehicleRegistration, invoiceCurrencyCode,
                    invoiceCurrencySymbol, transactionCurrencyCode, transactionCurrencySymbol,
                    transactionNetAmount, transactionTax, transactionGrossAmount, invoiceNetAmount,
                    invoiceTax, invoiceGrossAmount, purchasedInCountry, accountId, accountNumber,
                    accountName, accountShortName, quantity, fuelProduct,
                    unitPriceInTransactionCurrency, unitPriceInInvoiceCurrency,
                    unitDiscountTransactionCurrency, unitDiscountInvoiceCurrency, isInvoiced,
                    invoiceNumber, invoiceDate, siteCode, siteName, siteCountry, location,
                    cardGroupName, receiptNumber, productCode, productName, productGroupId,
                    productGroupName, delCoExchangeRate, colCoExchangeRate, isShellSite, network,
                    siteGroupId, siteGroupName, postingDate, issuerCode, purchasedInCountryCode,
                    customerCountryCode, customerCountry, releaseCode, cardGroupId,
                    cardSequenceNumber, checkDigit, fleetIDDescription, vATRate, vATCategory,
                    vATCountry, effectiveDiscountInTrxCurrency, transactionType, pINIndicator,
                    vATApplicable, netInvoiceIndicator, customerCurrencyCode,
                    customerCurrencySymbol, effectiveUnitDiscountInCustomerCurrency,
                    effectiveDiscountInCustomerCurrency, vATonNetAmountInCustomerCurrency,
                    discountType, transactionStatus, salesItemId, payerGroup, payerGroupName,
                    refundFlag, originalSalesItemId, delcoName, delcoCode, payerNumber, payerName,
                    cardExpiryPeriod, authorisationCode, transactionId, transactionLine,
                    allowClearing, cRMNumber, disputeStatus, rebateRate, delCoToColCoExchangeRate,
                    netEuroAmount, euroRebateAmount, euroVATAmount, parentCustomerNumber,
                    parentCustomerName, parentCustomerId, incomingSiteNumber,
                    incomingSiteDescription, incomingCurrencyCode, incomingProductCode,
                    creditDebitCode, correctionFlag, additional1, additional2, additional3,
                    additional4, rebateonNetAmountInCustomerCurrency,
                    rebateonNetAmountInTransactionCurrency, networkCode, trnIdentifier, cardType,
                    delcoListPriceUnitNet, delcoRetailPriceUnitNet, delcoRetailPriceUnitGross,
                    delcoRetailValueTotalNet, delcoRetailValueTotalGross,
                    customerRetailPriceUnitGross, customerRetailValueTotalGross,
                    customerRetailValueTotalNet, transactionTypeDescription);
        }
    }
}
