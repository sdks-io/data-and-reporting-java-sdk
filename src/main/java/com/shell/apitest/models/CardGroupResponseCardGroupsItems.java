/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for CardGroupResponseCardGroupsItems type.
 */
public class CardGroupResponseCardGroupsItems {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> activeCards;
    private OptionalNullable<Integer> blockedCards;
    private OptionalNullable<Integer> cancelledCards;
    private OptionalNullable<Boolean> cardDeliveryPoint;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<String> cardTypeCode;
    private OptionalNullable<Integer> cardTypeId;
    private OptionalNullable<String> cardTypeName;
    private OptionalNullable<Integer> expiredCards;
    private OptionalNullable<String> expiryDate;
    private OptionalNullable<Boolean> printOnCard;
    private OptionalNullable<Integer> renewalPendingCards;
    private OptionalNullable<Integer> replacedCards;
    private OptionalNullable<String> status;
    private OptionalNullable<Integer> temporaryBlockByCustomer;
    private OptionalNullable<Integer> temporaryBlockByShell;
    private OptionalNullable<String> terminatedDate;
    private OptionalNullable<Integer> totalCards;

    /**
     * Default constructor.
     */
    public CardGroupResponseCardGroupsItems() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  activeCards  Integer value for activeCards.
     * @param  blockedCards  Integer value for blockedCards.
     * @param  cancelledCards  Integer value for cancelledCards.
     * @param  cardDeliveryPoint  Boolean value for cardDeliveryPoint.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  expiredCards  Integer value for expiredCards.
     * @param  expiryDate  String value for expiryDate.
     * @param  printOnCard  Boolean value for printOnCard.
     * @param  renewalPendingCards  Integer value for renewalPendingCards.
     * @param  replacedCards  Integer value for replacedCards.
     * @param  status  String value for status.
     * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
     * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
     * @param  terminatedDate  String value for terminatedDate.
     * @param  totalCards  Integer value for totalCards.
     */
    public CardGroupResponseCardGroupsItems(
            Integer accountId,
            String accountNumber,
            String accountShortName,
            Integer activeCards,
            Integer blockedCards,
            Integer cancelledCards,
            Boolean cardDeliveryPoint,
            Integer cardGroupId,
            String cardGroupName,
            String cardTypeCode,
            Integer cardTypeId,
            String cardTypeName,
            Integer expiredCards,
            String expiryDate,
            Boolean printOnCard,
            Integer renewalPendingCards,
            Integer replacedCards,
            String status,
            Integer temporaryBlockByCustomer,
            Integer temporaryBlockByShell,
            String terminatedDate,
            Integer totalCards) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.activeCards = OptionalNullable.of(activeCards);
        this.blockedCards = OptionalNullable.of(blockedCards);
        this.cancelledCards = OptionalNullable.of(cancelledCards);
        this.cardDeliveryPoint = OptionalNullable.of(cardDeliveryPoint);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
        this.cardTypeId = OptionalNullable.of(cardTypeId);
        this.cardTypeName = OptionalNullable.of(cardTypeName);
        this.expiredCards = OptionalNullable.of(expiredCards);
        this.expiryDate = OptionalNullable.of(expiryDate);
        this.printOnCard = OptionalNullable.of(printOnCard);
        this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
        this.replacedCards = OptionalNullable.of(replacedCards);
        this.status = OptionalNullable.of(status);
        this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
        this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
        this.terminatedDate = OptionalNullable.of(terminatedDate);
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  activeCards  Integer value for activeCards.
     * @param  blockedCards  Integer value for blockedCards.
     * @param  cancelledCards  Integer value for cancelledCards.
     * @param  cardDeliveryPoint  Boolean value for cardDeliveryPoint.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  cardTypeCode  String value for cardTypeCode.
     * @param  cardTypeId  Integer value for cardTypeId.
     * @param  cardTypeName  String value for cardTypeName.
     * @param  expiredCards  Integer value for expiredCards.
     * @param  expiryDate  String value for expiryDate.
     * @param  printOnCard  Boolean value for printOnCard.
     * @param  renewalPendingCards  Integer value for renewalPendingCards.
     * @param  replacedCards  Integer value for replacedCards.
     * @param  status  String value for status.
     * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
     * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
     * @param  terminatedDate  String value for terminatedDate.
     * @param  totalCards  Integer value for totalCards.
     */

    protected CardGroupResponseCardGroupsItems(OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountShortName,
            OptionalNullable<Integer> activeCards, OptionalNullable<Integer> blockedCards,
            OptionalNullable<Integer> cancelledCards, OptionalNullable<Boolean> cardDeliveryPoint,
            OptionalNullable<Integer> cardGroupId, OptionalNullable<String> cardGroupName,
            OptionalNullable<String> cardTypeCode, OptionalNullable<Integer> cardTypeId,
            OptionalNullable<String> cardTypeName, OptionalNullable<Integer> expiredCards,
            OptionalNullable<String> expiryDate, OptionalNullable<Boolean> printOnCard,
            OptionalNullable<Integer> renewalPendingCards, OptionalNullable<Integer> replacedCards,
            OptionalNullable<String> status, OptionalNullable<Integer> temporaryBlockByCustomer,
            OptionalNullable<Integer> temporaryBlockByShell,
            OptionalNullable<String> terminatedDate, OptionalNullable<Integer> totalCards) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.activeCards = activeCards;
        this.blockedCards = blockedCards;
        this.cancelledCards = cancelledCards;
        this.cardDeliveryPoint = cardDeliveryPoint;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.cardTypeCode = cardTypeCode;
        this.cardTypeId = cardTypeId;
        this.cardTypeName = cardTypeName;
        this.expiredCards = expiredCards;
        this.expiryDate = expiryDate;
        this.printOnCard = printOnCard;
        this.renewalPendingCards = renewalPendingCards;
        this.replacedCards = replacedCards;
        this.status = status;
        this.temporaryBlockByCustomer = temporaryBlockByCustomer;
        this.temporaryBlockByShell = temporaryBlockByShell;
        this.terminatedDate = terminatedDate;
        this.totalCards = totalCards;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id for the associated card group
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id for the associated card group
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id for the associated card group
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id for the associated card group
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account number for the associated card group
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account number for the associated card group
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account number for the associated card group
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account number for the associated card group
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account short name for the associated card group
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account short name for the associated card group
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account short name for the associated card group
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account short name for the associated card group
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("ActiveCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetActiveCards() {
        return this.activeCards;
    }

    /**
     * Getter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getActiveCards() {
        return OptionalNullable.getFrom(activeCards);
    }

    /**
     * Setter for ActiveCards.
     * Total number of active cards for the given search criteria
     * @param activeCards Value for Integer
     */
    @JsonSetter("ActiveCards")
    public void setActiveCards(Integer activeCards) {
        this.activeCards = OptionalNullable.of(activeCards);
    }

    /**
     * UnSetter for ActiveCards.
     * Total number of active cards for the given search criteria
     */
    public void unsetActiveCards() {
        activeCards = null;
    }

    /**
     * Internal Getter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked
     * @return Returns the Internal Integer
     */
    @JsonGetter("BlockedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBlockedCards() {
        return this.blockedCards;
    }

    /**
     * Getter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked
     * @return Returns the Integer
     */
    public Integer getBlockedCards() {
        return OptionalNullable.getFrom(blockedCards);
    }

    /**
     * Setter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked
     * @param blockedCards Value for Integer
     */
    @JsonSetter("BlockedCards")
    public void setBlockedCards(Integer blockedCards) {
        this.blockedCards = OptionalNullable.of(blockedCards);
    }

    /**
     * UnSetter for BlockedCards.
     * Total number of cards for the given search criteria that are permanently blocked
     */
    public void unsetBlockedCards() {
        blockedCards = null;
    }

    /**
     * Internal Getter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled
     * @return Returns the Internal Integer
     */
    @JsonGetter("CancelledCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCancelledCards() {
        return this.cancelledCards;
    }

    /**
     * Getter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled
     * @return Returns the Integer
     */
    public Integer getCancelledCards() {
        return OptionalNullable.getFrom(cancelledCards);
    }

    /**
     * Setter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled
     * @param cancelledCards Value for Integer
     */
    @JsonSetter("CancelledCards")
    public void setCancelledCards(Integer cancelledCards) {
        this.cancelledCards = OptionalNullable.of(cancelledCards);
    }

    /**
     * UnSetter for CancelledCards.
     * Total number of cards for the given search criteria that are cancelled
     */
    public void unsetCancelledCards() {
        cancelledCards = null;
    }

    /**
     * Internal Getter for CardDeliveryPoint.
     * card delivery point enabled or not
     * @return Returns the Internal Boolean
     */
    @JsonGetter("CardDeliveryPoint")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetCardDeliveryPoint() {
        return this.cardDeliveryPoint;
    }

    /**
     * Getter for CardDeliveryPoint.
     * card delivery point enabled or not
     * @return Returns the Boolean
     */
    public Boolean getCardDeliveryPoint() {
        return OptionalNullable.getFrom(cardDeliveryPoint);
    }

    /**
     * Setter for CardDeliveryPoint.
     * card delivery point enabled or not
     * @param cardDeliveryPoint Value for Boolean
     */
    @JsonSetter("CardDeliveryPoint")
    public void setCardDeliveryPoint(Boolean cardDeliveryPoint) {
        this.cardDeliveryPoint = OptionalNullable.of(cardDeliveryPoint);
    }

    /**
     * UnSetter for CardDeliveryPoint.
     * card delivery point enabled or not
     */
    public void unsetCardDeliveryPoint() {
        cardDeliveryPoint = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Id of the card group matching the search criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Id of the card group matching the search criteria.
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Id of the card group matching the search criteria.
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Id of the card group matching the search criteria.
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Name of the card group matching the search criteria.
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Name of the card group matching the search criteria.
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Name of the card group matching the search criteria.
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Name of the card group matching the search criteria.
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for CardTypeCode.
     * Card Type Code
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeCode() {
        return this.cardTypeCode;
    }

    /**
     * Getter for CardTypeCode.
     * Card Type Code
     * @return Returns the String
     */
    public String getCardTypeCode() {
        return OptionalNullable.getFrom(cardTypeCode);
    }

    /**
     * Setter for CardTypeCode.
     * Card Type Code
     * @param cardTypeCode Value for String
     */
    @JsonSetter("CardTypeCode")
    public void setCardTypeCode(String cardTypeCode) {
        this.cardTypeCode = OptionalNullable.of(cardTypeCode);
    }

    /**
     * UnSetter for CardTypeCode.
     * Card Type Code
     */
    public void unsetCardTypeCode() {
        cardTypeCode = null;
    }

    /**
     * Internal Getter for CardTypeId.
     * Card Type Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardTypeId() {
        return this.cardTypeId;
    }

    /**
     * Getter for CardTypeId.
     * Card Type Id
     * @return Returns the Integer
     */
    public Integer getCardTypeId() {
        return OptionalNullable.getFrom(cardTypeId);
    }

    /**
     * Setter for CardTypeId.
     * Card Type Id
     * @param cardTypeId Value for Integer
     */
    @JsonSetter("CardTypeId")
    public void setCardTypeId(Integer cardTypeId) {
        this.cardTypeId = OptionalNullable.of(cardTypeId);
    }

    /**
     * UnSetter for CardTypeId.
     * Card Type Id
     */
    public void unsetCardTypeId() {
        cardTypeId = null;
    }

    /**
     * Internal Getter for CardTypeName.
     * Card Type Name
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeName() {
        return this.cardTypeName;
    }

    /**
     * Getter for CardTypeName.
     * Card Type Name
     * @return Returns the String
     */
    public String getCardTypeName() {
        return OptionalNullable.getFrom(cardTypeName);
    }

    /**
     * Setter for CardTypeName.
     * Card Type Name
     * @param cardTypeName Value for String
     */
    @JsonSetter("CardTypeName")
    public void setCardTypeName(String cardTypeName) {
        this.cardTypeName = OptionalNullable.of(cardTypeName);
    }

    /**
     * UnSetter for CardTypeName.
     * Card Type Name
     */
    public void unsetCardTypeName() {
        cardTypeName = null;
    }

    /**
     * Internal Getter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("ExpiredCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetExpiredCards() {
        return this.expiredCards;
    }

    /**
     * Getter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getExpiredCards() {
        return OptionalNullable.getFrom(expiredCards);
    }

    /**
     * Setter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     * @param expiredCards Value for Integer
     */
    @JsonSetter("ExpiredCards")
    public void setExpiredCards(Integer expiredCards) {
        this.expiredCards = OptionalNullable.of(expiredCards);
    }

    /**
     * UnSetter for ExpiredCards.
     * Total number of expired cards for the given search criteria
     */
    public void unsetExpiredCards() {
        expiredCards = null;
    }

    /**
     * Internal Getter for ExpiryDate.
     * Expiry date of the card. Format: yyyyMMdd Note: Clients to convert this to appropriate
     * DateTime type.
     * @return Returns the Internal String
     */
    @JsonGetter("ExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetExpiryDate() {
        return this.expiryDate;
    }

    /**
     * Getter for ExpiryDate.
     * Expiry date of the card. Format: yyyyMMdd Note: Clients to convert this to appropriate
     * DateTime type.
     * @return Returns the String
     */
    public String getExpiryDate() {
        return OptionalNullable.getFrom(expiryDate);
    }

    /**
     * Setter for ExpiryDate.
     * Expiry date of the card. Format: yyyyMMdd Note: Clients to convert this to appropriate
     * DateTime type.
     * @param expiryDate Value for String
     */
    @JsonSetter("ExpiryDate")
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = OptionalNullable.of(expiryDate);
    }

    /**
     * UnSetter for ExpiryDate.
     * Expiry date of the card. Format: yyyyMMdd Note: Clients to convert this to appropriate
     * DateTime type.
     */
    public void unsetExpiryDate() {
        expiryDate = null;
    }

    /**
     * Internal Getter for PrintOnCard.
     * PrintOnCard true/false
     * @return Returns the Internal Boolean
     */
    @JsonGetter("PrintOnCard")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetPrintOnCard() {
        return this.printOnCard;
    }

    /**
     * Getter for PrintOnCard.
     * PrintOnCard true/false
     * @return Returns the Boolean
     */
    public Boolean getPrintOnCard() {
        return OptionalNullable.getFrom(printOnCard);
    }

    /**
     * Setter for PrintOnCard.
     * PrintOnCard true/false
     * @param printOnCard Value for Boolean
     */
    @JsonSetter("PrintOnCard")
    public void setPrintOnCard(Boolean printOnCard) {
        this.printOnCard = OptionalNullable.of(printOnCard);
    }

    /**
     * UnSetter for PrintOnCard.
     * PrintOnCard true/false
     */
    public void unsetPrintOnCard() {
        printOnCard = null;
    }

    /**
     * Internal Getter for RenewalPendingCards.
     * Total number of Renewal Pending Cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("RenewalPendingCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetRenewalPendingCards() {
        return this.renewalPendingCards;
    }

    /**
     * Getter for RenewalPendingCards.
     * Total number of Renewal Pending Cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getRenewalPendingCards() {
        return OptionalNullable.getFrom(renewalPendingCards);
    }

    /**
     * Setter for RenewalPendingCards.
     * Total number of Renewal Pending Cards for the given search criteria
     * @param renewalPendingCards Value for Integer
     */
    @JsonSetter("RenewalPendingCards")
    public void setRenewalPendingCards(Integer renewalPendingCards) {
        this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
    }

    /**
     * UnSetter for RenewalPendingCards.
     * Total number of Renewal Pending Cards for the given search criteria
     */
    public void unsetRenewalPendingCards() {
        renewalPendingCards = null;
    }

    /**
     * Internal Getter for ReplacedCards.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReplacedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReplacedCards() {
        return this.replacedCards;
    }

    /**
     * Getter for ReplacedCards.
     * @return Returns the Integer
     */
    public Integer getReplacedCards() {
        return OptionalNullable.getFrom(replacedCards);
    }

    /**
     * Setter for ReplacedCards.
     * @param replacedCards Value for Integer
     */
    @JsonSetter("ReplacedCards")
    public void setReplacedCards(Integer replacedCards) {
        this.replacedCards = OptionalNullable.of(replacedCards);
    }

    /**
     * UnSetter for ReplacedCards.
     */
    public void unsetReplacedCards() {
        replacedCards = null;
    }

    /**
     * Internal Getter for Status.
     * Status of the card group.
     * @return Returns the Internal String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Status of the card group.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Status of the card group.
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Status of the card group.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("TemporaryBlockByCustomer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTemporaryBlockByCustomer() {
        return this.temporaryBlockByCustomer;
    }

    /**
     * Getter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @return Returns the Integer
     */
    public Integer getTemporaryBlockByCustomer() {
        return OptionalNullable.getFrom(temporaryBlockByCustomer);
    }

    /**
     * Setter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     * @param temporaryBlockByCustomer Value for Integer
     */
    @JsonSetter("TemporaryBlockByCustomer")
    public void setTemporaryBlockByCustomer(Integer temporaryBlockByCustomer) {
        this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
    }

    /**
     * UnSetter for TemporaryBlockByCustomer.
     * Total number of cards for the given search criteria that are temporarily blocked by customer
     */
    public void unsetTemporaryBlockByCustomer() {
        temporaryBlockByCustomer = null;
    }

    /**
     * Internal Getter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @return Returns the Internal Integer
     */
    @JsonGetter("TemporaryBlockByShell")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTemporaryBlockByShell() {
        return this.temporaryBlockByShell;
    }

    /**
     * Getter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @return Returns the Integer
     */
    public Integer getTemporaryBlockByShell() {
        return OptionalNullable.getFrom(temporaryBlockByShell);
    }

    /**
     * Setter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     * @param temporaryBlockByShell Value for Integer
     */
    @JsonSetter("TemporaryBlockByShell")
    public void setTemporaryBlockByShell(Integer temporaryBlockByShell) {
        this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
    }

    /**
     * UnSetter for TemporaryBlockByShell.
     * Total number of cards for the given search criteria that are temporarily blocked by Shell
     */
    public void unsetTemporaryBlockByShell() {
        temporaryBlockByShell = null;
    }

    /**
     * Internal Getter for TerminatedDate.
     * Terminated Date. Format: yyyyMMdd Note: Clients to convert this to appropriate Date Time
     * type.
     * @return Returns the Internal String
     */
    @JsonGetter("TerminatedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTerminatedDate() {
        return this.terminatedDate;
    }

    /**
     * Getter for TerminatedDate.
     * Terminated Date. Format: yyyyMMdd Note: Clients to convert this to appropriate Date Time
     * type.
     * @return Returns the String
     */
    public String getTerminatedDate() {
        return OptionalNullable.getFrom(terminatedDate);
    }

    /**
     * Setter for TerminatedDate.
     * Terminated Date. Format: yyyyMMdd Note: Clients to convert this to appropriate Date Time
     * type.
     * @param terminatedDate Value for String
     */
    @JsonSetter("TerminatedDate")
    public void setTerminatedDate(String terminatedDate) {
        this.terminatedDate = OptionalNullable.of(terminatedDate);
    }

    /**
     * UnSetter for TerminatedDate.
     * Terminated Date. Format: yyyyMMdd Note: Clients to convert this to appropriate Date Time
     * type.
     */
    public void unsetTerminatedDate() {
        terminatedDate = null;
    }

    /**
     * Internal Getter for TotalCards.
     * Total number of cards for the given search criteria
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCards() {
        return this.totalCards;
    }

    /**
     * Getter for TotalCards.
     * Total number of cards for the given search criteria
     * @return Returns the Integer
     */
    public Integer getTotalCards() {
        return OptionalNullable.getFrom(totalCards);
    }

    /**
     * Setter for TotalCards.
     * Total number of cards for the given search criteria
     * @param totalCards Value for Integer
     */
    @JsonSetter("TotalCards")
    public void setTotalCards(Integer totalCards) {
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * UnSetter for TotalCards.
     * Total number of cards for the given search criteria
     */
    public void unsetTotalCards() {
        totalCards = null;
    }

    /**
     * Converts this CardGroupResponseCardGroupsItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CardGroupResponseCardGroupsItems [" + "accountId=" + accountId + ", accountNumber="
                + accountNumber + ", accountShortName=" + accountShortName + ", activeCards="
                + activeCards + ", blockedCards=" + blockedCards + ", cancelledCards="
                + cancelledCards + ", cardDeliveryPoint=" + cardDeliveryPoint + ", cardGroupId="
                + cardGroupId + ", cardGroupName=" + cardGroupName + ", cardTypeCode="
                + cardTypeCode + ", cardTypeId=" + cardTypeId + ", cardTypeName=" + cardTypeName
                + ", expiredCards=" + expiredCards + ", expiryDate=" + expiryDate + ", printOnCard="
                + printOnCard + ", renewalPendingCards=" + renewalPendingCards + ", replacedCards="
                + replacedCards + ", status=" + status + ", temporaryBlockByCustomer="
                + temporaryBlockByCustomer + ", temporaryBlockByShell=" + temporaryBlockByShell
                + ", terminatedDate=" + terminatedDate + ", totalCards=" + totalCards + "]";
    }

    /**
     * Builds a new {@link CardGroupResponseCardGroupsItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CardGroupResponseCardGroupsItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.activeCards = internalGetActiveCards();
        builder.blockedCards = internalGetBlockedCards();
        builder.cancelledCards = internalGetCancelledCards();
        builder.cardDeliveryPoint = internalGetCardDeliveryPoint();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.cardTypeCode = internalGetCardTypeCode();
        builder.cardTypeId = internalGetCardTypeId();
        builder.cardTypeName = internalGetCardTypeName();
        builder.expiredCards = internalGetExpiredCards();
        builder.expiryDate = internalGetExpiryDate();
        builder.printOnCard = internalGetPrintOnCard();
        builder.renewalPendingCards = internalGetRenewalPendingCards();
        builder.replacedCards = internalGetReplacedCards();
        builder.status = internalGetStatus();
        builder.temporaryBlockByCustomer = internalGetTemporaryBlockByCustomer();
        builder.temporaryBlockByShell = internalGetTemporaryBlockByShell();
        builder.terminatedDate = internalGetTerminatedDate();
        builder.totalCards = internalGetTotalCards();
        return builder;
    }

    /**
     * Class to build instances of {@link CardGroupResponseCardGroupsItems}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> activeCards;
        private OptionalNullable<Integer> blockedCards;
        private OptionalNullable<Integer> cancelledCards;
        private OptionalNullable<Boolean> cardDeliveryPoint;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<String> cardTypeCode;
        private OptionalNullable<Integer> cardTypeId;
        private OptionalNullable<String> cardTypeName;
        private OptionalNullable<Integer> expiredCards;
        private OptionalNullable<String> expiryDate;
        private OptionalNullable<Boolean> printOnCard;
        private OptionalNullable<Integer> renewalPendingCards;
        private OptionalNullable<Integer> replacedCards;
        private OptionalNullable<String> status;
        private OptionalNullable<Integer> temporaryBlockByCustomer;
        private OptionalNullable<Integer> temporaryBlockByShell;
        private OptionalNullable<String> terminatedDate;
        private OptionalNullable<Integer> totalCards;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for activeCards.
         * @param  activeCards  Integer value for activeCards.
         * @return Builder
         */
        public Builder activeCards(Integer activeCards) {
            this.activeCards = OptionalNullable.of(activeCards);
            return this;
        }

        /**
         * UnSetter for activeCards.
         * @return Builder
         */
        public Builder unsetActiveCards() {
            activeCards = null;
            return this;
        }

        /**
         * Setter for blockedCards.
         * @param  blockedCards  Integer value for blockedCards.
         * @return Builder
         */
        public Builder blockedCards(Integer blockedCards) {
            this.blockedCards = OptionalNullable.of(blockedCards);
            return this;
        }

        /**
         * UnSetter for blockedCards.
         * @return Builder
         */
        public Builder unsetBlockedCards() {
            blockedCards = null;
            return this;
        }

        /**
         * Setter for cancelledCards.
         * @param  cancelledCards  Integer value for cancelledCards.
         * @return Builder
         */
        public Builder cancelledCards(Integer cancelledCards) {
            this.cancelledCards = OptionalNullable.of(cancelledCards);
            return this;
        }

        /**
         * UnSetter for cancelledCards.
         * @return Builder
         */
        public Builder unsetCancelledCards() {
            cancelledCards = null;
            return this;
        }

        /**
         * Setter for cardDeliveryPoint.
         * @param  cardDeliveryPoint  Boolean value for cardDeliveryPoint.
         * @return Builder
         */
        public Builder cardDeliveryPoint(Boolean cardDeliveryPoint) {
            this.cardDeliveryPoint = OptionalNullable.of(cardDeliveryPoint);
            return this;
        }

        /**
         * UnSetter for cardDeliveryPoint.
         * @return Builder
         */
        public Builder unsetCardDeliveryPoint() {
            cardDeliveryPoint = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for cardTypeCode.
         * @param  cardTypeCode  String value for cardTypeCode.
         * @return Builder
         */
        public Builder cardTypeCode(String cardTypeCode) {
            this.cardTypeCode = OptionalNullable.of(cardTypeCode);
            return this;
        }

        /**
         * UnSetter for cardTypeCode.
         * @return Builder
         */
        public Builder unsetCardTypeCode() {
            cardTypeCode = null;
            return this;
        }

        /**
         * Setter for cardTypeId.
         * @param  cardTypeId  Integer value for cardTypeId.
         * @return Builder
         */
        public Builder cardTypeId(Integer cardTypeId) {
            this.cardTypeId = OptionalNullable.of(cardTypeId);
            return this;
        }

        /**
         * UnSetter for cardTypeId.
         * @return Builder
         */
        public Builder unsetCardTypeId() {
            cardTypeId = null;
            return this;
        }

        /**
         * Setter for cardTypeName.
         * @param  cardTypeName  String value for cardTypeName.
         * @return Builder
         */
        public Builder cardTypeName(String cardTypeName) {
            this.cardTypeName = OptionalNullable.of(cardTypeName);
            return this;
        }

        /**
         * UnSetter for cardTypeName.
         * @return Builder
         */
        public Builder unsetCardTypeName() {
            cardTypeName = null;
            return this;
        }

        /**
         * Setter for expiredCards.
         * @param  expiredCards  Integer value for expiredCards.
         * @return Builder
         */
        public Builder expiredCards(Integer expiredCards) {
            this.expiredCards = OptionalNullable.of(expiredCards);
            return this;
        }

        /**
         * UnSetter for expiredCards.
         * @return Builder
         */
        public Builder unsetExpiredCards() {
            expiredCards = null;
            return this;
        }

        /**
         * Setter for expiryDate.
         * @param  expiryDate  String value for expiryDate.
         * @return Builder
         */
        public Builder expiryDate(String expiryDate) {
            this.expiryDate = OptionalNullable.of(expiryDate);
            return this;
        }

        /**
         * UnSetter for expiryDate.
         * @return Builder
         */
        public Builder unsetExpiryDate() {
            expiryDate = null;
            return this;
        }

        /**
         * Setter for printOnCard.
         * @param  printOnCard  Boolean value for printOnCard.
         * @return Builder
         */
        public Builder printOnCard(Boolean printOnCard) {
            this.printOnCard = OptionalNullable.of(printOnCard);
            return this;
        }

        /**
         * UnSetter for printOnCard.
         * @return Builder
         */
        public Builder unsetPrintOnCard() {
            printOnCard = null;
            return this;
        }

        /**
         * Setter for renewalPendingCards.
         * @param  renewalPendingCards  Integer value for renewalPendingCards.
         * @return Builder
         */
        public Builder renewalPendingCards(Integer renewalPendingCards) {
            this.renewalPendingCards = OptionalNullable.of(renewalPendingCards);
            return this;
        }

        /**
         * UnSetter for renewalPendingCards.
         * @return Builder
         */
        public Builder unsetRenewalPendingCards() {
            renewalPendingCards = null;
            return this;
        }

        /**
         * Setter for replacedCards.
         * @param  replacedCards  Integer value for replacedCards.
         * @return Builder
         */
        public Builder replacedCards(Integer replacedCards) {
            this.replacedCards = OptionalNullable.of(replacedCards);
            return this;
        }

        /**
         * UnSetter for replacedCards.
         * @return Builder
         */
        public Builder unsetReplacedCards() {
            replacedCards = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for temporaryBlockByCustomer.
         * @param  temporaryBlockByCustomer  Integer value for temporaryBlockByCustomer.
         * @return Builder
         */
        public Builder temporaryBlockByCustomer(Integer temporaryBlockByCustomer) {
            this.temporaryBlockByCustomer = OptionalNullable.of(temporaryBlockByCustomer);
            return this;
        }

        /**
         * UnSetter for temporaryBlockByCustomer.
         * @return Builder
         */
        public Builder unsetTemporaryBlockByCustomer() {
            temporaryBlockByCustomer = null;
            return this;
        }

        /**
         * Setter for temporaryBlockByShell.
         * @param  temporaryBlockByShell  Integer value for temporaryBlockByShell.
         * @return Builder
         */
        public Builder temporaryBlockByShell(Integer temporaryBlockByShell) {
            this.temporaryBlockByShell = OptionalNullable.of(temporaryBlockByShell);
            return this;
        }

        /**
         * UnSetter for temporaryBlockByShell.
         * @return Builder
         */
        public Builder unsetTemporaryBlockByShell() {
            temporaryBlockByShell = null;
            return this;
        }

        /**
         * Setter for terminatedDate.
         * @param  terminatedDate  String value for terminatedDate.
         * @return Builder
         */
        public Builder terminatedDate(String terminatedDate) {
            this.terminatedDate = OptionalNullable.of(terminatedDate);
            return this;
        }

        /**
         * UnSetter for terminatedDate.
         * @return Builder
         */
        public Builder unsetTerminatedDate() {
            terminatedDate = null;
            return this;
        }

        /**
         * Setter for totalCards.
         * @param  totalCards  Integer value for totalCards.
         * @return Builder
         */
        public Builder totalCards(Integer totalCards) {
            this.totalCards = OptionalNullable.of(totalCards);
            return this;
        }

        /**
         * UnSetter for totalCards.
         * @return Builder
         */
        public Builder unsetTotalCards() {
            totalCards = null;
            return this;
        }

        /**
         * Builds a new {@link CardGroupResponseCardGroupsItems} object using the set fields.
         * @return {@link CardGroupResponseCardGroupsItems}
         */
        public CardGroupResponseCardGroupsItems build() {
            return new CardGroupResponseCardGroupsItems(accountId, accountNumber, accountShortName,
                    activeCards, blockedCards, cancelledCards, cardDeliveryPoint, cardGroupId,
                    cardGroupName, cardTypeCode, cardTypeId, cardTypeName, expiredCards, expiryDate,
                    printOnCard, renewalPendingCards, replacedCards, status,
                    temporaryBlockByCustomer, temporaryBlockByShell, terminatedDate, totalCards);
        }
    }
}
