/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for AccountResponseAccountsItems type.
 */
public class AccountResponseAccountsItems {
    private OptionalNullable<String> accountFullName;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private Boolean bestOfIndicator;
    private OptionalNullable<String> billingFrequencyType;
    private OptionalNullable<Integer> billingFrequencyTypeId;
    private OptionalNullable<String> billingRunFrequency;
    private OptionalNullable<Integer> billingRunFrequencyTypeId;
    private OptionalNullable<String> colCoCountryCode;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Integer> day1Run;
    private OptionalNullable<Integer> day2Run;
    private OptionalNullable<Integer> day3Run;
    private OptionalNullable<Integer> day4Run;
    private OptionalNullable<String> frequencyType;
    private OptionalNullable<Double> grossAmount;
    private OptionalNullable<String> internationalPOSLanguageCode;
    private OptionalNullable<Integer> internationalPOSLanguageID;
    private OptionalNullable<Integer> invoiceAccountID;
    private OptionalNullable<String> invoiceAccountNumber;
    private OptionalNullable<String> invoiceAccountShortName;
    private List<InvoiceDistributionMethod> invoiceDistributionMethods;
    private OptionalNullable<Boolean> isInternational;
    private OptionalNullable<Boolean> isInvoicePoint;
    private OptionalNullable<String> lastModifiedDate;
    private OptionalNullable<String> localCurrencyCode;
    private OptionalNullable<String> localCurrencySymbol;
    private OptionalNullable<String> localPOSLanguageCode;
    private OptionalNullable<Integer> localPOSLanguageID;
    private OptionalNullable<Double> netAmount;
    private OptionalNullable<Double> outstandingBalance;
    private OptionalNullable<Double> paidAmount;
    private OptionalNullable<String> status;
    private OptionalNullable<String> statusReason;
    private OptionalNullable<Integer> totalActiveCardGroups;
    private OptionalNullable<Integer> totalActiveCards;
    private OptionalNullable<Integer> totalBlockedCards;
    private OptionalNullable<Integer> totalCancelledCards;
    private OptionalNullable<Integer> totalCards;
    private OptionalNullable<Integer> totalExpiredCards;
    private OptionalNullable<Integer> totalFraudCards;
    private OptionalNullable<Integer> totalNewCards;
    private OptionalNullable<Integer> totalRenewalPendingCards;
    private OptionalNullable<Integer> totalReplacedCards;
    private OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer;
    private OptionalNullable<Integer> totalTemporaryBlockCardsByShell;
    private OptionalNullable<Double> vATAmount;
    private OptionalNullable<Integer> isPartnerCard;
    private OptionalNullable<String> tollsCustomerId;
    private OptionalNullable<String> tollsColcoCountryTypeId;
    private List<CustomerContract> contracts;
    private OptionalNullable<String> isConsortiumMember;

    /**
     * Default constructor.
     */
    public AccountResponseAccountsItems() {
    }

    /**
     * Initialization constructor.
     * @param  accountFullName  String value for accountFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  bestOfIndicator  Boolean value for bestOfIndicator.
     * @param  billingFrequencyType  String value for billingFrequencyType.
     * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
     * @param  billingRunFrequency  String value for billingRunFrequency.
     * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  day1Run  Integer value for day1Run.
     * @param  day2Run  Integer value for day2Run.
     * @param  day3Run  Integer value for day3Run.
     * @param  day4Run  Integer value for day4Run.
     * @param  frequencyType  String value for frequencyType.
     * @param  grossAmount  Double value for grossAmount.
     * @param  internationalPOSLanguageCode  String value for internationalPOSLanguageCode.
     * @param  internationalPOSLanguageID  Integer value for internationalPOSLanguageID.
     * @param  invoiceAccountID  Integer value for invoiceAccountID.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
     *         invoiceDistributionMethods.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isInvoicePoint  Boolean value for isInvoicePoint.
     * @param  lastModifiedDate  String value for lastModifiedDate.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localPOSLanguageCode  String value for localPOSLanguageCode.
     * @param  localPOSLanguageID  Integer value for localPOSLanguageID.
     * @param  netAmount  Double value for netAmount.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  paidAmount  Double value for paidAmount.
     * @param  status  String value for status.
     * @param  statusReason  String value for statusReason.
     * @param  totalActiveCardGroups  Integer value for totalActiveCardGroups.
     * @param  totalActiveCards  Integer value for totalActiveCards.
     * @param  totalBlockedCards  Integer value for totalBlockedCards.
     * @param  totalCancelledCards  Integer value for totalCancelledCards.
     * @param  totalCards  Integer value for totalCards.
     * @param  totalExpiredCards  Integer value for totalExpiredCards.
     * @param  totalFraudCards  Integer value for totalFraudCards.
     * @param  totalNewCards  Integer value for totalNewCards.
     * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
     * @param  totalReplacedCards  Integer value for totalReplacedCards.
     * @param  totalTemporaryBlockCardsByCustomer  Integer value for
     *         totalTemporaryBlockCardsByCustomer.
     * @param  totalTemporaryBlockCardsByShell  Integer value for totalTemporaryBlockCardsByShell.
     * @param  vATAmount  Double value for vATAmount.
     * @param  isPartnerCard  Integer value for isPartnerCard.
     * @param  tollsCustomerId  String value for tollsCustomerId.
     * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
     * @param  contracts  List of CustomerContract value for contracts.
     * @param  isConsortiumMember  String value for isConsortiumMember.
     */
    public AccountResponseAccountsItems(
            String accountFullName,
            Integer accountId,
            String accountNumber,
            String accountShortName,
            Boolean bestOfIndicator,
            String billingFrequencyType,
            Integer billingFrequencyTypeId,
            String billingRunFrequency,
            Integer billingRunFrequencyTypeId,
            String colCoCountryCode,
            String currencyCode,
            String currencySymbol,
            Integer day1Run,
            Integer day2Run,
            Integer day3Run,
            Integer day4Run,
            String frequencyType,
            Double grossAmount,
            String internationalPOSLanguageCode,
            Integer internationalPOSLanguageID,
            Integer invoiceAccountID,
            String invoiceAccountNumber,
            String invoiceAccountShortName,
            List<InvoiceDistributionMethod> invoiceDistributionMethods,
            Boolean isInternational,
            Boolean isInvoicePoint,
            String lastModifiedDate,
            String localCurrencyCode,
            String localCurrencySymbol,
            String localPOSLanguageCode,
            Integer localPOSLanguageID,
            Double netAmount,
            Double outstandingBalance,
            Double paidAmount,
            String status,
            String statusReason,
            Integer totalActiveCardGroups,
            Integer totalActiveCards,
            Integer totalBlockedCards,
            Integer totalCancelledCards,
            Integer totalCards,
            Integer totalExpiredCards,
            Integer totalFraudCards,
            Integer totalNewCards,
            Integer totalRenewalPendingCards,
            Integer totalReplacedCards,
            Integer totalTemporaryBlockCardsByCustomer,
            Integer totalTemporaryBlockCardsByShell,
            Double vATAmount,
            Integer isPartnerCard,
            String tollsCustomerId,
            String tollsColcoCountryTypeId,
            List<CustomerContract> contracts,
            String isConsortiumMember) {
        this.accountFullName = OptionalNullable.of(accountFullName);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.bestOfIndicator = bestOfIndicator;
        this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
        this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
        this.billingRunFrequency = OptionalNullable.of(billingRunFrequency);
        this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.day1Run = OptionalNullable.of(day1Run);
        this.day2Run = OptionalNullable.of(day2Run);
        this.day3Run = OptionalNullable.of(day3Run);
        this.day4Run = OptionalNullable.of(day4Run);
        this.frequencyType = OptionalNullable.of(frequencyType);
        this.grossAmount = OptionalNullable.of(grossAmount);
        this.internationalPOSLanguageCode = OptionalNullable.of(internationalPOSLanguageCode);
        this.internationalPOSLanguageID = OptionalNullable.of(internationalPOSLanguageID);
        this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
        this.invoiceDistributionMethods = invoiceDistributionMethods;
        this.isInternational = OptionalNullable.of(isInternational);
        this.isInvoicePoint = OptionalNullable.of(isInvoicePoint);
        this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
        this.localPOSLanguageCode = OptionalNullable.of(localPOSLanguageCode);
        this.localPOSLanguageID = OptionalNullable.of(localPOSLanguageID);
        this.netAmount = OptionalNullable.of(netAmount);
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
        this.paidAmount = OptionalNullable.of(paidAmount);
        this.status = OptionalNullable.of(status);
        this.statusReason = OptionalNullable.of(statusReason);
        this.totalActiveCardGroups = OptionalNullable.of(totalActiveCardGroups);
        this.totalActiveCards = OptionalNullable.of(totalActiveCards);
        this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
        this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
        this.totalCards = OptionalNullable.of(totalCards);
        this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
        this.totalFraudCards = OptionalNullable.of(totalFraudCards);
        this.totalNewCards = OptionalNullable.of(totalNewCards);
        this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
        this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
        this.totalTemporaryBlockCardsByCustomer =
                OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
        this.totalTemporaryBlockCardsByShell = OptionalNullable.of(totalTemporaryBlockCardsByShell);
        this.vATAmount = OptionalNullable.of(vATAmount);
        this.isPartnerCard = OptionalNullable.of(isPartnerCard);
        this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
        this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
        this.contracts = contracts;
        this.isConsortiumMember = OptionalNullable.of(isConsortiumMember);
    }

    /**
     * Initialization constructor.
     * @param  accountFullName  String value for accountFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  bestOfIndicator  Boolean value for bestOfIndicator.
     * @param  billingFrequencyType  String value for billingFrequencyType.
     * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
     * @param  billingRunFrequency  String value for billingRunFrequency.
     * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  day1Run  Integer value for day1Run.
     * @param  day2Run  Integer value for day2Run.
     * @param  day3Run  Integer value for day3Run.
     * @param  day4Run  Integer value for day4Run.
     * @param  frequencyType  String value for frequencyType.
     * @param  grossAmount  Double value for grossAmount.
     * @param  internationalPOSLanguageCode  String value for internationalPOSLanguageCode.
     * @param  internationalPOSLanguageID  Integer value for internationalPOSLanguageID.
     * @param  invoiceAccountID  Integer value for invoiceAccountID.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
     *         invoiceDistributionMethods.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isInvoicePoint  Boolean value for isInvoicePoint.
     * @param  lastModifiedDate  String value for lastModifiedDate.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localPOSLanguageCode  String value for localPOSLanguageCode.
     * @param  localPOSLanguageID  Integer value for localPOSLanguageID.
     * @param  netAmount  Double value for netAmount.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  paidAmount  Double value for paidAmount.
     * @param  status  String value for status.
     * @param  statusReason  String value for statusReason.
     * @param  totalActiveCardGroups  Integer value for totalActiveCardGroups.
     * @param  totalActiveCards  Integer value for totalActiveCards.
     * @param  totalBlockedCards  Integer value for totalBlockedCards.
     * @param  totalCancelledCards  Integer value for totalCancelledCards.
     * @param  totalCards  Integer value for totalCards.
     * @param  totalExpiredCards  Integer value for totalExpiredCards.
     * @param  totalFraudCards  Integer value for totalFraudCards.
     * @param  totalNewCards  Integer value for totalNewCards.
     * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
     * @param  totalReplacedCards  Integer value for totalReplacedCards.
     * @param  totalTemporaryBlockCardsByCustomer  Integer value for
     *         totalTemporaryBlockCardsByCustomer.
     * @param  totalTemporaryBlockCardsByShell  Integer value for totalTemporaryBlockCardsByShell.
     * @param  vATAmount  Double value for vATAmount.
     * @param  isPartnerCard  Integer value for isPartnerCard.
     * @param  tollsCustomerId  String value for tollsCustomerId.
     * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
     * @param  contracts  List of CustomerContract value for contracts.
     * @param  isConsortiumMember  String value for isConsortiumMember.
     */

    protected AccountResponseAccountsItems(OptionalNullable<String> accountFullName,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<String> accountShortName, Boolean bestOfIndicator,
            OptionalNullable<String> billingFrequencyType,
            OptionalNullable<Integer> billingFrequencyTypeId,
            OptionalNullable<String> billingRunFrequency,
            OptionalNullable<Integer> billingRunFrequencyTypeId,
            OptionalNullable<String> colCoCountryCode, OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<Integer> day1Run,
            OptionalNullable<Integer> day2Run, OptionalNullable<Integer> day3Run,
            OptionalNullable<Integer> day4Run, OptionalNullable<String> frequencyType,
            OptionalNullable<Double> grossAmount,
            OptionalNullable<String> internationalPOSLanguageCode,
            OptionalNullable<Integer> internationalPOSLanguageID,
            OptionalNullable<Integer> invoiceAccountID,
            OptionalNullable<String> invoiceAccountNumber,
            OptionalNullable<String> invoiceAccountShortName,
            List<InvoiceDistributionMethod> invoiceDistributionMethods,
            OptionalNullable<Boolean> isInternational, OptionalNullable<Boolean> isInvoicePoint,
            OptionalNullable<String> lastModifiedDate, OptionalNullable<String> localCurrencyCode,
            OptionalNullable<String> localCurrencySymbol,
            OptionalNullable<String> localPOSLanguageCode,
            OptionalNullable<Integer> localPOSLanguageID, OptionalNullable<Double> netAmount,
            OptionalNullable<Double> outstandingBalance, OptionalNullable<Double> paidAmount,
            OptionalNullable<String> status, OptionalNullable<String> statusReason,
            OptionalNullable<Integer> totalActiveCardGroups,
            OptionalNullable<Integer> totalActiveCards, OptionalNullable<Integer> totalBlockedCards,
            OptionalNullable<Integer> totalCancelledCards, OptionalNullable<Integer> totalCards,
            OptionalNullable<Integer> totalExpiredCards, OptionalNullable<Integer> totalFraudCards,
            OptionalNullable<Integer> totalNewCards,
            OptionalNullable<Integer> totalRenewalPendingCards,
            OptionalNullable<Integer> totalReplacedCards,
            OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer,
            OptionalNullable<Integer> totalTemporaryBlockCardsByShell,
            OptionalNullable<Double> vATAmount, OptionalNullable<Integer> isPartnerCard,
            OptionalNullable<String> tollsCustomerId,
            OptionalNullable<String> tollsColcoCountryTypeId, List<CustomerContract> contracts,
            OptionalNullable<String> isConsortiumMember) {
        this.accountFullName = accountFullName;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.bestOfIndicator = bestOfIndicator;
        this.billingFrequencyType = billingFrequencyType;
        this.billingFrequencyTypeId = billingFrequencyTypeId;
        this.billingRunFrequency = billingRunFrequency;
        this.billingRunFrequencyTypeId = billingRunFrequencyTypeId;
        this.colCoCountryCode = colCoCountryCode;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.day1Run = day1Run;
        this.day2Run = day2Run;
        this.day3Run = day3Run;
        this.day4Run = day4Run;
        this.frequencyType = frequencyType;
        this.grossAmount = grossAmount;
        this.internationalPOSLanguageCode = internationalPOSLanguageCode;
        this.internationalPOSLanguageID = internationalPOSLanguageID;
        this.invoiceAccountID = invoiceAccountID;
        this.invoiceAccountNumber = invoiceAccountNumber;
        this.invoiceAccountShortName = invoiceAccountShortName;
        this.invoiceDistributionMethods = invoiceDistributionMethods;
        this.isInternational = isInternational;
        this.isInvoicePoint = isInvoicePoint;
        this.lastModifiedDate = lastModifiedDate;
        this.localCurrencyCode = localCurrencyCode;
        this.localCurrencySymbol = localCurrencySymbol;
        this.localPOSLanguageCode = localPOSLanguageCode;
        this.localPOSLanguageID = localPOSLanguageID;
        this.netAmount = netAmount;
        this.outstandingBalance = outstandingBalance;
        this.paidAmount = paidAmount;
        this.status = status;
        this.statusReason = statusReason;
        this.totalActiveCardGroups = totalActiveCardGroups;
        this.totalActiveCards = totalActiveCards;
        this.totalBlockedCards = totalBlockedCards;
        this.totalCancelledCards = totalCancelledCards;
        this.totalCards = totalCards;
        this.totalExpiredCards = totalExpiredCards;
        this.totalFraudCards = totalFraudCards;
        this.totalNewCards = totalNewCards;
        this.totalRenewalPendingCards = totalRenewalPendingCards;
        this.totalReplacedCards = totalReplacedCards;
        this.totalTemporaryBlockCardsByCustomer = totalTemporaryBlockCardsByCustomer;
        this.totalTemporaryBlockCardsByShell = totalTemporaryBlockCardsByShell;
        this.vATAmount = vATAmount;
        this.isPartnerCard = isPartnerCard;
        this.tollsCustomerId = tollsCustomerId;
        this.tollsColcoCountryTypeId = tollsColcoCountryTypeId;
        this.contracts = contracts;
        this.isConsortiumMember = isConsortiumMember;
    }

    /**
     * Internal Getter for AccountFullName.
     * Account Full Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountFullName() {
        return this.accountFullName;
    }

    /**
     * Getter for AccountFullName.
     * Account Full Name
     * @return Returns the String
     */
    public String getAccountFullName() {
        return OptionalNullable.getFrom(accountFullName);
    }

    /**
     * Setter for AccountFullName.
     * Account Full Name
     * @param accountFullName Value for String
     */
    @JsonSetter("AccountFullName")
    public void setAccountFullName(String accountFullName) {
        this.accountFullName = OptionalNullable.of(accountFullName);
    }

    /**
     * UnSetter for AccountFullName.
     * Account Full Name
     */
    public void unsetAccountFullName() {
        accountFullName = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Getter for BestOfIndicator.
     * Best of Indicator of the Pricing customer/account configured.
     * @return Returns the Boolean
     */
    @JsonGetter("BestOfIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getBestOfIndicator() {
        return bestOfIndicator;
    }

    /**
     * Setter for BestOfIndicator.
     * Best of Indicator of the Pricing customer/account configured.
     * @param bestOfIndicator Value for Boolean
     */
    @JsonSetter("BestOfIndicator")
    public void setBestOfIndicator(Boolean bestOfIndicator) {
        this.bestOfIndicator = bestOfIndicator;
    }

    /**
     * Internal Getter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1 Daily (all days) 2 Daily (only working days) 3 Weekly -
     * Monday 4 Weekly – Tuesday Etc.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingFrequencyType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingFrequencyType() {
        return this.billingFrequencyType;
    }

    /**
     * Getter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1 Daily (all days) 2 Daily (only working days) 3 Weekly -
     * Monday 4 Weekly – Tuesday Etc.
     * @return Returns the String
     */
    public String getBillingFrequencyType() {
        return OptionalNullable.getFrom(billingFrequencyType);
    }

    /**
     * Setter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1 Daily (all days) 2 Daily (only working days) 3 Weekly -
     * Monday 4 Weekly – Tuesday Etc.
     * @param billingFrequencyType Value for String
     */
    @JsonSetter("BillingFrequencyType")
    public void setBillingFrequencyType(String billingFrequencyType) {
        this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
    }

    /**
     * UnSetter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1 Daily (all days) 2 Daily (only working days) 3 Weekly -
     * Monday 4 Weekly – Tuesday Etc.
     */
    public void unsetBillingFrequencyType() {
        billingFrequencyType = null;
    }

    /**
     * Internal Getter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run
     * @return Returns the Internal Integer
     */
    @JsonGetter("BillingFrequencyTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBillingFrequencyTypeId() {
        return this.billingFrequencyTypeId;
    }

    /**
     * Getter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run
     * @return Returns the Integer
     */
    public Integer getBillingFrequencyTypeId() {
        return OptionalNullable.getFrom(billingFrequencyTypeId);
    }

    /**
     * Setter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run
     * @param billingFrequencyTypeId Value for Integer
     */
    @JsonSetter("BillingFrequencyTypeId")
    public void setBillingFrequencyTypeId(Integer billingFrequencyTypeId) {
        this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
    }

    /**
     * UnSetter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run
     */
    public void unsetBillingFrequencyTypeId() {
        billingFrequencyTypeId = null;
    }

    /**
     * Internal Getter for BillingRunFrequency.
     * Frequency at which the billing process is triggered. E.g.: 1 Daily (all days) 2 Daily (only
     * working days) 3 Weekly - Monday 4 Weekly – Tuesday Etc.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingRunFrequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingRunFrequency() {
        return this.billingRunFrequency;
    }

    /**
     * Getter for BillingRunFrequency.
     * Frequency at which the billing process is triggered. E.g.: 1 Daily (all days) 2 Daily (only
     * working days) 3 Weekly - Monday 4 Weekly – Tuesday Etc.
     * @return Returns the String
     */
    public String getBillingRunFrequency() {
        return OptionalNullable.getFrom(billingRunFrequency);
    }

    /**
     * Setter for BillingRunFrequency.
     * Frequency at which the billing process is triggered. E.g.: 1 Daily (all days) 2 Daily (only
     * working days) 3 Weekly - Monday 4 Weekly – Tuesday Etc.
     * @param billingRunFrequency Value for String
     */
    @JsonSetter("BillingRunFrequency")
    public void setBillingRunFrequency(String billingRunFrequency) {
        this.billingRunFrequency = OptionalNullable.of(billingRunFrequency);
    }

    /**
     * UnSetter for BillingRunFrequency.
     * Frequency at which the billing process is triggered. E.g.: 1 Daily (all days) 2 Daily (only
     * working days) 3 Weekly - Monday 4 Weekly – Tuesday Etc.
     */
    public void unsetBillingRunFrequency() {
        billingRunFrequency = null;
    }

    /**
     * Internal Getter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @return Returns the Internal Integer
     */
    @JsonGetter("BillingRunFrequencyTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBillingRunFrequencyTypeId() {
        return this.billingRunFrequencyTypeId;
    }

    /**
     * Getter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @return Returns the Integer
     */
    public Integer getBillingRunFrequencyTypeId() {
        return OptionalNullable.getFrom(billingRunFrequencyTypeId);
    }

    /**
     * Setter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @param billingRunFrequencyTypeId Value for Integer
     */
    @JsonSetter("BillingRunFrequencyTypeId")
    public void setBillingRunFrequencyTypeId(Integer billingRunFrequencyTypeId) {
        this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
    }

    /**
     * UnSetter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     */
    public void unsetBillingRunFrequencyTypeId() {
        billingRunFrequencyTypeId = null;
    }

    /**
     * Internal Getter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCountryCode() {
        return this.colCoCountryCode;
    }

    /**
     * Getter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @return Returns the String
     */
    public String getColCoCountryCode() {
        return OptionalNullable.getFrom(colCoCountryCode);
    }

    /**
     * Setter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @param colCoCountryCode Value for String
     */
    @JsonSetter("ColCoCountryCode")
    public void setColCoCountryCode(String colCoCountryCode) {
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
    }

    /**
     * UnSetter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public void unsetColCoCountryCode() {
        colCoCountryCode = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO code of customer currency.
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO code of customer currency.
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO code of customer currency.
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO code of customer currency.
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * €
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * €
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * €
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * €
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day1Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay1Run() {
        return this.day1Run;
    }

    /**
     * Getter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Integer
     */
    public Integer getDay1Run() {
        return OptionalNullable.getFrom(day1Run);
    }

    /**
     * Setter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @param day1Run Value for Integer
     */
    @JsonSetter("Day1Run")
    public void setDay1Run(Integer day1Run) {
        this.day1Run = OptionalNullable.of(day1Run);
    }

    /**
     * UnSetter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     */
    public void unsetDay1Run() {
        day1Run = null;
    }

    /**
     * Internal Getter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day2Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay2Run() {
        return this.day2Run;
    }

    /**
     * Getter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Integer
     */
    public Integer getDay2Run() {
        return OptionalNullable.getFrom(day2Run);
    }

    /**
     * Setter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @param day2Run Value for Integer
     */
    @JsonSetter("Day2Run")
    public void setDay2Run(Integer day2Run) {
        this.day2Run = OptionalNullable.of(day2Run);
    }

    /**
     * UnSetter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     */
    public void unsetDay2Run() {
        day2Run = null;
    }

    /**
     * Internal Getter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day3Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay3Run() {
        return this.day3Run;
    }

    /**
     * Getter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Integer
     */
    public Integer getDay3Run() {
        return OptionalNullable.getFrom(day3Run);
    }

    /**
     * Setter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @param day3Run Value for Integer
     */
    @JsonSetter("Day3Run")
    public void setDay3Run(Integer day3Run) {
        this.day3Run = OptionalNullable.of(day3Run);
    }

    /**
     * UnSetter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     */
    public void unsetDay3Run() {
        day3Run = null;
    }

    /**
     * Internal Getter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day4Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay4Run() {
        return this.day4Run;
    }

    /**
     * Getter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @return Returns the Integer
     */
    public Integer getDay4Run() {
        return OptionalNullable.getFrom(day4Run);
    }

    /**
     * Setter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     * @param day4Run Value for Integer
     */
    @JsonSetter("Day4Run")
    public void setDay4Run(Integer day4Run) {
        this.day4Run = OptionalNullable.of(day4Run);
    }

    /**
     * UnSetter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month
     */
    public void unsetDay4Run() {
        day4Run = null;
    }

    /**
     * Internal Getter for FrequencyType.
     * Frequency type unit id &amp; description E.g.: 1 - Daily 2 - Weekly 3 - Monthly 4 - Invoicing 6 -
     * Calendar quarter
     * @return Returns the Internal String
     */
    @JsonGetter("FrequencyType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFrequencyType() {
        return this.frequencyType;
    }

    /**
     * Getter for FrequencyType.
     * Frequency type unit id &amp; description E.g.: 1 - Daily 2 - Weekly 3 - Monthly 4 - Invoicing 6 -
     * Calendar quarter
     * @return Returns the String
     */
    public String getFrequencyType() {
        return OptionalNullable.getFrom(frequencyType);
    }

    /**
     * Setter for FrequencyType.
     * Frequency type unit id &amp; description E.g.: 1 - Daily 2 - Weekly 3 - Monthly 4 - Invoicing 6 -
     * Calendar quarter
     * @param frequencyType Value for String
     */
    @JsonSetter("FrequencyType")
    public void setFrequencyType(String frequencyType) {
        this.frequencyType = OptionalNullable.of(frequencyType);
    }

    /**
     * UnSetter for FrequencyType.
     * Frequency type unit id &amp; description E.g.: 1 - Daily 2 - Weekly 3 - Monthly 4 - Invoicing 6 -
     * Calendar quarter
     */
    public void unsetFrequencyType() {
        frequencyType = null;
    }

    /**
     * Internal Getter for GrossAmount.
     * Gross amount in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossAmount() {
        return this.grossAmount;
    }

    /**
     * Getter for GrossAmount.
     * Gross amount in customer currency.
     * @return Returns the Double
     */
    public Double getGrossAmount() {
        return OptionalNullable.getFrom(grossAmount);
    }

    /**
     * Setter for GrossAmount.
     * Gross amount in customer currency.
     * @param grossAmount Value for Double
     */
    @JsonSetter("GrossAmount")
    public void setGrossAmount(Double grossAmount) {
        this.grossAmount = OptionalNullable.of(grossAmount);
    }

    /**
     * UnSetter for GrossAmount.
     * Gross amount in customer currency.
     */
    public void unsetGrossAmount() {
        grossAmount = null;
    }

    /**
     * Internal Getter for InternationalPOSLanguageCode.
     * POS international language code
     * @return Returns the Internal String
     */
    @JsonGetter("InternationalPOSLanguageCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInternationalPOSLanguageCode() {
        return this.internationalPOSLanguageCode;
    }

    /**
     * Getter for InternationalPOSLanguageCode.
     * POS international language code
     * @return Returns the String
     */
    public String getInternationalPOSLanguageCode() {
        return OptionalNullable.getFrom(internationalPOSLanguageCode);
    }

    /**
     * Setter for InternationalPOSLanguageCode.
     * POS international language code
     * @param internationalPOSLanguageCode Value for String
     */
    @JsonSetter("InternationalPOSLanguageCode")
    public void setInternationalPOSLanguageCode(String internationalPOSLanguageCode) {
        this.internationalPOSLanguageCode = OptionalNullable.of(internationalPOSLanguageCode);
    }

    /**
     * UnSetter for InternationalPOSLanguageCode.
     * POS international language code
     */
    public void unsetInternationalPOSLanguageCode() {
        internationalPOSLanguageCode = null;
    }

    /**
     * Internal Getter for InternationalPOSLanguageID.
     * POS international language ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("InternationalPOSLanguageID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInternationalPOSLanguageID() {
        return this.internationalPOSLanguageID;
    }

    /**
     * Getter for InternationalPOSLanguageID.
     * POS international language ID
     * @return Returns the Integer
     */
    public Integer getInternationalPOSLanguageID() {
        return OptionalNullable.getFrom(internationalPOSLanguageID);
    }

    /**
     * Setter for InternationalPOSLanguageID.
     * POS international language ID
     * @param internationalPOSLanguageID Value for Integer
     */
    @JsonSetter("InternationalPOSLanguageID")
    public void setInternationalPOSLanguageID(Integer internationalPOSLanguageID) {
        this.internationalPOSLanguageID = OptionalNullable.of(internationalPOSLanguageID);
    }

    /**
     * UnSetter for InternationalPOSLanguageID.
     * POS international language ID
     */
    public void unsetInternationalPOSLanguageID() {
        internationalPOSLanguageID = null;
    }

    /**
     * Internal Getter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceAccountID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceAccountID() {
        return this.invoiceAccountID;
    }

    /**
     * Getter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @return Returns the Integer
     */
    public Integer getInvoiceAccountID() {
        return OptionalNullable.getFrom(invoiceAccountID);
    }

    /**
     * Setter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @param invoiceAccountID Value for Integer
     */
    @JsonSetter("InvoiceAccountID")
    public void setInvoiceAccountID(Integer invoiceAccountID) {
        this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
    }

    /**
     * UnSetter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountID() {
        invoiceAccountID = null;
    }

    /**
     * Internal Getter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountNumber() {
        return this.invoiceAccountNumber;
    }

    /**
     * Getter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @return Returns the String
     */
    public String getInvoiceAccountNumber() {
        return OptionalNullable.getFrom(invoiceAccountNumber);
    }

    /**
     * Setter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @param invoiceAccountNumber Value for String
     */
    @JsonSetter("InvoiceAccountNumber")
    public void setInvoiceAccountNumber(String invoiceAccountNumber) {
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
    }

    /**
     * UnSetter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountNumber() {
        invoiceAccountNumber = null;
    }

    /**
     * Internal Getter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountShortName() {
        return this.invoiceAccountShortName;
    }

    /**
     * Getter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @return Returns the String
     */
    public String getInvoiceAccountShortName() {
        return OptionalNullable.getFrom(invoiceAccountShortName);
    }

    /**
     * Setter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @param invoiceAccountShortName Value for String
     */
    @JsonSetter("InvoiceAccountShortName")
    public void setInvoiceAccountShortName(String invoiceAccountShortName) {
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
    }

    /**
     * UnSetter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountShortName() {
        invoiceAccountShortName = null;
    }

    /**
     * Getter for InvoiceDistributionMethods.
     * @return Returns the List of InvoiceDistributionMethod
     */
    @JsonGetter("InvoiceDistributionMethods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<InvoiceDistributionMethod> getInvoiceDistributionMethods() {
        return invoiceDistributionMethods;
    }

    /**
     * Setter for InvoiceDistributionMethods.
     * @param invoiceDistributionMethods Value for List of InvoiceDistributionMethod
     */
    @JsonSetter("InvoiceDistributionMethods")
    public void setInvoiceDistributionMethods(List<InvoiceDistributionMethod> invoiceDistributionMethods) {
        this.invoiceDistributionMethods = invoiceDistributionMethods;
    }

    /**
     * Internal Getter for IsInternational.
     * Whether the account is international.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInternational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInternational() {
        return this.isInternational;
    }

    /**
     * Getter for IsInternational.
     * Whether the account is international.
     * @return Returns the Boolean
     */
    public Boolean getIsInternational() {
        return OptionalNullable.getFrom(isInternational);
    }

    /**
     * Setter for IsInternational.
     * Whether the account is international.
     * @param isInternational Value for Boolean
     */
    @JsonSetter("IsInternational")
    public void setIsInternational(Boolean isInternational) {
        this.isInternational = OptionalNullable.of(isInternational);
    }

    /**
     * UnSetter for IsInternational.
     * Whether the account is international.
     */
    public void unsetIsInternational() {
        isInternational = null;
    }

    /**
     * Internal Getter for IsInvoicePoint.
     * Whether the account is an invoice point.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInvoicePoint")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInvoicePoint() {
        return this.isInvoicePoint;
    }

    /**
     * Getter for IsInvoicePoint.
     * Whether the account is an invoice point.
     * @return Returns the Boolean
     */
    public Boolean getIsInvoicePoint() {
        return OptionalNullable.getFrom(isInvoicePoint);
    }

    /**
     * Setter for IsInvoicePoint.
     * Whether the account is an invoice point.
     * @param isInvoicePoint Value for Boolean
     */
    @JsonSetter("IsInvoicePoint")
    public void setIsInvoicePoint(Boolean isInvoicePoint) {
        this.isInvoicePoint = OptionalNullable.of(isInvoicePoint);
    }

    /**
     * UnSetter for IsInvoicePoint.
     * Whether the account is an invoice point.
     */
    public void unsetIsInvoicePoint() {
        isInvoicePoint = null;
    }

    /**
     * Internal Getter for LastModifiedDate.
     * Account last modified date and time
     * @return Returns the Internal String
     */
    @JsonGetter("LastModifiedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastModifiedDate() {
        return this.lastModifiedDate;
    }

    /**
     * Getter for LastModifiedDate.
     * Account last modified date and time
     * @return Returns the String
     */
    public String getLastModifiedDate() {
        return OptionalNullable.getFrom(lastModifiedDate);
    }

    /**
     * Setter for LastModifiedDate.
     * Account last modified date and time
     * @param lastModifiedDate Value for String
     */
    @JsonSetter("LastModifiedDate")
    public void setLastModifiedDate(String lastModifiedDate) {
        this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
    }

    /**
     * UnSetter for LastModifiedDate.
     * Account last modified date and time
     */
    public void unsetLastModifiedDate() {
        lastModifiedDate = null;
    }

    /**
     * Internal Getter for LocalCurrencyCode.
     * ISO code of customer currency.
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyCode() {
        return this.localCurrencyCode;
    }

    /**
     * Getter for LocalCurrencyCode.
     * ISO code of customer currency.
     * @return Returns the String
     */
    public String getLocalCurrencyCode() {
        return OptionalNullable.getFrom(localCurrencyCode);
    }

    /**
     * Setter for LocalCurrencyCode.
     * ISO code of customer currency.
     * @param localCurrencyCode Value for String
     */
    @JsonSetter("LocalCurrencyCode")
    public void setLocalCurrencyCode(String localCurrencyCode) {
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
    }

    /**
     * UnSetter for LocalCurrencyCode.
     * ISO code of customer currency.
     */
    public void unsetLocalCurrencyCode() {
        localCurrencyCode = null;
    }

    /**
     * Internal Getter for LocalCurrencySymbol.
     * Customer currency symbol.
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencySymbol() {
        return this.localCurrencySymbol;
    }

    /**
     * Getter for LocalCurrencySymbol.
     * Customer currency symbol.
     * @return Returns the String
     */
    public String getLocalCurrencySymbol() {
        return OptionalNullable.getFrom(localCurrencySymbol);
    }

    /**
     * Setter for LocalCurrencySymbol.
     * Customer currency symbol.
     * @param localCurrencySymbol Value for String
     */
    @JsonSetter("LocalCurrencySymbol")
    public void setLocalCurrencySymbol(String localCurrencySymbol) {
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
    }

    /**
     * UnSetter for LocalCurrencySymbol.
     * Customer currency symbol.
     */
    public void unsetLocalCurrencySymbol() {
        localCurrencySymbol = null;
    }

    /**
     * Internal Getter for LocalPOSLanguageCode.
     * POS local language code
     * @return Returns the Internal String
     */
    @JsonGetter("LocalPOSLanguageCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalPOSLanguageCode() {
        return this.localPOSLanguageCode;
    }

    /**
     * Getter for LocalPOSLanguageCode.
     * POS local language code
     * @return Returns the String
     */
    public String getLocalPOSLanguageCode() {
        return OptionalNullable.getFrom(localPOSLanguageCode);
    }

    /**
     * Setter for LocalPOSLanguageCode.
     * POS local language code
     * @param localPOSLanguageCode Value for String
     */
    @JsonSetter("LocalPOSLanguageCode")
    public void setLocalPOSLanguageCode(String localPOSLanguageCode) {
        this.localPOSLanguageCode = OptionalNullable.of(localPOSLanguageCode);
    }

    /**
     * UnSetter for LocalPOSLanguageCode.
     * POS local language code
     */
    public void unsetLocalPOSLanguageCode() {
        localPOSLanguageCode = null;
    }

    /**
     * Internal Getter for LocalPOSLanguageID.
     * POS local language ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("LocalPOSLanguageID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetLocalPOSLanguageID() {
        return this.localPOSLanguageID;
    }

    /**
     * Getter for LocalPOSLanguageID.
     * POS local language ID
     * @return Returns the Integer
     */
    public Integer getLocalPOSLanguageID() {
        return OptionalNullable.getFrom(localPOSLanguageID);
    }

    /**
     * Setter for LocalPOSLanguageID.
     * POS local language ID
     * @param localPOSLanguageID Value for Integer
     */
    @JsonSetter("LocalPOSLanguageID")
    public void setLocalPOSLanguageID(Integer localPOSLanguageID) {
        this.localPOSLanguageID = OptionalNullable.of(localPOSLanguageID);
    }

    /**
     * UnSetter for LocalPOSLanguageID.
     * POS local language ID
     */
    public void unsetLocalPOSLanguageID() {
        localPOSLanguageID = null;
    }

    /**
     * Internal Getter for NetAmount.
     * Net amount in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetAmount() {
        return this.netAmount;
    }

    /**
     * Getter for NetAmount.
     * Net amount in customer currency.
     * @return Returns the Double
     */
    public Double getNetAmount() {
        return OptionalNullable.getFrom(netAmount);
    }

    /**
     * Setter for NetAmount.
     * Net amount in customer currency.
     * @param netAmount Value for Double
     */
    @JsonSetter("NetAmount")
    public void setNetAmount(Double netAmount) {
        this.netAmount = OptionalNullable.of(netAmount);
    }

    /**
     * UnSetter for NetAmount.
     * Net amount in customer currency.
     */
    public void unsetNetAmount() {
        netAmount = null;
    }

    /**
     * Internal Getter for OutstandingBalance.
     * Outstanding balance in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingBalance() {
        return this.outstandingBalance;
    }

    /**
     * Getter for OutstandingBalance.
     * Outstanding balance in customer currency.
     * @return Returns the Double
     */
    public Double getOutstandingBalance() {
        return OptionalNullable.getFrom(outstandingBalance);
    }

    /**
     * Setter for OutstandingBalance.
     * Outstanding balance in customer currency.
     * @param outstandingBalance Value for Double
     */
    @JsonSetter("OutstandingBalance")
    public void setOutstandingBalance(Double outstandingBalance) {
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
    }

    /**
     * UnSetter for OutstandingBalance.
     * Outstanding balance in customer currency.
     */
    public void unsetOutstandingBalance() {
        outstandingBalance = null;
    }

    /**
     * Internal Getter for PaidAmount.
     * Amount paid in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("PaidAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetPaidAmount() {
        return this.paidAmount;
    }

    /**
     * Getter for PaidAmount.
     * Amount paid in customer currency.
     * @return Returns the Double
     */
    public Double getPaidAmount() {
        return OptionalNullable.getFrom(paidAmount);
    }

    /**
     * Setter for PaidAmount.
     * Amount paid in customer currency.
     * @param paidAmount Value for Double
     */
    @JsonSetter("PaidAmount")
    public void setPaidAmount(Double paidAmount) {
        this.paidAmount = OptionalNullable.of(paidAmount);
    }

    /**
     * UnSetter for PaidAmount.
     * Amount paid in customer currency.
     */
    public void unsetPaidAmount() {
        paidAmount = null;
    }

    /**
     * Internal Getter for Status.
     * Account Status
     * @return Returns the Internal String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Account Status
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Account Status
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Account Status
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for StatusReason.
     * Account status change reason id-description for the Status Reason, if any
     * @return Returns the Internal String
     */
    @JsonGetter("StatusReason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatusReason() {
        return this.statusReason;
    }

    /**
     * Getter for StatusReason.
     * Account status change reason id-description for the Status Reason, if any
     * @return Returns the String
     */
    public String getStatusReason() {
        return OptionalNullable.getFrom(statusReason);
    }

    /**
     * Setter for StatusReason.
     * Account status change reason id-description for the Status Reason, if any
     * @param statusReason Value for String
     */
    @JsonSetter("StatusReason")
    public void setStatusReason(String statusReason) {
        this.statusReason = OptionalNullable.of(statusReason);
    }

    /**
     * UnSetter for StatusReason.
     * Account status change reason id-description for the Status Reason, if any
     */
    public void unsetStatusReason() {
        statusReason = null;
    }

    /**
     * Internal Getter for TotalActiveCardGroups.
     * Total number of active card groups under the account
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalActiveCardGroups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalActiveCardGroups() {
        return this.totalActiveCardGroups;
    }

    /**
     * Getter for TotalActiveCardGroups.
     * Total number of active card groups under the account
     * @return Returns the Integer
     */
    public Integer getTotalActiveCardGroups() {
        return OptionalNullable.getFrom(totalActiveCardGroups);
    }

    /**
     * Setter for TotalActiveCardGroups.
     * Total number of active card groups under the account
     * @param totalActiveCardGroups Value for Integer
     */
    @JsonSetter("TotalActiveCardGroups")
    public void setTotalActiveCardGroups(Integer totalActiveCardGroups) {
        this.totalActiveCardGroups = OptionalNullable.of(totalActiveCardGroups);
    }

    /**
     * UnSetter for TotalActiveCardGroups.
     * Total number of active card groups under the account
     */
    public void unsetTotalActiveCardGroups() {
        totalActiveCardGroups = null;
    }

    /**
     * Internal Getter for TotalActiveCards.
     * Total number of active cards under the account.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalActiveCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalActiveCards() {
        return this.totalActiveCards;
    }

    /**
     * Getter for TotalActiveCards.
     * Total number of active cards under the account.
     * @return Returns the Integer
     */
    public Integer getTotalActiveCards() {
        return OptionalNullable.getFrom(totalActiveCards);
    }

    /**
     * Setter for TotalActiveCards.
     * Total number of active cards under the account.
     * @param totalActiveCards Value for Integer
     */
    @JsonSetter("TotalActiveCards")
    public void setTotalActiveCards(Integer totalActiveCards) {
        this.totalActiveCards = OptionalNullable.of(totalActiveCards);
    }

    /**
     * UnSetter for TotalActiveCards.
     * Total number of active cards under the account.
     */
    public void unsetTotalActiveCards() {
        totalActiveCards = null;
    }

    /**
     * Internal Getter for TotalBlockedCards.
     * Total number of cards under the account that are permanently blocked
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBlockedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBlockedCards() {
        return this.totalBlockedCards;
    }

    /**
     * Getter for TotalBlockedCards.
     * Total number of cards under the account that are permanently blocked
     * @return Returns the Integer
     */
    public Integer getTotalBlockedCards() {
        return OptionalNullable.getFrom(totalBlockedCards);
    }

    /**
     * Setter for TotalBlockedCards.
     * Total number of cards under the account that are permanently blocked
     * @param totalBlockedCards Value for Integer
     */
    @JsonSetter("TotalBlockedCards")
    public void setTotalBlockedCards(Integer totalBlockedCards) {
        this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
    }

    /**
     * UnSetter for TotalBlockedCards.
     * Total number of cards under the account that are permanently blocked
     */
    public void unsetTotalBlockedCards() {
        totalBlockedCards = null;
    }

    /**
     * Internal Getter for TotalCancelledCards.
     * Total number of cards under the account that are cancelled
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCancelledCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCancelledCards() {
        return this.totalCancelledCards;
    }

    /**
     * Getter for TotalCancelledCards.
     * Total number of cards under the account that are cancelled
     * @return Returns the Integer
     */
    public Integer getTotalCancelledCards() {
        return OptionalNullable.getFrom(totalCancelledCards);
    }

    /**
     * Setter for TotalCancelledCards.
     * Total number of cards under the account that are cancelled
     * @param totalCancelledCards Value for Integer
     */
    @JsonSetter("TotalCancelledCards")
    public void setTotalCancelledCards(Integer totalCancelledCards) {
        this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
    }

    /**
     * UnSetter for TotalCancelledCards.
     * Total number of cards under the account that are cancelled
     */
    public void unsetTotalCancelledCards() {
        totalCancelledCards = null;
    }

    /**
     * Internal Getter for TotalCards.
     * Total number of cards under the account.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCards() {
        return this.totalCards;
    }

    /**
     * Getter for TotalCards.
     * Total number of cards under the account.
     * @return Returns the Integer
     */
    public Integer getTotalCards() {
        return OptionalNullable.getFrom(totalCards);
    }

    /**
     * Setter for TotalCards.
     * Total number of cards under the account.
     * @param totalCards Value for Integer
     */
    @JsonSetter("TotalCards")
    public void setTotalCards(Integer totalCards) {
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * UnSetter for TotalCards.
     * Total number of cards under the account.
     */
    public void unsetTotalCards() {
        totalCards = null;
    }

    /**
     * Internal Getter for TotalExpiredCards.
     * Total number of expired cards under the account.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalExpiredCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalExpiredCards() {
        return this.totalExpiredCards;
    }

    /**
     * Getter for TotalExpiredCards.
     * Total number of expired cards under the account.
     * @return Returns the Integer
     */
    public Integer getTotalExpiredCards() {
        return OptionalNullable.getFrom(totalExpiredCards);
    }

    /**
     * Setter for TotalExpiredCards.
     * Total number of expired cards under the account.
     * @param totalExpiredCards Value for Integer
     */
    @JsonSetter("TotalExpiredCards")
    public void setTotalExpiredCards(Integer totalExpiredCards) {
        this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
    }

    /**
     * UnSetter for TotalExpiredCards.
     * Total number of expired cards under the account.
     */
    public void unsetTotalExpiredCards() {
        totalExpiredCards = null;
    }

    /**
     * Internal Getter for TotalFraudCards.
     * Total number of cards in Fraud status.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalFraudCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalFraudCards() {
        return this.totalFraudCards;
    }

    /**
     * Getter for TotalFraudCards.
     * Total number of cards in Fraud status.
     * @return Returns the Integer
     */
    public Integer getTotalFraudCards() {
        return OptionalNullable.getFrom(totalFraudCards);
    }

    /**
     * Setter for TotalFraudCards.
     * Total number of cards in Fraud status.
     * @param totalFraudCards Value for Integer
     */
    @JsonSetter("TotalFraudCards")
    public void setTotalFraudCards(Integer totalFraudCards) {
        this.totalFraudCards = OptionalNullable.of(totalFraudCards);
    }

    /**
     * UnSetter for TotalFraudCards.
     * Total number of cards in Fraud status.
     */
    public void unsetTotalFraudCards() {
        totalFraudCards = null;
    }

    /**
     * Internal Getter for TotalNewCards.
     * Total number of cards in “New” status.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalNewCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalNewCards() {
        return this.totalNewCards;
    }

    /**
     * Getter for TotalNewCards.
     * Total number of cards in “New” status.
     * @return Returns the Integer
     */
    public Integer getTotalNewCards() {
        return OptionalNullable.getFrom(totalNewCards);
    }

    /**
     * Setter for TotalNewCards.
     * Total number of cards in “New” status.
     * @param totalNewCards Value for Integer
     */
    @JsonSetter("TotalNewCards")
    public void setTotalNewCards(Integer totalNewCards) {
        this.totalNewCards = OptionalNullable.of(totalNewCards);
    }

    /**
     * UnSetter for TotalNewCards.
     * Total number of cards in “New” status.
     */
    public void unsetTotalNewCards() {
        totalNewCards = null;
    }

    /**
     * Internal Getter for TotalRenewalPendingCards.
     * Total number of Renewal Pending account under the payer
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalRenewalPendingCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalRenewalPendingCards() {
        return this.totalRenewalPendingCards;
    }

    /**
     * Getter for TotalRenewalPendingCards.
     * Total number of Renewal Pending account under the payer
     * @return Returns the Integer
     */
    public Integer getTotalRenewalPendingCards() {
        return OptionalNullable.getFrom(totalRenewalPendingCards);
    }

    /**
     * Setter for TotalRenewalPendingCards.
     * Total number of Renewal Pending account under the payer
     * @param totalRenewalPendingCards Value for Integer
     */
    @JsonSetter("TotalRenewalPendingCards")
    public void setTotalRenewalPendingCards(Integer totalRenewalPendingCards) {
        this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
    }

    /**
     * UnSetter for TotalRenewalPendingCards.
     * Total number of Renewal Pending account under the payer
     */
    public void unsetTotalRenewalPendingCards() {
        totalRenewalPendingCards = null;
    }

    /**
     * Internal Getter for TotalReplacedCards.
     * Total number of cards under the account with status as “Replaced”
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalReplacedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalReplacedCards() {
        return this.totalReplacedCards;
    }

    /**
     * Getter for TotalReplacedCards.
     * Total number of cards under the account with status as “Replaced”
     * @return Returns the Integer
     */
    public Integer getTotalReplacedCards() {
        return OptionalNullable.getFrom(totalReplacedCards);
    }

    /**
     * Setter for TotalReplacedCards.
     * Total number of cards under the account with status as “Replaced”
     * @param totalReplacedCards Value for Integer
     */
    @JsonSetter("TotalReplacedCards")
    public void setTotalReplacedCards(Integer totalReplacedCards) {
        this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
    }

    /**
     * UnSetter for TotalReplacedCards.
     * Total number of cards under the account with status as “Replaced”
     */
    public void unsetTotalReplacedCards() {
        totalReplacedCards = null;
    }

    /**
     * Internal Getter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the account that are temporarily blocked by customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalTemporaryBlockCardsByCustomer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalTemporaryBlockCardsByCustomer() {
        return this.totalTemporaryBlockCardsByCustomer;
    }

    /**
     * Getter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the account that are temporarily blocked by customer.
     * @return Returns the Integer
     */
    public Integer getTotalTemporaryBlockCardsByCustomer() {
        return OptionalNullable.getFrom(totalTemporaryBlockCardsByCustomer);
    }

    /**
     * Setter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the account that are temporarily blocked by customer.
     * @param totalTemporaryBlockCardsByCustomer Value for Integer
     */
    @JsonSetter("TotalTemporaryBlockCardsByCustomer")
    public void setTotalTemporaryBlockCardsByCustomer(Integer totalTemporaryBlockCardsByCustomer) {
        this.totalTemporaryBlockCardsByCustomer = OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
    }

    /**
     * UnSetter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the account that are temporarily blocked by customer.
     */
    public void unsetTotalTemporaryBlockCardsByCustomer() {
        totalTemporaryBlockCardsByCustomer = null;
    }

    /**
     * Internal Getter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalTemporaryBlockCardsByShell")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalTemporaryBlockCardsByShell() {
        return this.totalTemporaryBlockCardsByShell;
    }

    /**
     * Getter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     * @return Returns the Integer
     */
    public Integer getTotalTemporaryBlockCardsByShell() {
        return OptionalNullable.getFrom(totalTemporaryBlockCardsByShell);
    }

    /**
     * Setter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     * @param totalTemporaryBlockCardsByShell Value for Integer
     */
    @JsonSetter("TotalTemporaryBlockCardsByShell")
    public void setTotalTemporaryBlockCardsByShell(Integer totalTemporaryBlockCardsByShell) {
        this.totalTemporaryBlockCardsByShell = OptionalNullable.of(totalTemporaryBlockCardsByShell);
    }

    /**
     * UnSetter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the account that are temporarily blocked by Shell.
     */
    public void unsetTotalTemporaryBlockCardsByShell() {
        totalTemporaryBlockCardsByShell = null;
    }

    /**
     * Internal Getter for VATAmount.
     * VAT amount in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("VATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATAmount() {
        return this.vATAmount;
    }

    /**
     * Getter for VATAmount.
     * VAT amount in customer currency.
     * @return Returns the Double
     */
    public Double getVATAmount() {
        return OptionalNullable.getFrom(vATAmount);
    }

    /**
     * Setter for VATAmount.
     * VAT amount in customer currency.
     * @param vATAmount Value for Double
     */
    @JsonSetter("VATAmount")
    public void setVATAmount(Double vATAmount) {
        this.vATAmount = OptionalNullable.of(vATAmount);
    }

    /**
     * UnSetter for VATAmount.
     * VAT amount in customer currency.
     */
    public void unsetVATAmount() {
        vATAmount = null;
    }

    /**
     * Internal Getter for IsPartnerCard.
     * The account / sub-account is partner card account or not. Possible values (1= Non-PC account,
     * 2= PC account, 3= PC Payer with Card Types, 4= PC Payer) Note: A partner card account is
     * assumed to have only partner card card-types associated
     * @return Returns the Internal Integer
     */
    @JsonGetter("IsPartnerCard")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetIsPartnerCard() {
        return this.isPartnerCard;
    }

    /**
     * Getter for IsPartnerCard.
     * The account / sub-account is partner card account or not. Possible values (1= Non-PC account,
     * 2= PC account, 3= PC Payer with Card Types, 4= PC Payer) Note: A partner card account is
     * assumed to have only partner card card-types associated
     * @return Returns the Integer
     */
    public Integer getIsPartnerCard() {
        return OptionalNullable.getFrom(isPartnerCard);
    }

    /**
     * Setter for IsPartnerCard.
     * The account / sub-account is partner card account or not. Possible values (1= Non-PC account,
     * 2= PC account, 3= PC Payer with Card Types, 4= PC Payer) Note: A partner card account is
     * assumed to have only partner card card-types associated
     * @param isPartnerCard Value for Integer
     */
    @JsonSetter("IsPartnerCard")
    public void setIsPartnerCard(Integer isPartnerCard) {
        this.isPartnerCard = OptionalNullable.of(isPartnerCard);
    }

    /**
     * UnSetter for IsPartnerCard.
     * The account / sub-account is partner card account or not. Possible values (1= Non-PC account,
     * 2= PC account, 3= PC Payer with Card Types, 4= PC Payer) Note: A partner card account is
     * assumed to have only partner card card-types associated
     */
    public void unsetIsPartnerCard() {
        isPartnerCard = null;
    }

    /**
     * Internal Getter for TollsCustomerId.
     * Customer id in e-TM system
     * @return Returns the Internal String
     */
    @JsonGetter("TollsCustomerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTollsCustomerId() {
        return this.tollsCustomerId;
    }

    /**
     * Getter for TollsCustomerId.
     * Customer id in e-TM system
     * @return Returns the String
     */
    public String getTollsCustomerId() {
        return OptionalNullable.getFrom(tollsCustomerId);
    }

    /**
     * Setter for TollsCustomerId.
     * Customer id in e-TM system
     * @param tollsCustomerId Value for String
     */
    @JsonSetter("TollsCustomerId")
    public void setTollsCustomerId(String tollsCustomerId) {
        this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
    }

    /**
     * UnSetter for TollsCustomerId.
     * Customer id in e-TM system
     */
    public void unsetTollsCustomerId() {
        tollsCustomerId = null;
    }

    /**
     * Internal Getter for TollsColcoCountryTypeId.
     * Colco country type id in e-TM system
     * @return Returns the Internal String
     */
    @JsonGetter("TollsColcoCountryTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTollsColcoCountryTypeId() {
        return this.tollsColcoCountryTypeId;
    }

    /**
     * Getter for TollsColcoCountryTypeId.
     * Colco country type id in e-TM system
     * @return Returns the String
     */
    public String getTollsColcoCountryTypeId() {
        return OptionalNullable.getFrom(tollsColcoCountryTypeId);
    }

    /**
     * Setter for TollsColcoCountryTypeId.
     * Colco country type id in e-TM system
     * @param tollsColcoCountryTypeId Value for String
     */
    @JsonSetter("TollsColcoCountryTypeId")
    public void setTollsColcoCountryTypeId(String tollsColcoCountryTypeId) {
        this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
    }

    /**
     * UnSetter for TollsColcoCountryTypeId.
     * Colco country type id in e-TM system
     */
    public void unsetTollsColcoCountryTypeId() {
        tollsColcoCountryTypeId = null;
    }

    /**
     * Getter for Contracts.
     * @return Returns the List of CustomerContract
     */
    @JsonGetter("Contracts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<CustomerContract> getContracts() {
        return contracts;
    }

    /**
     * Setter for Contracts.
     * @param contracts Value for List of CustomerContract
     */
    @JsonSetter("Contracts")
    public void setContracts(List<CustomerContract> contracts) {
        this.contracts = contracts;
    }

    /**
     * Internal Getter for IsConsortiumMember.
     * true
     * @return Returns the Internal String
     */
    @JsonGetter("IsConsortiumMember")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIsConsortiumMember() {
        return this.isConsortiumMember;
    }

    /**
     * Getter for IsConsortiumMember.
     * true
     * @return Returns the String
     */
    public String getIsConsortiumMember() {
        return OptionalNullable.getFrom(isConsortiumMember);
    }

    /**
     * Setter for IsConsortiumMember.
     * true
     * @param isConsortiumMember Value for String
     */
    @JsonSetter("IsConsortiumMember")
    public void setIsConsortiumMember(String isConsortiumMember) {
        this.isConsortiumMember = OptionalNullable.of(isConsortiumMember);
    }

    /**
     * UnSetter for IsConsortiumMember.
     * true
     */
    public void unsetIsConsortiumMember() {
        isConsortiumMember = null;
    }

    /**
     * Converts this AccountResponseAccountsItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AccountResponseAccountsItems [" + "accountFullName=" + accountFullName
                + ", accountId=" + accountId + ", accountNumber=" + accountNumber
                + ", accountShortName=" + accountShortName + ", bestOfIndicator=" + bestOfIndicator
                + ", billingFrequencyType=" + billingFrequencyType + ", billingFrequencyTypeId="
                + billingFrequencyTypeId + ", billingRunFrequency=" + billingRunFrequency
                + ", billingRunFrequencyTypeId=" + billingRunFrequencyTypeId + ", colCoCountryCode="
                + colCoCountryCode + ", currencyCode=" + currencyCode + ", currencySymbol="
                + currencySymbol + ", day1Run=" + day1Run + ", day2Run=" + day2Run + ", day3Run="
                + day3Run + ", day4Run=" + day4Run + ", frequencyType=" + frequencyType
                + ", grossAmount=" + grossAmount + ", internationalPOSLanguageCode="
                + internationalPOSLanguageCode + ", internationalPOSLanguageID="
                + internationalPOSLanguageID + ", invoiceAccountID=" + invoiceAccountID
                + ", invoiceAccountNumber=" + invoiceAccountNumber + ", invoiceAccountShortName="
                + invoiceAccountShortName + ", invoiceDistributionMethods="
                + invoiceDistributionMethods + ", isInternational=" + isInternational
                + ", isInvoicePoint=" + isInvoicePoint + ", lastModifiedDate=" + lastModifiedDate
                + ", localCurrencyCode=" + localCurrencyCode + ", localCurrencySymbol="
                + localCurrencySymbol + ", localPOSLanguageCode=" + localPOSLanguageCode
                + ", localPOSLanguageID=" + localPOSLanguageID + ", netAmount=" + netAmount
                + ", outstandingBalance=" + outstandingBalance + ", paidAmount=" + paidAmount
                + ", status=" + status + ", statusReason=" + statusReason
                + ", totalActiveCardGroups=" + totalActiveCardGroups + ", totalActiveCards="
                + totalActiveCards + ", totalBlockedCards=" + totalBlockedCards
                + ", totalCancelledCards=" + totalCancelledCards + ", totalCards=" + totalCards
                + ", totalExpiredCards=" + totalExpiredCards + ", totalFraudCards="
                + totalFraudCards + ", totalNewCards=" + totalNewCards
                + ", totalRenewalPendingCards=" + totalRenewalPendingCards + ", totalReplacedCards="
                + totalReplacedCards + ", totalTemporaryBlockCardsByCustomer="
                + totalTemporaryBlockCardsByCustomer + ", totalTemporaryBlockCardsByShell="
                + totalTemporaryBlockCardsByShell + ", vATAmount=" + vATAmount + ", isPartnerCard="
                + isPartnerCard + ", tollsCustomerId=" + tollsCustomerId
                + ", tollsColcoCountryTypeId=" + tollsColcoCountryTypeId + ", contracts="
                + contracts + ", isConsortiumMember=" + isConsortiumMember + "]";
    }

    /**
     * Builds a new {@link AccountResponseAccountsItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AccountResponseAccountsItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .bestOfIndicator(getBestOfIndicator())
                .invoiceDistributionMethods(getInvoiceDistributionMethods())
                .contracts(getContracts());
        builder.accountFullName = internalGetAccountFullName();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.billingFrequencyType = internalGetBillingFrequencyType();
        builder.billingFrequencyTypeId = internalGetBillingFrequencyTypeId();
        builder.billingRunFrequency = internalGetBillingRunFrequency();
        builder.billingRunFrequencyTypeId = internalGetBillingRunFrequencyTypeId();
        builder.colCoCountryCode = internalGetColCoCountryCode();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.day1Run = internalGetDay1Run();
        builder.day2Run = internalGetDay2Run();
        builder.day3Run = internalGetDay3Run();
        builder.day4Run = internalGetDay4Run();
        builder.frequencyType = internalGetFrequencyType();
        builder.grossAmount = internalGetGrossAmount();
        builder.internationalPOSLanguageCode = internalGetInternationalPOSLanguageCode();
        builder.internationalPOSLanguageID = internalGetInternationalPOSLanguageID();
        builder.invoiceAccountID = internalGetInvoiceAccountID();
        builder.invoiceAccountNumber = internalGetInvoiceAccountNumber();
        builder.invoiceAccountShortName = internalGetInvoiceAccountShortName();
        builder.isInternational = internalGetIsInternational();
        builder.isInvoicePoint = internalGetIsInvoicePoint();
        builder.lastModifiedDate = internalGetLastModifiedDate();
        builder.localCurrencyCode = internalGetLocalCurrencyCode();
        builder.localCurrencySymbol = internalGetLocalCurrencySymbol();
        builder.localPOSLanguageCode = internalGetLocalPOSLanguageCode();
        builder.localPOSLanguageID = internalGetLocalPOSLanguageID();
        builder.netAmount = internalGetNetAmount();
        builder.outstandingBalance = internalGetOutstandingBalance();
        builder.paidAmount = internalGetPaidAmount();
        builder.status = internalGetStatus();
        builder.statusReason = internalGetStatusReason();
        builder.totalActiveCardGroups = internalGetTotalActiveCardGroups();
        builder.totalActiveCards = internalGetTotalActiveCards();
        builder.totalBlockedCards = internalGetTotalBlockedCards();
        builder.totalCancelledCards = internalGetTotalCancelledCards();
        builder.totalCards = internalGetTotalCards();
        builder.totalExpiredCards = internalGetTotalExpiredCards();
        builder.totalFraudCards = internalGetTotalFraudCards();
        builder.totalNewCards = internalGetTotalNewCards();
        builder.totalRenewalPendingCards = internalGetTotalRenewalPendingCards();
        builder.totalReplacedCards = internalGetTotalReplacedCards();
        builder.totalTemporaryBlockCardsByCustomer =
                internalGetTotalTemporaryBlockCardsByCustomer();
        builder.totalTemporaryBlockCardsByShell = internalGetTotalTemporaryBlockCardsByShell();
        builder.vATAmount = internalGetVATAmount();
        builder.isPartnerCard = internalGetIsPartnerCard();
        builder.tollsCustomerId = internalGetTollsCustomerId();
        builder.tollsColcoCountryTypeId = internalGetTollsColcoCountryTypeId();
        builder.isConsortiumMember = internalGetIsConsortiumMember();
        return builder;
    }

    /**
     * Class to build instances of {@link AccountResponseAccountsItems}.
     */
    public static class Builder {
        private OptionalNullable<String> accountFullName;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private Boolean bestOfIndicator;
        private OptionalNullable<String> billingFrequencyType;
        private OptionalNullable<Integer> billingFrequencyTypeId;
        private OptionalNullable<String> billingRunFrequency;
        private OptionalNullable<Integer> billingRunFrequencyTypeId;
        private OptionalNullable<String> colCoCountryCode;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Integer> day1Run;
        private OptionalNullable<Integer> day2Run;
        private OptionalNullable<Integer> day3Run;
        private OptionalNullable<Integer> day4Run;
        private OptionalNullable<String> frequencyType;
        private OptionalNullable<Double> grossAmount;
        private OptionalNullable<String> internationalPOSLanguageCode;
        private OptionalNullable<Integer> internationalPOSLanguageID;
        private OptionalNullable<Integer> invoiceAccountID;
        private OptionalNullable<String> invoiceAccountNumber;
        private OptionalNullable<String> invoiceAccountShortName;
        private List<InvoiceDistributionMethod> invoiceDistributionMethods;
        private OptionalNullable<Boolean> isInternational;
        private OptionalNullable<Boolean> isInvoicePoint;
        private OptionalNullable<String> lastModifiedDate;
        private OptionalNullable<String> localCurrencyCode;
        private OptionalNullable<String> localCurrencySymbol;
        private OptionalNullable<String> localPOSLanguageCode;
        private OptionalNullable<Integer> localPOSLanguageID;
        private OptionalNullable<Double> netAmount;
        private OptionalNullable<Double> outstandingBalance;
        private OptionalNullable<Double> paidAmount;
        private OptionalNullable<String> status;
        private OptionalNullable<String> statusReason;
        private OptionalNullable<Integer> totalActiveCardGroups;
        private OptionalNullable<Integer> totalActiveCards;
        private OptionalNullable<Integer> totalBlockedCards;
        private OptionalNullable<Integer> totalCancelledCards;
        private OptionalNullable<Integer> totalCards;
        private OptionalNullable<Integer> totalExpiredCards;
        private OptionalNullable<Integer> totalFraudCards;
        private OptionalNullable<Integer> totalNewCards;
        private OptionalNullable<Integer> totalRenewalPendingCards;
        private OptionalNullable<Integer> totalReplacedCards;
        private OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer;
        private OptionalNullable<Integer> totalTemporaryBlockCardsByShell;
        private OptionalNullable<Double> vATAmount;
        private OptionalNullable<Integer> isPartnerCard;
        private OptionalNullable<String> tollsCustomerId;
        private OptionalNullable<String> tollsColcoCountryTypeId;
        private List<CustomerContract> contracts;
        private OptionalNullable<String> isConsortiumMember;



        /**
         * Setter for accountFullName.
         * @param  accountFullName  String value for accountFullName.
         * @return Builder
         */
        public Builder accountFullName(String accountFullName) {
            this.accountFullName = OptionalNullable.of(accountFullName);
            return this;
        }

        /**
         * UnSetter for accountFullName.
         * @return Builder
         */
        public Builder unsetAccountFullName() {
            accountFullName = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for bestOfIndicator.
         * @param  bestOfIndicator  Boolean value for bestOfIndicator.
         * @return Builder
         */
        public Builder bestOfIndicator(Boolean bestOfIndicator) {
            this.bestOfIndicator = bestOfIndicator;
            return this;
        }

        /**
         * Setter for billingFrequencyType.
         * @param  billingFrequencyType  String value for billingFrequencyType.
         * @return Builder
         */
        public Builder billingFrequencyType(String billingFrequencyType) {
            this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
            return this;
        }

        /**
         * UnSetter for billingFrequencyType.
         * @return Builder
         */
        public Builder unsetBillingFrequencyType() {
            billingFrequencyType = null;
            return this;
        }

        /**
         * Setter for billingFrequencyTypeId.
         * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
         * @return Builder
         */
        public Builder billingFrequencyTypeId(Integer billingFrequencyTypeId) {
            this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
            return this;
        }

        /**
         * UnSetter for billingFrequencyTypeId.
         * @return Builder
         */
        public Builder unsetBillingFrequencyTypeId() {
            billingFrequencyTypeId = null;
            return this;
        }

        /**
         * Setter for billingRunFrequency.
         * @param  billingRunFrequency  String value for billingRunFrequency.
         * @return Builder
         */
        public Builder billingRunFrequency(String billingRunFrequency) {
            this.billingRunFrequency = OptionalNullable.of(billingRunFrequency);
            return this;
        }

        /**
         * UnSetter for billingRunFrequency.
         * @return Builder
         */
        public Builder unsetBillingRunFrequency() {
            billingRunFrequency = null;
            return this;
        }

        /**
         * Setter for billingRunFrequencyTypeId.
         * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
         * @return Builder
         */
        public Builder billingRunFrequencyTypeId(Integer billingRunFrequencyTypeId) {
            this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
            return this;
        }

        /**
         * UnSetter for billingRunFrequencyTypeId.
         * @return Builder
         */
        public Builder unsetBillingRunFrequencyTypeId() {
            billingRunFrequencyTypeId = null;
            return this;
        }

        /**
         * Setter for colCoCountryCode.
         * @param  colCoCountryCode  String value for colCoCountryCode.
         * @return Builder
         */
        public Builder colCoCountryCode(String colCoCountryCode) {
            this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
            return this;
        }

        /**
         * UnSetter for colCoCountryCode.
         * @return Builder
         */
        public Builder unsetColCoCountryCode() {
            colCoCountryCode = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for day1Run.
         * @param  day1Run  Integer value for day1Run.
         * @return Builder
         */
        public Builder day1Run(Integer day1Run) {
            this.day1Run = OptionalNullable.of(day1Run);
            return this;
        }

        /**
         * UnSetter for day1Run.
         * @return Builder
         */
        public Builder unsetDay1Run() {
            day1Run = null;
            return this;
        }

        /**
         * Setter for day2Run.
         * @param  day2Run  Integer value for day2Run.
         * @return Builder
         */
        public Builder day2Run(Integer day2Run) {
            this.day2Run = OptionalNullable.of(day2Run);
            return this;
        }

        /**
         * UnSetter for day2Run.
         * @return Builder
         */
        public Builder unsetDay2Run() {
            day2Run = null;
            return this;
        }

        /**
         * Setter for day3Run.
         * @param  day3Run  Integer value for day3Run.
         * @return Builder
         */
        public Builder day3Run(Integer day3Run) {
            this.day3Run = OptionalNullable.of(day3Run);
            return this;
        }

        /**
         * UnSetter for day3Run.
         * @return Builder
         */
        public Builder unsetDay3Run() {
            day3Run = null;
            return this;
        }

        /**
         * Setter for day4Run.
         * @param  day4Run  Integer value for day4Run.
         * @return Builder
         */
        public Builder day4Run(Integer day4Run) {
            this.day4Run = OptionalNullable.of(day4Run);
            return this;
        }

        /**
         * UnSetter for day4Run.
         * @return Builder
         */
        public Builder unsetDay4Run() {
            day4Run = null;
            return this;
        }

        /**
         * Setter for frequencyType.
         * @param  frequencyType  String value for frequencyType.
         * @return Builder
         */
        public Builder frequencyType(String frequencyType) {
            this.frequencyType = OptionalNullable.of(frequencyType);
            return this;
        }

        /**
         * UnSetter for frequencyType.
         * @return Builder
         */
        public Builder unsetFrequencyType() {
            frequencyType = null;
            return this;
        }

        /**
         * Setter for grossAmount.
         * @param  grossAmount  Double value for grossAmount.
         * @return Builder
         */
        public Builder grossAmount(Double grossAmount) {
            this.grossAmount = OptionalNullable.of(grossAmount);
            return this;
        }

        /**
         * UnSetter for grossAmount.
         * @return Builder
         */
        public Builder unsetGrossAmount() {
            grossAmount = null;
            return this;
        }

        /**
         * Setter for internationalPOSLanguageCode.
         * @param  internationalPOSLanguageCode  String value for internationalPOSLanguageCode.
         * @return Builder
         */
        public Builder internationalPOSLanguageCode(String internationalPOSLanguageCode) {
            this.internationalPOSLanguageCode = OptionalNullable.of(internationalPOSLanguageCode);
            return this;
        }

        /**
         * UnSetter for internationalPOSLanguageCode.
         * @return Builder
         */
        public Builder unsetInternationalPOSLanguageCode() {
            internationalPOSLanguageCode = null;
            return this;
        }

        /**
         * Setter for internationalPOSLanguageID.
         * @param  internationalPOSLanguageID  Integer value for internationalPOSLanguageID.
         * @return Builder
         */
        public Builder internationalPOSLanguageID(Integer internationalPOSLanguageID) {
            this.internationalPOSLanguageID = OptionalNullable.of(internationalPOSLanguageID);
            return this;
        }

        /**
         * UnSetter for internationalPOSLanguageID.
         * @return Builder
         */
        public Builder unsetInternationalPOSLanguageID() {
            internationalPOSLanguageID = null;
            return this;
        }

        /**
         * Setter for invoiceAccountID.
         * @param  invoiceAccountID  Integer value for invoiceAccountID.
         * @return Builder
         */
        public Builder invoiceAccountID(Integer invoiceAccountID) {
            this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
            return this;
        }

        /**
         * UnSetter for invoiceAccountID.
         * @return Builder
         */
        public Builder unsetInvoiceAccountID() {
            invoiceAccountID = null;
            return this;
        }

        /**
         * Setter for invoiceAccountNumber.
         * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
         * @return Builder
         */
        public Builder invoiceAccountNumber(String invoiceAccountNumber) {
            this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
            return this;
        }

        /**
         * UnSetter for invoiceAccountNumber.
         * @return Builder
         */
        public Builder unsetInvoiceAccountNumber() {
            invoiceAccountNumber = null;
            return this;
        }

        /**
         * Setter for invoiceAccountShortName.
         * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
         * @return Builder
         */
        public Builder invoiceAccountShortName(String invoiceAccountShortName) {
            this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
            return this;
        }

        /**
         * UnSetter for invoiceAccountShortName.
         * @return Builder
         */
        public Builder unsetInvoiceAccountShortName() {
            invoiceAccountShortName = null;
            return this;
        }

        /**
         * Setter for invoiceDistributionMethods.
         * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
         *         invoiceDistributionMethods.
         * @return Builder
         */
        public Builder invoiceDistributionMethods(
                List<InvoiceDistributionMethod> invoiceDistributionMethods) {
            this.invoiceDistributionMethods = invoiceDistributionMethods;
            return this;
        }

        /**
         * Setter for isInternational.
         * @param  isInternational  Boolean value for isInternational.
         * @return Builder
         */
        public Builder isInternational(Boolean isInternational) {
            this.isInternational = OptionalNullable.of(isInternational);
            return this;
        }

        /**
         * UnSetter for isInternational.
         * @return Builder
         */
        public Builder unsetIsInternational() {
            isInternational = null;
            return this;
        }

        /**
         * Setter for isInvoicePoint.
         * @param  isInvoicePoint  Boolean value for isInvoicePoint.
         * @return Builder
         */
        public Builder isInvoicePoint(Boolean isInvoicePoint) {
            this.isInvoicePoint = OptionalNullable.of(isInvoicePoint);
            return this;
        }

        /**
         * UnSetter for isInvoicePoint.
         * @return Builder
         */
        public Builder unsetIsInvoicePoint() {
            isInvoicePoint = null;
            return this;
        }

        /**
         * Setter for lastModifiedDate.
         * @param  lastModifiedDate  String value for lastModifiedDate.
         * @return Builder
         */
        public Builder lastModifiedDate(String lastModifiedDate) {
            this.lastModifiedDate = OptionalNullable.of(lastModifiedDate);
            return this;
        }

        /**
         * UnSetter for lastModifiedDate.
         * @return Builder
         */
        public Builder unsetLastModifiedDate() {
            lastModifiedDate = null;
            return this;
        }

        /**
         * Setter for localCurrencyCode.
         * @param  localCurrencyCode  String value for localCurrencyCode.
         * @return Builder
         */
        public Builder localCurrencyCode(String localCurrencyCode) {
            this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
            return this;
        }

        /**
         * UnSetter for localCurrencyCode.
         * @return Builder
         */
        public Builder unsetLocalCurrencyCode() {
            localCurrencyCode = null;
            return this;
        }

        /**
         * Setter for localCurrencySymbol.
         * @param  localCurrencySymbol  String value for localCurrencySymbol.
         * @return Builder
         */
        public Builder localCurrencySymbol(String localCurrencySymbol) {
            this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for localCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLocalCurrencySymbol() {
            localCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for localPOSLanguageCode.
         * @param  localPOSLanguageCode  String value for localPOSLanguageCode.
         * @return Builder
         */
        public Builder localPOSLanguageCode(String localPOSLanguageCode) {
            this.localPOSLanguageCode = OptionalNullable.of(localPOSLanguageCode);
            return this;
        }

        /**
         * UnSetter for localPOSLanguageCode.
         * @return Builder
         */
        public Builder unsetLocalPOSLanguageCode() {
            localPOSLanguageCode = null;
            return this;
        }

        /**
         * Setter for localPOSLanguageID.
         * @param  localPOSLanguageID  Integer value for localPOSLanguageID.
         * @return Builder
         */
        public Builder localPOSLanguageID(Integer localPOSLanguageID) {
            this.localPOSLanguageID = OptionalNullable.of(localPOSLanguageID);
            return this;
        }

        /**
         * UnSetter for localPOSLanguageID.
         * @return Builder
         */
        public Builder unsetLocalPOSLanguageID() {
            localPOSLanguageID = null;
            return this;
        }

        /**
         * Setter for netAmount.
         * @param  netAmount  Double value for netAmount.
         * @return Builder
         */
        public Builder netAmount(Double netAmount) {
            this.netAmount = OptionalNullable.of(netAmount);
            return this;
        }

        /**
         * UnSetter for netAmount.
         * @return Builder
         */
        public Builder unsetNetAmount() {
            netAmount = null;
            return this;
        }

        /**
         * Setter for outstandingBalance.
         * @param  outstandingBalance  Double value for outstandingBalance.
         * @return Builder
         */
        public Builder outstandingBalance(Double outstandingBalance) {
            this.outstandingBalance = OptionalNullable.of(outstandingBalance);
            return this;
        }

        /**
         * UnSetter for outstandingBalance.
         * @return Builder
         */
        public Builder unsetOutstandingBalance() {
            outstandingBalance = null;
            return this;
        }

        /**
         * Setter for paidAmount.
         * @param  paidAmount  Double value for paidAmount.
         * @return Builder
         */
        public Builder paidAmount(Double paidAmount) {
            this.paidAmount = OptionalNullable.of(paidAmount);
            return this;
        }

        /**
         * UnSetter for paidAmount.
         * @return Builder
         */
        public Builder unsetPaidAmount() {
            paidAmount = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for statusReason.
         * @param  statusReason  String value for statusReason.
         * @return Builder
         */
        public Builder statusReason(String statusReason) {
            this.statusReason = OptionalNullable.of(statusReason);
            return this;
        }

        /**
         * UnSetter for statusReason.
         * @return Builder
         */
        public Builder unsetStatusReason() {
            statusReason = null;
            return this;
        }

        /**
         * Setter for totalActiveCardGroups.
         * @param  totalActiveCardGroups  Integer value for totalActiveCardGroups.
         * @return Builder
         */
        public Builder totalActiveCardGroups(Integer totalActiveCardGroups) {
            this.totalActiveCardGroups = OptionalNullable.of(totalActiveCardGroups);
            return this;
        }

        /**
         * UnSetter for totalActiveCardGroups.
         * @return Builder
         */
        public Builder unsetTotalActiveCardGroups() {
            totalActiveCardGroups = null;
            return this;
        }

        /**
         * Setter for totalActiveCards.
         * @param  totalActiveCards  Integer value for totalActiveCards.
         * @return Builder
         */
        public Builder totalActiveCards(Integer totalActiveCards) {
            this.totalActiveCards = OptionalNullable.of(totalActiveCards);
            return this;
        }

        /**
         * UnSetter for totalActiveCards.
         * @return Builder
         */
        public Builder unsetTotalActiveCards() {
            totalActiveCards = null;
            return this;
        }

        /**
         * Setter for totalBlockedCards.
         * @param  totalBlockedCards  Integer value for totalBlockedCards.
         * @return Builder
         */
        public Builder totalBlockedCards(Integer totalBlockedCards) {
            this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
            return this;
        }

        /**
         * UnSetter for totalBlockedCards.
         * @return Builder
         */
        public Builder unsetTotalBlockedCards() {
            totalBlockedCards = null;
            return this;
        }

        /**
         * Setter for totalCancelledCards.
         * @param  totalCancelledCards  Integer value for totalCancelledCards.
         * @return Builder
         */
        public Builder totalCancelledCards(Integer totalCancelledCards) {
            this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
            return this;
        }

        /**
         * UnSetter for totalCancelledCards.
         * @return Builder
         */
        public Builder unsetTotalCancelledCards() {
            totalCancelledCards = null;
            return this;
        }

        /**
         * Setter for totalCards.
         * @param  totalCards  Integer value for totalCards.
         * @return Builder
         */
        public Builder totalCards(Integer totalCards) {
            this.totalCards = OptionalNullable.of(totalCards);
            return this;
        }

        /**
         * UnSetter for totalCards.
         * @return Builder
         */
        public Builder unsetTotalCards() {
            totalCards = null;
            return this;
        }

        /**
         * Setter for totalExpiredCards.
         * @param  totalExpiredCards  Integer value for totalExpiredCards.
         * @return Builder
         */
        public Builder totalExpiredCards(Integer totalExpiredCards) {
            this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
            return this;
        }

        /**
         * UnSetter for totalExpiredCards.
         * @return Builder
         */
        public Builder unsetTotalExpiredCards() {
            totalExpiredCards = null;
            return this;
        }

        /**
         * Setter for totalFraudCards.
         * @param  totalFraudCards  Integer value for totalFraudCards.
         * @return Builder
         */
        public Builder totalFraudCards(Integer totalFraudCards) {
            this.totalFraudCards = OptionalNullable.of(totalFraudCards);
            return this;
        }

        /**
         * UnSetter for totalFraudCards.
         * @return Builder
         */
        public Builder unsetTotalFraudCards() {
            totalFraudCards = null;
            return this;
        }

        /**
         * Setter for totalNewCards.
         * @param  totalNewCards  Integer value for totalNewCards.
         * @return Builder
         */
        public Builder totalNewCards(Integer totalNewCards) {
            this.totalNewCards = OptionalNullable.of(totalNewCards);
            return this;
        }

        /**
         * UnSetter for totalNewCards.
         * @return Builder
         */
        public Builder unsetTotalNewCards() {
            totalNewCards = null;
            return this;
        }

        /**
         * Setter for totalRenewalPendingCards.
         * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
         * @return Builder
         */
        public Builder totalRenewalPendingCards(Integer totalRenewalPendingCards) {
            this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
            return this;
        }

        /**
         * UnSetter for totalRenewalPendingCards.
         * @return Builder
         */
        public Builder unsetTotalRenewalPendingCards() {
            totalRenewalPendingCards = null;
            return this;
        }

        /**
         * Setter for totalReplacedCards.
         * @param  totalReplacedCards  Integer value for totalReplacedCards.
         * @return Builder
         */
        public Builder totalReplacedCards(Integer totalReplacedCards) {
            this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
            return this;
        }

        /**
         * UnSetter for totalReplacedCards.
         * @return Builder
         */
        public Builder unsetTotalReplacedCards() {
            totalReplacedCards = null;
            return this;
        }

        /**
         * Setter for totalTemporaryBlockCardsByCustomer.
         * @param  totalTemporaryBlockCardsByCustomer  Integer value for
         *         totalTemporaryBlockCardsByCustomer.
         * @return Builder
         */
        public Builder totalTemporaryBlockCardsByCustomer(
                Integer totalTemporaryBlockCardsByCustomer) {
            this.totalTemporaryBlockCardsByCustomer =
                    OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
            return this;
        }

        /**
         * UnSetter for totalTemporaryBlockCardsByCustomer.
         * @return Builder
         */
        public Builder unsetTotalTemporaryBlockCardsByCustomer() {
            totalTemporaryBlockCardsByCustomer = null;
            return this;
        }

        /**
         * Setter for totalTemporaryBlockCardsByShell.
         * @param  totalTemporaryBlockCardsByShell  Integer value for
         *         totalTemporaryBlockCardsByShell.
         * @return Builder
         */
        public Builder totalTemporaryBlockCardsByShell(Integer totalTemporaryBlockCardsByShell) {
            this.totalTemporaryBlockCardsByShell =
                    OptionalNullable.of(totalTemporaryBlockCardsByShell);
            return this;
        }

        /**
         * UnSetter for totalTemporaryBlockCardsByShell.
         * @return Builder
         */
        public Builder unsetTotalTemporaryBlockCardsByShell() {
            totalTemporaryBlockCardsByShell = null;
            return this;
        }

        /**
         * Setter for vATAmount.
         * @param  vATAmount  Double value for vATAmount.
         * @return Builder
         */
        public Builder vATAmount(Double vATAmount) {
            this.vATAmount = OptionalNullable.of(vATAmount);
            return this;
        }

        /**
         * UnSetter for vATAmount.
         * @return Builder
         */
        public Builder unsetVATAmount() {
            vATAmount = null;
            return this;
        }

        /**
         * Setter for isPartnerCard.
         * @param  isPartnerCard  Integer value for isPartnerCard.
         * @return Builder
         */
        public Builder isPartnerCard(Integer isPartnerCard) {
            this.isPartnerCard = OptionalNullable.of(isPartnerCard);
            return this;
        }

        /**
         * UnSetter for isPartnerCard.
         * @return Builder
         */
        public Builder unsetIsPartnerCard() {
            isPartnerCard = null;
            return this;
        }

        /**
         * Setter for tollsCustomerId.
         * @param  tollsCustomerId  String value for tollsCustomerId.
         * @return Builder
         */
        public Builder tollsCustomerId(String tollsCustomerId) {
            this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
            return this;
        }

        /**
         * UnSetter for tollsCustomerId.
         * @return Builder
         */
        public Builder unsetTollsCustomerId() {
            tollsCustomerId = null;
            return this;
        }

        /**
         * Setter for tollsColcoCountryTypeId.
         * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
         * @return Builder
         */
        public Builder tollsColcoCountryTypeId(String tollsColcoCountryTypeId) {
            this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
            return this;
        }

        /**
         * UnSetter for tollsColcoCountryTypeId.
         * @return Builder
         */
        public Builder unsetTollsColcoCountryTypeId() {
            tollsColcoCountryTypeId = null;
            return this;
        }

        /**
         * Setter for contracts.
         * @param  contracts  List of CustomerContract value for contracts.
         * @return Builder
         */
        public Builder contracts(List<CustomerContract> contracts) {
            this.contracts = contracts;
            return this;
        }

        /**
         * Setter for isConsortiumMember.
         * @param  isConsortiumMember  String value for isConsortiumMember.
         * @return Builder
         */
        public Builder isConsortiumMember(String isConsortiumMember) {
            this.isConsortiumMember = OptionalNullable.of(isConsortiumMember);
            return this;
        }

        /**
         * UnSetter for isConsortiumMember.
         * @return Builder
         */
        public Builder unsetIsConsortiumMember() {
            isConsortiumMember = null;
            return this;
        }

        /**
         * Builds a new {@link AccountResponseAccountsItems} object using the set fields.
         * @return {@link AccountResponseAccountsItems}
         */
        public AccountResponseAccountsItems build() {
            return new AccountResponseAccountsItems(accountFullName, accountId, accountNumber,
                    accountShortName, bestOfIndicator, billingFrequencyType, billingFrequencyTypeId,
                    billingRunFrequency, billingRunFrequencyTypeId, colCoCountryCode, currencyCode,
                    currencySymbol, day1Run, day2Run, day3Run, day4Run, frequencyType, grossAmount,
                    internationalPOSLanguageCode, internationalPOSLanguageID, invoiceAccountID,
                    invoiceAccountNumber, invoiceAccountShortName, invoiceDistributionMethods,
                    isInternational, isInvoicePoint, lastModifiedDate, localCurrencyCode,
                    localCurrencySymbol, localPOSLanguageCode, localPOSLanguageID, netAmount,
                    outstandingBalance, paidAmount, status, statusReason, totalActiveCardGroups,
                    totalActiveCards, totalBlockedCards, totalCancelledCards, totalCards,
                    totalExpiredCards, totalFraudCards, totalNewCards, totalRenewalPendingCards,
                    totalReplacedCards, totalTemporaryBlockCardsByCustomer,
                    totalTemporaryBlockCardsByShell, vATAmount, isPartnerCard, tollsCustomerId,
                    tollsColcoCountryTypeId, contracts, isConsortiumMember);
        }
    }
}
