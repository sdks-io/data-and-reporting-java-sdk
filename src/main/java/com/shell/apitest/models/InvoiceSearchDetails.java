/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for InvoiceSearchDetails type.
 */
public class InvoiceSearchDetails {
    private OptionalNullable<String> accountFullName;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<String> colCoOpCoId;
    private OptionalNullable<String> currentBillingFrequency;
    private OptionalNullable<Integer> currentBillingFrequencyId;
    private OptionalNullable<String> currentDistributionMethod;
    private OptionalNullable<Integer> currentDistributionMethodId;
    private OptionalNullable<String> customerCurrencyCode;
    private OptionalNullable<String> customerCurrencySymbol;
    private OptionalNullable<String> delCoClientNumber;
    private OptionalNullable<Integer> delCoId;
    private OptionalNullable<String> delCoOpCoId;
    private OptionalNullable<String> documentType;
    private OptionalNullable<Integer> documentTypeId;
    private OptionalNullable<String> dueDate;
    private OptionalNullable<Double> grossAmountCustomerCurrency;
    private OptionalNullable<Double> grossAmountTransactionCurrency;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> invoicedBy;
    private OptionalNullable<String> invoicedOnBehalfOf;
    private OptionalNullable<Integer> invoiceId;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<Boolean> isInternational;
    private OptionalNullable<Boolean> isNational;
    private OptionalNullable<Double> netAmountCustomerCurrency;
    private OptionalNullable<Double> netAmountTransactionCurrency;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> paymentTerms;
    private OptionalNullable<Integer> paymentTermsId;
    private OptionalNullable<Integer> replacementInvoiceId;
    private OptionalNullable<Integer> reversalInvoiceId;
    private OptionalNullable<String> status;
    private OptionalNullable<String> summaryDocumentBillingType;
    private OptionalNullable<Integer> summaryDocumentBillingTypeId;
    private OptionalNullable<String> summaryDocumentDate;
    private OptionalNullable<Double> summaryDocumentDDAmount;
    private OptionalNullable<String> summaryDocumentDueDate;
    private OptionalNullable<Integer> summaryDocumentId;
    private OptionalNullable<Boolean> summaryDocumentIsFullyPaid;
    private OptionalNullable<String> summaryDocumentNumber;
    private OptionalNullable<Double> summaryDocumentPaidAmount;
    private OptionalNullable<String> summaryDocumentSoAReferenceNumber;
    private OptionalNullable<Integer> summaryDocumentStatementOfAccountId;
    private OptionalNullable<String> transactionCurrencyCode;
    private OptionalNullable<String> transactionCurrencySymbol;
    private OptionalNullable<String> type;
    private OptionalNullable<Integer> typeId;
    private OptionalNullable<Double> vATAmountCustomerCurrency;
    private OptionalNullable<Double> vATAmountTransactionCurrency;
    private OptionalNullable<String> vATCountry;
    private OptionalNullable<Integer> vATCountryId;
    private OptionalNullable<String> vATCountryISOCode;
    private OptionalNullable<String> vATCountryOpCoId;
    private OptionalNullable<String> documentReference;
    private List<InvoiceSearchAdditionalDocument> additionalDocuments;

    /**
     * Default constructor.
     */
    public InvoiceSearchDetails() {
    }

    /**
     * Initialization constructor.
     * @param  accountFullName  String value for accountFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoOpCoId  String value for colCoOpCoId.
     * @param  currentBillingFrequency  String value for currentBillingFrequency.
     * @param  currentBillingFrequencyId  Integer value for currentBillingFrequencyId.
     * @param  currentDistributionMethod  String value for currentDistributionMethod.
     * @param  currentDistributionMethodId  Integer value for currentDistributionMethodId.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  delCoClientNumber  String value for delCoClientNumber.
     * @param  delCoId  Integer value for delCoId.
     * @param  delCoOpCoId  String value for delCoOpCoId.
     * @param  documentType  String value for documentType.
     * @param  documentTypeId  Integer value for documentTypeId.
     * @param  dueDate  String value for dueDate.
     * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
     * @param  grossAmountTransactionCurrency  Double value for grossAmountTransactionCurrency.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoicedBy  String value for invoicedBy.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  invoiceId  Integer value for invoiceId.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  netAmountCustomerCurrency  Double value for netAmountCustomerCurrency.
     * @param  netAmountTransactionCurrency  Double value for netAmountTransactionCurrency.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  paymentTermsId  Integer value for paymentTermsId.
     * @param  replacementInvoiceId  Integer value for replacementInvoiceId.
     * @param  reversalInvoiceId  Integer value for reversalInvoiceId.
     * @param  status  String value for status.
     * @param  summaryDocumentBillingType  String value for summaryDocumentBillingType.
     * @param  summaryDocumentBillingTypeId  Integer value for summaryDocumentBillingTypeId.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
     * @param  summaryDocumentDueDate  String value for summaryDocumentDueDate.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentIsFullyPaid  Boolean value for summaryDocumentIsFullyPaid.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  summaryDocumentPaidAmount  Double value for summaryDocumentPaidAmount.
     * @param  summaryDocumentSoAReferenceNumber  String value for
     *         summaryDocumentSoAReferenceNumber.
     * @param  summaryDocumentStatementOfAccountId  Integer value for
     *         summaryDocumentStatementOfAccountId.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  type  String value for type.
     * @param  typeId  Integer value for typeId.
     * @param  vATAmountCustomerCurrency  Double value for vATAmountCustomerCurrency.
     * @param  vATAmountTransactionCurrency  Double value for vATAmountTransactionCurrency.
     * @param  vATCountry  String value for vATCountry.
     * @param  vATCountryId  Integer value for vATCountryId.
     * @param  vATCountryISOCode  String value for vATCountryISOCode.
     * @param  vATCountryOpCoId  String value for vATCountryOpCoId.
     * @param  documentReference  String value for documentReference.
     * @param  additionalDocuments  List of InvoiceSearchAdditionalDocument value for
     *         additionalDocuments.
     */
    public InvoiceSearchDetails(
            String accountFullName,
            Integer accountId,
            String accountNumber,
            String accountShortName,
            Integer colCoId,
            String colCoOpCoId,
            String currentBillingFrequency,
            Integer currentBillingFrequencyId,
            String currentDistributionMethod,
            Integer currentDistributionMethodId,
            String customerCurrencyCode,
            String customerCurrencySymbol,
            String delCoClientNumber,
            Integer delCoId,
            String delCoOpCoId,
            String documentType,
            Integer documentTypeId,
            String dueDate,
            Double grossAmountCustomerCurrency,
            Double grossAmountTransactionCurrency,
            String invoiceDate,
            String invoicedBy,
            String invoicedOnBehalfOf,
            Integer invoiceId,
            String invoiceNumber,
            Boolean isInternational,
            Boolean isNational,
            Double netAmountCustomerCurrency,
            Double netAmountTransactionCurrency,
            Integer payerId,
            String payerNumber,
            String paymentTerms,
            Integer paymentTermsId,
            Integer replacementInvoiceId,
            Integer reversalInvoiceId,
            String status,
            String summaryDocumentBillingType,
            Integer summaryDocumentBillingTypeId,
            String summaryDocumentDate,
            Double summaryDocumentDDAmount,
            String summaryDocumentDueDate,
            Integer summaryDocumentId,
            Boolean summaryDocumentIsFullyPaid,
            String summaryDocumentNumber,
            Double summaryDocumentPaidAmount,
            String summaryDocumentSoAReferenceNumber,
            Integer summaryDocumentStatementOfAccountId,
            String transactionCurrencyCode,
            String transactionCurrencySymbol,
            String type,
            Integer typeId,
            Double vATAmountCustomerCurrency,
            Double vATAmountTransactionCurrency,
            String vATCountry,
            Integer vATCountryId,
            String vATCountryISOCode,
            String vATCountryOpCoId,
            String documentReference,
            List<InvoiceSearchAdditionalDocument> additionalDocuments) {
        this.accountFullName = OptionalNullable.of(accountFullName);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.colCoId = OptionalNullable.of(colCoId);
        this.colCoOpCoId = OptionalNullable.of(colCoOpCoId);
        this.currentBillingFrequency = OptionalNullable.of(currentBillingFrequency);
        this.currentBillingFrequencyId = OptionalNullable.of(currentBillingFrequencyId);
        this.currentDistributionMethod = OptionalNullable.of(currentDistributionMethod);
        this.currentDistributionMethodId = OptionalNullable.of(currentDistributionMethodId);
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
        this.delCoClientNumber = OptionalNullable.of(delCoClientNumber);
        this.delCoId = OptionalNullable.of(delCoId);
        this.delCoOpCoId = OptionalNullable.of(delCoOpCoId);
        this.documentType = OptionalNullable.of(documentType);
        this.documentTypeId = OptionalNullable.of(documentTypeId);
        this.dueDate = OptionalNullable.of(dueDate);
        this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
        this.grossAmountTransactionCurrency = OptionalNullable.of(grossAmountTransactionCurrency);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.invoicedBy = OptionalNullable.of(invoicedBy);
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
        this.invoiceId = OptionalNullable.of(invoiceId);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.isInternational = OptionalNullable.of(isInternational);
        this.isNational = OptionalNullable.of(isNational);
        this.netAmountCustomerCurrency = OptionalNullable.of(netAmountCustomerCurrency);
        this.netAmountTransactionCurrency = OptionalNullable.of(netAmountTransactionCurrency);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.paymentTerms = OptionalNullable.of(paymentTerms);
        this.paymentTermsId = OptionalNullable.of(paymentTermsId);
        this.replacementInvoiceId = OptionalNullable.of(replacementInvoiceId);
        this.reversalInvoiceId = OptionalNullable.of(reversalInvoiceId);
        this.status = OptionalNullable.of(status);
        this.summaryDocumentBillingType = OptionalNullable.of(summaryDocumentBillingType);
        this.summaryDocumentBillingTypeId = OptionalNullable.of(summaryDocumentBillingTypeId);
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
        this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
        this.summaryDocumentDueDate = OptionalNullable.of(summaryDocumentDueDate);
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
        this.summaryDocumentIsFullyPaid = OptionalNullable.of(summaryDocumentIsFullyPaid);
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
        this.summaryDocumentPaidAmount = OptionalNullable.of(summaryDocumentPaidAmount);
        this.summaryDocumentSoAReferenceNumber =
                OptionalNullable.of(summaryDocumentSoAReferenceNumber);
        this.summaryDocumentStatementOfAccountId =
                OptionalNullable.of(summaryDocumentStatementOfAccountId);
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
        this.type = OptionalNullable.of(type);
        this.typeId = OptionalNullable.of(typeId);
        this.vATAmountCustomerCurrency = OptionalNullable.of(vATAmountCustomerCurrency);
        this.vATAmountTransactionCurrency = OptionalNullable.of(vATAmountTransactionCurrency);
        this.vATCountry = OptionalNullable.of(vATCountry);
        this.vATCountryId = OptionalNullable.of(vATCountryId);
        this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
        this.vATCountryOpCoId = OptionalNullable.of(vATCountryOpCoId);
        this.documentReference = OptionalNullable.of(documentReference);
        this.additionalDocuments = additionalDocuments;
    }

    /**
     * Initialization constructor.
     * @param  accountFullName  String value for accountFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoOpCoId  String value for colCoOpCoId.
     * @param  currentBillingFrequency  String value for currentBillingFrequency.
     * @param  currentBillingFrequencyId  Integer value for currentBillingFrequencyId.
     * @param  currentDistributionMethod  String value for currentDistributionMethod.
     * @param  currentDistributionMethodId  Integer value for currentDistributionMethodId.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  delCoClientNumber  String value for delCoClientNumber.
     * @param  delCoId  Integer value for delCoId.
     * @param  delCoOpCoId  String value for delCoOpCoId.
     * @param  documentType  String value for documentType.
     * @param  documentTypeId  Integer value for documentTypeId.
     * @param  dueDate  String value for dueDate.
     * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
     * @param  grossAmountTransactionCurrency  Double value for grossAmountTransactionCurrency.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoicedBy  String value for invoicedBy.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  invoiceId  Integer value for invoiceId.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  isInternational  Boolean value for isInternational.
     * @param  isNational  Boolean value for isNational.
     * @param  netAmountCustomerCurrency  Double value for netAmountCustomerCurrency.
     * @param  netAmountTransactionCurrency  Double value for netAmountTransactionCurrency.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  paymentTermsId  Integer value for paymentTermsId.
     * @param  replacementInvoiceId  Integer value for replacementInvoiceId.
     * @param  reversalInvoiceId  Integer value for reversalInvoiceId.
     * @param  status  String value for status.
     * @param  summaryDocumentBillingType  String value for summaryDocumentBillingType.
     * @param  summaryDocumentBillingTypeId  Integer value for summaryDocumentBillingTypeId.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
     * @param  summaryDocumentDueDate  String value for summaryDocumentDueDate.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentIsFullyPaid  Boolean value for summaryDocumentIsFullyPaid.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  summaryDocumentPaidAmount  Double value for summaryDocumentPaidAmount.
     * @param  summaryDocumentSoAReferenceNumber  String value for
     *         summaryDocumentSoAReferenceNumber.
     * @param  summaryDocumentStatementOfAccountId  Integer value for
     *         summaryDocumentStatementOfAccountId.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  type  String value for type.
     * @param  typeId  Integer value for typeId.
     * @param  vATAmountCustomerCurrency  Double value for vATAmountCustomerCurrency.
     * @param  vATAmountTransactionCurrency  Double value for vATAmountTransactionCurrency.
     * @param  vATCountry  String value for vATCountry.
     * @param  vATCountryId  Integer value for vATCountryId.
     * @param  vATCountryISOCode  String value for vATCountryISOCode.
     * @param  vATCountryOpCoId  String value for vATCountryOpCoId.
     * @param  documentReference  String value for documentReference.
     * @param  additionalDocuments  List of InvoiceSearchAdditionalDocument value for
     *         additionalDocuments.
     */

    protected InvoiceSearchDetails(OptionalNullable<String> accountFullName,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<String> accountShortName, OptionalNullable<Integer> colCoId,
            OptionalNullable<String> colCoOpCoId, OptionalNullable<String> currentBillingFrequency,
            OptionalNullable<Integer> currentBillingFrequencyId,
            OptionalNullable<String> currentDistributionMethod,
            OptionalNullable<Integer> currentDistributionMethodId,
            OptionalNullable<String> customerCurrencyCode,
            OptionalNullable<String> customerCurrencySymbol,
            OptionalNullable<String> delCoClientNumber, OptionalNullable<Integer> delCoId,
            OptionalNullable<String> delCoOpCoId, OptionalNullable<String> documentType,
            OptionalNullable<Integer> documentTypeId, OptionalNullable<String> dueDate,
            OptionalNullable<Double> grossAmountCustomerCurrency,
            OptionalNullable<Double> grossAmountTransactionCurrency,
            OptionalNullable<String> invoiceDate, OptionalNullable<String> invoicedBy,
            OptionalNullable<String> invoicedOnBehalfOf, OptionalNullable<Integer> invoiceId,
            OptionalNullable<String> invoiceNumber, OptionalNullable<Boolean> isInternational,
            OptionalNullable<Boolean> isNational,
            OptionalNullable<Double> netAmountCustomerCurrency,
            OptionalNullable<Double> netAmountTransactionCurrency,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<String> paymentTerms, OptionalNullable<Integer> paymentTermsId,
            OptionalNullable<Integer> replacementInvoiceId,
            OptionalNullable<Integer> reversalInvoiceId, OptionalNullable<String> status,
            OptionalNullable<String> summaryDocumentBillingType,
            OptionalNullable<Integer> summaryDocumentBillingTypeId,
            OptionalNullable<String> summaryDocumentDate,
            OptionalNullable<Double> summaryDocumentDDAmount,
            OptionalNullable<String> summaryDocumentDueDate,
            OptionalNullable<Integer> summaryDocumentId,
            OptionalNullable<Boolean> summaryDocumentIsFullyPaid,
            OptionalNullable<String> summaryDocumentNumber,
            OptionalNullable<Double> summaryDocumentPaidAmount,
            OptionalNullable<String> summaryDocumentSoAReferenceNumber,
            OptionalNullable<Integer> summaryDocumentStatementOfAccountId,
            OptionalNullable<String> transactionCurrencyCode,
            OptionalNullable<String> transactionCurrencySymbol, OptionalNullable<String> type,
            OptionalNullable<Integer> typeId, OptionalNullable<Double> vATAmountCustomerCurrency,
            OptionalNullable<Double> vATAmountTransactionCurrency,
            OptionalNullable<String> vATCountry, OptionalNullable<Integer> vATCountryId,
            OptionalNullable<String> vATCountryISOCode, OptionalNullable<String> vATCountryOpCoId,
            OptionalNullable<String> documentReference,
            List<InvoiceSearchAdditionalDocument> additionalDocuments) {
        this.accountFullName = accountFullName;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.colCoId = colCoId;
        this.colCoOpCoId = colCoOpCoId;
        this.currentBillingFrequency = currentBillingFrequency;
        this.currentBillingFrequencyId = currentBillingFrequencyId;
        this.currentDistributionMethod = currentDistributionMethod;
        this.currentDistributionMethodId = currentDistributionMethodId;
        this.customerCurrencyCode = customerCurrencyCode;
        this.customerCurrencySymbol = customerCurrencySymbol;
        this.delCoClientNumber = delCoClientNumber;
        this.delCoId = delCoId;
        this.delCoOpCoId = delCoOpCoId;
        this.documentType = documentType;
        this.documentTypeId = documentTypeId;
        this.dueDate = dueDate;
        this.grossAmountCustomerCurrency = grossAmountCustomerCurrency;
        this.grossAmountTransactionCurrency = grossAmountTransactionCurrency;
        this.invoiceDate = invoiceDate;
        this.invoicedBy = invoicedBy;
        this.invoicedOnBehalfOf = invoicedOnBehalfOf;
        this.invoiceId = invoiceId;
        this.invoiceNumber = invoiceNumber;
        this.isInternational = isInternational;
        this.isNational = isNational;
        this.netAmountCustomerCurrency = netAmountCustomerCurrency;
        this.netAmountTransactionCurrency = netAmountTransactionCurrency;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.paymentTerms = paymentTerms;
        this.paymentTermsId = paymentTermsId;
        this.replacementInvoiceId = replacementInvoiceId;
        this.reversalInvoiceId = reversalInvoiceId;
        this.status = status;
        this.summaryDocumentBillingType = summaryDocumentBillingType;
        this.summaryDocumentBillingTypeId = summaryDocumentBillingTypeId;
        this.summaryDocumentDate = summaryDocumentDate;
        this.summaryDocumentDDAmount = summaryDocumentDDAmount;
        this.summaryDocumentDueDate = summaryDocumentDueDate;
        this.summaryDocumentId = summaryDocumentId;
        this.summaryDocumentIsFullyPaid = summaryDocumentIsFullyPaid;
        this.summaryDocumentNumber = summaryDocumentNumber;
        this.summaryDocumentPaidAmount = summaryDocumentPaidAmount;
        this.summaryDocumentSoAReferenceNumber = summaryDocumentSoAReferenceNumber;
        this.summaryDocumentStatementOfAccountId = summaryDocumentStatementOfAccountId;
        this.transactionCurrencyCode = transactionCurrencyCode;
        this.transactionCurrencySymbol = transactionCurrencySymbol;
        this.type = type;
        this.typeId = typeId;
        this.vATAmountCustomerCurrency = vATAmountCustomerCurrency;
        this.vATAmountTransactionCurrency = vATAmountTransactionCurrency;
        this.vATCountry = vATCountry;
        this.vATCountryId = vATCountryId;
        this.vATCountryISOCode = vATCountryISOCode;
        this.vATCountryOpCoId = vATCountryOpCoId;
        this.documentReference = documentReference;
        this.additionalDocuments = additionalDocuments;
    }

    /**
     * Internal Getter for AccountFullName.
     * Account Full Name Example: AT_reversal customer_FN
     * @return Returns the Internal String
     */
    @JsonGetter("AccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountFullName() {
        return this.accountFullName;
    }

    /**
     * Getter for AccountFullName.
     * Account Full Name Example: AT_reversal customer_FN
     * @return Returns the String
     */
    public String getAccountFullName() {
        return OptionalNullable.getFrom(accountFullName);
    }

    /**
     * Setter for AccountFullName.
     * Account Full Name Example: AT_reversal customer_FN
     * @param accountFullName Value for String
     */
    @JsonSetter("AccountFullName")
    public void setAccountFullName(String accountFullName) {
        this.accountFullName = OptionalNullable.of(accountFullName);
    }

    /**
     * UnSetter for AccountFullName.
     * Account Full Name Example: AT_reversal customer_FN
     */
    public void unsetAccountFullName() {
        accountFullName = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account ID Example: 29484
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account ID Example: 29484
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account ID Example: 29484
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account ID Example: 29484
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number Example: GB99215176
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number Example: GB99215176
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number Example: GB99215176
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number Example: GB99215176
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name Example: AT Earth Movers-SN
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name Example: AT Earth Movers-SN
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name Example: AT Earth Movers-SN
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name Example: AT Earth Movers-SN
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for ColCoId.
     * ColCo Id. Example: 18
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * ColCo Id. Example: 18
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * ColCo Id. Example: 18
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * ColCo Id. Example: 18
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for ColCoOpCoId.
     * ColCo’s OpCo Id. Example: 018
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoOpCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoOpCoId() {
        return this.colCoOpCoId;
    }

    /**
     * Getter for ColCoOpCoId.
     * ColCo’s OpCo Id. Example: 018
     * @return Returns the String
     */
    public String getColCoOpCoId() {
        return OptionalNullable.getFrom(colCoOpCoId);
    }

    /**
     * Setter for ColCoOpCoId.
     * ColCo’s OpCo Id. Example: 018
     * @param colCoOpCoId Value for String
     */
    @JsonSetter("ColCoOpCoId")
    public void setColCoOpCoId(String colCoOpCoId) {
        this.colCoOpCoId = OptionalNullable.of(colCoOpCoId);
    }

    /**
     * UnSetter for ColCoOpCoId.
     * ColCo’s OpCo Id. Example: 018
     */
    public void unsetColCoOpCoId() {
        colCoOpCoId = null;
    }

    /**
     * Internal Getter for CurrentBillingFrequency.
     * Current billing frequency of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: Weekly – Wednesday
     * @return Returns the Internal String
     */
    @JsonGetter("CurrentBillingFrequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrentBillingFrequency() {
        return this.currentBillingFrequency;
    }

    /**
     * Getter for CurrentBillingFrequency.
     * Current billing frequency of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: Weekly – Wednesday
     * @return Returns the String
     */
    public String getCurrentBillingFrequency() {
        return OptionalNullable.getFrom(currentBillingFrequency);
    }

    /**
     * Setter for CurrentBillingFrequency.
     * Current billing frequency of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: Weekly – Wednesday
     * @param currentBillingFrequency Value for String
     */
    @JsonSetter("CurrentBillingFrequency")
    public void setCurrentBillingFrequency(String currentBillingFrequency) {
        this.currentBillingFrequency = OptionalNullable.of(currentBillingFrequency);
    }

    /**
     * UnSetter for CurrentBillingFrequency.
     * Current billing frequency of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: Weekly – Wednesday
     */
    public void unsetCurrentBillingFrequency() {
        currentBillingFrequency = null;
    }

    /**
     * Internal Getter for CurrentBillingFrequencyId.
     * Current billing frequency id of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: 5
     * @return Returns the Internal Integer
     */
    @JsonGetter("CurrentBillingFrequencyId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCurrentBillingFrequencyId() {
        return this.currentBillingFrequencyId;
    }

    /**
     * Getter for CurrentBillingFrequencyId.
     * Current billing frequency id of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: 5
     * @return Returns the Integer
     */
    public Integer getCurrentBillingFrequencyId() {
        return OptionalNullable.getFrom(currentBillingFrequencyId);
    }

    /**
     * Setter for CurrentBillingFrequencyId.
     * Current billing frequency id of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: 5
     * @param currentBillingFrequencyId Value for Integer
     */
    @JsonSetter("CurrentBillingFrequencyId")
    public void setCurrentBillingFrequencyId(Integer currentBillingFrequencyId) {
        this.currentBillingFrequencyId = OptionalNullable.of(currentBillingFrequencyId);
    }

    /**
     * UnSetter for CurrentBillingFrequencyId.
     * Current billing frequency id of the account. A few of the possible IDs and Description are
     * below: 1	Daily (all days) 2	Daily (only working days) 3	Weekly - Monday 4	Weekly - Tuesday
     * 5	Weekly - Wednesday 6	Weekly - Thursday 7	Weekly - Friday 8	Weekly - Saturday 9	Weekly -
     * Sunday 10	Monthly - 1st Example: 5
     */
    public void unsetCurrentBillingFrequencyId() {
        currentBillingFrequencyId = null;
    }

    /**
     * Internal Getter for CurrentDistributionMethod.
     * Current distribution method name of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @return Returns the Internal String
     */
    @JsonGetter("CurrentDistributionMethod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrentDistributionMethod() {
        return this.currentDistributionMethod;
    }

    /**
     * Getter for CurrentDistributionMethod.
     * Current distribution method name of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @return Returns the String
     */
    public String getCurrentDistributionMethod() {
        return OptionalNullable.getFrom(currentDistributionMethod);
    }

    /**
     * Setter for CurrentDistributionMethod.
     * Current distribution method name of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @param currentDistributionMethod Value for String
     */
    @JsonSetter("CurrentDistributionMethod")
    public void setCurrentDistributionMethod(String currentDistributionMethod) {
        this.currentDistributionMethod = OptionalNullable.of(currentDistributionMethod);
    }

    /**
     * UnSetter for CurrentDistributionMethod.
     * Current distribution method name of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     */
    public void unsetCurrentDistributionMethod() {
        currentDistributionMethod = null;
    }

    /**
     * Internal Getter for CurrentDistributionMethodId.
     * Current distribution method id of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @return Returns the Internal Integer
     */
    @JsonGetter("CurrentDistributionMethodId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCurrentDistributionMethodId() {
        return this.currentDistributionMethodId;
    }

    /**
     * Getter for CurrentDistributionMethodId.
     * Current distribution method id of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @return Returns the Integer
     */
    public Integer getCurrentDistributionMethodId() {
        return OptionalNullable.getFrom(currentDistributionMethodId);
    }

    /**
     * Setter for CurrentDistributionMethodId.
     * Current distribution method id of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     * @param currentDistributionMethodId Value for Integer
     */
    @JsonSetter("CurrentDistributionMethodId")
    public void setCurrentDistributionMethodId(Integer currentDistributionMethodId) {
        this.currentDistributionMethodId = OptionalNullable.of(currentDistributionMethodId);
    }

    /**
     * UnSetter for CurrentDistributionMethodId.
     * Current distribution method id of the account. Example : Id &amp; Description 1	e-mail 2	Fax
     * 3	Courier to Customer 4	Courier to Client 5	Print 6	FTP 7	SMS
     */
    public void unsetCurrentDistributionMethodId() {
        currentDistributionMethodId = null;
    }

    /**
     * Internal Getter for CustomerCurrencyCode.
     * Customer currency ISO code. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencyCode() {
        return this.customerCurrencyCode;
    }

    /**
     * Getter for CustomerCurrencyCode.
     * Customer currency ISO code. Example: EUR
     * @return Returns the String
     */
    public String getCustomerCurrencyCode() {
        return OptionalNullable.getFrom(customerCurrencyCode);
    }

    /**
     * Setter for CustomerCurrencyCode.
     * Customer currency ISO code. Example: EUR
     * @param customerCurrencyCode Value for String
     */
    @JsonSetter("CustomerCurrencyCode")
    public void setCustomerCurrencyCode(String customerCurrencyCode) {
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
    }

    /**
     * UnSetter for CustomerCurrencyCode.
     * Customer currency ISO code. Example: EUR
     */
    public void unsetCustomerCurrencyCode() {
        customerCurrencyCode = null;
    }

    /**
     * Internal Getter for CustomerCurrencySymbol.
     * Customer currency code. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencySymbol() {
        return this.customerCurrencySymbol;
    }

    /**
     * Getter for CustomerCurrencySymbol.
     * Customer currency code. Example: €
     * @return Returns the String
     */
    public String getCustomerCurrencySymbol() {
        return OptionalNullable.getFrom(customerCurrencySymbol);
    }

    /**
     * Setter for CustomerCurrencySymbol.
     * Customer currency code. Example: €
     * @param customerCurrencySymbol Value for String
     */
    @JsonSetter("CustomerCurrencySymbol")
    public void setCustomerCurrencySymbol(String customerCurrencySymbol) {
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
    }

    /**
     * UnSetter for CustomerCurrencySymbol.
     * Customer currency code. Example: €
     */
    public void unsetCustomerCurrencySymbol() {
        customerCurrencySymbol = null;
    }

    /**
     * Internal Getter for DelCoClientNumber.
     * DelCo’s client company number. Example: 132
     * @return Returns the Internal String
     */
    @JsonGetter("DelCoClientNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelCoClientNumber() {
        return this.delCoClientNumber;
    }

    /**
     * Getter for DelCoClientNumber.
     * DelCo’s client company number. Example: 132
     * @return Returns the String
     */
    public String getDelCoClientNumber() {
        return OptionalNullable.getFrom(delCoClientNumber);
    }

    /**
     * Setter for DelCoClientNumber.
     * DelCo’s client company number. Example: 132
     * @param delCoClientNumber Value for String
     */
    @JsonSetter("DelCoClientNumber")
    public void setDelCoClientNumber(String delCoClientNumber) {
        this.delCoClientNumber = OptionalNullable.of(delCoClientNumber);
    }

    /**
     * UnSetter for DelCoClientNumber.
     * DelCo’s client company number. Example: 132
     */
    public void unsetDelCoClientNumber() {
        delCoClientNumber = null;
    }

    /**
     * Internal Getter for DelCoId.
     * DelCo Id. Example: 132
     * @return Returns the Internal Integer
     */
    @JsonGetter("DelCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDelCoId() {
        return this.delCoId;
    }

    /**
     * Getter for DelCoId.
     * DelCo Id. Example: 132
     * @return Returns the Integer
     */
    public Integer getDelCoId() {
        return OptionalNullable.getFrom(delCoId);
    }

    /**
     * Setter for DelCoId.
     * DelCo Id. Example: 132
     * @param delCoId Value for Integer
     */
    @JsonSetter("DelCoId")
    public void setDelCoId(Integer delCoId) {
        this.delCoId = OptionalNullable.of(delCoId);
    }

    /**
     * UnSetter for DelCoId.
     * DelCo Id. Example: 132
     */
    public void unsetDelCoId() {
        delCoId = null;
    }

    /**
     * Internal Getter for DelCoOpCoId.
     * DelCo’s OpCo Id. Example: 032
     * @return Returns the Internal String
     */
    @JsonGetter("DelCoOpCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelCoOpCoId() {
        return this.delCoOpCoId;
    }

    /**
     * Getter for DelCoOpCoId.
     * DelCo’s OpCo Id. Example: 032
     * @return Returns the String
     */
    public String getDelCoOpCoId() {
        return OptionalNullable.getFrom(delCoOpCoId);
    }

    /**
     * Setter for DelCoOpCoId.
     * DelCo’s OpCo Id. Example: 032
     * @param delCoOpCoId Value for String
     */
    @JsonSetter("DelCoOpCoId")
    public void setDelCoOpCoId(String delCoOpCoId) {
        this.delCoOpCoId = OptionalNullable.of(delCoOpCoId);
    }

    /**
     * UnSetter for DelCoOpCoId.
     * DelCo’s OpCo Id. Example: 032
     */
    public void unsetDelCoOpCoId() {
        delCoOpCoId = null;
    }

    /**
     * Internal Getter for DocumentType.
     * Document type Id description.
     * @return Returns the Internal String
     */
    @JsonGetter("DocumentType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDocumentType() {
        return this.documentType;
    }

    /**
     * Getter for DocumentType.
     * Document type Id description.
     * @return Returns the String
     */
    public String getDocumentType() {
        return OptionalNullable.getFrom(documentType);
    }

    /**
     * Setter for DocumentType.
     * Document type Id description.
     * @param documentType Value for String
     */
    @JsonSetter("DocumentType")
    public void setDocumentType(String documentType) {
        this.documentType = OptionalNullable.of(documentType);
    }

    /**
     * UnSetter for DocumentType.
     * Document type Id description.
     */
    public void unsetDocumentType() {
        documentType = null;
    }

    /**
     * Internal Getter for DocumentTypeId.
     * Document type Id.
     * @return Returns the Internal Integer
     */
    @JsonGetter("DocumentTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDocumentTypeId() {
        return this.documentTypeId;
    }

    /**
     * Getter for DocumentTypeId.
     * Document type Id.
     * @return Returns the Integer
     */
    public Integer getDocumentTypeId() {
        return OptionalNullable.getFrom(documentTypeId);
    }

    /**
     * Setter for DocumentTypeId.
     * Document type Id.
     * @param documentTypeId Value for Integer
     */
    @JsonSetter("DocumentTypeId")
    public void setDocumentTypeId(Integer documentTypeId) {
        this.documentTypeId = OptionalNullable.of(documentTypeId);
    }

    /**
     * UnSetter for DocumentTypeId.
     * Document type Id.
     */
    public void unsetDocumentTypeId() {
        documentTypeId = null;
    }

    /**
     * Internal Getter for DueDate.
     * Due date. Format: yyyyMMdd. Example: 20170115
     * @return Returns the Internal String
     */
    @JsonGetter("DueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDueDate() {
        return this.dueDate;
    }

    /**
     * Getter for DueDate.
     * Due date. Format: yyyyMMdd. Example: 20170115
     * @return Returns the String
     */
    public String getDueDate() {
        return OptionalNullable.getFrom(dueDate);
    }

    /**
     * Setter for DueDate.
     * Due date. Format: yyyyMMdd. Example: 20170115
     * @param dueDate Value for String
     */
    @JsonSetter("DueDate")
    public void setDueDate(String dueDate) {
        this.dueDate = OptionalNullable.of(dueDate);
    }

    /**
     * UnSetter for DueDate.
     * Due date. Format: yyyyMMdd. Example: 20170115
     */
    public void unsetDueDate() {
        dueDate = null;
    }

    /**
     * Internal Getter for GrossAmountCustomerCurrency.
     * Gross amount in customer currency in the document.
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossAmountCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossAmountCustomerCurrency() {
        return this.grossAmountCustomerCurrency;
    }

    /**
     * Getter for GrossAmountCustomerCurrency.
     * Gross amount in customer currency in the document.
     * @return Returns the Double
     */
    public Double getGrossAmountCustomerCurrency() {
        return OptionalNullable.getFrom(grossAmountCustomerCurrency);
    }

    /**
     * Setter for GrossAmountCustomerCurrency.
     * Gross amount in customer currency in the document.
     * @param grossAmountCustomerCurrency Value for Double
     */
    @JsonSetter("GrossAmountCustomerCurrency")
    public void setGrossAmountCustomerCurrency(Double grossAmountCustomerCurrency) {
        this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
    }

    /**
     * UnSetter for GrossAmountCustomerCurrency.
     * Gross amount in customer currency in the document.
     */
    public void unsetGrossAmountCustomerCurrency() {
        grossAmountCustomerCurrency = null;
    }

    /**
     * Internal Getter for GrossAmountTransactionCurrency.
     * Gross amount in transaction currency in the document
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossAmountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossAmountTransactionCurrency() {
        return this.grossAmountTransactionCurrency;
    }

    /**
     * Getter for GrossAmountTransactionCurrency.
     * Gross amount in transaction currency in the document
     * @return Returns the Double
     */
    public Double getGrossAmountTransactionCurrency() {
        return OptionalNullable.getFrom(grossAmountTransactionCurrency);
    }

    /**
     * Setter for GrossAmountTransactionCurrency.
     * Gross amount in transaction currency in the document
     * @param grossAmountTransactionCurrency Value for Double
     */
    @JsonSetter("GrossAmountTransactionCurrency")
    public void setGrossAmountTransactionCurrency(Double grossAmountTransactionCurrency) {
        this.grossAmountTransactionCurrency = OptionalNullable.of(grossAmountTransactionCurrency);
    }

    /**
     * UnSetter for GrossAmountTransactionCurrency.
     * Gross amount in transaction currency in the document
     */
    public void unsetGrossAmountTransactionCurrency() {
        grossAmountTransactionCurrency = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Invoicing date. Format: yyyyMMdd Example: 20170101
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Invoicing date. Format: yyyyMMdd Example: 20170101
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Invoicing date. Format: yyyyMMdd Example: 20170101
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Invoicing date. Format: yyyyMMdd Example: 20170101
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for InvoicedBy.
     * Company name.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoicedBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoicedBy() {
        return this.invoicedBy;
    }

    /**
     * Getter for InvoicedBy.
     * Company name.
     * @return Returns the String
     */
    public String getInvoicedBy() {
        return OptionalNullable.getFrom(invoicedBy);
    }

    /**
     * Setter for InvoicedBy.
     * Company name.
     * @param invoicedBy Value for String
     */
    @JsonSetter("InvoicedBy")
    public void setInvoicedBy(String invoicedBy) {
        this.invoicedBy = OptionalNullable.of(invoicedBy);
    }

    /**
     * UnSetter for InvoicedBy.
     * Company name.
     */
    public void unsetInvoicedBy() {
        invoicedBy = null;
    }

    /**
     * Internal Getter for InvoicedOnBehalfOf.
     * Country Name. Example: Czech Republic
     * @return Returns the Internal String
     */
    @JsonGetter("InvoicedOnBehalfOf")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoicedOnBehalfOf() {
        return this.invoicedOnBehalfOf;
    }

    /**
     * Getter for InvoicedOnBehalfOf.
     * Country Name. Example: Czech Republic
     * @return Returns the String
     */
    public String getInvoicedOnBehalfOf() {
        return OptionalNullable.getFrom(invoicedOnBehalfOf);
    }

    /**
     * Setter for InvoicedOnBehalfOf.
     * Country Name. Example: Czech Republic
     * @param invoicedOnBehalfOf Value for String
     */
    @JsonSetter("InvoicedOnBehalfOf")
    public void setInvoicedOnBehalfOf(String invoicedOnBehalfOf) {
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
    }

    /**
     * UnSetter for InvoicedOnBehalfOf.
     * Country Name. Example: Czech Republic
     */
    public void unsetInvoicedOnBehalfOf() {
        invoicedOnBehalfOf = null;
    }

    /**
     * Internal Getter for InvoiceId.
     * Invoice id. Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceId() {
        return this.invoiceId;
    }

    /**
     * Getter for InvoiceId.
     * Invoice id. Example: 1
     * @return Returns the Integer
     */
    public Integer getInvoiceId() {
        return OptionalNullable.getFrom(invoiceId);
    }

    /**
     * Setter for InvoiceId.
     * Invoice id. Example: 1
     * @param invoiceId Value for Integer
     */
    @JsonSetter("InvoiceId")
    public void setInvoiceId(Integer invoiceId) {
        this.invoiceId = OptionalNullable.of(invoiceId);
    }

    /**
     * UnSetter for InvoiceId.
     * Invoice id. Example: 1
     */
    public void unsetInvoiceId() {
        invoiceId = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice number. Example: 0123456789
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice number. Example: 0123456789
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice number. Example: 0123456789
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice number. Example: 0123456789
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for IsInternational.
     * True/False. True if this is an International invoice, else false.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInternational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInternational() {
        return this.isInternational;
    }

    /**
     * Getter for IsInternational.
     * True/False. True if this is an International invoice, else false.
     * @return Returns the Boolean
     */
    public Boolean getIsInternational() {
        return OptionalNullable.getFrom(isInternational);
    }

    /**
     * Setter for IsInternational.
     * True/False. True if this is an International invoice, else false.
     * @param isInternational Value for Boolean
     */
    @JsonSetter("IsInternational")
    public void setIsInternational(Boolean isInternational) {
        this.isInternational = OptionalNullable.of(isInternational);
    }

    /**
     * UnSetter for IsInternational.
     * True/False. True if this is an International invoice, else false.
     */
    public void unsetIsInternational() {
        isInternational = null;
    }

    /**
     * Internal Getter for IsNational.
     * True/False. True if this is a National invoice, else false.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsNational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsNational() {
        return this.isNational;
    }

    /**
     * Getter for IsNational.
     * True/False. True if this is a National invoice, else false.
     * @return Returns the Boolean
     */
    public Boolean getIsNational() {
        return OptionalNullable.getFrom(isNational);
    }

    /**
     * Setter for IsNational.
     * True/False. True if this is a National invoice, else false.
     * @param isNational Value for Boolean
     */
    @JsonSetter("IsNational")
    public void setIsNational(Boolean isNational) {
        this.isNational = OptionalNullable.of(isNational);
    }

    /**
     * UnSetter for IsNational.
     * True/False. True if this is a National invoice, else false.
     */
    public void unsetIsNational() {
        isNational = null;
    }

    /**
     * Internal Getter for NetAmountCustomerCurrency.
     * Net amount in customer currency in the document.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetAmountCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetAmountCustomerCurrency() {
        return this.netAmountCustomerCurrency;
    }

    /**
     * Getter for NetAmountCustomerCurrency.
     * Net amount in customer currency in the document.
     * @return Returns the Double
     */
    public Double getNetAmountCustomerCurrency() {
        return OptionalNullable.getFrom(netAmountCustomerCurrency);
    }

    /**
     * Setter for NetAmountCustomerCurrency.
     * Net amount in customer currency in the document.
     * @param netAmountCustomerCurrency Value for Double
     */
    @JsonSetter("NetAmountCustomerCurrency")
    public void setNetAmountCustomerCurrency(Double netAmountCustomerCurrency) {
        this.netAmountCustomerCurrency = OptionalNullable.of(netAmountCustomerCurrency);
    }

    /**
     * UnSetter for NetAmountCustomerCurrency.
     * Net amount in customer currency in the document.
     */
    public void unsetNetAmountCustomerCurrency() {
        netAmountCustomerCurrency = null;
    }

    /**
     * Internal Getter for NetAmountTransactionCurrency.
     * Net amount in transaction currency in the document.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetAmountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetAmountTransactionCurrency() {
        return this.netAmountTransactionCurrency;
    }

    /**
     * Getter for NetAmountTransactionCurrency.
     * Net amount in transaction currency in the document.
     * @return Returns the Double
     */
    public Double getNetAmountTransactionCurrency() {
        return OptionalNullable.getFrom(netAmountTransactionCurrency);
    }

    /**
     * Setter for NetAmountTransactionCurrency.
     * Net amount in transaction currency in the document.
     * @param netAmountTransactionCurrency Value for Double
     */
    @JsonSetter("NetAmountTransactionCurrency")
    public void setNetAmountTransactionCurrency(Double netAmountTransactionCurrency) {
        this.netAmountTransactionCurrency = OptionalNullable.of(netAmountTransactionCurrency);
    }

    /**
     * UnSetter for NetAmountTransactionCurrency.
     * Net amount in transaction currency in the document.
     */
    public void unsetNetAmountTransactionCurrency() {
        netAmountTransactionCurrency = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payment customer id of the customer. Example: 123456
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payment customer id of the customer. Example: 123456
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payment customer id of the customer. Example: 123456
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payment customer id of the customer. Example: 123456
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number. Example: GB000000123
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number. Example: GB000000123
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number. Example: GB000000123
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number. Example: GB000000123
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PaymentTerms.
     * A few of the possible IDs and Descriptions are below: 1	14 days after Invoice 2	15 days after
     * Invoice 3	21 days after Invoice 4	30 days after Invoice 5	45 days after Invoice
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentTerms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentTerms() {
        return this.paymentTerms;
    }

    /**
     * Getter for PaymentTerms.
     * A few of the possible IDs and Descriptions are below: 1	14 days after Invoice 2	15 days after
     * Invoice 3	21 days after Invoice 4	30 days after Invoice 5	45 days after Invoice
     * @return Returns the String
     */
    public String getPaymentTerms() {
        return OptionalNullable.getFrom(paymentTerms);
    }

    /**
     * Setter for PaymentTerms.
     * A few of the possible IDs and Descriptions are below: 1	14 days after Invoice 2	15 days after
     * Invoice 3	21 days after Invoice 4	30 days after Invoice 5	45 days after Invoice
     * @param paymentTerms Value for String
     */
    @JsonSetter("PaymentTerms")
    public void setPaymentTerms(String paymentTerms) {
        this.paymentTerms = OptionalNullable.of(paymentTerms);
    }

    /**
     * UnSetter for PaymentTerms.
     * A few of the possible IDs and Descriptions are below: 1	14 days after Invoice 2	15 days after
     * Invoice 3	21 days after Invoice 4	30 days after Invoice 5	45 days after Invoice
     */
    public void unsetPaymentTerms() {
        paymentTerms = null;
    }

    /**
     * Internal Getter for PaymentTermsId.
     * Payment terms id of the payment customer. A few of the possible IDs and Descriptions are
     * below: 1	14 days after Invoice 2	15 days after Invoice 3	21 days after Invoice 4	30 days
     * after Invoice 5	45 days after Invoice
     * @return Returns the Internal Integer
     */
    @JsonGetter("PaymentTermsId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPaymentTermsId() {
        return this.paymentTermsId;
    }

    /**
     * Getter for PaymentTermsId.
     * Payment terms id of the payment customer. A few of the possible IDs and Descriptions are
     * below: 1	14 days after Invoice 2	15 days after Invoice 3	21 days after Invoice 4	30 days
     * after Invoice 5	45 days after Invoice
     * @return Returns the Integer
     */
    public Integer getPaymentTermsId() {
        return OptionalNullable.getFrom(paymentTermsId);
    }

    /**
     * Setter for PaymentTermsId.
     * Payment terms id of the payment customer. A few of the possible IDs and Descriptions are
     * below: 1	14 days after Invoice 2	15 days after Invoice 3	21 days after Invoice 4	30 days
     * after Invoice 5	45 days after Invoice
     * @param paymentTermsId Value for Integer
     */
    @JsonSetter("PaymentTermsId")
    public void setPaymentTermsId(Integer paymentTermsId) {
        this.paymentTermsId = OptionalNullable.of(paymentTermsId);
    }

    /**
     * UnSetter for PaymentTermsId.
     * Payment terms id of the payment customer. A few of the possible IDs and Descriptions are
     * below: 1	14 days after Invoice 2	15 days after Invoice 3	21 days after Invoice 4	30 days
     * after Invoice 5	45 days after Invoice
     */
    public void unsetPaymentTermsId() {
        paymentTermsId = null;
    }

    /**
     * Internal Getter for ReplacementInvoiceId.
     * Replaced document id. Example: 2
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReplacementInvoiceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReplacementInvoiceId() {
        return this.replacementInvoiceId;
    }

    /**
     * Getter for ReplacementInvoiceId.
     * Replaced document id. Example: 2
     * @return Returns the Integer
     */
    public Integer getReplacementInvoiceId() {
        return OptionalNullable.getFrom(replacementInvoiceId);
    }

    /**
     * Setter for ReplacementInvoiceId.
     * Replaced document id. Example: 2
     * @param replacementInvoiceId Value for Integer
     */
    @JsonSetter("ReplacementInvoiceId")
    public void setReplacementInvoiceId(Integer replacementInvoiceId) {
        this.replacementInvoiceId = OptionalNullable.of(replacementInvoiceId);
    }

    /**
     * UnSetter for ReplacementInvoiceId.
     * Replaced document id. Example: 2
     */
    public void unsetReplacementInvoiceId() {
        replacementInvoiceId = null;
    }

    /**
     * Internal Getter for ReversalInvoiceId.
     * Reversed document id. Example: 3
     * @return Returns the Internal Integer
     */
    @JsonGetter("ReversalInvoiceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetReversalInvoiceId() {
        return this.reversalInvoiceId;
    }

    /**
     * Getter for ReversalInvoiceId.
     * Reversed document id. Example: 3
     * @return Returns the Integer
     */
    public Integer getReversalInvoiceId() {
        return OptionalNullable.getFrom(reversalInvoiceId);
    }

    /**
     * Setter for ReversalInvoiceId.
     * Reversed document id. Example: 3
     * @param reversalInvoiceId Value for Integer
     */
    @JsonSetter("ReversalInvoiceId")
    public void setReversalInvoiceId(Integer reversalInvoiceId) {
        this.reversalInvoiceId = OptionalNullable.of(reversalInvoiceId);
    }

    /**
     * UnSetter for ReversalInvoiceId.
     * Reversed document id. Example: 3
     */
    public void unsetReversalInvoiceId() {
        reversalInvoiceId = null;
    }

    /**
     * Internal Getter for Status.
     * Status of the document. Valid values – •	[Empty] – For all document types except for Invoice
     * and Statement. •	Due – Invoices/Statements due for payment and is within the due date. •	Paid
     * – Fully paid Invoices/Statements. Overdue – Invoices/Statements due of payment and has
     * crossed the due date.
     * @return Returns the Internal String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Status of the document. Valid values – •	[Empty] – For all document types except for Invoice
     * and Statement. •	Due – Invoices/Statements due for payment and is within the due date. •	Paid
     * – Fully paid Invoices/Statements. Overdue – Invoices/Statements due of payment and has
     * crossed the due date.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Status of the document. Valid values – •	[Empty] – For all document types except for Invoice
     * and Statement. •	Due – Invoices/Statements due for payment and is within the due date. •	Paid
     * – Fully paid Invoices/Statements. Overdue – Invoices/Statements due of payment and has
     * crossed the due date.
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Status of the document. Valid values – •	[Empty] – For all document types except for Invoice
     * and Statement. •	Due – Invoices/Statements due for payment and is within the due date. •	Paid
     * – Fully paid Invoices/Statements. Overdue – Invoices/Statements due of payment and has
     * crossed the due date.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for SummaryDocumentBillingType.
     * Billing type description. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance
     * 0	Standard Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentBillingType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentBillingType() {
        return this.summaryDocumentBillingType;
    }

    /**
     * Getter for SummaryDocumentBillingType.
     * Billing type description. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance
     * 0	Standard Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @return Returns the String
     */
    public String getSummaryDocumentBillingType() {
        return OptionalNullable.getFrom(summaryDocumentBillingType);
    }

    /**
     * Setter for SummaryDocumentBillingType.
     * Billing type description. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance
     * 0	Standard Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @param summaryDocumentBillingType Value for String
     */
    @JsonSetter("SummaryDocumentBillingType")
    public void setSummaryDocumentBillingType(String summaryDocumentBillingType) {
        this.summaryDocumentBillingType = OptionalNullable.of(summaryDocumentBillingType);
    }

    /**
     * UnSetter for SummaryDocumentBillingType.
     * Billing type description. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance
     * 0	Standard Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     */
    public void unsetSummaryDocumentBillingType() {
        summaryDocumentBillingType = null;
    }

    /**
     * Internal Getter for SummaryDocumentBillingTypeId.
     * Billing type id. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance 0	Standard
     * Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @return Returns the Internal Integer
     */
    @JsonGetter("SummaryDocumentBillingTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSummaryDocumentBillingTypeId() {
        return this.summaryDocumentBillingTypeId;
    }

    /**
     * Getter for SummaryDocumentBillingTypeId.
     * Billing type id. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance 0	Standard
     * Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @return Returns the Integer
     */
    public Integer getSummaryDocumentBillingTypeId() {
        return OptionalNullable.getFrom(summaryDocumentBillingTypeId);
    }

    /**
     * Setter for SummaryDocumentBillingTypeId.
     * Billing type id. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance 0	Standard
     * Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     * @param summaryDocumentBillingTypeId Value for Integer
     */
    @JsonSetter("SummaryDocumentBillingTypeId")
    public void setSummaryDocumentBillingTypeId(Integer summaryDocumentBillingTypeId) {
        this.summaryDocumentBillingTypeId = OptionalNullable.of(summaryDocumentBillingTypeId);
    }

    /**
     * UnSetter for SummaryDocumentBillingTypeId.
     * Billing type id. Example: Id &amp; Description -3	Guarantee History -1	Initial Balance 0	Standard
     * Invoice 1	Immediate Invoice 2	Guarantee 4	Advanced DD Invoice
     */
    public void unsetSummaryDocumentBillingTypeId() {
        summaryDocumentBillingTypeId = null;
    }

    /**
     * Internal Getter for SummaryDocumentDate.
     * Document generated date. Format: yyyyMMdd Example: 20170101
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentDate() {
        return this.summaryDocumentDate;
    }

    /**
     * Getter for SummaryDocumentDate.
     * Document generated date. Format: yyyyMMdd Example: 20170101
     * @return Returns the String
     */
    public String getSummaryDocumentDate() {
        return OptionalNullable.getFrom(summaryDocumentDate);
    }

    /**
     * Setter for SummaryDocumentDate.
     * Document generated date. Format: yyyyMMdd Example: 20170101
     * @param summaryDocumentDate Value for String
     */
    @JsonSetter("SummaryDocumentDate")
    public void setSummaryDocumentDate(String summaryDocumentDate) {
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
    }

    /**
     * UnSetter for SummaryDocumentDate.
     * Document generated date. Format: yyyyMMdd Example: 20170101
     */
    public void unsetSummaryDocumentDate() {
        summaryDocumentDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentDDAmount.
     * DD amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("SummaryDocumentDDAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSummaryDocumentDDAmount() {
        return this.summaryDocumentDDAmount;
    }

    /**
     * Getter for SummaryDocumentDDAmount.
     * DD amount.
     * @return Returns the Double
     */
    public Double getSummaryDocumentDDAmount() {
        return OptionalNullable.getFrom(summaryDocumentDDAmount);
    }

    /**
     * Setter for SummaryDocumentDDAmount.
     * DD amount.
     * @param summaryDocumentDDAmount Value for Double
     */
    @JsonSetter("SummaryDocumentDDAmount")
    public void setSummaryDocumentDDAmount(Double summaryDocumentDDAmount) {
        this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
    }

    /**
     * UnSetter for SummaryDocumentDDAmount.
     * DD amount.
     */
    public void unsetSummaryDocumentDDAmount() {
        summaryDocumentDDAmount = null;
    }

    /**
     * Internal Getter for SummaryDocumentDueDate.
     * Due date for document. Format: yyyyMMdd Example: 20170115
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentDueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentDueDate() {
        return this.summaryDocumentDueDate;
    }

    /**
     * Getter for SummaryDocumentDueDate.
     * Due date for document. Format: yyyyMMdd Example: 20170115
     * @return Returns the String
     */
    public String getSummaryDocumentDueDate() {
        return OptionalNullable.getFrom(summaryDocumentDueDate);
    }

    /**
     * Setter for SummaryDocumentDueDate.
     * Due date for document. Format: yyyyMMdd Example: 20170115
     * @param summaryDocumentDueDate Value for String
     */
    @JsonSetter("SummaryDocumentDueDate")
    public void setSummaryDocumentDueDate(String summaryDocumentDueDate) {
        this.summaryDocumentDueDate = OptionalNullable.of(summaryDocumentDueDate);
    }

    /**
     * UnSetter for SummaryDocumentDueDate.
     * Due date for document. Format: yyyyMMdd Example: 20170115
     */
    public void unsetSummaryDocumentDueDate() {
        summaryDocumentDueDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentId.
     * Summary document identifier Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("SummaryDocumentId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSummaryDocumentId() {
        return this.summaryDocumentId;
    }

    /**
     * Getter for SummaryDocumentId.
     * Summary document identifier Example: 1
     * @return Returns the Integer
     */
    public Integer getSummaryDocumentId() {
        return OptionalNullable.getFrom(summaryDocumentId);
    }

    /**
     * Setter for SummaryDocumentId.
     * Summary document identifier Example: 1
     * @param summaryDocumentId Value for Integer
     */
    @JsonSetter("SummaryDocumentId")
    public void setSummaryDocumentId(Integer summaryDocumentId) {
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
    }

    /**
     * UnSetter for SummaryDocumentId.
     * Summary document identifier Example: 1
     */
    public void unsetSummaryDocumentId() {
        summaryDocumentId = null;
    }

    /**
     * Internal Getter for SummaryDocumentIsFullyPaid.
     * True/False True if invoice amount is fully paid, else false
     * @return Returns the Internal Boolean
     */
    @JsonGetter("SummaryDocumentIsFullyPaid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetSummaryDocumentIsFullyPaid() {
        return this.summaryDocumentIsFullyPaid;
    }

    /**
     * Getter for SummaryDocumentIsFullyPaid.
     * True/False True if invoice amount is fully paid, else false
     * @return Returns the Boolean
     */
    public Boolean getSummaryDocumentIsFullyPaid() {
        return OptionalNullable.getFrom(summaryDocumentIsFullyPaid);
    }

    /**
     * Setter for SummaryDocumentIsFullyPaid.
     * True/False True if invoice amount is fully paid, else false
     * @param summaryDocumentIsFullyPaid Value for Boolean
     */
    @JsonSetter("SummaryDocumentIsFullyPaid")
    public void setSummaryDocumentIsFullyPaid(Boolean summaryDocumentIsFullyPaid) {
        this.summaryDocumentIsFullyPaid = OptionalNullable.of(summaryDocumentIsFullyPaid);
    }

    /**
     * UnSetter for SummaryDocumentIsFullyPaid.
     * True/False True if invoice amount is fully paid, else false
     */
    public void unsetSummaryDocumentIsFullyPaid() {
        summaryDocumentIsFullyPaid = null;
    }

    /**
     * Internal Getter for SummaryDocumentNumber.
     * Summary document number Example: ‘0/CZ0000000123456/2017’
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentNumber() {
        return this.summaryDocumentNumber;
    }

    /**
     * Getter for SummaryDocumentNumber.
     * Summary document number Example: ‘0/CZ0000000123456/2017’
     * @return Returns the String
     */
    public String getSummaryDocumentNumber() {
        return OptionalNullable.getFrom(summaryDocumentNumber);
    }

    /**
     * Setter for SummaryDocumentNumber.
     * Summary document number Example: ‘0/CZ0000000123456/2017’
     * @param summaryDocumentNumber Value for String
     */
    @JsonSetter("SummaryDocumentNumber")
    public void setSummaryDocumentNumber(String summaryDocumentNumber) {
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
    }

    /**
     * UnSetter for SummaryDocumentNumber.
     * Summary document number Example: ‘0/CZ0000000123456/2017’
     */
    public void unsetSummaryDocumentNumber() {
        summaryDocumentNumber = null;
    }

    /**
     * Internal Getter for SummaryDocumentPaidAmount.
     * Total amount paid.
     * @return Returns the Internal Double
     */
    @JsonGetter("SummaryDocumentPaidAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSummaryDocumentPaidAmount() {
        return this.summaryDocumentPaidAmount;
    }

    /**
     * Getter for SummaryDocumentPaidAmount.
     * Total amount paid.
     * @return Returns the Double
     */
    public Double getSummaryDocumentPaidAmount() {
        return OptionalNullable.getFrom(summaryDocumentPaidAmount);
    }

    /**
     * Setter for SummaryDocumentPaidAmount.
     * Total amount paid.
     * @param summaryDocumentPaidAmount Value for Double
     */
    @JsonSetter("SummaryDocumentPaidAmount")
    public void setSummaryDocumentPaidAmount(Double summaryDocumentPaidAmount) {
        this.summaryDocumentPaidAmount = OptionalNullable.of(summaryDocumentPaidAmount);
    }

    /**
     * UnSetter for SummaryDocumentPaidAmount.
     * Total amount paid.
     */
    public void unsetSummaryDocumentPaidAmount() {
        summaryDocumentPaidAmount = null;
    }

    /**
     * Internal Getter for SummaryDocumentSoAReferenceNumber.
     * Statement of Account reference number of the payment customer.
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentSoAReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentSoAReferenceNumber() {
        return this.summaryDocumentSoAReferenceNumber;
    }

    /**
     * Getter for SummaryDocumentSoAReferenceNumber.
     * Statement of Account reference number of the payment customer.
     * @return Returns the String
     */
    public String getSummaryDocumentSoAReferenceNumber() {
        return OptionalNullable.getFrom(summaryDocumentSoAReferenceNumber);
    }

    /**
     * Setter for SummaryDocumentSoAReferenceNumber.
     * Statement of Account reference number of the payment customer.
     * @param summaryDocumentSoAReferenceNumber Value for String
     */
    @JsonSetter("SummaryDocumentSoAReferenceNumber")
    public void setSummaryDocumentSoAReferenceNumber(String summaryDocumentSoAReferenceNumber) {
        this.summaryDocumentSoAReferenceNumber = OptionalNullable.of(summaryDocumentSoAReferenceNumber);
    }

    /**
     * UnSetter for SummaryDocumentSoAReferenceNumber.
     * Statement of Account reference number of the payment customer.
     */
    public void unsetSummaryDocumentSoAReferenceNumber() {
        summaryDocumentSoAReferenceNumber = null;
    }

    /**
     * Internal Getter for SummaryDocumentStatementOfAccountId.
     * Statement of Account Id of the payment customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("SummaryDocumentStatementOfAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSummaryDocumentStatementOfAccountId() {
        return this.summaryDocumentStatementOfAccountId;
    }

    /**
     * Getter for SummaryDocumentStatementOfAccountId.
     * Statement of Account Id of the payment customer.
     * @return Returns the Integer
     */
    public Integer getSummaryDocumentStatementOfAccountId() {
        return OptionalNullable.getFrom(summaryDocumentStatementOfAccountId);
    }

    /**
     * Setter for SummaryDocumentStatementOfAccountId.
     * Statement of Account Id of the payment customer.
     * @param summaryDocumentStatementOfAccountId Value for Integer
     */
    @JsonSetter("SummaryDocumentStatementOfAccountId")
    public void setSummaryDocumentStatementOfAccountId(Integer summaryDocumentStatementOfAccountId) {
        this.summaryDocumentStatementOfAccountId = OptionalNullable.of(summaryDocumentStatementOfAccountId);
    }

    /**
     * UnSetter for SummaryDocumentStatementOfAccountId.
     * Statement of Account Id of the payment customer.
     */
    public void unsetSummaryDocumentStatementOfAccountId() {
        summaryDocumentStatementOfAccountId = null;
    }

    /**
     * Internal Getter for TransactionCurrencyCode.
     * Transaction currency ISO code. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencyCode() {
        return this.transactionCurrencyCode;
    }

    /**
     * Getter for TransactionCurrencyCode.
     * Transaction currency ISO code. Example: EUR
     * @return Returns the String
     */
    public String getTransactionCurrencyCode() {
        return OptionalNullable.getFrom(transactionCurrencyCode);
    }

    /**
     * Setter for TransactionCurrencyCode.
     * Transaction currency ISO code. Example: EUR
     * @param transactionCurrencyCode Value for String
     */
    @JsonSetter("TransactionCurrencyCode")
    public void setTransactionCurrencyCode(String transactionCurrencyCode) {
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
    }

    /**
     * UnSetter for TransactionCurrencyCode.
     * Transaction currency ISO code. Example: EUR
     */
    public void unsetTransactionCurrencyCode() {
        transactionCurrencyCode = null;
    }

    /**
     * Internal Getter for TransactionCurrencySymbol.
     * Transaction currency symbol. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencySymbol() {
        return this.transactionCurrencySymbol;
    }

    /**
     * Getter for TransactionCurrencySymbol.
     * Transaction currency symbol. Example: €
     * @return Returns the String
     */
    public String getTransactionCurrencySymbol() {
        return OptionalNullable.getFrom(transactionCurrencySymbol);
    }

    /**
     * Setter for TransactionCurrencySymbol.
     * Transaction currency symbol. Example: €
     * @param transactionCurrencySymbol Value for String
     */
    @JsonSetter("TransactionCurrencySymbol")
    public void setTransactionCurrencySymbol(String transactionCurrencySymbol) {
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
    }

    /**
     * UnSetter for TransactionCurrencySymbol.
     * Transaction currency symbol. Example: €
     */
    public void unsetTransactionCurrencySymbol() {
        transactionCurrencySymbol = null;
    }

    /**
     * Internal Getter for Type.
     * Invoice type description. A few of the possible IDs and Description are below: 1	Original
     * 2	Reversal 3	Replacement Example: Original
     * @return Returns the Internal String
     */
    @JsonGetter("Type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * Invoice type description. A few of the possible IDs and Description are below: 1	Original
     * 2	Reversal 3	Replacement Example: Original
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * Invoice type description. A few of the possible IDs and Description are below: 1	Original
     * 2	Reversal 3	Replacement Example: Original
     * @param type Value for String
     */
    @JsonSetter("Type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * Invoice type description. A few of the possible IDs and Description are below: 1	Original
     * 2	Reversal 3	Replacement Example: Original
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Internal Getter for TypeId.
     * Invoice type id. A few of the possible IDs and Descriptions are below: 1	Original 2	Reversal
     * 3	Replacement Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("TypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTypeId() {
        return this.typeId;
    }

    /**
     * Getter for TypeId.
     * Invoice type id. A few of the possible IDs and Descriptions are below: 1	Original 2	Reversal
     * 3	Replacement Example: 1
     * @return Returns the Integer
     */
    public Integer getTypeId() {
        return OptionalNullable.getFrom(typeId);
    }

    /**
     * Setter for TypeId.
     * Invoice type id. A few of the possible IDs and Descriptions are below: 1	Original 2	Reversal
     * 3	Replacement Example: 1
     * @param typeId Value for Integer
     */
    @JsonSetter("TypeId")
    public void setTypeId(Integer typeId) {
        this.typeId = OptionalNullable.of(typeId);
    }

    /**
     * UnSetter for TypeId.
     * Invoice type id. A few of the possible IDs and Descriptions are below: 1	Original 2	Reversal
     * 3	Replacement Example: 1
     */
    public void unsetTypeId() {
        typeId = null;
    }

    /**
     * Internal Getter for VATAmountCustomerCurrency.
     * VAT amount in customer currency in the document
     * @return Returns the Internal Double
     */
    @JsonGetter("VATAmountCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATAmountCustomerCurrency() {
        return this.vATAmountCustomerCurrency;
    }

    /**
     * Getter for VATAmountCustomerCurrency.
     * VAT amount in customer currency in the document
     * @return Returns the Double
     */
    public Double getVATAmountCustomerCurrency() {
        return OptionalNullable.getFrom(vATAmountCustomerCurrency);
    }

    /**
     * Setter for VATAmountCustomerCurrency.
     * VAT amount in customer currency in the document
     * @param vATAmountCustomerCurrency Value for Double
     */
    @JsonSetter("VATAmountCustomerCurrency")
    public void setVATAmountCustomerCurrency(Double vATAmountCustomerCurrency) {
        this.vATAmountCustomerCurrency = OptionalNullable.of(vATAmountCustomerCurrency);
    }

    /**
     * UnSetter for VATAmountCustomerCurrency.
     * VAT amount in customer currency in the document
     */
    public void unsetVATAmountCustomerCurrency() {
        vATAmountCustomerCurrency = null;
    }

    /**
     * Internal Getter for VATAmountTransactionCurrency.
     * VAT amount in transaction currency in the document
     * @return Returns the Internal Double
     */
    @JsonGetter("VATAmountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATAmountTransactionCurrency() {
        return this.vATAmountTransactionCurrency;
    }

    /**
     * Getter for VATAmountTransactionCurrency.
     * VAT amount in transaction currency in the document
     * @return Returns the Double
     */
    public Double getVATAmountTransactionCurrency() {
        return OptionalNullable.getFrom(vATAmountTransactionCurrency);
    }

    /**
     * Setter for VATAmountTransactionCurrency.
     * VAT amount in transaction currency in the document
     * @param vATAmountTransactionCurrency Value for Double
     */
    @JsonSetter("VATAmountTransactionCurrency")
    public void setVATAmountTransactionCurrency(Double vATAmountTransactionCurrency) {
        this.vATAmountTransactionCurrency = OptionalNullable.of(vATAmountTransactionCurrency);
    }

    /**
     * UnSetter for VATAmountTransactionCurrency.
     * VAT amount in transaction currency in the document
     */
    public void unsetVATAmountTransactionCurrency() {
        vATAmountTransactionCurrency = null;
    }

    /**
     * Internal Getter for VATCountry.
     * Country name of the VAT country. Example: France, Germany
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountry() {
        return this.vATCountry;
    }

    /**
     * Getter for VATCountry.
     * Country name of the VAT country. Example: France, Germany
     * @return Returns the String
     */
    public String getVATCountry() {
        return OptionalNullable.getFrom(vATCountry);
    }

    /**
     * Setter for VATCountry.
     * Country name of the VAT country. Example: France, Germany
     * @param vATCountry Value for String
     */
    @JsonSetter("VATCountry")
    public void setVATCountry(String vATCountry) {
        this.vATCountry = OptionalNullable.of(vATCountry);
    }

    /**
     * UnSetter for VATCountry.
     * Country name of the VAT country. Example: France, Germany
     */
    public void unsetVATCountry() {
        vATCountry = null;
    }

    /**
     * Internal Getter for VATCountryId.
     * Country Id of the VAT country. Example: 1,2
     * @return Returns the Internal Integer
     */
    @JsonGetter("VATCountryId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetVATCountryId() {
        return this.vATCountryId;
    }

    /**
     * Getter for VATCountryId.
     * Country Id of the VAT country. Example: 1,2
     * @return Returns the Integer
     */
    public Integer getVATCountryId() {
        return OptionalNullable.getFrom(vATCountryId);
    }

    /**
     * Setter for VATCountryId.
     * Country Id of the VAT country. Example: 1,2
     * @param vATCountryId Value for Integer
     */
    @JsonSetter("VATCountryId")
    public void setVATCountryId(Integer vATCountryId) {
        this.vATCountryId = OptionalNullable.of(vATCountryId);
    }

    /**
     * UnSetter for VATCountryId.
     * Country Id of the VAT country. Example: 1,2
     */
    public void unsetVATCountryId() {
        vATCountryId = null;
    }

    /**
     * Internal Getter for VATCountryISOCode.
     * Country ISO code of the VAT country. Example : CZ, SK, UK, etc.,
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountryISOCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountryISOCode() {
        return this.vATCountryISOCode;
    }

    /**
     * Getter for VATCountryISOCode.
     * Country ISO code of the VAT country. Example : CZ, SK, UK, etc.,
     * @return Returns the String
     */
    public String getVATCountryISOCode() {
        return OptionalNullable.getFrom(vATCountryISOCode);
    }

    /**
     * Setter for VATCountryISOCode.
     * Country ISO code of the VAT country. Example : CZ, SK, UK, etc.,
     * @param vATCountryISOCode Value for String
     */
    @JsonSetter("VATCountryISOCode")
    public void setVATCountryISOCode(String vATCountryISOCode) {
        this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
    }

    /**
     * UnSetter for VATCountryISOCode.
     * Country ISO code of the VAT country. Example : CZ, SK, UK, etc.,
     */
    public void unsetVATCountryISOCode() {
        vATCountryISOCode = null;
    }

    /**
     * Internal Getter for VATCountryOpCoId.
     * VAT country’s OpCo Id. Example: 032
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountryOpCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountryOpCoId() {
        return this.vATCountryOpCoId;
    }

    /**
     * Getter for VATCountryOpCoId.
     * VAT country’s OpCo Id. Example: 032
     * @return Returns the String
     */
    public String getVATCountryOpCoId() {
        return OptionalNullable.getFrom(vATCountryOpCoId);
    }

    /**
     * Setter for VATCountryOpCoId.
     * VAT country’s OpCo Id. Example: 032
     * @param vATCountryOpCoId Value for String
     */
    @JsonSetter("VATCountryOpCoId")
    public void setVATCountryOpCoId(String vATCountryOpCoId) {
        this.vATCountryOpCoId = OptionalNullable.of(vATCountryOpCoId);
    }

    /**
     * UnSetter for VATCountryOpCoId.
     * VAT country’s OpCo Id. Example: 032
     */
    public void unsetVATCountryOpCoId() {
        vATCountryOpCoId = null;
    }

    /**
     * Internal Getter for DocumentReference.
     * document reference number of the Invoice file
     * @return Returns the Internal String
     */
    @JsonGetter("DocumentReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDocumentReference() {
        return this.documentReference;
    }

    /**
     * Getter for DocumentReference.
     * document reference number of the Invoice file
     * @return Returns the String
     */
    public String getDocumentReference() {
        return OptionalNullable.getFrom(documentReference);
    }

    /**
     * Setter for DocumentReference.
     * document reference number of the Invoice file
     * @param documentReference Value for String
     */
    @JsonSetter("DocumentReference")
    public void setDocumentReference(String documentReference) {
        this.documentReference = OptionalNullable.of(documentReference);
    }

    /**
     * UnSetter for DocumentReference.
     * document reference number of the Invoice file
     */
    public void unsetDocumentReference() {
        documentReference = null;
    }

    /**
     * Getter for AdditionalDocuments.
     * @return Returns the List of InvoiceSearchAdditionalDocument
     */
    @JsonGetter("AdditionalDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<InvoiceSearchAdditionalDocument> getAdditionalDocuments() {
        return additionalDocuments;
    }

    /**
     * Setter for AdditionalDocuments.
     * @param additionalDocuments Value for List of InvoiceSearchAdditionalDocument
     */
    @JsonSetter("AdditionalDocuments")
    public void setAdditionalDocuments(List<InvoiceSearchAdditionalDocument> additionalDocuments) {
        this.additionalDocuments = additionalDocuments;
    }

    /**
     * Converts this InvoiceSearchDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InvoiceSearchDetails [" + "accountFullName=" + accountFullName + ", accountId="
                + accountId + ", accountNumber=" + accountNumber + ", accountShortName="
                + accountShortName + ", colCoId=" + colCoId + ", colCoOpCoId=" + colCoOpCoId
                + ", currentBillingFrequency=" + currentBillingFrequency
                + ", currentBillingFrequencyId=" + currentBillingFrequencyId
                + ", currentDistributionMethod=" + currentDistributionMethod
                + ", currentDistributionMethodId=" + currentDistributionMethodId
                + ", customerCurrencyCode=" + customerCurrencyCode + ", customerCurrencySymbol="
                + customerCurrencySymbol + ", delCoClientNumber=" + delCoClientNumber + ", delCoId="
                + delCoId + ", delCoOpCoId=" + delCoOpCoId + ", documentType=" + documentType
                + ", documentTypeId=" + documentTypeId + ", dueDate=" + dueDate
                + ", grossAmountCustomerCurrency=" + grossAmountCustomerCurrency
                + ", grossAmountTransactionCurrency=" + grossAmountTransactionCurrency
                + ", invoiceDate=" + invoiceDate + ", invoicedBy=" + invoicedBy
                + ", invoicedOnBehalfOf=" + invoicedOnBehalfOf + ", invoiceId=" + invoiceId
                + ", invoiceNumber=" + invoiceNumber + ", isInternational=" + isInternational
                + ", isNational=" + isNational + ", netAmountCustomerCurrency="
                + netAmountCustomerCurrency + ", netAmountTransactionCurrency="
                + netAmountTransactionCurrency + ", payerId=" + payerId + ", payerNumber="
                + payerNumber + ", paymentTerms=" + paymentTerms + ", paymentTermsId="
                + paymentTermsId + ", replacementInvoiceId=" + replacementInvoiceId
                + ", reversalInvoiceId=" + reversalInvoiceId + ", status=" + status
                + ", summaryDocumentBillingType=" + summaryDocumentBillingType
                + ", summaryDocumentBillingTypeId=" + summaryDocumentBillingTypeId
                + ", summaryDocumentDate=" + summaryDocumentDate + ", summaryDocumentDDAmount="
                + summaryDocumentDDAmount + ", summaryDocumentDueDate=" + summaryDocumentDueDate
                + ", summaryDocumentId=" + summaryDocumentId + ", summaryDocumentIsFullyPaid="
                + summaryDocumentIsFullyPaid + ", summaryDocumentNumber=" + summaryDocumentNumber
                + ", summaryDocumentPaidAmount=" + summaryDocumentPaidAmount
                + ", summaryDocumentSoAReferenceNumber=" + summaryDocumentSoAReferenceNumber
                + ", summaryDocumentStatementOfAccountId=" + summaryDocumentStatementOfAccountId
                + ", transactionCurrencyCode=" + transactionCurrencyCode
                + ", transactionCurrencySymbol=" + transactionCurrencySymbol + ", type=" + type
                + ", typeId=" + typeId + ", vATAmountCustomerCurrency=" + vATAmountCustomerCurrency
                + ", vATAmountTransactionCurrency=" + vATAmountTransactionCurrency + ", vATCountry="
                + vATCountry + ", vATCountryId=" + vATCountryId + ", vATCountryISOCode="
                + vATCountryISOCode + ", vATCountryOpCoId=" + vATCountryOpCoId
                + ", documentReference=" + documentReference + ", additionalDocuments="
                + additionalDocuments + "]";
    }

    /**
     * Builds a new {@link InvoiceSearchDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InvoiceSearchDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .additionalDocuments(getAdditionalDocuments());
        builder.accountFullName = internalGetAccountFullName();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.colCoId = internalGetColCoId();
        builder.colCoOpCoId = internalGetColCoOpCoId();
        builder.currentBillingFrequency = internalGetCurrentBillingFrequency();
        builder.currentBillingFrequencyId = internalGetCurrentBillingFrequencyId();
        builder.currentDistributionMethod = internalGetCurrentDistributionMethod();
        builder.currentDistributionMethodId = internalGetCurrentDistributionMethodId();
        builder.customerCurrencyCode = internalGetCustomerCurrencyCode();
        builder.customerCurrencySymbol = internalGetCustomerCurrencySymbol();
        builder.delCoClientNumber = internalGetDelCoClientNumber();
        builder.delCoId = internalGetDelCoId();
        builder.delCoOpCoId = internalGetDelCoOpCoId();
        builder.documentType = internalGetDocumentType();
        builder.documentTypeId = internalGetDocumentTypeId();
        builder.dueDate = internalGetDueDate();
        builder.grossAmountCustomerCurrency = internalGetGrossAmountCustomerCurrency();
        builder.grossAmountTransactionCurrency = internalGetGrossAmountTransactionCurrency();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.invoicedBy = internalGetInvoicedBy();
        builder.invoicedOnBehalfOf = internalGetInvoicedOnBehalfOf();
        builder.invoiceId = internalGetInvoiceId();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.isInternational = internalGetIsInternational();
        builder.isNational = internalGetIsNational();
        builder.netAmountCustomerCurrency = internalGetNetAmountCustomerCurrency();
        builder.netAmountTransactionCurrency = internalGetNetAmountTransactionCurrency();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.paymentTerms = internalGetPaymentTerms();
        builder.paymentTermsId = internalGetPaymentTermsId();
        builder.replacementInvoiceId = internalGetReplacementInvoiceId();
        builder.reversalInvoiceId = internalGetReversalInvoiceId();
        builder.status = internalGetStatus();
        builder.summaryDocumentBillingType = internalGetSummaryDocumentBillingType();
        builder.summaryDocumentBillingTypeId = internalGetSummaryDocumentBillingTypeId();
        builder.summaryDocumentDate = internalGetSummaryDocumentDate();
        builder.summaryDocumentDDAmount = internalGetSummaryDocumentDDAmount();
        builder.summaryDocumentDueDate = internalGetSummaryDocumentDueDate();
        builder.summaryDocumentId = internalGetSummaryDocumentId();
        builder.summaryDocumentIsFullyPaid = internalGetSummaryDocumentIsFullyPaid();
        builder.summaryDocumentNumber = internalGetSummaryDocumentNumber();
        builder.summaryDocumentPaidAmount = internalGetSummaryDocumentPaidAmount();
        builder.summaryDocumentSoAReferenceNumber = internalGetSummaryDocumentSoAReferenceNumber();
        builder.summaryDocumentStatementOfAccountId =
                internalGetSummaryDocumentStatementOfAccountId();
        builder.transactionCurrencyCode = internalGetTransactionCurrencyCode();
        builder.transactionCurrencySymbol = internalGetTransactionCurrencySymbol();
        builder.type = internalGetType();
        builder.typeId = internalGetTypeId();
        builder.vATAmountCustomerCurrency = internalGetVATAmountCustomerCurrency();
        builder.vATAmountTransactionCurrency = internalGetVATAmountTransactionCurrency();
        builder.vATCountry = internalGetVATCountry();
        builder.vATCountryId = internalGetVATCountryId();
        builder.vATCountryISOCode = internalGetVATCountryISOCode();
        builder.vATCountryOpCoId = internalGetVATCountryOpCoId();
        builder.documentReference = internalGetDocumentReference();
        return builder;
    }

    /**
     * Class to build instances of {@link InvoiceSearchDetails}.
     */
    public static class Builder {
        private OptionalNullable<String> accountFullName;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<String> colCoOpCoId;
        private OptionalNullable<String> currentBillingFrequency;
        private OptionalNullable<Integer> currentBillingFrequencyId;
        private OptionalNullable<String> currentDistributionMethod;
        private OptionalNullable<Integer> currentDistributionMethodId;
        private OptionalNullable<String> customerCurrencyCode;
        private OptionalNullable<String> customerCurrencySymbol;
        private OptionalNullable<String> delCoClientNumber;
        private OptionalNullable<Integer> delCoId;
        private OptionalNullable<String> delCoOpCoId;
        private OptionalNullable<String> documentType;
        private OptionalNullable<Integer> documentTypeId;
        private OptionalNullable<String> dueDate;
        private OptionalNullable<Double> grossAmountCustomerCurrency;
        private OptionalNullable<Double> grossAmountTransactionCurrency;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> invoicedBy;
        private OptionalNullable<String> invoicedOnBehalfOf;
        private OptionalNullable<Integer> invoiceId;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<Boolean> isInternational;
        private OptionalNullable<Boolean> isNational;
        private OptionalNullable<Double> netAmountCustomerCurrency;
        private OptionalNullable<Double> netAmountTransactionCurrency;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> paymentTerms;
        private OptionalNullable<Integer> paymentTermsId;
        private OptionalNullable<Integer> replacementInvoiceId;
        private OptionalNullable<Integer> reversalInvoiceId;
        private OptionalNullable<String> status;
        private OptionalNullable<String> summaryDocumentBillingType;
        private OptionalNullable<Integer> summaryDocumentBillingTypeId;
        private OptionalNullable<String> summaryDocumentDate;
        private OptionalNullable<Double> summaryDocumentDDAmount;
        private OptionalNullable<String> summaryDocumentDueDate;
        private OptionalNullable<Integer> summaryDocumentId;
        private OptionalNullable<Boolean> summaryDocumentIsFullyPaid;
        private OptionalNullable<String> summaryDocumentNumber;
        private OptionalNullable<Double> summaryDocumentPaidAmount;
        private OptionalNullable<String> summaryDocumentSoAReferenceNumber;
        private OptionalNullable<Integer> summaryDocumentStatementOfAccountId;
        private OptionalNullable<String> transactionCurrencyCode;
        private OptionalNullable<String> transactionCurrencySymbol;
        private OptionalNullable<String> type;
        private OptionalNullable<Integer> typeId;
        private OptionalNullable<Double> vATAmountCustomerCurrency;
        private OptionalNullable<Double> vATAmountTransactionCurrency;
        private OptionalNullable<String> vATCountry;
        private OptionalNullable<Integer> vATCountryId;
        private OptionalNullable<String> vATCountryISOCode;
        private OptionalNullable<String> vATCountryOpCoId;
        private OptionalNullable<String> documentReference;
        private List<InvoiceSearchAdditionalDocument> additionalDocuments;



        /**
         * Setter for accountFullName.
         * @param  accountFullName  String value for accountFullName.
         * @return Builder
         */
        public Builder accountFullName(String accountFullName) {
            this.accountFullName = OptionalNullable.of(accountFullName);
            return this;
        }

        /**
         * UnSetter for accountFullName.
         * @return Builder
         */
        public Builder unsetAccountFullName() {
            accountFullName = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for colCoOpCoId.
         * @param  colCoOpCoId  String value for colCoOpCoId.
         * @return Builder
         */
        public Builder colCoOpCoId(String colCoOpCoId) {
            this.colCoOpCoId = OptionalNullable.of(colCoOpCoId);
            return this;
        }

        /**
         * UnSetter for colCoOpCoId.
         * @return Builder
         */
        public Builder unsetColCoOpCoId() {
            colCoOpCoId = null;
            return this;
        }

        /**
         * Setter for currentBillingFrequency.
         * @param  currentBillingFrequency  String value for currentBillingFrequency.
         * @return Builder
         */
        public Builder currentBillingFrequency(String currentBillingFrequency) {
            this.currentBillingFrequency = OptionalNullable.of(currentBillingFrequency);
            return this;
        }

        /**
         * UnSetter for currentBillingFrequency.
         * @return Builder
         */
        public Builder unsetCurrentBillingFrequency() {
            currentBillingFrequency = null;
            return this;
        }

        /**
         * Setter for currentBillingFrequencyId.
         * @param  currentBillingFrequencyId  Integer value for currentBillingFrequencyId.
         * @return Builder
         */
        public Builder currentBillingFrequencyId(Integer currentBillingFrequencyId) {
            this.currentBillingFrequencyId = OptionalNullable.of(currentBillingFrequencyId);
            return this;
        }

        /**
         * UnSetter for currentBillingFrequencyId.
         * @return Builder
         */
        public Builder unsetCurrentBillingFrequencyId() {
            currentBillingFrequencyId = null;
            return this;
        }

        /**
         * Setter for currentDistributionMethod.
         * @param  currentDistributionMethod  String value for currentDistributionMethod.
         * @return Builder
         */
        public Builder currentDistributionMethod(String currentDistributionMethod) {
            this.currentDistributionMethod = OptionalNullable.of(currentDistributionMethod);
            return this;
        }

        /**
         * UnSetter for currentDistributionMethod.
         * @return Builder
         */
        public Builder unsetCurrentDistributionMethod() {
            currentDistributionMethod = null;
            return this;
        }

        /**
         * Setter for currentDistributionMethodId.
         * @param  currentDistributionMethodId  Integer value for currentDistributionMethodId.
         * @return Builder
         */
        public Builder currentDistributionMethodId(Integer currentDistributionMethodId) {
            this.currentDistributionMethodId = OptionalNullable.of(currentDistributionMethodId);
            return this;
        }

        /**
         * UnSetter for currentDistributionMethodId.
         * @return Builder
         */
        public Builder unsetCurrentDistributionMethodId() {
            currentDistributionMethodId = null;
            return this;
        }

        /**
         * Setter for customerCurrencyCode.
         * @param  customerCurrencyCode  String value for customerCurrencyCode.
         * @return Builder
         */
        public Builder customerCurrencyCode(String customerCurrencyCode) {
            this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
            return this;
        }

        /**
         * UnSetter for customerCurrencyCode.
         * @return Builder
         */
        public Builder unsetCustomerCurrencyCode() {
            customerCurrencyCode = null;
            return this;
        }

        /**
         * Setter for customerCurrencySymbol.
         * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
         * @return Builder
         */
        public Builder customerCurrencySymbol(String customerCurrencySymbol) {
            this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for customerCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCustomerCurrencySymbol() {
            customerCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for delCoClientNumber.
         * @param  delCoClientNumber  String value for delCoClientNumber.
         * @return Builder
         */
        public Builder delCoClientNumber(String delCoClientNumber) {
            this.delCoClientNumber = OptionalNullable.of(delCoClientNumber);
            return this;
        }

        /**
         * UnSetter for delCoClientNumber.
         * @return Builder
         */
        public Builder unsetDelCoClientNumber() {
            delCoClientNumber = null;
            return this;
        }

        /**
         * Setter for delCoId.
         * @param  delCoId  Integer value for delCoId.
         * @return Builder
         */
        public Builder delCoId(Integer delCoId) {
            this.delCoId = OptionalNullable.of(delCoId);
            return this;
        }

        /**
         * UnSetter for delCoId.
         * @return Builder
         */
        public Builder unsetDelCoId() {
            delCoId = null;
            return this;
        }

        /**
         * Setter for delCoOpCoId.
         * @param  delCoOpCoId  String value for delCoOpCoId.
         * @return Builder
         */
        public Builder delCoOpCoId(String delCoOpCoId) {
            this.delCoOpCoId = OptionalNullable.of(delCoOpCoId);
            return this;
        }

        /**
         * UnSetter for delCoOpCoId.
         * @return Builder
         */
        public Builder unsetDelCoOpCoId() {
            delCoOpCoId = null;
            return this;
        }

        /**
         * Setter for documentType.
         * @param  documentType  String value for documentType.
         * @return Builder
         */
        public Builder documentType(String documentType) {
            this.documentType = OptionalNullable.of(documentType);
            return this;
        }

        /**
         * UnSetter for documentType.
         * @return Builder
         */
        public Builder unsetDocumentType() {
            documentType = null;
            return this;
        }

        /**
         * Setter for documentTypeId.
         * @param  documentTypeId  Integer value for documentTypeId.
         * @return Builder
         */
        public Builder documentTypeId(Integer documentTypeId) {
            this.documentTypeId = OptionalNullable.of(documentTypeId);
            return this;
        }

        /**
         * UnSetter for documentTypeId.
         * @return Builder
         */
        public Builder unsetDocumentTypeId() {
            documentTypeId = null;
            return this;
        }

        /**
         * Setter for dueDate.
         * @param  dueDate  String value for dueDate.
         * @return Builder
         */
        public Builder dueDate(String dueDate) {
            this.dueDate = OptionalNullable.of(dueDate);
            return this;
        }

        /**
         * UnSetter for dueDate.
         * @return Builder
         */
        public Builder unsetDueDate() {
            dueDate = null;
            return this;
        }

        /**
         * Setter for grossAmountCustomerCurrency.
         * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
         * @return Builder
         */
        public Builder grossAmountCustomerCurrency(Double grossAmountCustomerCurrency) {
            this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for grossAmountCustomerCurrency.
         * @return Builder
         */
        public Builder unsetGrossAmountCustomerCurrency() {
            grossAmountCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for grossAmountTransactionCurrency.
         * @param  grossAmountTransactionCurrency  Double value for grossAmountTransactionCurrency.
         * @return Builder
         */
        public Builder grossAmountTransactionCurrency(Double grossAmountTransactionCurrency) {
            this.grossAmountTransactionCurrency =
                    OptionalNullable.of(grossAmountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for grossAmountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetGrossAmountTransactionCurrency() {
            grossAmountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for invoicedBy.
         * @param  invoicedBy  String value for invoicedBy.
         * @return Builder
         */
        public Builder invoicedBy(String invoicedBy) {
            this.invoicedBy = OptionalNullable.of(invoicedBy);
            return this;
        }

        /**
         * UnSetter for invoicedBy.
         * @return Builder
         */
        public Builder unsetInvoicedBy() {
            invoicedBy = null;
            return this;
        }

        /**
         * Setter for invoicedOnBehalfOf.
         * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder invoicedOnBehalfOf(String invoicedOnBehalfOf) {
            this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
            return this;
        }

        /**
         * UnSetter for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder unsetInvoicedOnBehalfOf() {
            invoicedOnBehalfOf = null;
            return this;
        }

        /**
         * Setter for invoiceId.
         * @param  invoiceId  Integer value for invoiceId.
         * @return Builder
         */
        public Builder invoiceId(Integer invoiceId) {
            this.invoiceId = OptionalNullable.of(invoiceId);
            return this;
        }

        /**
         * UnSetter for invoiceId.
         * @return Builder
         */
        public Builder unsetInvoiceId() {
            invoiceId = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for isInternational.
         * @param  isInternational  Boolean value for isInternational.
         * @return Builder
         */
        public Builder isInternational(Boolean isInternational) {
            this.isInternational = OptionalNullable.of(isInternational);
            return this;
        }

        /**
         * UnSetter for isInternational.
         * @return Builder
         */
        public Builder unsetIsInternational() {
            isInternational = null;
            return this;
        }

        /**
         * Setter for isNational.
         * @param  isNational  Boolean value for isNational.
         * @return Builder
         */
        public Builder isNational(Boolean isNational) {
            this.isNational = OptionalNullable.of(isNational);
            return this;
        }

        /**
         * UnSetter for isNational.
         * @return Builder
         */
        public Builder unsetIsNational() {
            isNational = null;
            return this;
        }

        /**
         * Setter for netAmountCustomerCurrency.
         * @param  netAmountCustomerCurrency  Double value for netAmountCustomerCurrency.
         * @return Builder
         */
        public Builder netAmountCustomerCurrency(Double netAmountCustomerCurrency) {
            this.netAmountCustomerCurrency = OptionalNullable.of(netAmountCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for netAmountCustomerCurrency.
         * @return Builder
         */
        public Builder unsetNetAmountCustomerCurrency() {
            netAmountCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for netAmountTransactionCurrency.
         * @param  netAmountTransactionCurrency  Double value for netAmountTransactionCurrency.
         * @return Builder
         */
        public Builder netAmountTransactionCurrency(Double netAmountTransactionCurrency) {
            this.netAmountTransactionCurrency = OptionalNullable.of(netAmountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for netAmountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetNetAmountTransactionCurrency() {
            netAmountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for paymentTerms.
         * @param  paymentTerms  String value for paymentTerms.
         * @return Builder
         */
        public Builder paymentTerms(String paymentTerms) {
            this.paymentTerms = OptionalNullable.of(paymentTerms);
            return this;
        }

        /**
         * UnSetter for paymentTerms.
         * @return Builder
         */
        public Builder unsetPaymentTerms() {
            paymentTerms = null;
            return this;
        }

        /**
         * Setter for paymentTermsId.
         * @param  paymentTermsId  Integer value for paymentTermsId.
         * @return Builder
         */
        public Builder paymentTermsId(Integer paymentTermsId) {
            this.paymentTermsId = OptionalNullable.of(paymentTermsId);
            return this;
        }

        /**
         * UnSetter for paymentTermsId.
         * @return Builder
         */
        public Builder unsetPaymentTermsId() {
            paymentTermsId = null;
            return this;
        }

        /**
         * Setter for replacementInvoiceId.
         * @param  replacementInvoiceId  Integer value for replacementInvoiceId.
         * @return Builder
         */
        public Builder replacementInvoiceId(Integer replacementInvoiceId) {
            this.replacementInvoiceId = OptionalNullable.of(replacementInvoiceId);
            return this;
        }

        /**
         * UnSetter for replacementInvoiceId.
         * @return Builder
         */
        public Builder unsetReplacementInvoiceId() {
            replacementInvoiceId = null;
            return this;
        }

        /**
         * Setter for reversalInvoiceId.
         * @param  reversalInvoiceId  Integer value for reversalInvoiceId.
         * @return Builder
         */
        public Builder reversalInvoiceId(Integer reversalInvoiceId) {
            this.reversalInvoiceId = OptionalNullable.of(reversalInvoiceId);
            return this;
        }

        /**
         * UnSetter for reversalInvoiceId.
         * @return Builder
         */
        public Builder unsetReversalInvoiceId() {
            reversalInvoiceId = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for summaryDocumentBillingType.
         * @param  summaryDocumentBillingType  String value for summaryDocumentBillingType.
         * @return Builder
         */
        public Builder summaryDocumentBillingType(String summaryDocumentBillingType) {
            this.summaryDocumentBillingType = OptionalNullable.of(summaryDocumentBillingType);
            return this;
        }

        /**
         * UnSetter for summaryDocumentBillingType.
         * @return Builder
         */
        public Builder unsetSummaryDocumentBillingType() {
            summaryDocumentBillingType = null;
            return this;
        }

        /**
         * Setter for summaryDocumentBillingTypeId.
         * @param  summaryDocumentBillingTypeId  Integer value for summaryDocumentBillingTypeId.
         * @return Builder
         */
        public Builder summaryDocumentBillingTypeId(Integer summaryDocumentBillingTypeId) {
            this.summaryDocumentBillingTypeId = OptionalNullable.of(summaryDocumentBillingTypeId);
            return this;
        }

        /**
         * UnSetter for summaryDocumentBillingTypeId.
         * @return Builder
         */
        public Builder unsetSummaryDocumentBillingTypeId() {
            summaryDocumentBillingTypeId = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDate.
         * @param  summaryDocumentDate  String value for summaryDocumentDate.
         * @return Builder
         */
        public Builder summaryDocumentDate(String summaryDocumentDate) {
            this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDate.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDate() {
            summaryDocumentDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDDAmount.
         * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
         * @return Builder
         */
        public Builder summaryDocumentDDAmount(Double summaryDocumentDDAmount) {
            this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDDAmount.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDDAmount() {
            summaryDocumentDDAmount = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDueDate.
         * @param  summaryDocumentDueDate  String value for summaryDocumentDueDate.
         * @return Builder
         */
        public Builder summaryDocumentDueDate(String summaryDocumentDueDate) {
            this.summaryDocumentDueDate = OptionalNullable.of(summaryDocumentDueDate);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDueDate.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDueDate() {
            summaryDocumentDueDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentId.
         * @param  summaryDocumentId  Integer value for summaryDocumentId.
         * @return Builder
         */
        public Builder summaryDocumentId(Integer summaryDocumentId) {
            this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
            return this;
        }

        /**
         * UnSetter for summaryDocumentId.
         * @return Builder
         */
        public Builder unsetSummaryDocumentId() {
            summaryDocumentId = null;
            return this;
        }

        /**
         * Setter for summaryDocumentIsFullyPaid.
         * @param  summaryDocumentIsFullyPaid  Boolean value for summaryDocumentIsFullyPaid.
         * @return Builder
         */
        public Builder summaryDocumentIsFullyPaid(Boolean summaryDocumentIsFullyPaid) {
            this.summaryDocumentIsFullyPaid = OptionalNullable.of(summaryDocumentIsFullyPaid);
            return this;
        }

        /**
         * UnSetter for summaryDocumentIsFullyPaid.
         * @return Builder
         */
        public Builder unsetSummaryDocumentIsFullyPaid() {
            summaryDocumentIsFullyPaid = null;
            return this;
        }

        /**
         * Setter for summaryDocumentNumber.
         * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
         * @return Builder
         */
        public Builder summaryDocumentNumber(String summaryDocumentNumber) {
            this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
            return this;
        }

        /**
         * UnSetter for summaryDocumentNumber.
         * @return Builder
         */
        public Builder unsetSummaryDocumentNumber() {
            summaryDocumentNumber = null;
            return this;
        }

        /**
         * Setter for summaryDocumentPaidAmount.
         * @param  summaryDocumentPaidAmount  Double value for summaryDocumentPaidAmount.
         * @return Builder
         */
        public Builder summaryDocumentPaidAmount(Double summaryDocumentPaidAmount) {
            this.summaryDocumentPaidAmount = OptionalNullable.of(summaryDocumentPaidAmount);
            return this;
        }

        /**
         * UnSetter for summaryDocumentPaidAmount.
         * @return Builder
         */
        public Builder unsetSummaryDocumentPaidAmount() {
            summaryDocumentPaidAmount = null;
            return this;
        }

        /**
         * Setter for summaryDocumentSoAReferenceNumber.
         * @param  summaryDocumentSoAReferenceNumber  String value for
         *         summaryDocumentSoAReferenceNumber.
         * @return Builder
         */
        public Builder summaryDocumentSoAReferenceNumber(
                String summaryDocumentSoAReferenceNumber) {
            this.summaryDocumentSoAReferenceNumber =
                    OptionalNullable.of(summaryDocumentSoAReferenceNumber);
            return this;
        }

        /**
         * UnSetter for summaryDocumentSoAReferenceNumber.
         * @return Builder
         */
        public Builder unsetSummaryDocumentSoAReferenceNumber() {
            summaryDocumentSoAReferenceNumber = null;
            return this;
        }

        /**
         * Setter for summaryDocumentStatementOfAccountId.
         * @param  summaryDocumentStatementOfAccountId  Integer value for
         *         summaryDocumentStatementOfAccountId.
         * @return Builder
         */
        public Builder summaryDocumentStatementOfAccountId(
                Integer summaryDocumentStatementOfAccountId) {
            this.summaryDocumentStatementOfAccountId =
                    OptionalNullable.of(summaryDocumentStatementOfAccountId);
            return this;
        }

        /**
         * UnSetter for summaryDocumentStatementOfAccountId.
         * @return Builder
         */
        public Builder unsetSummaryDocumentStatementOfAccountId() {
            summaryDocumentStatementOfAccountId = null;
            return this;
        }

        /**
         * Setter for transactionCurrencyCode.
         * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
         * @return Builder
         */
        public Builder transactionCurrencyCode(String transactionCurrencyCode) {
            this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
            return this;
        }

        /**
         * UnSetter for transactionCurrencyCode.
         * @return Builder
         */
        public Builder unsetTransactionCurrencyCode() {
            transactionCurrencyCode = null;
            return this;
        }

        /**
         * Setter for transactionCurrencySymbol.
         * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder transactionCurrencySymbol(String transactionCurrencySymbol) {
            this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder unsetTransactionCurrencySymbol() {
            transactionCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Setter for typeId.
         * @param  typeId  Integer value for typeId.
         * @return Builder
         */
        public Builder typeId(Integer typeId) {
            this.typeId = OptionalNullable.of(typeId);
            return this;
        }

        /**
         * UnSetter for typeId.
         * @return Builder
         */
        public Builder unsetTypeId() {
            typeId = null;
            return this;
        }

        /**
         * Setter for vATAmountCustomerCurrency.
         * @param  vATAmountCustomerCurrency  Double value for vATAmountCustomerCurrency.
         * @return Builder
         */
        public Builder vATAmountCustomerCurrency(Double vATAmountCustomerCurrency) {
            this.vATAmountCustomerCurrency = OptionalNullable.of(vATAmountCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for vATAmountCustomerCurrency.
         * @return Builder
         */
        public Builder unsetVATAmountCustomerCurrency() {
            vATAmountCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for vATAmountTransactionCurrency.
         * @param  vATAmountTransactionCurrency  Double value for vATAmountTransactionCurrency.
         * @return Builder
         */
        public Builder vATAmountTransactionCurrency(Double vATAmountTransactionCurrency) {
            this.vATAmountTransactionCurrency = OptionalNullable.of(vATAmountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for vATAmountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetVATAmountTransactionCurrency() {
            vATAmountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for vATCountry.
         * @param  vATCountry  String value for vATCountry.
         * @return Builder
         */
        public Builder vATCountry(String vATCountry) {
            this.vATCountry = OptionalNullable.of(vATCountry);
            return this;
        }

        /**
         * UnSetter for vATCountry.
         * @return Builder
         */
        public Builder unsetVATCountry() {
            vATCountry = null;
            return this;
        }

        /**
         * Setter for vATCountryId.
         * @param  vATCountryId  Integer value for vATCountryId.
         * @return Builder
         */
        public Builder vATCountryId(Integer vATCountryId) {
            this.vATCountryId = OptionalNullable.of(vATCountryId);
            return this;
        }

        /**
         * UnSetter for vATCountryId.
         * @return Builder
         */
        public Builder unsetVATCountryId() {
            vATCountryId = null;
            return this;
        }

        /**
         * Setter for vATCountryISOCode.
         * @param  vATCountryISOCode  String value for vATCountryISOCode.
         * @return Builder
         */
        public Builder vATCountryISOCode(String vATCountryISOCode) {
            this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
            return this;
        }

        /**
         * UnSetter for vATCountryISOCode.
         * @return Builder
         */
        public Builder unsetVATCountryISOCode() {
            vATCountryISOCode = null;
            return this;
        }

        /**
         * Setter for vATCountryOpCoId.
         * @param  vATCountryOpCoId  String value for vATCountryOpCoId.
         * @return Builder
         */
        public Builder vATCountryOpCoId(String vATCountryOpCoId) {
            this.vATCountryOpCoId = OptionalNullable.of(vATCountryOpCoId);
            return this;
        }

        /**
         * UnSetter for vATCountryOpCoId.
         * @return Builder
         */
        public Builder unsetVATCountryOpCoId() {
            vATCountryOpCoId = null;
            return this;
        }

        /**
         * Setter for documentReference.
         * @param  documentReference  String value for documentReference.
         * @return Builder
         */
        public Builder documentReference(String documentReference) {
            this.documentReference = OptionalNullable.of(documentReference);
            return this;
        }

        /**
         * UnSetter for documentReference.
         * @return Builder
         */
        public Builder unsetDocumentReference() {
            documentReference = null;
            return this;
        }

        /**
         * Setter for additionalDocuments.
         * @param  additionalDocuments  List of InvoiceSearchAdditionalDocument value for
         *         additionalDocuments.
         * @return Builder
         */
        public Builder additionalDocuments(
                List<InvoiceSearchAdditionalDocument> additionalDocuments) {
            this.additionalDocuments = additionalDocuments;
            return this;
        }

        /**
         * Builds a new {@link InvoiceSearchDetails} object using the set fields.
         * @return {@link InvoiceSearchDetails}
         */
        public InvoiceSearchDetails build() {
            return new InvoiceSearchDetails(accountFullName, accountId, accountNumber,
                    accountShortName, colCoId, colCoOpCoId, currentBillingFrequency,
                    currentBillingFrequencyId, currentDistributionMethod,
                    currentDistributionMethodId, customerCurrencyCode, customerCurrencySymbol,
                    delCoClientNumber, delCoId, delCoOpCoId, documentType, documentTypeId, dueDate,
                    grossAmountCustomerCurrency, grossAmountTransactionCurrency, invoiceDate,
                    invoicedBy, invoicedOnBehalfOf, invoiceId, invoiceNumber, isInternational,
                    isNational, netAmountCustomerCurrency, netAmountTransactionCurrency, payerId,
                    payerNumber, paymentTerms, paymentTermsId, replacementInvoiceId,
                    reversalInvoiceId, status, summaryDocumentBillingType,
                    summaryDocumentBillingTypeId, summaryDocumentDate, summaryDocumentDDAmount,
                    summaryDocumentDueDate, summaryDocumentId, summaryDocumentIsFullyPaid,
                    summaryDocumentNumber, summaryDocumentPaidAmount,
                    summaryDocumentSoAReferenceNumber, summaryDocumentStatementOfAccountId,
                    transactionCurrencyCode, transactionCurrencySymbol, type, typeId,
                    vATAmountCustomerCurrency, vATAmountTransactionCurrency, vATCountry,
                    vATCountryId, vATCountryISOCode, vATCountryOpCoId, documentReference,
                    additionalDocuments);
        }
    }
}
