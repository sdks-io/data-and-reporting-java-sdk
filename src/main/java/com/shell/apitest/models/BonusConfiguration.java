/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for BonusConfiguration type.
 */
public class BonusConfiguration {
    private OptionalNullable<Integer> pricingAccountId;
    private OptionalNullable<String> pricingAccountNumber;
    private OptionalNullable<String> pricingAccountShortName;
    private OptionalNullable<String> pricingAccountFullName;
    private OptionalNullable<Integer> feeRuleId;
    private OptionalNullable<String> feeRuleDescription;
    private OptionalNullable<String> feeRuleDateEffective;
    private OptionalNullable<String> feeRuleDateTerminated;
    private OptionalNullable<String> bonusPaidTo;
    private OptionalNullable<Integer> bonusPaidToAccountId;
    private OptionalNullable<String> bonusPaidToAccountNumber;
    private OptionalNullable<String> bonusPaidToAccountShortName;
    private OptionalNullable<String> bonusPaidToAccountFullName;
    private OptionalNullable<String> frequency;
    private OptionalNullable<String> nextCalculationDate;
    private OptionalNullable<String> previousCalculatedDate;
    private OptionalNullable<String> feeRuleBasis;
    private OptionalNullable<String> feeRuleCurrencyCode;
    private OptionalNullable<String> feeRuleCurrencySymbol;
    private OptionalNullable<String> feeRuleAvailableFrom;
    private OptionalNullable<String> feeRuleAvailableTo;
    private List<FeeRuleLocation> feeRuleLocations;
    private List<FeeRuleTier> feeRuleTiers;
    private List<AssociatedAccount> associatedAccounts;
    private List<FeeRuleProduct> feeRuleProducts;

    /**
     * Default constructor.
     */
    public BonusConfiguration() {
    }

    /**
     * Initialization constructor.
     * @param  pricingAccountId  Integer value for pricingAccountId.
     * @param  pricingAccountNumber  String value for pricingAccountNumber.
     * @param  pricingAccountShortName  String value for pricingAccountShortName.
     * @param  pricingAccountFullName  String value for pricingAccountFullName.
     * @param  feeRuleId  Integer value for feeRuleId.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  feeRuleDateEffective  String value for feeRuleDateEffective.
     * @param  feeRuleDateTerminated  String value for feeRuleDateTerminated.
     * @param  bonusPaidTo  String value for bonusPaidTo.
     * @param  bonusPaidToAccountId  Integer value for bonusPaidToAccountId.
     * @param  bonusPaidToAccountNumber  String value for bonusPaidToAccountNumber.
     * @param  bonusPaidToAccountShortName  String value for bonusPaidToAccountShortName.
     * @param  bonusPaidToAccountFullName  String value for bonusPaidToAccountFullName.
     * @param  frequency  String value for frequency.
     * @param  nextCalculationDate  String value for nextCalculationDate.
     * @param  previousCalculatedDate  String value for previousCalculatedDate.
     * @param  feeRuleBasis  String value for feeRuleBasis.
     * @param  feeRuleCurrencyCode  String value for feeRuleCurrencyCode.
     * @param  feeRuleCurrencySymbol  String value for feeRuleCurrencySymbol.
     * @param  feeRuleAvailableFrom  String value for feeRuleAvailableFrom.
     * @param  feeRuleAvailableTo  String value for feeRuleAvailableTo.
     * @param  feeRuleLocations  List of FeeRuleLocation value for feeRuleLocations.
     * @param  feeRuleTiers  List of FeeRuleTier value for feeRuleTiers.
     * @param  associatedAccounts  List of AssociatedAccount value for associatedAccounts.
     * @param  feeRuleProducts  List of FeeRuleProduct value for feeRuleProducts.
     */
    public BonusConfiguration(
            Integer pricingAccountId,
            String pricingAccountNumber,
            String pricingAccountShortName,
            String pricingAccountFullName,
            Integer feeRuleId,
            String feeRuleDescription,
            String feeRuleDateEffective,
            String feeRuleDateTerminated,
            String bonusPaidTo,
            Integer bonusPaidToAccountId,
            String bonusPaidToAccountNumber,
            String bonusPaidToAccountShortName,
            String bonusPaidToAccountFullName,
            String frequency,
            String nextCalculationDate,
            String previousCalculatedDate,
            String feeRuleBasis,
            String feeRuleCurrencyCode,
            String feeRuleCurrencySymbol,
            String feeRuleAvailableFrom,
            String feeRuleAvailableTo,
            List<FeeRuleLocation> feeRuleLocations,
            List<FeeRuleTier> feeRuleTiers,
            List<AssociatedAccount> associatedAccounts,
            List<FeeRuleProduct> feeRuleProducts) {
        this.pricingAccountId = OptionalNullable.of(pricingAccountId);
        this.pricingAccountNumber = OptionalNullable.of(pricingAccountNumber);
        this.pricingAccountShortName = OptionalNullable.of(pricingAccountShortName);
        this.pricingAccountFullName = OptionalNullable.of(pricingAccountFullName);
        this.feeRuleId = OptionalNullable.of(feeRuleId);
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
        this.feeRuleDateEffective = OptionalNullable.of(feeRuleDateEffective);
        this.feeRuleDateTerminated = OptionalNullable.of(feeRuleDateTerminated);
        this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
        this.bonusPaidToAccountId = OptionalNullable.of(bonusPaidToAccountId);
        this.bonusPaidToAccountNumber = OptionalNullable.of(bonusPaidToAccountNumber);
        this.bonusPaidToAccountShortName = OptionalNullable.of(bonusPaidToAccountShortName);
        this.bonusPaidToAccountFullName = OptionalNullable.of(bonusPaidToAccountFullName);
        this.frequency = OptionalNullable.of(frequency);
        this.nextCalculationDate = OptionalNullable.of(nextCalculationDate);
        this.previousCalculatedDate = OptionalNullable.of(previousCalculatedDate);
        this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
        this.feeRuleCurrencyCode = OptionalNullable.of(feeRuleCurrencyCode);
        this.feeRuleCurrencySymbol = OptionalNullable.of(feeRuleCurrencySymbol);
        this.feeRuleAvailableFrom = OptionalNullable.of(feeRuleAvailableFrom);
        this.feeRuleAvailableTo = OptionalNullable.of(feeRuleAvailableTo);
        this.feeRuleLocations = feeRuleLocations;
        this.feeRuleTiers = feeRuleTiers;
        this.associatedAccounts = associatedAccounts;
        this.feeRuleProducts = feeRuleProducts;
    }

    /**
     * Initialization constructor.
     * @param  pricingAccountId  Integer value for pricingAccountId.
     * @param  pricingAccountNumber  String value for pricingAccountNumber.
     * @param  pricingAccountShortName  String value for pricingAccountShortName.
     * @param  pricingAccountFullName  String value for pricingAccountFullName.
     * @param  feeRuleId  Integer value for feeRuleId.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  feeRuleDateEffective  String value for feeRuleDateEffective.
     * @param  feeRuleDateTerminated  String value for feeRuleDateTerminated.
     * @param  bonusPaidTo  String value for bonusPaidTo.
     * @param  bonusPaidToAccountId  Integer value for bonusPaidToAccountId.
     * @param  bonusPaidToAccountNumber  String value for bonusPaidToAccountNumber.
     * @param  bonusPaidToAccountShortName  String value for bonusPaidToAccountShortName.
     * @param  bonusPaidToAccountFullName  String value for bonusPaidToAccountFullName.
     * @param  frequency  String value for frequency.
     * @param  nextCalculationDate  String value for nextCalculationDate.
     * @param  previousCalculatedDate  String value for previousCalculatedDate.
     * @param  feeRuleBasis  String value for feeRuleBasis.
     * @param  feeRuleCurrencyCode  String value for feeRuleCurrencyCode.
     * @param  feeRuleCurrencySymbol  String value for feeRuleCurrencySymbol.
     * @param  feeRuleAvailableFrom  String value for feeRuleAvailableFrom.
     * @param  feeRuleAvailableTo  String value for feeRuleAvailableTo.
     * @param  feeRuleLocations  List of FeeRuleLocation value for feeRuleLocations.
     * @param  feeRuleTiers  List of FeeRuleTier value for feeRuleTiers.
     * @param  associatedAccounts  List of AssociatedAccount value for associatedAccounts.
     * @param  feeRuleProducts  List of FeeRuleProduct value for feeRuleProducts.
     */

    protected BonusConfiguration(OptionalNullable<Integer> pricingAccountId,
            OptionalNullable<String> pricingAccountNumber,
            OptionalNullable<String> pricingAccountShortName,
            OptionalNullable<String> pricingAccountFullName, OptionalNullable<Integer> feeRuleId,
            OptionalNullable<String> feeRuleDescription,
            OptionalNullable<String> feeRuleDateEffective,
            OptionalNullable<String> feeRuleDateTerminated, OptionalNullable<String> bonusPaidTo,
            OptionalNullable<Integer> bonusPaidToAccountId,
            OptionalNullable<String> bonusPaidToAccountNumber,
            OptionalNullable<String> bonusPaidToAccountShortName,
            OptionalNullable<String> bonusPaidToAccountFullName, OptionalNullable<String> frequency,
            OptionalNullable<String> nextCalculationDate,
            OptionalNullable<String> previousCalculatedDate, OptionalNullable<String> feeRuleBasis,
            OptionalNullable<String> feeRuleCurrencyCode,
            OptionalNullable<String> feeRuleCurrencySymbol,
            OptionalNullable<String> feeRuleAvailableFrom,
            OptionalNullable<String> feeRuleAvailableTo, List<FeeRuleLocation> feeRuleLocations,
            List<FeeRuleTier> feeRuleTiers, List<AssociatedAccount> associatedAccounts,
            List<FeeRuleProduct> feeRuleProducts) {
        this.pricingAccountId = pricingAccountId;
        this.pricingAccountNumber = pricingAccountNumber;
        this.pricingAccountShortName = pricingAccountShortName;
        this.pricingAccountFullName = pricingAccountFullName;
        this.feeRuleId = feeRuleId;
        this.feeRuleDescription = feeRuleDescription;
        this.feeRuleDateEffective = feeRuleDateEffective;
        this.feeRuleDateTerminated = feeRuleDateTerminated;
        this.bonusPaidTo = bonusPaidTo;
        this.bonusPaidToAccountId = bonusPaidToAccountId;
        this.bonusPaidToAccountNumber = bonusPaidToAccountNumber;
        this.bonusPaidToAccountShortName = bonusPaidToAccountShortName;
        this.bonusPaidToAccountFullName = bonusPaidToAccountFullName;
        this.frequency = frequency;
        this.nextCalculationDate = nextCalculationDate;
        this.previousCalculatedDate = previousCalculatedDate;
        this.feeRuleBasis = feeRuleBasis;
        this.feeRuleCurrencyCode = feeRuleCurrencyCode;
        this.feeRuleCurrencySymbol = feeRuleCurrencySymbol;
        this.feeRuleAvailableFrom = feeRuleAvailableFrom;
        this.feeRuleAvailableTo = feeRuleAvailableTo;
        this.feeRuleLocations = feeRuleLocations;
        this.feeRuleTiers = feeRuleTiers;
        this.associatedAccounts = associatedAccounts;
        this.feeRuleProducts = feeRuleProducts;
    }

    /**
     * Internal Getter for PricingAccountId.
     * Account identifier of the Pricing Account associated with the Payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PricingAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPricingAccountId() {
        return this.pricingAccountId;
    }

    /**
     * Getter for PricingAccountId.
     * Account identifier of the Pricing Account associated with the Payer.
     * @return Returns the Integer
     */
    public Integer getPricingAccountId() {
        return OptionalNullable.getFrom(pricingAccountId);
    }

    /**
     * Setter for PricingAccountId.
     * Account identifier of the Pricing Account associated with the Payer.
     * @param pricingAccountId Value for Integer
     */
    @JsonSetter("PricingAccountId")
    public void setPricingAccountId(Integer pricingAccountId) {
        this.pricingAccountId = OptionalNullable.of(pricingAccountId);
    }

    /**
     * UnSetter for PricingAccountId.
     * Account identifier of the Pricing Account associated with the Payer.
     */
    public void unsetPricingAccountId() {
        pricingAccountId = null;
    }

    /**
     * Internal Getter for PricingAccountNumber.
     * Account number of the Pricing Account associated with the Payer.
     * @return Returns the Internal String
     */
    @JsonGetter("PricingAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPricingAccountNumber() {
        return this.pricingAccountNumber;
    }

    /**
     * Getter for PricingAccountNumber.
     * Account number of the Pricing Account associated with the Payer.
     * @return Returns the String
     */
    public String getPricingAccountNumber() {
        return OptionalNullable.getFrom(pricingAccountNumber);
    }

    /**
     * Setter for PricingAccountNumber.
     * Account number of the Pricing Account associated with the Payer.
     * @param pricingAccountNumber Value for String
     */
    @JsonSetter("PricingAccountNumber")
    public void setPricingAccountNumber(String pricingAccountNumber) {
        this.pricingAccountNumber = OptionalNullable.of(pricingAccountNumber);
    }

    /**
     * UnSetter for PricingAccountNumber.
     * Account number of the Pricing Account associated with the Payer.
     */
    public void unsetPricingAccountNumber() {
        pricingAccountNumber = null;
    }

    /**
     * Internal Getter for PricingAccountShortName.
     * Short name of the Pricing Account associated with the Payer.
     * @return Returns the Internal String
     */
    @JsonGetter("PricingAccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPricingAccountShortName() {
        return this.pricingAccountShortName;
    }

    /**
     * Getter for PricingAccountShortName.
     * Short name of the Pricing Account associated with the Payer.
     * @return Returns the String
     */
    public String getPricingAccountShortName() {
        return OptionalNullable.getFrom(pricingAccountShortName);
    }

    /**
     * Setter for PricingAccountShortName.
     * Short name of the Pricing Account associated with the Payer.
     * @param pricingAccountShortName Value for String
     */
    @JsonSetter("PricingAccountShortName")
    public void setPricingAccountShortName(String pricingAccountShortName) {
        this.pricingAccountShortName = OptionalNullable.of(pricingAccountShortName);
    }

    /**
     * UnSetter for PricingAccountShortName.
     * Short name of the Pricing Account associated with the Payer.
     */
    public void unsetPricingAccountShortName() {
        pricingAccountShortName = null;
    }

    /**
     * Internal Getter for PricingAccountFullName.
     * Full name of the Pricing Account associated with the Payer.
     * @return Returns the Internal String
     */
    @JsonGetter("PricingAccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPricingAccountFullName() {
        return this.pricingAccountFullName;
    }

    /**
     * Getter for PricingAccountFullName.
     * Full name of the Pricing Account associated with the Payer.
     * @return Returns the String
     */
    public String getPricingAccountFullName() {
        return OptionalNullable.getFrom(pricingAccountFullName);
    }

    /**
     * Setter for PricingAccountFullName.
     * Full name of the Pricing Account associated with the Payer.
     * @param pricingAccountFullName Value for String
     */
    @JsonSetter("PricingAccountFullName")
    public void setPricingAccountFullName(String pricingAccountFullName) {
        this.pricingAccountFullName = OptionalNullable.of(pricingAccountFullName);
    }

    /**
     * UnSetter for PricingAccountFullName.
     * Full name of the Pricing Account associated with the Payer.
     */
    public void unsetPricingAccountFullName() {
        pricingAccountFullName = null;
    }

    /**
     * Internal Getter for FeeRuleId.
     * Bonus or association bonus configuration identifier that is associated to the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeRuleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeRuleId() {
        return this.feeRuleId;
    }

    /**
     * Getter for FeeRuleId.
     * Bonus or association bonus configuration identifier that is associated to the payer.
     * @return Returns the Integer
     */
    public Integer getFeeRuleId() {
        return OptionalNullable.getFrom(feeRuleId);
    }

    /**
     * Setter for FeeRuleId.
     * Bonus or association bonus configuration identifier that is associated to the payer.
     * @param feeRuleId Value for Integer
     */
    @JsonSetter("FeeRuleId")
    public void setFeeRuleId(Integer feeRuleId) {
        this.feeRuleId = OptionalNullable.of(feeRuleId);
    }

    /**
     * UnSetter for FeeRuleId.
     * Bonus or association bonus configuration identifier that is associated to the payer.
     */
    public void unsetFeeRuleId() {
        feeRuleId = null;
    }

    /**
     * Internal Getter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the payer.
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleDescription() {
        return this.feeRuleDescription;
    }

    /**
     * Getter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the payer.
     * @return Returns the String
     */
    public String getFeeRuleDescription() {
        return OptionalNullable.getFrom(feeRuleDescription);
    }

    /**
     * Setter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the payer.
     * @param feeRuleDescription Value for String
     */
    @JsonSetter("FeeRuleDescription")
    public void setFeeRuleDescription(String feeRuleDescription) {
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
    }

    /**
     * UnSetter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the payer.
     */
    public void unsetFeeRuleDescription() {
        feeRuleDescription = null;
    }

    /**
     * Internal Getter for FeeRuleDateEffective.
     * The bonus or association bonus configuration becomes effective on the payer from this date.
     * Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleDateEffective")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleDateEffective() {
        return this.feeRuleDateEffective;
    }

    /**
     * Getter for FeeRuleDateEffective.
     * The bonus or association bonus configuration becomes effective on the payer from this date.
     * Format: YYYYMMDD
     * @return Returns the String
     */
    public String getFeeRuleDateEffective() {
        return OptionalNullable.getFrom(feeRuleDateEffective);
    }

    /**
     * Setter for FeeRuleDateEffective.
     * The bonus or association bonus configuration becomes effective on the payer from this date.
     * Format: YYYYMMDD
     * @param feeRuleDateEffective Value for String
     */
    @JsonSetter("FeeRuleDateEffective")
    public void setFeeRuleDateEffective(String feeRuleDateEffective) {
        this.feeRuleDateEffective = OptionalNullable.of(feeRuleDateEffective);
    }

    /**
     * UnSetter for FeeRuleDateEffective.
     * The bonus or association bonus configuration becomes effective on the payer from this date.
     * Format: YYYYMMDD
     */
    public void unsetFeeRuleDateEffective() {
        feeRuleDateEffective = null;
    }

    /**
     * Internal Getter for FeeRuleDateTerminated.
     * The bonus or association bonus configuration is terminated for the payer on this date.
     * Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleDateTerminated")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleDateTerminated() {
        return this.feeRuleDateTerminated;
    }

    /**
     * Getter for FeeRuleDateTerminated.
     * The bonus or association bonus configuration is terminated for the payer on this date.
     * Format: YYYYMMDD
     * @return Returns the String
     */
    public String getFeeRuleDateTerminated() {
        return OptionalNullable.getFrom(feeRuleDateTerminated);
    }

    /**
     * Setter for FeeRuleDateTerminated.
     * The bonus or association bonus configuration is terminated for the payer on this date.
     * Format: YYYYMMDD
     * @param feeRuleDateTerminated Value for String
     */
    @JsonSetter("FeeRuleDateTerminated")
    public void setFeeRuleDateTerminated(String feeRuleDateTerminated) {
        this.feeRuleDateTerminated = OptionalNullable.of(feeRuleDateTerminated);
    }

    /**
     * UnSetter for FeeRuleDateTerminated.
     * The bonus or association bonus configuration is terminated for the payer on this date.
     * Format: YYYYMMDD
     */
    public void unsetFeeRuleDateTerminated() {
        feeRuleDateTerminated = null;
    }

    /**
     * Internal Getter for BonusPaidTo.
     * Configuration to specify how the bonus is paid. Format: ID-Description Example: 1-Pay to
     * Payer 2-Pay to invoice levels before the payer 3-Pay to specific customer 4-Pay to
     * Association Customer 5-Pay to Associated Customers
     * @return Returns the Internal String
     */
    @JsonGetter("BonusPaidTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBonusPaidTo() {
        return this.bonusPaidTo;
    }

    /**
     * Getter for BonusPaidTo.
     * Configuration to specify how the bonus is paid. Format: ID-Description Example: 1-Pay to
     * Payer 2-Pay to invoice levels before the payer 3-Pay to specific customer 4-Pay to
     * Association Customer 5-Pay to Associated Customers
     * @return Returns the String
     */
    public String getBonusPaidTo() {
        return OptionalNullable.getFrom(bonusPaidTo);
    }

    /**
     * Setter for BonusPaidTo.
     * Configuration to specify how the bonus is paid. Format: ID-Description Example: 1-Pay to
     * Payer 2-Pay to invoice levels before the payer 3-Pay to specific customer 4-Pay to
     * Association Customer 5-Pay to Associated Customers
     * @param bonusPaidTo Value for String
     */
    @JsonSetter("BonusPaidTo")
    public void setBonusPaidTo(String bonusPaidTo) {
        this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
    }

    /**
     * UnSetter for BonusPaidTo.
     * Configuration to specify how the bonus is paid. Format: ID-Description Example: 1-Pay to
     * Payer 2-Pay to invoice levels before the payer 3-Pay to specific customer 4-Pay to
     * Association Customer 5-Pay to Associated Customers
     */
    public void unsetBonusPaidTo() {
        bonusPaidTo = null;
    }

    /**
     * Internal Getter for BonusPaidToAccountId.
     * Account identifier of the specific account to which the bonus is paid back
     * @return Returns the Internal Integer
     */
    @JsonGetter("BonusPaidToAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBonusPaidToAccountId() {
        return this.bonusPaidToAccountId;
    }

    /**
     * Getter for BonusPaidToAccountId.
     * Account identifier of the specific account to which the bonus is paid back
     * @return Returns the Integer
     */
    public Integer getBonusPaidToAccountId() {
        return OptionalNullable.getFrom(bonusPaidToAccountId);
    }

    /**
     * Setter for BonusPaidToAccountId.
     * Account identifier of the specific account to which the bonus is paid back
     * @param bonusPaidToAccountId Value for Integer
     */
    @JsonSetter("BonusPaidToAccountId")
    public void setBonusPaidToAccountId(Integer bonusPaidToAccountId) {
        this.bonusPaidToAccountId = OptionalNullable.of(bonusPaidToAccountId);
    }

    /**
     * UnSetter for BonusPaidToAccountId.
     * Account identifier of the specific account to which the bonus is paid back
     */
    public void unsetBonusPaidToAccountId() {
        bonusPaidToAccountId = null;
    }

    /**
     * Internal Getter for BonusPaidToAccountNumber.
     * Account number of the specific account to which the bonus is paid back
     * @return Returns the Internal String
     */
    @JsonGetter("BonusPaidToAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBonusPaidToAccountNumber() {
        return this.bonusPaidToAccountNumber;
    }

    /**
     * Getter for BonusPaidToAccountNumber.
     * Account number of the specific account to which the bonus is paid back
     * @return Returns the String
     */
    public String getBonusPaidToAccountNumber() {
        return OptionalNullable.getFrom(bonusPaidToAccountNumber);
    }

    /**
     * Setter for BonusPaidToAccountNumber.
     * Account number of the specific account to which the bonus is paid back
     * @param bonusPaidToAccountNumber Value for String
     */
    @JsonSetter("BonusPaidToAccountNumber")
    public void setBonusPaidToAccountNumber(String bonusPaidToAccountNumber) {
        this.bonusPaidToAccountNumber = OptionalNullable.of(bonusPaidToAccountNumber);
    }

    /**
     * UnSetter for BonusPaidToAccountNumber.
     * Account number of the specific account to which the bonus is paid back
     */
    public void unsetBonusPaidToAccountNumber() {
        bonusPaidToAccountNumber = null;
    }

    /**
     * Internal Getter for BonusPaidToAccountShortName.
     * Short name of the specific account to which the bonus is paid back
     * @return Returns the Internal String
     */
    @JsonGetter("BonusPaidToAccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBonusPaidToAccountShortName() {
        return this.bonusPaidToAccountShortName;
    }

    /**
     * Getter for BonusPaidToAccountShortName.
     * Short name of the specific account to which the bonus is paid back
     * @return Returns the String
     */
    public String getBonusPaidToAccountShortName() {
        return OptionalNullable.getFrom(bonusPaidToAccountShortName);
    }

    /**
     * Setter for BonusPaidToAccountShortName.
     * Short name of the specific account to which the bonus is paid back
     * @param bonusPaidToAccountShortName Value for String
     */
    @JsonSetter("BonusPaidToAccountShortName")
    public void setBonusPaidToAccountShortName(String bonusPaidToAccountShortName) {
        this.bonusPaidToAccountShortName = OptionalNullable.of(bonusPaidToAccountShortName);
    }

    /**
     * UnSetter for BonusPaidToAccountShortName.
     * Short name of the specific account to which the bonus is paid back
     */
    public void unsetBonusPaidToAccountShortName() {
        bonusPaidToAccountShortName = null;
    }

    /**
     * Internal Getter for BonusPaidToAccountFullName.
     * Full name of the specific account to which the bonus is paid back
     * @return Returns the Internal String
     */
    @JsonGetter("BonusPaidToAccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBonusPaidToAccountFullName() {
        return this.bonusPaidToAccountFullName;
    }

    /**
     * Getter for BonusPaidToAccountFullName.
     * Full name of the specific account to which the bonus is paid back
     * @return Returns the String
     */
    public String getBonusPaidToAccountFullName() {
        return OptionalNullable.getFrom(bonusPaidToAccountFullName);
    }

    /**
     * Setter for BonusPaidToAccountFullName.
     * Full name of the specific account to which the bonus is paid back
     * @param bonusPaidToAccountFullName Value for String
     */
    @JsonSetter("BonusPaidToAccountFullName")
    public void setBonusPaidToAccountFullName(String bonusPaidToAccountFullName) {
        this.bonusPaidToAccountFullName = OptionalNullable.of(bonusPaidToAccountFullName);
    }

    /**
     * UnSetter for BonusPaidToAccountFullName.
     * Full name of the specific account to which the bonus is paid back
     */
    public void unsetBonusPaidToAccountFullName() {
        bonusPaidToAccountFullName = null;
    }

    /**
     * Internal Getter for Frequency.
     * Frequency of the configuration. Format: ID-Description Examples: 1-Daily (all days) 2-Daily
     * (only working days) 3-Weekly – Monday
     * @return Returns the Internal String
     */
    @JsonGetter("Frequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFrequency() {
        return this.frequency;
    }

    /**
     * Getter for Frequency.
     * Frequency of the configuration. Format: ID-Description Examples: 1-Daily (all days) 2-Daily
     * (only working days) 3-Weekly – Monday
     * @return Returns the String
     */
    public String getFrequency() {
        return OptionalNullable.getFrom(frequency);
    }

    /**
     * Setter for Frequency.
     * Frequency of the configuration. Format: ID-Description Examples: 1-Daily (all days) 2-Daily
     * (only working days) 3-Weekly – Monday
     * @param frequency Value for String
     */
    @JsonSetter("Frequency")
    public void setFrequency(String frequency) {
        this.frequency = OptionalNullable.of(frequency);
    }

    /**
     * UnSetter for Frequency.
     * Frequency of the configuration. Format: ID-Description Examples: 1-Daily (all days) 2-Daily
     * (only working days) 3-Weekly – Monday
     */
    public void unsetFrequency() {
        frequency = null;
    }

    /**
     * Internal Getter for NextCalculationDate.
     * The next bonus is calculated for the payer on this date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("NextCalculationDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNextCalculationDate() {
        return this.nextCalculationDate;
    }

    /**
     * Getter for NextCalculationDate.
     * The next bonus is calculated for the payer on this date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getNextCalculationDate() {
        return OptionalNullable.getFrom(nextCalculationDate);
    }

    /**
     * Setter for NextCalculationDate.
     * The next bonus is calculated for the payer on this date. Format: YYYYMMDD
     * @param nextCalculationDate Value for String
     */
    @JsonSetter("NextCalculationDate")
    public void setNextCalculationDate(String nextCalculationDate) {
        this.nextCalculationDate = OptionalNullable.of(nextCalculationDate);
    }

    /**
     * UnSetter for NextCalculationDate.
     * The next bonus is calculated for the payer on this date. Format: YYYYMMDD
     */
    public void unsetNextCalculationDate() {
        nextCalculationDate = null;
    }

    /**
     * Internal Getter for PreviousCalculatedDate.
     * The previous bonus was calculated for the payer on this date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("PreviousCalculatedDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPreviousCalculatedDate() {
        return this.previousCalculatedDate;
    }

    /**
     * Getter for PreviousCalculatedDate.
     * The previous bonus was calculated for the payer on this date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getPreviousCalculatedDate() {
        return OptionalNullable.getFrom(previousCalculatedDate);
    }

    /**
     * Setter for PreviousCalculatedDate.
     * The previous bonus was calculated for the payer on this date. Format: YYYYMMDD
     * @param previousCalculatedDate Value for String
     */
    @JsonSetter("PreviousCalculatedDate")
    public void setPreviousCalculatedDate(String previousCalculatedDate) {
        this.previousCalculatedDate = OptionalNullable.of(previousCalculatedDate);
    }

    /**
     * UnSetter for PreviousCalculatedDate.
     * The previous bonus was calculated for the payer on this date. Format: YYYYMMDD
     */
    public void unsetPreviousCalculatedDate() {
        previousCalculatedDate = null;
    }

    /**
     * Internal Getter for FeeRuleBasis.
     * Fee Rule Basis configured. Format: ID-Description Example: 1-Currency Per Unit 2-Percentage
     * of Uplift 3-Lump Sum
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleBasis")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleBasis() {
        return this.feeRuleBasis;
    }

    /**
     * Getter for FeeRuleBasis.
     * Fee Rule Basis configured. Format: ID-Description Example: 1-Currency Per Unit 2-Percentage
     * of Uplift 3-Lump Sum
     * @return Returns the String
     */
    public String getFeeRuleBasis() {
        return OptionalNullable.getFrom(feeRuleBasis);
    }

    /**
     * Setter for FeeRuleBasis.
     * Fee Rule Basis configured. Format: ID-Description Example: 1-Currency Per Unit 2-Percentage
     * of Uplift 3-Lump Sum
     * @param feeRuleBasis Value for String
     */
    @JsonSetter("FeeRuleBasis")
    public void setFeeRuleBasis(String feeRuleBasis) {
        this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
    }

    /**
     * UnSetter for FeeRuleBasis.
     * Fee Rule Basis configured. Format: ID-Description Example: 1-Currency Per Unit 2-Percentage
     * of Uplift 3-Lump Sum
     */
    public void unsetFeeRuleBasis() {
        feeRuleBasis = null;
    }

    /**
     * Internal Getter for FeeRuleCurrencyCode.
     * ISO currency code of the currency configured in the Bonus Configuration, if any.
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleCurrencyCode() {
        return this.feeRuleCurrencyCode;
    }

    /**
     * Getter for FeeRuleCurrencyCode.
     * ISO currency code of the currency configured in the Bonus Configuration, if any.
     * @return Returns the String
     */
    public String getFeeRuleCurrencyCode() {
        return OptionalNullable.getFrom(feeRuleCurrencyCode);
    }

    /**
     * Setter for FeeRuleCurrencyCode.
     * ISO currency code of the currency configured in the Bonus Configuration, if any.
     * @param feeRuleCurrencyCode Value for String
     */
    @JsonSetter("FeeRuleCurrencyCode")
    public void setFeeRuleCurrencyCode(String feeRuleCurrencyCode) {
        this.feeRuleCurrencyCode = OptionalNullable.of(feeRuleCurrencyCode);
    }

    /**
     * UnSetter for FeeRuleCurrencyCode.
     * ISO currency code of the currency configured in the Bonus Configuration, if any.
     */
    public void unsetFeeRuleCurrencyCode() {
        feeRuleCurrencyCode = null;
    }

    /**
     * Internal Getter for FeeRuleCurrencySymbol.
     * Currency symbol of the currency configured in the Bonus Configuration, if any.
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleCurrencySymbol() {
        return this.feeRuleCurrencySymbol;
    }

    /**
     * Getter for FeeRuleCurrencySymbol.
     * Currency symbol of the currency configured in the Bonus Configuration, if any.
     * @return Returns the String
     */
    public String getFeeRuleCurrencySymbol() {
        return OptionalNullable.getFrom(feeRuleCurrencySymbol);
    }

    /**
     * Setter for FeeRuleCurrencySymbol.
     * Currency symbol of the currency configured in the Bonus Configuration, if any.
     * @param feeRuleCurrencySymbol Value for String
     */
    @JsonSetter("FeeRuleCurrencySymbol")
    public void setFeeRuleCurrencySymbol(String feeRuleCurrencySymbol) {
        this.feeRuleCurrencySymbol = OptionalNullable.of(feeRuleCurrencySymbol);
    }

    /**
     * UnSetter for FeeRuleCurrencySymbol.
     * Currency symbol of the currency configured in the Bonus Configuration, if any.
     */
    public void unsetFeeRuleCurrencySymbol() {
        feeRuleCurrencySymbol = null;
    }

    /**
     * Internal Getter for FeeRuleAvailableFrom.
     * This bonus or association bonus is available from this date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleAvailableFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleAvailableFrom() {
        return this.feeRuleAvailableFrom;
    }

    /**
     * Getter for FeeRuleAvailableFrom.
     * This bonus or association bonus is available from this date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getFeeRuleAvailableFrom() {
        return OptionalNullable.getFrom(feeRuleAvailableFrom);
    }

    /**
     * Setter for FeeRuleAvailableFrom.
     * This bonus or association bonus is available from this date. Format: YYYYMMDD
     * @param feeRuleAvailableFrom Value for String
     */
    @JsonSetter("FeeRuleAvailableFrom")
    public void setFeeRuleAvailableFrom(String feeRuleAvailableFrom) {
        this.feeRuleAvailableFrom = OptionalNullable.of(feeRuleAvailableFrom);
    }

    /**
     * UnSetter for FeeRuleAvailableFrom.
     * This bonus or association bonus is available from this date. Format: YYYYMMDD
     */
    public void unsetFeeRuleAvailableFrom() {
        feeRuleAvailableFrom = null;
    }

    /**
     * Internal Getter for FeeRuleAvailableTo.
     * This bonus or association bonus configuration will not be available from this date. Format:
     * YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleAvailableTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleAvailableTo() {
        return this.feeRuleAvailableTo;
    }

    /**
     * Getter for FeeRuleAvailableTo.
     * This bonus or association bonus configuration will not be available from this date. Format:
     * YYYYMMDD
     * @return Returns the String
     */
    public String getFeeRuleAvailableTo() {
        return OptionalNullable.getFrom(feeRuleAvailableTo);
    }

    /**
     * Setter for FeeRuleAvailableTo.
     * This bonus or association bonus configuration will not be available from this date. Format:
     * YYYYMMDD
     * @param feeRuleAvailableTo Value for String
     */
    @JsonSetter("FeeRuleAvailableTo")
    public void setFeeRuleAvailableTo(String feeRuleAvailableTo) {
        this.feeRuleAvailableTo = OptionalNullable.of(feeRuleAvailableTo);
    }

    /**
     * UnSetter for FeeRuleAvailableTo.
     * This bonus or association bonus configuration will not be available from this date. Format:
     * YYYYMMDD
     */
    public void unsetFeeRuleAvailableTo() {
        feeRuleAvailableTo = null;
    }

    /**
     * Getter for FeeRuleLocations.
     * @return Returns the List of FeeRuleLocation
     */
    @JsonGetter("FeeRuleLocations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<FeeRuleLocation> getFeeRuleLocations() {
        return feeRuleLocations;
    }

    /**
     * Setter for FeeRuleLocations.
     * @param feeRuleLocations Value for List of FeeRuleLocation
     */
    @JsonSetter("FeeRuleLocations")
    public void setFeeRuleLocations(List<FeeRuleLocation> feeRuleLocations) {
        this.feeRuleLocations = feeRuleLocations;
    }

    /**
     * Getter for FeeRuleTiers.
     * @return Returns the List of FeeRuleTier
     */
    @JsonGetter("FeeRuleTiers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<FeeRuleTier> getFeeRuleTiers() {
        return feeRuleTiers;
    }

    /**
     * Setter for FeeRuleTiers.
     * @param feeRuleTiers Value for List of FeeRuleTier
     */
    @JsonSetter("FeeRuleTiers")
    public void setFeeRuleTiers(List<FeeRuleTier> feeRuleTiers) {
        this.feeRuleTiers = feeRuleTiers;
    }

    /**
     * Getter for AssociatedAccounts.
     * @return Returns the List of AssociatedAccount
     */
    @JsonGetter("AssociatedAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<AssociatedAccount> getAssociatedAccounts() {
        return associatedAccounts;
    }

    /**
     * Setter for AssociatedAccounts.
     * @param associatedAccounts Value for List of AssociatedAccount
     */
    @JsonSetter("AssociatedAccounts")
    public void setAssociatedAccounts(List<AssociatedAccount> associatedAccounts) {
        this.associatedAccounts = associatedAccounts;
    }

    /**
     * Getter for FeeRuleProducts.
     * @return Returns the List of FeeRuleProduct
     */
    @JsonGetter("FeeRuleProducts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<FeeRuleProduct> getFeeRuleProducts() {
        return feeRuleProducts;
    }

    /**
     * Setter for FeeRuleProducts.
     * @param feeRuleProducts Value for List of FeeRuleProduct
     */
    @JsonSetter("FeeRuleProducts")
    public void setFeeRuleProducts(List<FeeRuleProduct> feeRuleProducts) {
        this.feeRuleProducts = feeRuleProducts;
    }

    /**
     * Converts this BonusConfiguration into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BonusConfiguration [" + "pricingAccountId=" + pricingAccountId
                + ", pricingAccountNumber=" + pricingAccountNumber + ", pricingAccountShortName="
                + pricingAccountShortName + ", pricingAccountFullName=" + pricingAccountFullName
                + ", feeRuleId=" + feeRuleId + ", feeRuleDescription=" + feeRuleDescription
                + ", feeRuleDateEffective=" + feeRuleDateEffective + ", feeRuleDateTerminated="
                + feeRuleDateTerminated + ", bonusPaidTo=" + bonusPaidTo + ", bonusPaidToAccountId="
                + bonusPaidToAccountId + ", bonusPaidToAccountNumber=" + bonusPaidToAccountNumber
                + ", bonusPaidToAccountShortName=" + bonusPaidToAccountShortName
                + ", bonusPaidToAccountFullName=" + bonusPaidToAccountFullName + ", frequency="
                + frequency + ", nextCalculationDate=" + nextCalculationDate
                + ", previousCalculatedDate=" + previousCalculatedDate + ", feeRuleBasis="
                + feeRuleBasis + ", feeRuleCurrencyCode=" + feeRuleCurrencyCode
                + ", feeRuleCurrencySymbol=" + feeRuleCurrencySymbol + ", feeRuleAvailableFrom="
                + feeRuleAvailableFrom + ", feeRuleAvailableTo=" + feeRuleAvailableTo
                + ", feeRuleLocations=" + feeRuleLocations + ", feeRuleTiers=" + feeRuleTiers
                + ", associatedAccounts=" + associatedAccounts + ", feeRuleProducts="
                + feeRuleProducts + "]";
    }

    /**
     * Builds a new {@link BonusConfiguration.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BonusConfiguration.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .feeRuleLocations(getFeeRuleLocations())
                .feeRuleTiers(getFeeRuleTiers())
                .associatedAccounts(getAssociatedAccounts())
                .feeRuleProducts(getFeeRuleProducts());
        builder.pricingAccountId = internalGetPricingAccountId();
        builder.pricingAccountNumber = internalGetPricingAccountNumber();
        builder.pricingAccountShortName = internalGetPricingAccountShortName();
        builder.pricingAccountFullName = internalGetPricingAccountFullName();
        builder.feeRuleId = internalGetFeeRuleId();
        builder.feeRuleDescription = internalGetFeeRuleDescription();
        builder.feeRuleDateEffective = internalGetFeeRuleDateEffective();
        builder.feeRuleDateTerminated = internalGetFeeRuleDateTerminated();
        builder.bonusPaidTo = internalGetBonusPaidTo();
        builder.bonusPaidToAccountId = internalGetBonusPaidToAccountId();
        builder.bonusPaidToAccountNumber = internalGetBonusPaidToAccountNumber();
        builder.bonusPaidToAccountShortName = internalGetBonusPaidToAccountShortName();
        builder.bonusPaidToAccountFullName = internalGetBonusPaidToAccountFullName();
        builder.frequency = internalGetFrequency();
        builder.nextCalculationDate = internalGetNextCalculationDate();
        builder.previousCalculatedDate = internalGetPreviousCalculatedDate();
        builder.feeRuleBasis = internalGetFeeRuleBasis();
        builder.feeRuleCurrencyCode = internalGetFeeRuleCurrencyCode();
        builder.feeRuleCurrencySymbol = internalGetFeeRuleCurrencySymbol();
        builder.feeRuleAvailableFrom = internalGetFeeRuleAvailableFrom();
        builder.feeRuleAvailableTo = internalGetFeeRuleAvailableTo();
        return builder;
    }

    /**
     * Class to build instances of {@link BonusConfiguration}.
     */
    public static class Builder {
        private OptionalNullable<Integer> pricingAccountId;
        private OptionalNullable<String> pricingAccountNumber;
        private OptionalNullable<String> pricingAccountShortName;
        private OptionalNullable<String> pricingAccountFullName;
        private OptionalNullable<Integer> feeRuleId;
        private OptionalNullable<String> feeRuleDescription;
        private OptionalNullable<String> feeRuleDateEffective;
        private OptionalNullable<String> feeRuleDateTerminated;
        private OptionalNullable<String> bonusPaidTo;
        private OptionalNullable<Integer> bonusPaidToAccountId;
        private OptionalNullable<String> bonusPaidToAccountNumber;
        private OptionalNullable<String> bonusPaidToAccountShortName;
        private OptionalNullable<String> bonusPaidToAccountFullName;
        private OptionalNullable<String> frequency;
        private OptionalNullable<String> nextCalculationDate;
        private OptionalNullable<String> previousCalculatedDate;
        private OptionalNullable<String> feeRuleBasis;
        private OptionalNullable<String> feeRuleCurrencyCode;
        private OptionalNullable<String> feeRuleCurrencySymbol;
        private OptionalNullable<String> feeRuleAvailableFrom;
        private OptionalNullable<String> feeRuleAvailableTo;
        private List<FeeRuleLocation> feeRuleLocations;
        private List<FeeRuleTier> feeRuleTiers;
        private List<AssociatedAccount> associatedAccounts;
        private List<FeeRuleProduct> feeRuleProducts;



        /**
         * Setter for pricingAccountId.
         * @param  pricingAccountId  Integer value for pricingAccountId.
         * @return Builder
         */
        public Builder pricingAccountId(Integer pricingAccountId) {
            this.pricingAccountId = OptionalNullable.of(pricingAccountId);
            return this;
        }

        /**
         * UnSetter for pricingAccountId.
         * @return Builder
         */
        public Builder unsetPricingAccountId() {
            pricingAccountId = null;
            return this;
        }

        /**
         * Setter for pricingAccountNumber.
         * @param  pricingAccountNumber  String value for pricingAccountNumber.
         * @return Builder
         */
        public Builder pricingAccountNumber(String pricingAccountNumber) {
            this.pricingAccountNumber = OptionalNullable.of(pricingAccountNumber);
            return this;
        }

        /**
         * UnSetter for pricingAccountNumber.
         * @return Builder
         */
        public Builder unsetPricingAccountNumber() {
            pricingAccountNumber = null;
            return this;
        }

        /**
         * Setter for pricingAccountShortName.
         * @param  pricingAccountShortName  String value for pricingAccountShortName.
         * @return Builder
         */
        public Builder pricingAccountShortName(String pricingAccountShortName) {
            this.pricingAccountShortName = OptionalNullable.of(pricingAccountShortName);
            return this;
        }

        /**
         * UnSetter for pricingAccountShortName.
         * @return Builder
         */
        public Builder unsetPricingAccountShortName() {
            pricingAccountShortName = null;
            return this;
        }

        /**
         * Setter for pricingAccountFullName.
         * @param  pricingAccountFullName  String value for pricingAccountFullName.
         * @return Builder
         */
        public Builder pricingAccountFullName(String pricingAccountFullName) {
            this.pricingAccountFullName = OptionalNullable.of(pricingAccountFullName);
            return this;
        }

        /**
         * UnSetter for pricingAccountFullName.
         * @return Builder
         */
        public Builder unsetPricingAccountFullName() {
            pricingAccountFullName = null;
            return this;
        }

        /**
         * Setter for feeRuleId.
         * @param  feeRuleId  Integer value for feeRuleId.
         * @return Builder
         */
        public Builder feeRuleId(Integer feeRuleId) {
            this.feeRuleId = OptionalNullable.of(feeRuleId);
            return this;
        }

        /**
         * UnSetter for feeRuleId.
         * @return Builder
         */
        public Builder unsetFeeRuleId() {
            feeRuleId = null;
            return this;
        }

        /**
         * Setter for feeRuleDescription.
         * @param  feeRuleDescription  String value for feeRuleDescription.
         * @return Builder
         */
        public Builder feeRuleDescription(String feeRuleDescription) {
            this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
            return this;
        }

        /**
         * UnSetter for feeRuleDescription.
         * @return Builder
         */
        public Builder unsetFeeRuleDescription() {
            feeRuleDescription = null;
            return this;
        }

        /**
         * Setter for feeRuleDateEffective.
         * @param  feeRuleDateEffective  String value for feeRuleDateEffective.
         * @return Builder
         */
        public Builder feeRuleDateEffective(String feeRuleDateEffective) {
            this.feeRuleDateEffective = OptionalNullable.of(feeRuleDateEffective);
            return this;
        }

        /**
         * UnSetter for feeRuleDateEffective.
         * @return Builder
         */
        public Builder unsetFeeRuleDateEffective() {
            feeRuleDateEffective = null;
            return this;
        }

        /**
         * Setter for feeRuleDateTerminated.
         * @param  feeRuleDateTerminated  String value for feeRuleDateTerminated.
         * @return Builder
         */
        public Builder feeRuleDateTerminated(String feeRuleDateTerminated) {
            this.feeRuleDateTerminated = OptionalNullable.of(feeRuleDateTerminated);
            return this;
        }

        /**
         * UnSetter for feeRuleDateTerminated.
         * @return Builder
         */
        public Builder unsetFeeRuleDateTerminated() {
            feeRuleDateTerminated = null;
            return this;
        }

        /**
         * Setter for bonusPaidTo.
         * @param  bonusPaidTo  String value for bonusPaidTo.
         * @return Builder
         */
        public Builder bonusPaidTo(String bonusPaidTo) {
            this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
            return this;
        }

        /**
         * UnSetter for bonusPaidTo.
         * @return Builder
         */
        public Builder unsetBonusPaidTo() {
            bonusPaidTo = null;
            return this;
        }

        /**
         * Setter for bonusPaidToAccountId.
         * @param  bonusPaidToAccountId  Integer value for bonusPaidToAccountId.
         * @return Builder
         */
        public Builder bonusPaidToAccountId(Integer bonusPaidToAccountId) {
            this.bonusPaidToAccountId = OptionalNullable.of(bonusPaidToAccountId);
            return this;
        }

        /**
         * UnSetter for bonusPaidToAccountId.
         * @return Builder
         */
        public Builder unsetBonusPaidToAccountId() {
            bonusPaidToAccountId = null;
            return this;
        }

        /**
         * Setter for bonusPaidToAccountNumber.
         * @param  bonusPaidToAccountNumber  String value for bonusPaidToAccountNumber.
         * @return Builder
         */
        public Builder bonusPaidToAccountNumber(String bonusPaidToAccountNumber) {
            this.bonusPaidToAccountNumber = OptionalNullable.of(bonusPaidToAccountNumber);
            return this;
        }

        /**
         * UnSetter for bonusPaidToAccountNumber.
         * @return Builder
         */
        public Builder unsetBonusPaidToAccountNumber() {
            bonusPaidToAccountNumber = null;
            return this;
        }

        /**
         * Setter for bonusPaidToAccountShortName.
         * @param  bonusPaidToAccountShortName  String value for bonusPaidToAccountShortName.
         * @return Builder
         */
        public Builder bonusPaidToAccountShortName(String bonusPaidToAccountShortName) {
            this.bonusPaidToAccountShortName = OptionalNullable.of(bonusPaidToAccountShortName);
            return this;
        }

        /**
         * UnSetter for bonusPaidToAccountShortName.
         * @return Builder
         */
        public Builder unsetBonusPaidToAccountShortName() {
            bonusPaidToAccountShortName = null;
            return this;
        }

        /**
         * Setter for bonusPaidToAccountFullName.
         * @param  bonusPaidToAccountFullName  String value for bonusPaidToAccountFullName.
         * @return Builder
         */
        public Builder bonusPaidToAccountFullName(String bonusPaidToAccountFullName) {
            this.bonusPaidToAccountFullName = OptionalNullable.of(bonusPaidToAccountFullName);
            return this;
        }

        /**
         * UnSetter for bonusPaidToAccountFullName.
         * @return Builder
         */
        public Builder unsetBonusPaidToAccountFullName() {
            bonusPaidToAccountFullName = null;
            return this;
        }

        /**
         * Setter for frequency.
         * @param  frequency  String value for frequency.
         * @return Builder
         */
        public Builder frequency(String frequency) {
            this.frequency = OptionalNullable.of(frequency);
            return this;
        }

        /**
         * UnSetter for frequency.
         * @return Builder
         */
        public Builder unsetFrequency() {
            frequency = null;
            return this;
        }

        /**
         * Setter for nextCalculationDate.
         * @param  nextCalculationDate  String value for nextCalculationDate.
         * @return Builder
         */
        public Builder nextCalculationDate(String nextCalculationDate) {
            this.nextCalculationDate = OptionalNullable.of(nextCalculationDate);
            return this;
        }

        /**
         * UnSetter for nextCalculationDate.
         * @return Builder
         */
        public Builder unsetNextCalculationDate() {
            nextCalculationDate = null;
            return this;
        }

        /**
         * Setter for previousCalculatedDate.
         * @param  previousCalculatedDate  String value for previousCalculatedDate.
         * @return Builder
         */
        public Builder previousCalculatedDate(String previousCalculatedDate) {
            this.previousCalculatedDate = OptionalNullable.of(previousCalculatedDate);
            return this;
        }

        /**
         * UnSetter for previousCalculatedDate.
         * @return Builder
         */
        public Builder unsetPreviousCalculatedDate() {
            previousCalculatedDate = null;
            return this;
        }

        /**
         * Setter for feeRuleBasis.
         * @param  feeRuleBasis  String value for feeRuleBasis.
         * @return Builder
         */
        public Builder feeRuleBasis(String feeRuleBasis) {
            this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
            return this;
        }

        /**
         * UnSetter for feeRuleBasis.
         * @return Builder
         */
        public Builder unsetFeeRuleBasis() {
            feeRuleBasis = null;
            return this;
        }

        /**
         * Setter for feeRuleCurrencyCode.
         * @param  feeRuleCurrencyCode  String value for feeRuleCurrencyCode.
         * @return Builder
         */
        public Builder feeRuleCurrencyCode(String feeRuleCurrencyCode) {
            this.feeRuleCurrencyCode = OptionalNullable.of(feeRuleCurrencyCode);
            return this;
        }

        /**
         * UnSetter for feeRuleCurrencyCode.
         * @return Builder
         */
        public Builder unsetFeeRuleCurrencyCode() {
            feeRuleCurrencyCode = null;
            return this;
        }

        /**
         * Setter for feeRuleCurrencySymbol.
         * @param  feeRuleCurrencySymbol  String value for feeRuleCurrencySymbol.
         * @return Builder
         */
        public Builder feeRuleCurrencySymbol(String feeRuleCurrencySymbol) {
            this.feeRuleCurrencySymbol = OptionalNullable.of(feeRuleCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for feeRuleCurrencySymbol.
         * @return Builder
         */
        public Builder unsetFeeRuleCurrencySymbol() {
            feeRuleCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for feeRuleAvailableFrom.
         * @param  feeRuleAvailableFrom  String value for feeRuleAvailableFrom.
         * @return Builder
         */
        public Builder feeRuleAvailableFrom(String feeRuleAvailableFrom) {
            this.feeRuleAvailableFrom = OptionalNullable.of(feeRuleAvailableFrom);
            return this;
        }

        /**
         * UnSetter for feeRuleAvailableFrom.
         * @return Builder
         */
        public Builder unsetFeeRuleAvailableFrom() {
            feeRuleAvailableFrom = null;
            return this;
        }

        /**
         * Setter for feeRuleAvailableTo.
         * @param  feeRuleAvailableTo  String value for feeRuleAvailableTo.
         * @return Builder
         */
        public Builder feeRuleAvailableTo(String feeRuleAvailableTo) {
            this.feeRuleAvailableTo = OptionalNullable.of(feeRuleAvailableTo);
            return this;
        }

        /**
         * UnSetter for feeRuleAvailableTo.
         * @return Builder
         */
        public Builder unsetFeeRuleAvailableTo() {
            feeRuleAvailableTo = null;
            return this;
        }

        /**
         * Setter for feeRuleLocations.
         * @param  feeRuleLocations  List of FeeRuleLocation value for feeRuleLocations.
         * @return Builder
         */
        public Builder feeRuleLocations(List<FeeRuleLocation> feeRuleLocations) {
            this.feeRuleLocations = feeRuleLocations;
            return this;
        }

        /**
         * Setter for feeRuleTiers.
         * @param  feeRuleTiers  List of FeeRuleTier value for feeRuleTiers.
         * @return Builder
         */
        public Builder feeRuleTiers(List<FeeRuleTier> feeRuleTiers) {
            this.feeRuleTiers = feeRuleTiers;
            return this;
        }

        /**
         * Setter for associatedAccounts.
         * @param  associatedAccounts  List of AssociatedAccount value for associatedAccounts.
         * @return Builder
         */
        public Builder associatedAccounts(List<AssociatedAccount> associatedAccounts) {
            this.associatedAccounts = associatedAccounts;
            return this;
        }

        /**
         * Setter for feeRuleProducts.
         * @param  feeRuleProducts  List of FeeRuleProduct value for feeRuleProducts.
         * @return Builder
         */
        public Builder feeRuleProducts(List<FeeRuleProduct> feeRuleProducts) {
            this.feeRuleProducts = feeRuleProducts;
            return this;
        }

        /**
         * Builds a new {@link BonusConfiguration} object using the set fields.
         * @return {@link BonusConfiguration}
         */
        public BonusConfiguration build() {
            return new BonusConfiguration(pricingAccountId, pricingAccountNumber,
                    pricingAccountShortName, pricingAccountFullName, feeRuleId, feeRuleDescription,
                    feeRuleDateEffective, feeRuleDateTerminated, bonusPaidTo, bonusPaidToAccountId,
                    bonusPaidToAccountNumber, bonusPaidToAccountShortName,
                    bonusPaidToAccountFullName, frequency, nextCalculationDate,
                    previousCalculatedDate, feeRuleBasis, feeRuleCurrencyCode,
                    feeRuleCurrencySymbol, feeRuleAvailableFrom, feeRuleAvailableTo,
                    feeRuleLocations, feeRuleTiers, associatedAccounts, feeRuleProducts);
        }
    }
}
