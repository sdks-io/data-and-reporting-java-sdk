/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for TransactionExceptionsResponse type.
 */
public class TransactionExceptionsResponse {
    private List<CardExceptions> cardExceptions;
    private OptionalNullable<List<TransactionExceptions>> transactionExceptions;
    private ErrorStatus error;
    private String requestId;

    /**
     * Default constructor.
     */
    public TransactionExceptionsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  cardExceptions  List of CardExceptions value for cardExceptions.
     * @param  transactionExceptions  List of TransactionExceptions value for transactionExceptions.
     * @param  error  ErrorStatus value for error.
     * @param  requestId  String value for requestId.
     */
    public TransactionExceptionsResponse(
            List<CardExceptions> cardExceptions,
            List<TransactionExceptions> transactionExceptions,
            ErrorStatus error,
            String requestId) {
        this.cardExceptions = cardExceptions;
        this.transactionExceptions = OptionalNullable.of(transactionExceptions);
        this.error = error;
        this.requestId = requestId;
    }

    /**
     * Initialization constructor.
     * @param  cardExceptions  List of CardExceptions value for cardExceptions.
     * @param  transactionExceptions  List of TransactionExceptions value for transactionExceptions.
     * @param  error  ErrorStatus value for error.
     * @param  requestId  String value for requestId.
     */

    protected TransactionExceptionsResponse(List<CardExceptions> cardExceptions,
            OptionalNullable<List<TransactionExceptions>> transactionExceptions, ErrorStatus error,
            String requestId) {
        this.cardExceptions = cardExceptions;
        this.transactionExceptions = transactionExceptions;
        this.error = error;
        this.requestId = requestId;
    }

    /**
     * Getter for CardExceptions.
     * @return Returns the List of CardExceptions
     */
    @JsonGetter("CardExceptions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<CardExceptions> getCardExceptions() {
        return cardExceptions;
    }

    /**
     * Setter for CardExceptions.
     * @param cardExceptions Value for List of CardExceptions
     */
    @JsonSetter("CardExceptions")
    public void setCardExceptions(List<CardExceptions> cardExceptions) {
        this.cardExceptions = cardExceptions;
    }

    /**
     * Internal Getter for TransactionExceptions.
     * @return Returns the Internal List of TransactionExceptions
     */
    @JsonGetter("TransactionExceptions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<TransactionExceptions>> internalGetTransactionExceptions() {
        return this.transactionExceptions;
    }

    /**
     * Getter for TransactionExceptions.
     * @return Returns the List of TransactionExceptions
     */
    public List<TransactionExceptions> getTransactionExceptions() {
        return OptionalNullable.getFrom(transactionExceptions);
    }

    /**
     * Setter for TransactionExceptions.
     * @param transactionExceptions Value for List of TransactionExceptions
     */
    @JsonSetter("TransactionExceptions")
    public void setTransactionExceptions(List<TransactionExceptions> transactionExceptions) {
        this.transactionExceptions = OptionalNullable.of(transactionExceptions);
    }

    /**
     * UnSetter for TransactionExceptions.
     */
    public void unsetTransactionExceptions() {
        transactionExceptions = null;
    }

    /**
     * Getter for Error.
     * @return Returns the ErrorStatus
     */
    @JsonGetter("Error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ErrorStatus getError() {
        return error;
    }

    /**
     * Setter for Error.
     * @param error Value for ErrorStatus
     */
    @JsonSetter("Error")
    public void setError(ErrorStatus error) {
        this.error = error;
    }

    /**
     * Getter for RequestId.
     * API Request Id
     * @return Returns the String
     */
    @JsonGetter("RequestId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRequestId() {
        return requestId;
    }

    /**
     * Setter for RequestId.
     * API Request Id
     * @param requestId Value for String
     */
    @JsonSetter("RequestId")
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Converts this TransactionExceptionsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TransactionExceptionsResponse [" + "cardExceptions=" + cardExceptions
                + ", transactionExceptions=" + transactionExceptions + ", error=" + error
                + ", requestId=" + requestId + "]";
    }

    /**
     * Builds a new {@link TransactionExceptionsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TransactionExceptionsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .cardExceptions(getCardExceptions())
                .error(getError())
                .requestId(getRequestId());
        builder.transactionExceptions = internalGetTransactionExceptions();
        return builder;
    }

    /**
     * Class to build instances of {@link TransactionExceptionsResponse}.
     */
    public static class Builder {
        private List<CardExceptions> cardExceptions;
        private OptionalNullable<List<TransactionExceptions>> transactionExceptions;
        private ErrorStatus error;
        private String requestId;



        /**
         * Setter for cardExceptions.
         * @param  cardExceptions  List of CardExceptions value for cardExceptions.
         * @return Builder
         */
        public Builder cardExceptions(List<CardExceptions> cardExceptions) {
            this.cardExceptions = cardExceptions;
            return this;
        }

        /**
         * Setter for transactionExceptions.
         * @param  transactionExceptions  List of TransactionExceptions value for
         *         transactionExceptions.
         * @return Builder
         */
        public Builder transactionExceptions(List<TransactionExceptions> transactionExceptions) {
            this.transactionExceptions = OptionalNullable.of(transactionExceptions);
            return this;
        }

        /**
         * UnSetter for transactionExceptions.
         * @return Builder
         */
        public Builder unsetTransactionExceptions() {
            transactionExceptions = null;
            return this;
        }

        /**
         * Setter for error.
         * @param  error  ErrorStatus value for error.
         * @return Builder
         */
        public Builder error(ErrorStatus error) {
            this.error = error;
            return this;
        }

        /**
         * Setter for requestId.
         * @param  requestId  String value for requestId.
         * @return Builder
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * Builds a new {@link TransactionExceptionsResponse} object using the set fields.
         * @return {@link TransactionExceptionsResponse}
         */
        public TransactionExceptionsResponse build() {
            return new TransactionExceptionsResponse(cardExceptions, transactionExceptions, error,
                    requestId);
        }
    }
}
