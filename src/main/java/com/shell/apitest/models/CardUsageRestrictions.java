/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for CardUsageRestrictions type.
 */
public class CardUsageRestrictions {
    private OptionalNullable<String> level;
    private OptionalNullable<Double> dailySpendLimit;
    private OptionalNullable<Double> weeklySpendLimit;
    private OptionalNullable<Double> monthlySpendLimit;
    private OptionalNullable<Double> annualSpendLimit;
    private OptionalNullable<Double> lifeTimeSpendLimit;
    private OptionalNullable<Double> dailyVolumeLimit;
    private OptionalNullable<Double> weeklyVolumeLimit;
    private OptionalNullable<Double> monthlyVolumeLimit;
    private OptionalNullable<Double> annualVolumeLimit;
    private OptionalNullable<Double> lifeTimeVolumeLimit;
    private OptionalNullable<Double> transactionSpendLimit;
    private OptionalNullable<Double> transactionVolumeLimit;
    private OptionalNullable<Double> dailyTransactionCount;
    private OptionalNullable<Double> weeklyTransactionCount;
    private OptionalNullable<Double> monthlyTransactionCount;
    private OptionalNullable<Double> annualTransactionCount;
    private OptionalNullable<Double> lifeTimeTransactionCount;
    private Boolean isVelocityCeiling;

    /**
     * Default constructor.
     */
    public CardUsageRestrictions() {
        annualVolumeLimit = OptionalNullable.of(0d);
    }

    /**
     * Initialization constructor.
     * @param  level  String value for level.
     * @param  dailySpendLimit  Double value for dailySpendLimit.
     * @param  weeklySpendLimit  Double value for weeklySpendLimit.
     * @param  monthlySpendLimit  Double value for monthlySpendLimit.
     * @param  annualSpendLimit  Double value for annualSpendLimit.
     * @param  lifeTimeSpendLimit  Double value for lifeTimeSpendLimit.
     * @param  dailyVolumeLimit  Double value for dailyVolumeLimit.
     * @param  weeklyVolumeLimit  Double value for weeklyVolumeLimit.
     * @param  monthlyVolumeLimit  Double value for monthlyVolumeLimit.
     * @param  annualVolumeLimit  Double value for annualVolumeLimit.
     * @param  lifeTimeVolumeLimit  Double value for lifeTimeVolumeLimit.
     * @param  transactionSpendLimit  Double value for transactionSpendLimit.
     * @param  transactionVolumeLimit  Double value for transactionVolumeLimit.
     * @param  dailyTransactionCount  Double value for dailyTransactionCount.
     * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
     * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
     * @param  annualTransactionCount  Double value for annualTransactionCount.
     * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
     * @param  isVelocityCeiling  Boolean value for isVelocityCeiling.
     */
    public CardUsageRestrictions(
            String level,
            Double dailySpendLimit,
            Double weeklySpendLimit,
            Double monthlySpendLimit,
            Double annualSpendLimit,
            Double lifeTimeSpendLimit,
            Double dailyVolumeLimit,
            Double weeklyVolumeLimit,
            Double monthlyVolumeLimit,
            Double annualVolumeLimit,
            Double lifeTimeVolumeLimit,
            Double transactionSpendLimit,
            Double transactionVolumeLimit,
            Double dailyTransactionCount,
            Double weeklyTransactionCount,
            Double monthlyTransactionCount,
            Double annualTransactionCount,
            Double lifeTimeTransactionCount,
            Boolean isVelocityCeiling) {
        this.level = OptionalNullable.of(level);
        this.dailySpendLimit = OptionalNullable.of(dailySpendLimit);
        this.weeklySpendLimit = OptionalNullable.of(weeklySpendLimit);
        this.monthlySpendLimit = OptionalNullable.of(monthlySpendLimit);
        this.annualSpendLimit = OptionalNullable.of(annualSpendLimit);
        this.lifeTimeSpendLimit = OptionalNullable.of(lifeTimeSpendLimit);
        this.dailyVolumeLimit = OptionalNullable.of(dailyVolumeLimit);
        this.weeklyVolumeLimit = OptionalNullable.of(weeklyVolumeLimit);
        this.monthlyVolumeLimit = OptionalNullable.of(monthlyVolumeLimit);
        this.annualVolumeLimit = OptionalNullable.of(annualVolumeLimit);
        this.lifeTimeVolumeLimit = OptionalNullable.of(lifeTimeVolumeLimit);
        this.transactionSpendLimit = OptionalNullable.of(transactionSpendLimit);
        this.transactionVolumeLimit = OptionalNullable.of(transactionVolumeLimit);
        this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
        this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
        this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
        this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
        this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
        this.isVelocityCeiling = isVelocityCeiling;
    }

    /**
     * Initialization constructor.
     * @param  level  String value for level.
     * @param  dailySpendLimit  Double value for dailySpendLimit.
     * @param  weeklySpendLimit  Double value for weeklySpendLimit.
     * @param  monthlySpendLimit  Double value for monthlySpendLimit.
     * @param  annualSpendLimit  Double value for annualSpendLimit.
     * @param  lifeTimeSpendLimit  Double value for lifeTimeSpendLimit.
     * @param  dailyVolumeLimit  Double value for dailyVolumeLimit.
     * @param  weeklyVolumeLimit  Double value for weeklyVolumeLimit.
     * @param  monthlyVolumeLimit  Double value for monthlyVolumeLimit.
     * @param  annualVolumeLimit  Double value for annualVolumeLimit.
     * @param  lifeTimeVolumeLimit  Double value for lifeTimeVolumeLimit.
     * @param  transactionSpendLimit  Double value for transactionSpendLimit.
     * @param  transactionVolumeLimit  Double value for transactionVolumeLimit.
     * @param  dailyTransactionCount  Double value for dailyTransactionCount.
     * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
     * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
     * @param  annualTransactionCount  Double value for annualTransactionCount.
     * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
     * @param  isVelocityCeiling  Boolean value for isVelocityCeiling.
     */

    protected CardUsageRestrictions(OptionalNullable<String> level,
            OptionalNullable<Double> dailySpendLimit, OptionalNullable<Double> weeklySpendLimit,
            OptionalNullable<Double> monthlySpendLimit, OptionalNullable<Double> annualSpendLimit,
            OptionalNullable<Double> lifeTimeSpendLimit, OptionalNullable<Double> dailyVolumeLimit,
            OptionalNullable<Double> weeklyVolumeLimit, OptionalNullable<Double> monthlyVolumeLimit,
            OptionalNullable<Double> annualVolumeLimit,
            OptionalNullable<Double> lifeTimeVolumeLimit,
            OptionalNullable<Double> transactionSpendLimit,
            OptionalNullable<Double> transactionVolumeLimit,
            OptionalNullable<Double> dailyTransactionCount,
            OptionalNullable<Double> weeklyTransactionCount,
            OptionalNullable<Double> monthlyTransactionCount,
            OptionalNullable<Double> annualTransactionCount,
            OptionalNullable<Double> lifeTimeTransactionCount, Boolean isVelocityCeiling) {
        this.level = level;
        this.dailySpendLimit = dailySpendLimit;
        this.weeklySpendLimit = weeklySpendLimit;
        this.monthlySpendLimit = monthlySpendLimit;
        this.annualSpendLimit = annualSpendLimit;
        this.lifeTimeSpendLimit = lifeTimeSpendLimit;
        this.dailyVolumeLimit = dailyVolumeLimit;
        this.weeklyVolumeLimit = weeklyVolumeLimit;
        this.monthlyVolumeLimit = monthlyVolumeLimit;
        this.annualVolumeLimit = annualVolumeLimit;
        this.lifeTimeVolumeLimit = lifeTimeVolumeLimit;
        this.transactionSpendLimit = transactionSpendLimit;
        this.transactionVolumeLimit = transactionVolumeLimit;
        this.dailyTransactionCount = dailyTransactionCount;
        this.weeklyTransactionCount = weeklyTransactionCount;
        this.monthlyTransactionCount = monthlyTransactionCount;
        this.annualTransactionCount = annualTransactionCount;
        this.lifeTimeTransactionCount = lifeTimeTransactionCount;
        this.isVelocityCeiling = isVelocityCeiling;
    }

    /**
     * Internal Getter for Level.
     * Describes at which level the restriction is set at. Possible values: OU = Restriction set at
     * ColCo card type Customer = Restriction set at customer card type
     * @return Returns the Internal String
     */
    @JsonGetter("Level")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLevel() {
        return this.level;
    }

    /**
     * Getter for Level.
     * Describes at which level the restriction is set at. Possible values: OU = Restriction set at
     * ColCo card type Customer = Restriction set at customer card type
     * @return Returns the String
     */
    public String getLevel() {
        return OptionalNullable.getFrom(level);
    }

    /**
     * Setter for Level.
     * Describes at which level the restriction is set at. Possible values: OU = Restriction set at
     * ColCo card type Customer = Restriction set at customer card type
     * @param level Value for String
     */
    @JsonSetter("Level")
    public void setLevel(String level) {
        this.level = OptionalNullable.of(level);
    }

    /**
     * UnSetter for Level.
     * Describes at which level the restriction is set at. Possible values: OU = Restriction set at
     * ColCo card type Customer = Restriction set at customer card type
     */
    public void unsetLevel() {
        level = null;
    }

    /**
     * Internal Getter for DailySpendLimit.
     * Maximum amount that can be spend on the card in a day.
     * @return Returns the Internal Double
     */
    @JsonGetter("DailySpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDailySpendLimit() {
        return this.dailySpendLimit;
    }

    /**
     * Getter for DailySpendLimit.
     * Maximum amount that can be spend on the card in a day.
     * @return Returns the Double
     */
    public Double getDailySpendLimit() {
        return OptionalNullable.getFrom(dailySpendLimit);
    }

    /**
     * Setter for DailySpendLimit.
     * Maximum amount that can be spend on the card in a day.
     * @param dailySpendLimit Value for Double
     */
    @JsonSetter("DailySpendLimit")
    public void setDailySpendLimit(Double dailySpendLimit) {
        this.dailySpendLimit = OptionalNullable.of(dailySpendLimit);
    }

    /**
     * UnSetter for DailySpendLimit.
     * Maximum amount that can be spend on the card in a day.
     */
    public void unsetDailySpendLimit() {
        dailySpendLimit = null;
    }

    /**
     * Internal Getter for WeeklySpendLimit.
     * Maximum amount that can be spend on the card in a week.
     * @return Returns the Internal Double
     */
    @JsonGetter("WeeklySpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetWeeklySpendLimit() {
        return this.weeklySpendLimit;
    }

    /**
     * Getter for WeeklySpendLimit.
     * Maximum amount that can be spend on the card in a week.
     * @return Returns the Double
     */
    public Double getWeeklySpendLimit() {
        return OptionalNullable.getFrom(weeklySpendLimit);
    }

    /**
     * Setter for WeeklySpendLimit.
     * Maximum amount that can be spend on the card in a week.
     * @param weeklySpendLimit Value for Double
     */
    @JsonSetter("WeeklySpendLimit")
    public void setWeeklySpendLimit(Double weeklySpendLimit) {
        this.weeklySpendLimit = OptionalNullable.of(weeklySpendLimit);
    }

    /**
     * UnSetter for WeeklySpendLimit.
     * Maximum amount that can be spend on the card in a week.
     */
    public void unsetWeeklySpendLimit() {
        weeklySpendLimit = null;
    }

    /**
     * Internal Getter for MonthlySpendLimit.
     * Maximum amount that can be spend on the card in a month.
     * @return Returns the Internal Double
     */
    @JsonGetter("MonthlySpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetMonthlySpendLimit() {
        return this.monthlySpendLimit;
    }

    /**
     * Getter for MonthlySpendLimit.
     * Maximum amount that can be spend on the card in a month.
     * @return Returns the Double
     */
    public Double getMonthlySpendLimit() {
        return OptionalNullable.getFrom(monthlySpendLimit);
    }

    /**
     * Setter for MonthlySpendLimit.
     * Maximum amount that can be spend on the card in a month.
     * @param monthlySpendLimit Value for Double
     */
    @JsonSetter("MonthlySpendLimit")
    public void setMonthlySpendLimit(Double monthlySpendLimit) {
        this.monthlySpendLimit = OptionalNullable.of(monthlySpendLimit);
    }

    /**
     * UnSetter for MonthlySpendLimit.
     * Maximum amount that can be spend on the card in a month.
     */
    public void unsetMonthlySpendLimit() {
        monthlySpendLimit = null;
    }

    /**
     * Internal Getter for AnnualSpendLimit.
     * Maximum amount that can be spend on the card in a year.
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualSpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualSpendLimit() {
        return this.annualSpendLimit;
    }

    /**
     * Getter for AnnualSpendLimit.
     * Maximum amount that can be spend on the card in a year.
     * @return Returns the Double
     */
    public Double getAnnualSpendLimit() {
        return OptionalNullable.getFrom(annualSpendLimit);
    }

    /**
     * Setter for AnnualSpendLimit.
     * Maximum amount that can be spend on the card in a year.
     * @param annualSpendLimit Value for Double
     */
    @JsonSetter("AnnualSpendLimit")
    public void setAnnualSpendLimit(Double annualSpendLimit) {
        this.annualSpendLimit = OptionalNullable.of(annualSpendLimit);
    }

    /**
     * UnSetter for AnnualSpendLimit.
     * Maximum amount that can be spend on the card in a year.
     */
    public void unsetAnnualSpendLimit() {
        annualSpendLimit = null;
    }

    /**
     * Internal Getter for LifeTimeSpendLimit.
     * Maximum amount that can be spend on the card in the card’s life time.
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeSpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeSpendLimit() {
        return this.lifeTimeSpendLimit;
    }

    /**
     * Getter for LifeTimeSpendLimit.
     * Maximum amount that can be spend on the card in the card’s life time.
     * @return Returns the Double
     */
    public Double getLifeTimeSpendLimit() {
        return OptionalNullable.getFrom(lifeTimeSpendLimit);
    }

    /**
     * Setter for LifeTimeSpendLimit.
     * Maximum amount that can be spend on the card in the card’s life time.
     * @param lifeTimeSpendLimit Value for Double
     */
    @JsonSetter("LifeTimeSpendLimit")
    public void setLifeTimeSpendLimit(Double lifeTimeSpendLimit) {
        this.lifeTimeSpendLimit = OptionalNullable.of(lifeTimeSpendLimit);
    }

    /**
     * UnSetter for LifeTimeSpendLimit.
     * Maximum amount that can be spend on the card in the card’s life time.
     */
    public void unsetLifeTimeSpendLimit() {
        lifeTimeSpendLimit = null;
    }

    /**
     * Internal Getter for DailyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a day.
     * @return Returns the Internal Double
     */
    @JsonGetter("DailyVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDailyVolumeLimit() {
        return this.dailyVolumeLimit;
    }

    /**
     * Getter for DailyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a day.
     * @return Returns the Double
     */
    public Double getDailyVolumeLimit() {
        return OptionalNullable.getFrom(dailyVolumeLimit);
    }

    /**
     * Setter for DailyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a day.
     * @param dailyVolumeLimit Value for Double
     */
    @JsonSetter("DailyVolumeLimit")
    public void setDailyVolumeLimit(Double dailyVolumeLimit) {
        this.dailyVolumeLimit = OptionalNullable.of(dailyVolumeLimit);
    }

    /**
     * UnSetter for DailyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a day.
     */
    public void unsetDailyVolumeLimit() {
        dailyVolumeLimit = null;
    }

    /**
     * Internal Getter for WeeklyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a week.
     * @return Returns the Internal Double
     */
    @JsonGetter("WeeklyVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetWeeklyVolumeLimit() {
        return this.weeklyVolumeLimit;
    }

    /**
     * Getter for WeeklyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a week.
     * @return Returns the Double
     */
    public Double getWeeklyVolumeLimit() {
        return OptionalNullable.getFrom(weeklyVolumeLimit);
    }

    /**
     * Setter for WeeklyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a week.
     * @param weeklyVolumeLimit Value for Double
     */
    @JsonSetter("WeeklyVolumeLimit")
    public void setWeeklyVolumeLimit(Double weeklyVolumeLimit) {
        this.weeklyVolumeLimit = OptionalNullable.of(weeklyVolumeLimit);
    }

    /**
     * UnSetter for WeeklyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a week.
     */
    public void unsetWeeklyVolumeLimit() {
        weeklyVolumeLimit = null;
    }

    /**
     * Internal Getter for MonthlyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a month.
     * @return Returns the Internal Double
     */
    @JsonGetter("MonthlyVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetMonthlyVolumeLimit() {
        return this.monthlyVolumeLimit;
    }

    /**
     * Getter for MonthlyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a month.
     * @return Returns the Double
     */
    public Double getMonthlyVolumeLimit() {
        return OptionalNullable.getFrom(monthlyVolumeLimit);
    }

    /**
     * Setter for MonthlyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a month.
     * @param monthlyVolumeLimit Value for Double
     */
    @JsonSetter("MonthlyVolumeLimit")
    public void setMonthlyVolumeLimit(Double monthlyVolumeLimit) {
        this.monthlyVolumeLimit = OptionalNullable.of(monthlyVolumeLimit);
    }

    /**
     * UnSetter for MonthlyVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a month.
     */
    public void unsetMonthlyVolumeLimit() {
        monthlyVolumeLimit = null;
    }

    /**
     * Internal Getter for AnnualVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a year.
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualVolumeLimit() {
        return this.annualVolumeLimit;
    }

    /**
     * Getter for AnnualVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a year.
     * @return Returns the Double
     */
    public Double getAnnualVolumeLimit() {
        return OptionalNullable.getFrom(annualVolumeLimit);
    }

    /**
     * Setter for AnnualVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a year.
     * @param annualVolumeLimit Value for Double
     */
    @JsonSetter("AnnualVolumeLimit")
    public void setAnnualVolumeLimit(Double annualVolumeLimit) {
        this.annualVolumeLimit = OptionalNullable.of(annualVolumeLimit);
    }

    /**
     * UnSetter for AnnualVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a year.
     */
    public void unsetAnnualVolumeLimit() {
        annualVolumeLimit = null;
    }

    /**
     * Internal Getter for LifeTimeVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeVolumeLimit() {
        return this.lifeTimeVolumeLimit;
    }

    /**
     * Getter for LifeTimeVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     * @return Returns the Double
     */
    public Double getLifeTimeVolumeLimit() {
        return OptionalNullable.getFrom(lifeTimeVolumeLimit);
    }

    /**
     * Setter for LifeTimeVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     * @param lifeTimeVolumeLimit Value for Double
     */
    @JsonSetter("LifeTimeVolumeLimit")
    public void setLifeTimeVolumeLimit(Double lifeTimeVolumeLimit) {
        this.lifeTimeVolumeLimit = OptionalNullable.of(lifeTimeVolumeLimit);
    }

    /**
     * UnSetter for LifeTimeVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in the card’s life time.
     */
    public void unsetLifeTimeVolumeLimit() {
        lifeTimeVolumeLimit = null;
    }

    /**
     * Internal Getter for TransactionSpendLimit.
     * Maximum amount that can be spend on the card in a transaction.
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionSpendLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionSpendLimit() {
        return this.transactionSpendLimit;
    }

    /**
     * Getter for TransactionSpendLimit.
     * Maximum amount that can be spend on the card in a transaction.
     * @return Returns the Double
     */
    public Double getTransactionSpendLimit() {
        return OptionalNullable.getFrom(transactionSpendLimit);
    }

    /**
     * Setter for TransactionSpendLimit.
     * Maximum amount that can be spend on the card in a transaction.
     * @param transactionSpendLimit Value for Double
     */
    @JsonSetter("TransactionSpendLimit")
    public void setTransactionSpendLimit(Double transactionSpendLimit) {
        this.transactionSpendLimit = OptionalNullable.of(transactionSpendLimit);
    }

    /**
     * UnSetter for TransactionSpendLimit.
     * Maximum amount that can be spend on the card in a transaction.
     */
    public void unsetTransactionSpendLimit() {
        transactionSpendLimit = null;
    }

    /**
     * Internal Getter for TransactionVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionVolumeLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionVolumeLimit() {
        return this.transactionVolumeLimit;
    }

    /**
     * Getter for TransactionVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     * @return Returns the Double
     */
    public Double getTransactionVolumeLimit() {
        return OptionalNullable.getFrom(transactionVolumeLimit);
    }

    /**
     * Setter for TransactionVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     * @param transactionVolumeLimit Value for Double
     */
    @JsonSetter("TransactionVolumeLimit")
    public void setTransactionVolumeLimit(Double transactionVolumeLimit) {
        this.transactionVolumeLimit = OptionalNullable.of(transactionVolumeLimit);
    }

    /**
     * UnSetter for TransactionVolumeLimit.
     * Maximum volume of fuel that can be bought on the card in a transaction.
     */
    public void unsetTransactionVolumeLimit() {
        transactionVolumeLimit = null;
    }

    /**
     * Internal Getter for DailyTransactionCount.
     * Maximum number of transactions allowed on a card in a day.
     * @return Returns the Internal Double
     */
    @JsonGetter("DailyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDailyTransactionCount() {
        return this.dailyTransactionCount;
    }

    /**
     * Getter for DailyTransactionCount.
     * Maximum number of transactions allowed on a card in a day.
     * @return Returns the Double
     */
    public Double getDailyTransactionCount() {
        return OptionalNullable.getFrom(dailyTransactionCount);
    }

    /**
     * Setter for DailyTransactionCount.
     * Maximum number of transactions allowed on a card in a day.
     * @param dailyTransactionCount Value for Double
     */
    @JsonSetter("DailyTransactionCount")
    public void setDailyTransactionCount(Double dailyTransactionCount) {
        this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
    }

    /**
     * UnSetter for DailyTransactionCount.
     * Maximum number of transactions allowed on a card in a day.
     */
    public void unsetDailyTransactionCount() {
        dailyTransactionCount = null;
    }

    /**
     * Internal Getter for WeeklyTransactionCount.
     * Maximum number of transactions allowed on a card in a week.
     * @return Returns the Internal Double
     */
    @JsonGetter("WeeklyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetWeeklyTransactionCount() {
        return this.weeklyTransactionCount;
    }

    /**
     * Getter for WeeklyTransactionCount.
     * Maximum number of transactions allowed on a card in a week.
     * @return Returns the Double
     */
    public Double getWeeklyTransactionCount() {
        return OptionalNullable.getFrom(weeklyTransactionCount);
    }

    /**
     * Setter for WeeklyTransactionCount.
     * Maximum number of transactions allowed on a card in a week.
     * @param weeklyTransactionCount Value for Double
     */
    @JsonSetter("WeeklyTransactionCount")
    public void setWeeklyTransactionCount(Double weeklyTransactionCount) {
        this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
    }

    /**
     * UnSetter for WeeklyTransactionCount.
     * Maximum number of transactions allowed on a card in a week.
     */
    public void unsetWeeklyTransactionCount() {
        weeklyTransactionCount = null;
    }

    /**
     * Internal Getter for MonthlyTransactionCount.
     * Maximum number of transactions allowed on a card in a month.
     * @return Returns the Internal Double
     */
    @JsonGetter("MonthlyTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetMonthlyTransactionCount() {
        return this.monthlyTransactionCount;
    }

    /**
     * Getter for MonthlyTransactionCount.
     * Maximum number of transactions allowed on a card in a month.
     * @return Returns the Double
     */
    public Double getMonthlyTransactionCount() {
        return OptionalNullable.getFrom(monthlyTransactionCount);
    }

    /**
     * Setter for MonthlyTransactionCount.
     * Maximum number of transactions allowed on a card in a month.
     * @param monthlyTransactionCount Value for Double
     */
    @JsonSetter("MonthlyTransactionCount")
    public void setMonthlyTransactionCount(Double monthlyTransactionCount) {
        this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
    }

    /**
     * UnSetter for MonthlyTransactionCount.
     * Maximum number of transactions allowed on a card in a month.
     */
    public void unsetMonthlyTransactionCount() {
        monthlyTransactionCount = null;
    }

    /**
     * Internal Getter for AnnualTransactionCount.
     * Maximum number of transactions allowed on the card in a year.
     * @return Returns the Internal Double
     */
    @JsonGetter("AnnualTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAnnualTransactionCount() {
        return this.annualTransactionCount;
    }

    /**
     * Getter for AnnualTransactionCount.
     * Maximum number of transactions allowed on the card in a year.
     * @return Returns the Double
     */
    public Double getAnnualTransactionCount() {
        return OptionalNullable.getFrom(annualTransactionCount);
    }

    /**
     * Setter for AnnualTransactionCount.
     * Maximum number of transactions allowed on the card in a year.
     * @param annualTransactionCount Value for Double
     */
    @JsonSetter("AnnualTransactionCount")
    public void setAnnualTransactionCount(Double annualTransactionCount) {
        this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
    }

    /**
     * UnSetter for AnnualTransactionCount.
     * Maximum number of transactions allowed on the card in a year.
     */
    public void unsetAnnualTransactionCount() {
        annualTransactionCount = null;
    }

    /**
     * Internal Getter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed on the card in the card’s life time.
     * @return Returns the Internal Double
     */
    @JsonGetter("LifeTimeTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLifeTimeTransactionCount() {
        return this.lifeTimeTransactionCount;
    }

    /**
     * Getter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed on the card in the card’s life time.
     * @return Returns the Double
     */
    public Double getLifeTimeTransactionCount() {
        return OptionalNullable.getFrom(lifeTimeTransactionCount);
    }

    /**
     * Setter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed on the card in the card’s life time.
     * @param lifeTimeTransactionCount Value for Double
     */
    @JsonSetter("LifeTimeTransactionCount")
    public void setLifeTimeTransactionCount(Double lifeTimeTransactionCount) {
        this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
    }

    /**
     * UnSetter for LifeTimeTransactionCount.
     * Maximum number of transactions allowed on the card in the card’s life time.
     */
    public void unsetLifeTimeTransactionCount() {
        lifeTimeTransactionCount = null;
    }

    /**
     * Getter for IsVelocityCeiling.
     * IsVelocityCeiling flag Note: When "True", the velocity defaults configured in MS DB will be
     * considered as the Max Limits for velocity changes. When ‘false’ max allowed limits will be
     * 999999999999 for Type “Count” and 9999999999.99 for Type ‘Value’.
     * @return Returns the Boolean
     */
    @JsonGetter("IsVelocityCeiling")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsVelocityCeiling() {
        return isVelocityCeiling;
    }

    /**
     * Setter for IsVelocityCeiling.
     * IsVelocityCeiling flag Note: When "True", the velocity defaults configured in MS DB will be
     * considered as the Max Limits for velocity changes. When ‘false’ max allowed limits will be
     * 999999999999 for Type “Count” and 9999999999.99 for Type ‘Value’.
     * @param isVelocityCeiling Value for Boolean
     */
    @JsonSetter("IsVelocityCeiling")
    public void setIsVelocityCeiling(Boolean isVelocityCeiling) {
        this.isVelocityCeiling = isVelocityCeiling;
    }

    /**
     * Converts this CardUsageRestrictions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CardUsageRestrictions [" + "level=" + level + ", dailySpendLimit=" + dailySpendLimit
                + ", weeklySpendLimit=" + weeklySpendLimit + ", monthlySpendLimit="
                + monthlySpendLimit + ", annualSpendLimit=" + annualSpendLimit
                + ", lifeTimeSpendLimit=" + lifeTimeSpendLimit + ", dailyVolumeLimit="
                + dailyVolumeLimit + ", weeklyVolumeLimit=" + weeklyVolumeLimit
                + ", monthlyVolumeLimit=" + monthlyVolumeLimit + ", annualVolumeLimit="
                + annualVolumeLimit + ", lifeTimeVolumeLimit=" + lifeTimeVolumeLimit
                + ", transactionSpendLimit=" + transactionSpendLimit + ", transactionVolumeLimit="
                + transactionVolumeLimit + ", dailyTransactionCount=" + dailyTransactionCount
                + ", weeklyTransactionCount=" + weeklyTransactionCount
                + ", monthlyTransactionCount=" + monthlyTransactionCount
                + ", annualTransactionCount=" + annualTransactionCount
                + ", lifeTimeTransactionCount=" + lifeTimeTransactionCount + ", isVelocityCeiling="
                + isVelocityCeiling + "]";
    }

    /**
     * Builds a new {@link CardUsageRestrictions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CardUsageRestrictions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .isVelocityCeiling(getIsVelocityCeiling());
        builder.level = internalGetLevel();
        builder.dailySpendLimit = internalGetDailySpendLimit();
        builder.weeklySpendLimit = internalGetWeeklySpendLimit();
        builder.monthlySpendLimit = internalGetMonthlySpendLimit();
        builder.annualSpendLimit = internalGetAnnualSpendLimit();
        builder.lifeTimeSpendLimit = internalGetLifeTimeSpendLimit();
        builder.dailyVolumeLimit = internalGetDailyVolumeLimit();
        builder.weeklyVolumeLimit = internalGetWeeklyVolumeLimit();
        builder.monthlyVolumeLimit = internalGetMonthlyVolumeLimit();
        builder.annualVolumeLimit = internalGetAnnualVolumeLimit();
        builder.lifeTimeVolumeLimit = internalGetLifeTimeVolumeLimit();
        builder.transactionSpendLimit = internalGetTransactionSpendLimit();
        builder.transactionVolumeLimit = internalGetTransactionVolumeLimit();
        builder.dailyTransactionCount = internalGetDailyTransactionCount();
        builder.weeklyTransactionCount = internalGetWeeklyTransactionCount();
        builder.monthlyTransactionCount = internalGetMonthlyTransactionCount();
        builder.annualTransactionCount = internalGetAnnualTransactionCount();
        builder.lifeTimeTransactionCount = internalGetLifeTimeTransactionCount();
        return builder;
    }

    /**
     * Class to build instances of {@link CardUsageRestrictions}.
     */
    public static class Builder {
        private OptionalNullable<String> level;
        private OptionalNullable<Double> dailySpendLimit;
        private OptionalNullable<Double> weeklySpendLimit;
        private OptionalNullable<Double> monthlySpendLimit;
        private OptionalNullable<Double> annualSpendLimit;
        private OptionalNullable<Double> lifeTimeSpendLimit;
        private OptionalNullable<Double> dailyVolumeLimit;
        private OptionalNullable<Double> weeklyVolumeLimit;
        private OptionalNullable<Double> monthlyVolumeLimit;
        private OptionalNullable<Double> annualVolumeLimit = OptionalNullable.of(0d);
        private OptionalNullable<Double> lifeTimeVolumeLimit;
        private OptionalNullable<Double> transactionSpendLimit;
        private OptionalNullable<Double> transactionVolumeLimit;
        private OptionalNullable<Double> dailyTransactionCount;
        private OptionalNullable<Double> weeklyTransactionCount;
        private OptionalNullable<Double> monthlyTransactionCount;
        private OptionalNullable<Double> annualTransactionCount;
        private OptionalNullable<Double> lifeTimeTransactionCount;
        private Boolean isVelocityCeiling;



        /**
         * Setter for level.
         * @param  level  String value for level.
         * @return Builder
         */
        public Builder level(String level) {
            this.level = OptionalNullable.of(level);
            return this;
        }

        /**
         * UnSetter for level.
         * @return Builder
         */
        public Builder unsetLevel() {
            level = null;
            return this;
        }

        /**
         * Setter for dailySpendLimit.
         * @param  dailySpendLimit  Double value for dailySpendLimit.
         * @return Builder
         */
        public Builder dailySpendLimit(Double dailySpendLimit) {
            this.dailySpendLimit = OptionalNullable.of(dailySpendLimit);
            return this;
        }

        /**
         * UnSetter for dailySpendLimit.
         * @return Builder
         */
        public Builder unsetDailySpendLimit() {
            dailySpendLimit = null;
            return this;
        }

        /**
         * Setter for weeklySpendLimit.
         * @param  weeklySpendLimit  Double value for weeklySpendLimit.
         * @return Builder
         */
        public Builder weeklySpendLimit(Double weeklySpendLimit) {
            this.weeklySpendLimit = OptionalNullable.of(weeklySpendLimit);
            return this;
        }

        /**
         * UnSetter for weeklySpendLimit.
         * @return Builder
         */
        public Builder unsetWeeklySpendLimit() {
            weeklySpendLimit = null;
            return this;
        }

        /**
         * Setter for monthlySpendLimit.
         * @param  monthlySpendLimit  Double value for monthlySpendLimit.
         * @return Builder
         */
        public Builder monthlySpendLimit(Double monthlySpendLimit) {
            this.monthlySpendLimit = OptionalNullable.of(monthlySpendLimit);
            return this;
        }

        /**
         * UnSetter for monthlySpendLimit.
         * @return Builder
         */
        public Builder unsetMonthlySpendLimit() {
            monthlySpendLimit = null;
            return this;
        }

        /**
         * Setter for annualSpendLimit.
         * @param  annualSpendLimit  Double value for annualSpendLimit.
         * @return Builder
         */
        public Builder annualSpendLimit(Double annualSpendLimit) {
            this.annualSpendLimit = OptionalNullable.of(annualSpendLimit);
            return this;
        }

        /**
         * UnSetter for annualSpendLimit.
         * @return Builder
         */
        public Builder unsetAnnualSpendLimit() {
            annualSpendLimit = null;
            return this;
        }

        /**
         * Setter for lifeTimeSpendLimit.
         * @param  lifeTimeSpendLimit  Double value for lifeTimeSpendLimit.
         * @return Builder
         */
        public Builder lifeTimeSpendLimit(Double lifeTimeSpendLimit) {
            this.lifeTimeSpendLimit = OptionalNullable.of(lifeTimeSpendLimit);
            return this;
        }

        /**
         * UnSetter for lifeTimeSpendLimit.
         * @return Builder
         */
        public Builder unsetLifeTimeSpendLimit() {
            lifeTimeSpendLimit = null;
            return this;
        }

        /**
         * Setter for dailyVolumeLimit.
         * @param  dailyVolumeLimit  Double value for dailyVolumeLimit.
         * @return Builder
         */
        public Builder dailyVolumeLimit(Double dailyVolumeLimit) {
            this.dailyVolumeLimit = OptionalNullable.of(dailyVolumeLimit);
            return this;
        }

        /**
         * UnSetter for dailyVolumeLimit.
         * @return Builder
         */
        public Builder unsetDailyVolumeLimit() {
            dailyVolumeLimit = null;
            return this;
        }

        /**
         * Setter for weeklyVolumeLimit.
         * @param  weeklyVolumeLimit  Double value for weeklyVolumeLimit.
         * @return Builder
         */
        public Builder weeklyVolumeLimit(Double weeklyVolumeLimit) {
            this.weeklyVolumeLimit = OptionalNullable.of(weeklyVolumeLimit);
            return this;
        }

        /**
         * UnSetter for weeklyVolumeLimit.
         * @return Builder
         */
        public Builder unsetWeeklyVolumeLimit() {
            weeklyVolumeLimit = null;
            return this;
        }

        /**
         * Setter for monthlyVolumeLimit.
         * @param  monthlyVolumeLimit  Double value for monthlyVolumeLimit.
         * @return Builder
         */
        public Builder monthlyVolumeLimit(Double monthlyVolumeLimit) {
            this.monthlyVolumeLimit = OptionalNullable.of(monthlyVolumeLimit);
            return this;
        }

        /**
         * UnSetter for monthlyVolumeLimit.
         * @return Builder
         */
        public Builder unsetMonthlyVolumeLimit() {
            monthlyVolumeLimit = null;
            return this;
        }

        /**
         * Setter for annualVolumeLimit.
         * @param  annualVolumeLimit  Double value for annualVolumeLimit.
         * @return Builder
         */
        public Builder annualVolumeLimit(Double annualVolumeLimit) {
            this.annualVolumeLimit = OptionalNullable.of(annualVolumeLimit);
            return this;
        }

        /**
         * UnSetter for annualVolumeLimit.
         * @return Builder
         */
        public Builder unsetAnnualVolumeLimit() {
            annualVolumeLimit = null;
            return this;
        }

        /**
         * Setter for lifeTimeVolumeLimit.
         * @param  lifeTimeVolumeLimit  Double value for lifeTimeVolumeLimit.
         * @return Builder
         */
        public Builder lifeTimeVolumeLimit(Double lifeTimeVolumeLimit) {
            this.lifeTimeVolumeLimit = OptionalNullable.of(lifeTimeVolumeLimit);
            return this;
        }

        /**
         * UnSetter for lifeTimeVolumeLimit.
         * @return Builder
         */
        public Builder unsetLifeTimeVolumeLimit() {
            lifeTimeVolumeLimit = null;
            return this;
        }

        /**
         * Setter for transactionSpendLimit.
         * @param  transactionSpendLimit  Double value for transactionSpendLimit.
         * @return Builder
         */
        public Builder transactionSpendLimit(Double transactionSpendLimit) {
            this.transactionSpendLimit = OptionalNullable.of(transactionSpendLimit);
            return this;
        }

        /**
         * UnSetter for transactionSpendLimit.
         * @return Builder
         */
        public Builder unsetTransactionSpendLimit() {
            transactionSpendLimit = null;
            return this;
        }

        /**
         * Setter for transactionVolumeLimit.
         * @param  transactionVolumeLimit  Double value for transactionVolumeLimit.
         * @return Builder
         */
        public Builder transactionVolumeLimit(Double transactionVolumeLimit) {
            this.transactionVolumeLimit = OptionalNullable.of(transactionVolumeLimit);
            return this;
        }

        /**
         * UnSetter for transactionVolumeLimit.
         * @return Builder
         */
        public Builder unsetTransactionVolumeLimit() {
            transactionVolumeLimit = null;
            return this;
        }

        /**
         * Setter for dailyTransactionCount.
         * @param  dailyTransactionCount  Double value for dailyTransactionCount.
         * @return Builder
         */
        public Builder dailyTransactionCount(Double dailyTransactionCount) {
            this.dailyTransactionCount = OptionalNullable.of(dailyTransactionCount);
            return this;
        }

        /**
         * UnSetter for dailyTransactionCount.
         * @return Builder
         */
        public Builder unsetDailyTransactionCount() {
            dailyTransactionCount = null;
            return this;
        }

        /**
         * Setter for weeklyTransactionCount.
         * @param  weeklyTransactionCount  Double value for weeklyTransactionCount.
         * @return Builder
         */
        public Builder weeklyTransactionCount(Double weeklyTransactionCount) {
            this.weeklyTransactionCount = OptionalNullable.of(weeklyTransactionCount);
            return this;
        }

        /**
         * UnSetter for weeklyTransactionCount.
         * @return Builder
         */
        public Builder unsetWeeklyTransactionCount() {
            weeklyTransactionCount = null;
            return this;
        }

        /**
         * Setter for monthlyTransactionCount.
         * @param  monthlyTransactionCount  Double value for monthlyTransactionCount.
         * @return Builder
         */
        public Builder monthlyTransactionCount(Double monthlyTransactionCount) {
            this.monthlyTransactionCount = OptionalNullable.of(monthlyTransactionCount);
            return this;
        }

        /**
         * UnSetter for monthlyTransactionCount.
         * @return Builder
         */
        public Builder unsetMonthlyTransactionCount() {
            monthlyTransactionCount = null;
            return this;
        }

        /**
         * Setter for annualTransactionCount.
         * @param  annualTransactionCount  Double value for annualTransactionCount.
         * @return Builder
         */
        public Builder annualTransactionCount(Double annualTransactionCount) {
            this.annualTransactionCount = OptionalNullable.of(annualTransactionCount);
            return this;
        }

        /**
         * UnSetter for annualTransactionCount.
         * @return Builder
         */
        public Builder unsetAnnualTransactionCount() {
            annualTransactionCount = null;
            return this;
        }

        /**
         * Setter for lifeTimeTransactionCount.
         * @param  lifeTimeTransactionCount  Double value for lifeTimeTransactionCount.
         * @return Builder
         */
        public Builder lifeTimeTransactionCount(Double lifeTimeTransactionCount) {
            this.lifeTimeTransactionCount = OptionalNullable.of(lifeTimeTransactionCount);
            return this;
        }

        /**
         * UnSetter for lifeTimeTransactionCount.
         * @return Builder
         */
        public Builder unsetLifeTimeTransactionCount() {
            lifeTimeTransactionCount = null;
            return this;
        }

        /**
         * Setter for isVelocityCeiling.
         * @param  isVelocityCeiling  Boolean value for isVelocityCeiling.
         * @return Builder
         */
        public Builder isVelocityCeiling(Boolean isVelocityCeiling) {
            this.isVelocityCeiling = isVelocityCeiling;
            return this;
        }

        /**
         * Builds a new {@link CardUsageRestrictions} object using the set fields.
         * @return {@link CardUsageRestrictions}
         */
        public CardUsageRestrictions build() {
            return new CardUsageRestrictions(level, dailySpendLimit, weeklySpendLimit,
                    monthlySpendLimit, annualSpendLimit, lifeTimeSpendLimit, dailyVolumeLimit,
                    weeklyVolumeLimit, monthlyVolumeLimit, annualVolumeLimit, lifeTimeVolumeLimit,
                    transactionSpendLimit, transactionVolumeLimit, dailyTransactionCount,
                    weeklyTransactionCount, monthlyTransactionCount, annualTransactionCount,
                    lifeTimeTransactionCount, isVelocityCeiling);
        }
    }
}
