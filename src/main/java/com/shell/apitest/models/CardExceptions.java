/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for CardExceptions type.
 */
public class CardExceptions {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Integer> day;
    private OptionalNullable<String> driverName;
    private OptionalNullable<Integer> month;
    private OptionalNullable<String> pAN;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerShortName;
    private OptionalNullable<Double> totalAmount;
    private OptionalNullable<Integer> totalQuantity;
    private OptionalNullable<Integer> totalSalesItems;
    private OptionalNullable<Integer> totalTransactions;
    private OptionalNullable<String> vRN;
    private OptionalNullable<Integer> week;
    private OptionalNullable<Integer> year;

    /**
     * Default constructor.
     */
    public CardExceptions() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  cardId  Integer value for cardId.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  day  Integer value for day.
     * @param  driverName  String value for driverName.
     * @param  month  Integer value for month.
     * @param  pAN  String value for pAN.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerShortName  String value for payerShortName.
     * @param  totalAmount  Double value for totalAmount.
     * @param  totalQuantity  Integer value for totalQuantity.
     * @param  totalSalesItems  Integer value for totalSalesItems.
     * @param  totalTransactions  Integer value for totalTransactions.
     * @param  vRN  String value for vRN.
     * @param  week  Integer value for week.
     * @param  year  Integer value for year.
     */
    public CardExceptions(
            Integer accountId,
            String accountNumber,
            String accountShortName,
            Integer cardId,
            String currencyCode,
            String currencySymbol,
            Integer day,
            String driverName,
            Integer month,
            String pAN,
            Integer payerId,
            String payerNumber,
            String payerShortName,
            Double totalAmount,
            Integer totalQuantity,
            Integer totalSalesItems,
            Integer totalTransactions,
            String vRN,
            Integer week,
            Integer year) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.cardId = OptionalNullable.of(cardId);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.day = OptionalNullable.of(day);
        this.driverName = OptionalNullable.of(driverName);
        this.month = OptionalNullable.of(month);
        this.pAN = OptionalNullable.of(pAN);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerShortName = OptionalNullable.of(payerShortName);
        this.totalAmount = OptionalNullable.of(totalAmount);
        this.totalQuantity = OptionalNullable.of(totalQuantity);
        this.totalSalesItems = OptionalNullable.of(totalSalesItems);
        this.totalTransactions = OptionalNullable.of(totalTransactions);
        this.vRN = OptionalNullable.of(vRN);
        this.week = OptionalNullable.of(week);
        this.year = OptionalNullable.of(year);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  cardId  Integer value for cardId.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  day  Integer value for day.
     * @param  driverName  String value for driverName.
     * @param  month  Integer value for month.
     * @param  pAN  String value for pAN.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerShortName  String value for payerShortName.
     * @param  totalAmount  Double value for totalAmount.
     * @param  totalQuantity  Integer value for totalQuantity.
     * @param  totalSalesItems  Integer value for totalSalesItems.
     * @param  totalTransactions  Integer value for totalTransactions.
     * @param  vRN  String value for vRN.
     * @param  week  Integer value for week.
     * @param  year  Integer value for year.
     */

    protected CardExceptions(OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountShortName,
            OptionalNullable<Integer> cardId, OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<Integer> day,
            OptionalNullable<String> driverName, OptionalNullable<Integer> month,
            OptionalNullable<String> pAN, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, OptionalNullable<String> payerShortName,
            OptionalNullable<Double> totalAmount, OptionalNullable<Integer> totalQuantity,
            OptionalNullable<Integer> totalSalesItems, OptionalNullable<Integer> totalTransactions,
            OptionalNullable<String> vRN, OptionalNullable<Integer> week,
            OptionalNullable<Integer> year) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.cardId = cardId;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.day = day;
        this.driverName = driverName;
        this.month = month;
        this.pAN = pAN;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.payerShortName = payerShortName;
        this.totalAmount = totalAmount;
        this.totalQuantity = totalQuantity;
        this.totalSalesItems = totalSalesItems;
        this.totalTransactions = totalTransactions;
        this.vRN = vRN;
        this.week = week;
        this.year = year;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Id
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Id
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Id
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO currency code
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO currency code
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO currency code
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO currency code
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Currency symbol of the Invoice Currency Code
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Currency symbol of the Invoice Currency Code
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Currency symbol of the Invoice Currency Code
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Currency symbol of the Invoice Currency Code
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay() {
        return this.day;
    }

    /**
     * Getter for Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     * @return Returns the Integer
     */
    public Integer getDay() {
        return OptionalNullable.getFrom(day);
    }

    /**
     * Setter for Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     * @param day Value for Integer
     */
    @JsonSetter("Day")
    public void setDay(Integer day) {
        this.day = OptionalNullable.of(day);
    }

    /**
     * UnSetter for Day.
     * Summary Day: Populated when the Period is passed as ‘Day’.
     */
    public void unsetDay() {
        day = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver name
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver name
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver name
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver name
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Month")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMonth() {
        return this.month;
    }

    /**
     * Getter for Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     * @return Returns the Integer
     */
    public Integer getMonth() {
        return OptionalNullable.getFrom(month);
    }

    /**
     * Setter for Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     * @param month Value for Integer
     */
    @JsonSetter("Month")
    public void setMonth(Integer month) {
        this.month = OptionalNullable.of(month);
    }

    /**
     * UnSetter for Month.
     * Summary Month: Populated when the Value of Period is Passed as ‘Month’.
     */
    public void unsetMonth() {
        month = null;
    }

    /**
     * Internal Getter for PAN.
     * Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("PAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPAN() {
        return this.pAN;
    }

    /**
     * Getter for PAN.
     * Card PAN
     * @return Returns the String
     */
    public String getPAN() {
        return OptionalNullable.getFrom(pAN);
    }

    /**
     * Setter for PAN.
     * Card PAN
     * @param pAN Value for String
     */
    @JsonSetter("PAN")
    public void setPAN(String pAN) {
        this.pAN = OptionalNullable.of(pAN);
    }

    /**
     * UnSetter for PAN.
     * Card PAN
     */
    public void unsetPAN() {
        pAN = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payment customer id of the customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payment customer id of the customer
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payment customer id of the customer
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payment customer id of the customer
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerShortName.
     * Payer Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerShortName() {
        return this.payerShortName;
    }

    /**
     * Getter for PayerShortName.
     * Payer Short Name
     * @return Returns the String
     */
    public String getPayerShortName() {
        return OptionalNullable.getFrom(payerShortName);
    }

    /**
     * Setter for PayerShortName.
     * Payer Short Name
     * @param payerShortName Value for String
     */
    @JsonSetter("PayerShortName")
    public void setPayerShortName(String payerShortName) {
        this.payerShortName = OptionalNullable.of(payerShortName);
    }

    /**
     * UnSetter for PayerShortName.
     * Payer Short Name
     */
    public void unsetPayerShortName() {
        payerShortName = null;
    }

    /**
     * Internal Getter for TotalAmount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalAmount() {
        return this.totalAmount;
    }

    /**
     * Getter for TotalAmount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     * @return Returns the Double
     */
    public Double getTotalAmount() {
        return OptionalNullable.getFrom(totalAmount);
    }

    /**
     * Setter for TotalAmount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     * @param totalAmount Value for Double
     */
    @JsonSetter("TotalAmount")
    public void setTotalAmount(Double totalAmount) {
        this.totalAmount = OptionalNullable.of(totalAmount);
    }

    /**
     * UnSetter for TotalAmount.
     * Total Amount (In Customer Currency) of Transactions met with the given exceptions criteria.
     */
    public void unsetTotalAmount() {
        totalAmount = null;
    }

    /**
     * Internal Getter for TotalQuantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalQuantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalQuantity() {
        return this.totalQuantity;
    }

    /**
     * Getter for TotalQuantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     * @return Returns the Integer
     */
    public Integer getTotalQuantity() {
        return OptionalNullable.getFrom(totalQuantity);
    }

    /**
     * Setter for TotalQuantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     * @param totalQuantity Value for Integer
     */
    @JsonSetter("TotalQuantity")
    public void setTotalQuantity(Integer totalQuantity) {
        this.totalQuantity = OptionalNullable.of(totalQuantity);
    }

    /**
     * UnSetter for TotalQuantity.
     * Total Quantity of Transactions met with the given exceptions criteria.
     */
    public void unsetTotalQuantity() {
        totalQuantity = null;
    }

    /**
     * Internal Getter for TotalSalesItems.
     * Total number of Sales Items met with the given exception criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalSalesItems")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalSalesItems() {
        return this.totalSalesItems;
    }

    /**
     * Getter for TotalSalesItems.
     * Total number of Sales Items met with the given exception criteria.
     * @return Returns the Integer
     */
    public Integer getTotalSalesItems() {
        return OptionalNullable.getFrom(totalSalesItems);
    }

    /**
     * Setter for TotalSalesItems.
     * Total number of Sales Items met with the given exception criteria.
     * @param totalSalesItems Value for Integer
     */
    @JsonSetter("TotalSalesItems")
    public void setTotalSalesItems(Integer totalSalesItems) {
        this.totalSalesItems = OptionalNullable.of(totalSalesItems);
    }

    /**
     * UnSetter for TotalSalesItems.
     * Total number of Sales Items met with the given exception criteria.
     */
    public void unsetTotalSalesItems() {
        totalSalesItems = null;
    }

    /**
     * Internal Getter for TotalTransactions.
     * Total number of Transactions met with the given exception criteria.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalTransactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalTransactions() {
        return this.totalTransactions;
    }

    /**
     * Getter for TotalTransactions.
     * Total number of Transactions met with the given exception criteria.
     * @return Returns the Integer
     */
    public Integer getTotalTransactions() {
        return OptionalNullable.getFrom(totalTransactions);
    }

    /**
     * Setter for TotalTransactions.
     * Total number of Transactions met with the given exception criteria.
     * @param totalTransactions Value for Integer
     */
    @JsonSetter("TotalTransactions")
    public void setTotalTransactions(Integer totalTransactions) {
        this.totalTransactions = OptionalNullable.of(totalTransactions);
    }

    /**
     * UnSetter for TotalTransactions.
     * Total number of Transactions met with the given exception criteria.
     */
    public void unsetTotalTransactions() {
        totalTransactions = null;
    }

    /**
     * Internal Getter for VRN.
     * Vehicle Registration Number
     * @return Returns the Internal String
     */
    @JsonGetter("VRN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVRN() {
        return this.vRN;
    }

    /**
     * Getter for VRN.
     * Vehicle Registration Number
     * @return Returns the String
     */
    public String getVRN() {
        return OptionalNullable.getFrom(vRN);
    }

    /**
     * Setter for VRN.
     * Vehicle Registration Number
     * @param vRN Value for String
     */
    @JsonSetter("VRN")
    public void setVRN(String vRN) {
        this.vRN = OptionalNullable.of(vRN);
    }

    /**
     * UnSetter for VRN.
     * Vehicle Registration Number
     */
    public void unsetVRN() {
        vRN = null;
    }

    /**
     * Internal Getter for Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is
     * Passed as ‘Week’.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Week")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetWeek() {
        return this.week;
    }

    /**
     * Getter for Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is
     * Passed as ‘Week’.
     * @return Returns the Integer
     */
    public Integer getWeek() {
        return OptionalNullable.getFrom(week);
    }

    /**
     * Setter for Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is
     * Passed as ‘Week’.
     * @param week Value for Integer
     */
    @JsonSetter("Week")
    public void setWeek(Integer week) {
        this.week = OptionalNullable.of(week);
    }

    /**
     * UnSetter for Week.
     * Summary Week Number with in the given date range. Populated when the Value of Period is
     * Passed as ‘Week’.
     */
    public void unsetWeek() {
        week = null;
    }

    /**
     * Internal Getter for Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Year")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetYear() {
        return this.year;
    }

    /**
     * Getter for Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     * @return Returns the Integer
     */
    public Integer getYear() {
        return OptionalNullable.getFrom(year);
    }

    /**
     * Setter for Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     * @param year Value for Integer
     */
    @JsonSetter("Year")
    public void setYear(Integer year) {
        this.year = OptionalNullable.of(year);
    }

    /**
     * UnSetter for Year.
     * Summary Year: Populated when the Value of Period is Passed as ‘Month’.
     */
    public void unsetYear() {
        year = null;
    }

    /**
     * Converts this CardExceptions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CardExceptions [" + "accountId=" + accountId + ", accountNumber=" + accountNumber
                + ", accountShortName=" + accountShortName + ", cardId=" + cardId
                + ", currencyCode=" + currencyCode + ", currencySymbol=" + currencySymbol + ", day="
                + day + ", driverName=" + driverName + ", month=" + month + ", pAN=" + pAN
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", payerShortName="
                + payerShortName + ", totalAmount=" + totalAmount + ", totalQuantity="
                + totalQuantity + ", totalSalesItems=" + totalSalesItems + ", totalTransactions="
                + totalTransactions + ", vRN=" + vRN + ", week=" + week + ", year=" + year + "]";
    }

    /**
     * Builds a new {@link CardExceptions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CardExceptions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.cardId = internalGetCardId();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.day = internalGetDay();
        builder.driverName = internalGetDriverName();
        builder.month = internalGetMonth();
        builder.pAN = internalGetPAN();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerShortName = internalGetPayerShortName();
        builder.totalAmount = internalGetTotalAmount();
        builder.totalQuantity = internalGetTotalQuantity();
        builder.totalSalesItems = internalGetTotalSalesItems();
        builder.totalTransactions = internalGetTotalTransactions();
        builder.vRN = internalGetVRN();
        builder.week = internalGetWeek();
        builder.year = internalGetYear();
        return builder;
    }

    /**
     * Class to build instances of {@link CardExceptions}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Integer> day;
        private OptionalNullable<String> driverName;
        private OptionalNullable<Integer> month;
        private OptionalNullable<String> pAN;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerShortName;
        private OptionalNullable<Double> totalAmount;
        private OptionalNullable<Integer> totalQuantity;
        private OptionalNullable<Integer> totalSalesItems;
        private OptionalNullable<Integer> totalTransactions;
        private OptionalNullable<String> vRN;
        private OptionalNullable<Integer> week;
        private OptionalNullable<Integer> year;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for day.
         * @param  day  Integer value for day.
         * @return Builder
         */
        public Builder day(Integer day) {
            this.day = OptionalNullable.of(day);
            return this;
        }

        /**
         * UnSetter for day.
         * @return Builder
         */
        public Builder unsetDay() {
            day = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for month.
         * @param  month  Integer value for month.
         * @return Builder
         */
        public Builder month(Integer month) {
            this.month = OptionalNullable.of(month);
            return this;
        }

        /**
         * UnSetter for month.
         * @return Builder
         */
        public Builder unsetMonth() {
            month = null;
            return this;
        }

        /**
         * Setter for pAN.
         * @param  pAN  String value for pAN.
         * @return Builder
         */
        public Builder pAN(String pAN) {
            this.pAN = OptionalNullable.of(pAN);
            return this;
        }

        /**
         * UnSetter for pAN.
         * @return Builder
         */
        public Builder unsetPAN() {
            pAN = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerShortName.
         * @param  payerShortName  String value for payerShortName.
         * @return Builder
         */
        public Builder payerShortName(String payerShortName) {
            this.payerShortName = OptionalNullable.of(payerShortName);
            return this;
        }

        /**
         * UnSetter for payerShortName.
         * @return Builder
         */
        public Builder unsetPayerShortName() {
            payerShortName = null;
            return this;
        }

        /**
         * Setter for totalAmount.
         * @param  totalAmount  Double value for totalAmount.
         * @return Builder
         */
        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = OptionalNullable.of(totalAmount);
            return this;
        }

        /**
         * UnSetter for totalAmount.
         * @return Builder
         */
        public Builder unsetTotalAmount() {
            totalAmount = null;
            return this;
        }

        /**
         * Setter for totalQuantity.
         * @param  totalQuantity  Integer value for totalQuantity.
         * @return Builder
         */
        public Builder totalQuantity(Integer totalQuantity) {
            this.totalQuantity = OptionalNullable.of(totalQuantity);
            return this;
        }

        /**
         * UnSetter for totalQuantity.
         * @return Builder
         */
        public Builder unsetTotalQuantity() {
            totalQuantity = null;
            return this;
        }

        /**
         * Setter for totalSalesItems.
         * @param  totalSalesItems  Integer value for totalSalesItems.
         * @return Builder
         */
        public Builder totalSalesItems(Integer totalSalesItems) {
            this.totalSalesItems = OptionalNullable.of(totalSalesItems);
            return this;
        }

        /**
         * UnSetter for totalSalesItems.
         * @return Builder
         */
        public Builder unsetTotalSalesItems() {
            totalSalesItems = null;
            return this;
        }

        /**
         * Setter for totalTransactions.
         * @param  totalTransactions  Integer value for totalTransactions.
         * @return Builder
         */
        public Builder totalTransactions(Integer totalTransactions) {
            this.totalTransactions = OptionalNullable.of(totalTransactions);
            return this;
        }

        /**
         * UnSetter for totalTransactions.
         * @return Builder
         */
        public Builder unsetTotalTransactions() {
            totalTransactions = null;
            return this;
        }

        /**
         * Setter for vRN.
         * @param  vRN  String value for vRN.
         * @return Builder
         */
        public Builder vRN(String vRN) {
            this.vRN = OptionalNullable.of(vRN);
            return this;
        }

        /**
         * UnSetter for vRN.
         * @return Builder
         */
        public Builder unsetVRN() {
            vRN = null;
            return this;
        }

        /**
         * Setter for week.
         * @param  week  Integer value for week.
         * @return Builder
         */
        public Builder week(Integer week) {
            this.week = OptionalNullable.of(week);
            return this;
        }

        /**
         * UnSetter for week.
         * @return Builder
         */
        public Builder unsetWeek() {
            week = null;
            return this;
        }

        /**
         * Setter for year.
         * @param  year  Integer value for year.
         * @return Builder
         */
        public Builder year(Integer year) {
            this.year = OptionalNullable.of(year);
            return this;
        }

        /**
         * UnSetter for year.
         * @return Builder
         */
        public Builder unsetYear() {
            year = null;
            return this;
        }

        /**
         * Builds a new {@link CardExceptions} object using the set fields.
         * @return {@link CardExceptions}
         */
        public CardExceptions build() {
            return new CardExceptions(accountId, accountNumber, accountShortName, cardId,
                    currencyCode, currencySymbol, day, driverName, month, pAN, payerId, payerNumber,
                    payerShortName, totalAmount, totalQuantity, totalSalesItems, totalTransactions,
                    vRN, week, year);
        }
    }
}
