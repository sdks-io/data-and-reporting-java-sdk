/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for PayerDetails type.
 */
public class PayerDetails {
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<String> countryCode;
    private OptionalNullable<String> country;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerFullName;
    private OptionalNullable<String> payerShortName;
    private OptionalNullable<Integer> payerGroupId;
    private OptionalNullable<Double> amountDue;
    private OptionalNullable<Double> amountOverdue;
    private OptionalNullable<Double> amountNotOverdue;
    private OptionalNullable<Double> outstandingBalance;
    private OptionalNullable<Double> unallocatedPayment;
    private OptionalNullable<String> sOACurrencyCode;
    private OptionalNullable<String> sOACurrencySymbol;
    private OptionalNullable<String> sOACreditLimitCurrencyCode;
    private OptionalNullable<String> sOACreditLimitCurrencySymbol;
    private OptionalNullable<String> lastPaymentCurrencyCode;
    private OptionalNullable<String> lastPaymentCurrencySymbol;
    private OptionalNullable<Double> lastPaymentAmount;
    private OptionalNullable<String> lastPaymentDate;
    private OptionalNullable<Double> sOALastPaymentAmount;
    private OptionalNullable<String> sOALastPaymentDate;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<String> colCoCountryCode;
    private OptionalNullable<String> localCurrencyCode;
    private OptionalNullable<String> localCurrencySymbol;
    private OptionalNullable<Double> localCurrencyExchangeRate;
    private OptionalNullable<Double> localCurrencyExchangeRateSoA;
    private OptionalNullable<Integer> billingFrequencyTypeId;
    private OptionalNullable<String> billingFrequencyType;
    private OptionalNullable<Integer> billingRunFrequencyTypeId;
    private OptionalNullable<String> billingRunFrequnecy;
    private OptionalNullable<Integer> day1Run;
    private OptionalNullable<Integer> day2Run;
    private OptionalNullable<Integer> day3Run;
    private OptionalNullable<Integer> day4Run;
    private List<InvoiceDistributionMethod> invoiceDistributionMethods;
    private OptionalNullable<String> outputType;
    private OptionalNullable<Integer> invoiceAccountID;
    private OptionalNullable<String> invoiceAccountNumber;
    private OptionalNullable<String> invoiceAccountShortName;
    private Boolean bestOfIndicator;
    private Boolean isInternational;
    private OptionalNullable<Integer> totalAccounts;
    private OptionalNullable<Integer> totalActiveAccounts;
    private OptionalNullable<Integer> totalCards;
    private OptionalNullable<Integer> totalActiveCards;
    private OptionalNullable<Integer> totalBlockedCards;
    private OptionalNullable<Integer> totalCancelledCards;
    private OptionalNullable<Integer> totalExpiredCards;
    private OptionalNullable<Integer> totalRenewalPendingCards;
    private OptionalNullable<Integer> totalReplacedCards;
    private OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer;
    private OptionalNullable<Integer> totalTemporaryBlockCardsByShell;
    private OptionalNullable<Integer> totalNewCards;
    private OptionalNullable<Integer> totalFraudCards;
    private OptionalNullable<Integer> totalBlockedAccounts;
    private OptionalNullable<Integer> totalCancelledAccounts;
    private OptionalNullable<String> payerTradingName;
    private String status;
    private OptionalNullable<String> billingLanguage;
    private OptionalNullable<String> legalEntity;
    private OptionalNullable<String> dateEstablished;
    private OptionalNullable<String> customerClassification;
    private OptionalNullable<String> industryClass;
    private OptionalNullable<String> marketingSegmentation;
    private OptionalNullable<String> lineOfBusiness;
    private Boolean printCreditLimit;
    private OptionalNullable<String> cardGroupType;
    private Boolean renewCards;
    private Boolean allowSelectPIN;
    private Boolean useFleetPIN;
    private OptionalNullable<String> vATRegNumber;
    private String vATRegNumber2;
    private OptionalNullable<String> registrationNumber;
    private OptionalNullable<String> registrationNumber2;
    private OptionalNullable<Double> salesLedgerBalance;
    private OptionalNullable<Double> exposure;
    private OptionalNullable<Double> outstandingDebt;
    private OptionalNullable<Double> availableCredit;
    private OptionalNullable<String> band;
    private OptionalNullable<String> globalCustomerReferenceId;
    private OptionalNullable<Double> creditLimit;
    private OptionalNullable<Double> creditLimitInCustomerCurrency;
    private OptionalNullable<String> billingCurrencyCode;
    private OptionalNullable<String> billingCurrencySymbol;
    private OptionalNullable<String> paymentMethod;
    private OptionalNullable<String> paymentTerms;
    private OptionalNullable<Double> temporaryCreditLimitIncrease;
    private OptionalNullable<Double> temporaryCreditLimitIncreaseInCustomerCurrency;
    private OptionalNullable<String> temporaryCreditLimitExpiryDate;
    private List<BankAccount> payerBankAccount;
    private Address cardDeliveryAddress;
    private Address correspondanceAddress;
    private Address billingAddress;
    private Boolean hasActiveVolBasedPricing;
    private Boolean hasActiveVolBasedBonus;
    private Boolean hasActiveVolBasedAssociationBonus;
    private FinanceCurrency financeCurrency;
    private OptionalNullable<String> tollsCustomerId;
    private OptionalNullable<String> tollsColcoCountryTypeId;
    private List<CustomerContract> contracts;

    /**
     * Default constructor.
     */
    public PayerDetails() {
        bestOfIndicator = false;
        isInternational = false;
        printCreditLimit = false;
        renewCards = false;
        allowSelectPIN = false;
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  countryCode  String value for countryCode.
     * @param  country  String value for country.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerFullName  String value for payerFullName.
     * @param  payerShortName  String value for payerShortName.
     * @param  payerGroupId  Integer value for payerGroupId.
     * @param  amountDue  Double value for amountDue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  unallocatedPayment  Double value for unallocatedPayment.
     * @param  sOACurrencyCode  String value for sOACurrencyCode.
     * @param  sOACurrencySymbol  String value for sOACurrencySymbol.
     * @param  sOACreditLimitCurrencyCode  String value for sOACreditLimitCurrencyCode.
     * @param  sOACreditLimitCurrencySymbol  String value for sOACreditLimitCurrencySymbol.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentAmount  Double value for lastPaymentAmount.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  sOALastPaymentAmount  Double value for sOALastPaymentAmount.
     * @param  sOALastPaymentDate  String value for sOALastPaymentDate.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
     * @param  localCurrencyExchangeRateSoA  Double value for localCurrencyExchangeRateSoA.
     * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
     * @param  billingFrequencyType  String value for billingFrequencyType.
     * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
     * @param  billingRunFrequnecy  String value for billingRunFrequnecy.
     * @param  day1Run  Integer value for day1Run.
     * @param  day2Run  Integer value for day2Run.
     * @param  day3Run  Integer value for day3Run.
     * @param  day4Run  Integer value for day4Run.
     * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
     *         invoiceDistributionMethods.
     * @param  outputType  String value for outputType.
     * @param  invoiceAccountID  Integer value for invoiceAccountID.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  bestOfIndicator  Boolean value for bestOfIndicator.
     * @param  isInternational  Boolean value for isInternational.
     * @param  totalAccounts  Integer value for totalAccounts.
     * @param  totalActiveAccounts  Integer value for totalActiveAccounts.
     * @param  totalCards  Integer value for totalCards.
     * @param  totalActiveCards  Integer value for totalActiveCards.
     * @param  totalBlockedCards  Integer value for totalBlockedCards.
     * @param  totalCancelledCards  Integer value for totalCancelledCards.
     * @param  totalExpiredCards  Integer value for totalExpiredCards.
     * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
     * @param  totalReplacedCards  Integer value for totalReplacedCards.
     * @param  totalTemporaryBlockCardsByCustomer  Integer value for
     *         totalTemporaryBlockCardsByCustomer.
     * @param  totalTemporaryBlockCardsByShell  Integer value for totalTemporaryBlockCardsByShell.
     * @param  totalNewCards  Integer value for totalNewCards.
     * @param  totalFraudCards  Integer value for totalFraudCards.
     * @param  totalBlockedAccounts  Integer value for totalBlockedAccounts.
     * @param  totalCancelledAccounts  Integer value for totalCancelledAccounts.
     * @param  payerTradingName  String value for payerTradingName.
     * @param  status  String value for status.
     * @param  billingLanguage  String value for billingLanguage.
     * @param  legalEntity  String value for legalEntity.
     * @param  dateEstablished  String value for dateEstablished.
     * @param  customerClassification  String value for customerClassification.
     * @param  industryClass  String value for industryClass.
     * @param  marketingSegmentation  String value for marketingSegmentation.
     * @param  lineOfBusiness  String value for lineOfBusiness.
     * @param  printCreditLimit  Boolean value for printCreditLimit.
     * @param  cardGroupType  String value for cardGroupType.
     * @param  renewCards  Boolean value for renewCards.
     * @param  allowSelectPIN  Boolean value for allowSelectPIN.
     * @param  useFleetPIN  Boolean value for useFleetPIN.
     * @param  vATRegNumber  String value for vATRegNumber.
     * @param  vATRegNumber2  String value for vATRegNumber2.
     * @param  registrationNumber  String value for registrationNumber.
     * @param  registrationNumber2  String value for registrationNumber2.
     * @param  salesLedgerBalance  Double value for salesLedgerBalance.
     * @param  exposure  Double value for exposure.
     * @param  outstandingDebt  Double value for outstandingDebt.
     * @param  availableCredit  Double value for availableCredit.
     * @param  band  String value for band.
     * @param  globalCustomerReferenceId  String value for globalCustomerReferenceId.
     * @param  creditLimit  Double value for creditLimit.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  temporaryCreditLimitIncrease  Double value for temporaryCreditLimitIncrease.
     * @param  temporaryCreditLimitIncreaseInCustomerCurrency  Double value for
     *         temporaryCreditLimitIncreaseInCustomerCurrency.
     * @param  temporaryCreditLimitExpiryDate  String value for temporaryCreditLimitExpiryDate.
     * @param  payerBankAccount  List of BankAccount value for payerBankAccount.
     * @param  cardDeliveryAddress  Address value for cardDeliveryAddress.
     * @param  correspondanceAddress  Address value for correspondanceAddress.
     * @param  billingAddress  Address value for billingAddress.
     * @param  hasActiveVolBasedPricing  Boolean value for hasActiveVolBasedPricing.
     * @param  hasActiveVolBasedBonus  Boolean value for hasActiveVolBasedBonus.
     * @param  hasActiveVolBasedAssociationBonus  Boolean value for
     *         hasActiveVolBasedAssociationBonus.
     * @param  financeCurrency  FinanceCurrency value for financeCurrency.
     * @param  tollsCustomerId  String value for tollsCustomerId.
     * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
     * @param  contracts  List of CustomerContract value for contracts.
     */
    public PayerDetails(
            Integer colCoId,
            Integer colCoCode,
            String countryCode,
            String country,
            Integer payerId,
            String payerNumber,
            String payerFullName,
            String payerShortName,
            Integer payerGroupId,
            Double amountDue,
            Double amountOverdue,
            Double amountNotOverdue,
            Double outstandingBalance,
            Double unallocatedPayment,
            String sOACurrencyCode,
            String sOACurrencySymbol,
            String sOACreditLimitCurrencyCode,
            String sOACreditLimitCurrencySymbol,
            String lastPaymentCurrencyCode,
            String lastPaymentCurrencySymbol,
            Double lastPaymentAmount,
            String lastPaymentDate,
            Double sOALastPaymentAmount,
            String sOALastPaymentDate,
            String currencyCode,
            String currencySymbol,
            String colCoCountryCode,
            String localCurrencyCode,
            String localCurrencySymbol,
            Double localCurrencyExchangeRate,
            Double localCurrencyExchangeRateSoA,
            Integer billingFrequencyTypeId,
            String billingFrequencyType,
            Integer billingRunFrequencyTypeId,
            String billingRunFrequnecy,
            Integer day1Run,
            Integer day2Run,
            Integer day3Run,
            Integer day4Run,
            List<InvoiceDistributionMethod> invoiceDistributionMethods,
            String outputType,
            Integer invoiceAccountID,
            String invoiceAccountNumber,
            String invoiceAccountShortName,
            Boolean bestOfIndicator,
            Boolean isInternational,
            Integer totalAccounts,
            Integer totalActiveAccounts,
            Integer totalCards,
            Integer totalActiveCards,
            Integer totalBlockedCards,
            Integer totalCancelledCards,
            Integer totalExpiredCards,
            Integer totalRenewalPendingCards,
            Integer totalReplacedCards,
            Integer totalTemporaryBlockCardsByCustomer,
            Integer totalTemporaryBlockCardsByShell,
            Integer totalNewCards,
            Integer totalFraudCards,
            Integer totalBlockedAccounts,
            Integer totalCancelledAccounts,
            String payerTradingName,
            String status,
            String billingLanguage,
            String legalEntity,
            String dateEstablished,
            String customerClassification,
            String industryClass,
            String marketingSegmentation,
            String lineOfBusiness,
            Boolean printCreditLimit,
            String cardGroupType,
            Boolean renewCards,
            Boolean allowSelectPIN,
            Boolean useFleetPIN,
            String vATRegNumber,
            String vATRegNumber2,
            String registrationNumber,
            String registrationNumber2,
            Double salesLedgerBalance,
            Double exposure,
            Double outstandingDebt,
            Double availableCredit,
            String band,
            String globalCustomerReferenceId,
            Double creditLimit,
            Double creditLimitInCustomerCurrency,
            String billingCurrencyCode,
            String billingCurrencySymbol,
            String paymentMethod,
            String paymentTerms,
            Double temporaryCreditLimitIncrease,
            Double temporaryCreditLimitIncreaseInCustomerCurrency,
            String temporaryCreditLimitExpiryDate,
            List<BankAccount> payerBankAccount,
            Address cardDeliveryAddress,
            Address correspondanceAddress,
            Address billingAddress,
            Boolean hasActiveVolBasedPricing,
            Boolean hasActiveVolBasedBonus,
            Boolean hasActiveVolBasedAssociationBonus,
            FinanceCurrency financeCurrency,
            String tollsCustomerId,
            String tollsColcoCountryTypeId,
            List<CustomerContract> contracts) {
        this.colCoId = OptionalNullable.of(colCoId);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.countryCode = OptionalNullable.of(countryCode);
        this.country = OptionalNullable.of(country);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerFullName = OptionalNullable.of(payerFullName);
        this.payerShortName = OptionalNullable.of(payerShortName);
        this.payerGroupId = OptionalNullable.of(payerGroupId);
        this.amountDue = OptionalNullable.of(amountDue);
        this.amountOverdue = OptionalNullable.of(amountOverdue);
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
        this.sOACurrencyCode = OptionalNullable.of(sOACurrencyCode);
        this.sOACurrencySymbol = OptionalNullable.of(sOACurrencySymbol);
        this.sOACreditLimitCurrencyCode = OptionalNullable.of(sOACreditLimitCurrencyCode);
        this.sOACreditLimitCurrencySymbol = OptionalNullable.of(sOACreditLimitCurrencySymbol);
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
        this.lastPaymentAmount = OptionalNullable.of(lastPaymentAmount);
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
        this.sOALastPaymentAmount = OptionalNullable.of(sOALastPaymentAmount);
        this.sOALastPaymentDate = OptionalNullable.of(sOALastPaymentDate);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
        this.localCurrencyExchangeRateSoA = OptionalNullable.of(localCurrencyExchangeRateSoA);
        this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
        this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
        this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
        this.billingRunFrequnecy = OptionalNullable.of(billingRunFrequnecy);
        this.day1Run = OptionalNullable.of(day1Run);
        this.day2Run = OptionalNullable.of(day2Run);
        this.day3Run = OptionalNullable.of(day3Run);
        this.day4Run = OptionalNullable.of(day4Run);
        this.invoiceDistributionMethods = invoiceDistributionMethods;
        this.outputType = OptionalNullable.of(outputType);
        this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
        this.bestOfIndicator = bestOfIndicator;
        this.isInternational = isInternational;
        this.totalAccounts = OptionalNullable.of(totalAccounts);
        this.totalActiveAccounts = OptionalNullable.of(totalActiveAccounts);
        this.totalCards = OptionalNullable.of(totalCards);
        this.totalActiveCards = OptionalNullable.of(totalActiveCards);
        this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
        this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
        this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
        this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
        this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
        this.totalTemporaryBlockCardsByCustomer =
                OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
        this.totalTemporaryBlockCardsByShell = OptionalNullable.of(totalTemporaryBlockCardsByShell);
        this.totalNewCards = OptionalNullable.of(totalNewCards);
        this.totalFraudCards = OptionalNullable.of(totalFraudCards);
        this.totalBlockedAccounts = OptionalNullable.of(totalBlockedAccounts);
        this.totalCancelledAccounts = OptionalNullable.of(totalCancelledAccounts);
        this.payerTradingName = OptionalNullable.of(payerTradingName);
        this.status = status;
        this.billingLanguage = OptionalNullable.of(billingLanguage);
        this.legalEntity = OptionalNullable.of(legalEntity);
        this.dateEstablished = OptionalNullable.of(dateEstablished);
        this.customerClassification = OptionalNullable.of(customerClassification);
        this.industryClass = OptionalNullable.of(industryClass);
        this.marketingSegmentation = OptionalNullable.of(marketingSegmentation);
        this.lineOfBusiness = OptionalNullable.of(lineOfBusiness);
        this.printCreditLimit = printCreditLimit;
        this.cardGroupType = OptionalNullable.of(cardGroupType);
        this.renewCards = renewCards;
        this.allowSelectPIN = allowSelectPIN;
        this.useFleetPIN = useFleetPIN;
        this.vATRegNumber = OptionalNullable.of(vATRegNumber);
        this.vATRegNumber2 = vATRegNumber2;
        this.registrationNumber = OptionalNullable.of(registrationNumber);
        this.registrationNumber2 = OptionalNullable.of(registrationNumber2);
        this.salesLedgerBalance = OptionalNullable.of(salesLedgerBalance);
        this.exposure = OptionalNullable.of(exposure);
        this.outstandingDebt = OptionalNullable.of(outstandingDebt);
        this.availableCredit = OptionalNullable.of(availableCredit);
        this.band = OptionalNullable.of(band);
        this.globalCustomerReferenceId = OptionalNullable.of(globalCustomerReferenceId);
        this.creditLimit = OptionalNullable.of(creditLimit);
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
        this.paymentMethod = OptionalNullable.of(paymentMethod);
        this.paymentTerms = OptionalNullable.of(paymentTerms);
        this.temporaryCreditLimitIncrease = OptionalNullable.of(temporaryCreditLimitIncrease);
        this.temporaryCreditLimitIncreaseInCustomerCurrency =
                OptionalNullable.of(temporaryCreditLimitIncreaseInCustomerCurrency);
        this.temporaryCreditLimitExpiryDate = OptionalNullable.of(temporaryCreditLimitExpiryDate);
        this.payerBankAccount = payerBankAccount;
        this.cardDeliveryAddress = cardDeliveryAddress;
        this.correspondanceAddress = correspondanceAddress;
        this.billingAddress = billingAddress;
        this.hasActiveVolBasedPricing = hasActiveVolBasedPricing;
        this.hasActiveVolBasedBonus = hasActiveVolBasedBonus;
        this.hasActiveVolBasedAssociationBonus = hasActiveVolBasedAssociationBonus;
        this.financeCurrency = financeCurrency;
        this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
        this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
        this.contracts = contracts;
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  countryCode  String value for countryCode.
     * @param  country  String value for country.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerFullName  String value for payerFullName.
     * @param  payerShortName  String value for payerShortName.
     * @param  payerGroupId  Integer value for payerGroupId.
     * @param  amountDue  Double value for amountDue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  unallocatedPayment  Double value for unallocatedPayment.
     * @param  sOACurrencyCode  String value for sOACurrencyCode.
     * @param  sOACurrencySymbol  String value for sOACurrencySymbol.
     * @param  sOACreditLimitCurrencyCode  String value for sOACreditLimitCurrencyCode.
     * @param  sOACreditLimitCurrencySymbol  String value for sOACreditLimitCurrencySymbol.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentAmount  Double value for lastPaymentAmount.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  sOALastPaymentAmount  Double value for sOALastPaymentAmount.
     * @param  sOALastPaymentDate  String value for sOALastPaymentDate.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  colCoCountryCode  String value for colCoCountryCode.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
     * @param  localCurrencyExchangeRateSoA  Double value for localCurrencyExchangeRateSoA.
     * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
     * @param  billingFrequencyType  String value for billingFrequencyType.
     * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
     * @param  billingRunFrequnecy  String value for billingRunFrequnecy.
     * @param  day1Run  Integer value for day1Run.
     * @param  day2Run  Integer value for day2Run.
     * @param  day3Run  Integer value for day3Run.
     * @param  day4Run  Integer value for day4Run.
     * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
     *         invoiceDistributionMethods.
     * @param  outputType  String value for outputType.
     * @param  invoiceAccountID  Integer value for invoiceAccountID.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  bestOfIndicator  Boolean value for bestOfIndicator.
     * @param  isInternational  Boolean value for isInternational.
     * @param  totalAccounts  Integer value for totalAccounts.
     * @param  totalActiveAccounts  Integer value for totalActiveAccounts.
     * @param  totalCards  Integer value for totalCards.
     * @param  totalActiveCards  Integer value for totalActiveCards.
     * @param  totalBlockedCards  Integer value for totalBlockedCards.
     * @param  totalCancelledCards  Integer value for totalCancelledCards.
     * @param  totalExpiredCards  Integer value for totalExpiredCards.
     * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
     * @param  totalReplacedCards  Integer value for totalReplacedCards.
     * @param  totalTemporaryBlockCardsByCustomer  Integer value for
     *         totalTemporaryBlockCardsByCustomer.
     * @param  totalTemporaryBlockCardsByShell  Integer value for totalTemporaryBlockCardsByShell.
     * @param  totalNewCards  Integer value for totalNewCards.
     * @param  totalFraudCards  Integer value for totalFraudCards.
     * @param  totalBlockedAccounts  Integer value for totalBlockedAccounts.
     * @param  totalCancelledAccounts  Integer value for totalCancelledAccounts.
     * @param  payerTradingName  String value for payerTradingName.
     * @param  status  String value for status.
     * @param  billingLanguage  String value for billingLanguage.
     * @param  legalEntity  String value for legalEntity.
     * @param  dateEstablished  String value for dateEstablished.
     * @param  customerClassification  String value for customerClassification.
     * @param  industryClass  String value for industryClass.
     * @param  marketingSegmentation  String value for marketingSegmentation.
     * @param  lineOfBusiness  String value for lineOfBusiness.
     * @param  printCreditLimit  Boolean value for printCreditLimit.
     * @param  cardGroupType  String value for cardGroupType.
     * @param  renewCards  Boolean value for renewCards.
     * @param  allowSelectPIN  Boolean value for allowSelectPIN.
     * @param  useFleetPIN  Boolean value for useFleetPIN.
     * @param  vATRegNumber  String value for vATRegNumber.
     * @param  vATRegNumber2  String value for vATRegNumber2.
     * @param  registrationNumber  String value for registrationNumber.
     * @param  registrationNumber2  String value for registrationNumber2.
     * @param  salesLedgerBalance  Double value for salesLedgerBalance.
     * @param  exposure  Double value for exposure.
     * @param  outstandingDebt  Double value for outstandingDebt.
     * @param  availableCredit  Double value for availableCredit.
     * @param  band  String value for band.
     * @param  globalCustomerReferenceId  String value for globalCustomerReferenceId.
     * @param  creditLimit  Double value for creditLimit.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  temporaryCreditLimitIncrease  Double value for temporaryCreditLimitIncrease.
     * @param  temporaryCreditLimitIncreaseInCustomerCurrency  Double value for
     *         temporaryCreditLimitIncreaseInCustomerCurrency.
     * @param  temporaryCreditLimitExpiryDate  String value for temporaryCreditLimitExpiryDate.
     * @param  payerBankAccount  List of BankAccount value for payerBankAccount.
     * @param  cardDeliveryAddress  Address value for cardDeliveryAddress.
     * @param  correspondanceAddress  Address value for correspondanceAddress.
     * @param  billingAddress  Address value for billingAddress.
     * @param  hasActiveVolBasedPricing  Boolean value for hasActiveVolBasedPricing.
     * @param  hasActiveVolBasedBonus  Boolean value for hasActiveVolBasedBonus.
     * @param  hasActiveVolBasedAssociationBonus  Boolean value for
     *         hasActiveVolBasedAssociationBonus.
     * @param  financeCurrency  FinanceCurrency value for financeCurrency.
     * @param  tollsCustomerId  String value for tollsCustomerId.
     * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
     * @param  contracts  List of CustomerContract value for contracts.
     */

    protected PayerDetails(OptionalNullable<Integer> colCoId, OptionalNullable<Integer> colCoCode,
            OptionalNullable<String> countryCode, OptionalNullable<String> country,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<String> payerFullName, OptionalNullable<String> payerShortName,
            OptionalNullable<Integer> payerGroupId, OptionalNullable<Double> amountDue,
            OptionalNullable<Double> amountOverdue, OptionalNullable<Double> amountNotOverdue,
            OptionalNullable<Double> outstandingBalance,
            OptionalNullable<Double> unallocatedPayment, OptionalNullable<String> sOACurrencyCode,
            OptionalNullable<String> sOACurrencySymbol,
            OptionalNullable<String> sOACreditLimitCurrencyCode,
            OptionalNullable<String> sOACreditLimitCurrencySymbol,
            OptionalNullable<String> lastPaymentCurrencyCode,
            OptionalNullable<String> lastPaymentCurrencySymbol,
            OptionalNullable<Double> lastPaymentAmount, OptionalNullable<String> lastPaymentDate,
            OptionalNullable<Double> sOALastPaymentAmount,
            OptionalNullable<String> sOALastPaymentDate, OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<String> colCoCountryCode,
            OptionalNullable<String> localCurrencyCode,
            OptionalNullable<String> localCurrencySymbol,
            OptionalNullable<Double> localCurrencyExchangeRate,
            OptionalNullable<Double> localCurrencyExchangeRateSoA,
            OptionalNullable<Integer> billingFrequencyTypeId,
            OptionalNullable<String> billingFrequencyType,
            OptionalNullable<Integer> billingRunFrequencyTypeId,
            OptionalNullable<String> billingRunFrequnecy, OptionalNullable<Integer> day1Run,
            OptionalNullable<Integer> day2Run, OptionalNullable<Integer> day3Run,
            OptionalNullable<Integer> day4Run,
            List<InvoiceDistributionMethod> invoiceDistributionMethods,
            OptionalNullable<String> outputType, OptionalNullable<Integer> invoiceAccountID,
            OptionalNullable<String> invoiceAccountNumber,
            OptionalNullable<String> invoiceAccountShortName, Boolean bestOfIndicator,
            Boolean isInternational, OptionalNullable<Integer> totalAccounts,
            OptionalNullable<Integer> totalActiveAccounts, OptionalNullable<Integer> totalCards,
            OptionalNullable<Integer> totalActiveCards, OptionalNullable<Integer> totalBlockedCards,
            OptionalNullable<Integer> totalCancelledCards,
            OptionalNullable<Integer> totalExpiredCards,
            OptionalNullable<Integer> totalRenewalPendingCards,
            OptionalNullable<Integer> totalReplacedCards,
            OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer,
            OptionalNullable<Integer> totalTemporaryBlockCardsByShell,
            OptionalNullable<Integer> totalNewCards, OptionalNullable<Integer> totalFraudCards,
            OptionalNullable<Integer> totalBlockedAccounts,
            OptionalNullable<Integer> totalCancelledAccounts,
            OptionalNullable<String> payerTradingName, String status,
            OptionalNullable<String> billingLanguage, OptionalNullable<String> legalEntity,
            OptionalNullable<String> dateEstablished,
            OptionalNullable<String> customerClassification, OptionalNullable<String> industryClass,
            OptionalNullable<String> marketingSegmentation, OptionalNullable<String> lineOfBusiness,
            Boolean printCreditLimit, OptionalNullable<String> cardGroupType, Boolean renewCards,
            Boolean allowSelectPIN, Boolean useFleetPIN, OptionalNullable<String> vATRegNumber,
            String vATRegNumber2, OptionalNullable<String> registrationNumber,
            OptionalNullable<String> registrationNumber2,
            OptionalNullable<Double> salesLedgerBalance, OptionalNullable<Double> exposure,
            OptionalNullable<Double> outstandingDebt, OptionalNullable<Double> availableCredit,
            OptionalNullable<String> band, OptionalNullable<String> globalCustomerReferenceId,
            OptionalNullable<Double> creditLimit,
            OptionalNullable<Double> creditLimitInCustomerCurrency,
            OptionalNullable<String> billingCurrencyCode,
            OptionalNullable<String> billingCurrencySymbol, OptionalNullable<String> paymentMethod,
            OptionalNullable<String> paymentTerms,
            OptionalNullable<Double> temporaryCreditLimitIncrease,
            OptionalNullable<Double> temporaryCreditLimitIncreaseInCustomerCurrency,
            OptionalNullable<String> temporaryCreditLimitExpiryDate,
            List<BankAccount> payerBankAccount, Address cardDeliveryAddress,
            Address correspondanceAddress, Address billingAddress, Boolean hasActiveVolBasedPricing,
            Boolean hasActiveVolBasedBonus, Boolean hasActiveVolBasedAssociationBonus,
            FinanceCurrency financeCurrency, OptionalNullable<String> tollsCustomerId,
            OptionalNullable<String> tollsColcoCountryTypeId, List<CustomerContract> contracts) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.countryCode = countryCode;
        this.country = country;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.payerFullName = payerFullName;
        this.payerShortName = payerShortName;
        this.payerGroupId = payerGroupId;
        this.amountDue = amountDue;
        this.amountOverdue = amountOverdue;
        this.amountNotOverdue = amountNotOverdue;
        this.outstandingBalance = outstandingBalance;
        this.unallocatedPayment = unallocatedPayment;
        this.sOACurrencyCode = sOACurrencyCode;
        this.sOACurrencySymbol = sOACurrencySymbol;
        this.sOACreditLimitCurrencyCode = sOACreditLimitCurrencyCode;
        this.sOACreditLimitCurrencySymbol = sOACreditLimitCurrencySymbol;
        this.lastPaymentCurrencyCode = lastPaymentCurrencyCode;
        this.lastPaymentCurrencySymbol = lastPaymentCurrencySymbol;
        this.lastPaymentAmount = lastPaymentAmount;
        this.lastPaymentDate = lastPaymentDate;
        this.sOALastPaymentAmount = sOALastPaymentAmount;
        this.sOALastPaymentDate = sOALastPaymentDate;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.colCoCountryCode = colCoCountryCode;
        this.localCurrencyCode = localCurrencyCode;
        this.localCurrencySymbol = localCurrencySymbol;
        this.localCurrencyExchangeRate = localCurrencyExchangeRate;
        this.localCurrencyExchangeRateSoA = localCurrencyExchangeRateSoA;
        this.billingFrequencyTypeId = billingFrequencyTypeId;
        this.billingFrequencyType = billingFrequencyType;
        this.billingRunFrequencyTypeId = billingRunFrequencyTypeId;
        this.billingRunFrequnecy = billingRunFrequnecy;
        this.day1Run = day1Run;
        this.day2Run = day2Run;
        this.day3Run = day3Run;
        this.day4Run = day4Run;
        this.invoiceDistributionMethods = invoiceDistributionMethods;
        this.outputType = outputType;
        this.invoiceAccountID = invoiceAccountID;
        this.invoiceAccountNumber = invoiceAccountNumber;
        this.invoiceAccountShortName = invoiceAccountShortName;
        this.bestOfIndicator = bestOfIndicator;
        this.isInternational = isInternational;
        this.totalAccounts = totalAccounts;
        this.totalActiveAccounts = totalActiveAccounts;
        this.totalCards = totalCards;
        this.totalActiveCards = totalActiveCards;
        this.totalBlockedCards = totalBlockedCards;
        this.totalCancelledCards = totalCancelledCards;
        this.totalExpiredCards = totalExpiredCards;
        this.totalRenewalPendingCards = totalRenewalPendingCards;
        this.totalReplacedCards = totalReplacedCards;
        this.totalTemporaryBlockCardsByCustomer = totalTemporaryBlockCardsByCustomer;
        this.totalTemporaryBlockCardsByShell = totalTemporaryBlockCardsByShell;
        this.totalNewCards = totalNewCards;
        this.totalFraudCards = totalFraudCards;
        this.totalBlockedAccounts = totalBlockedAccounts;
        this.totalCancelledAccounts = totalCancelledAccounts;
        this.payerTradingName = payerTradingName;
        this.status = status;
        this.billingLanguage = billingLanguage;
        this.legalEntity = legalEntity;
        this.dateEstablished = dateEstablished;
        this.customerClassification = customerClassification;
        this.industryClass = industryClass;
        this.marketingSegmentation = marketingSegmentation;
        this.lineOfBusiness = lineOfBusiness;
        this.printCreditLimit = printCreditLimit;
        this.cardGroupType = cardGroupType;
        this.renewCards = renewCards;
        this.allowSelectPIN = allowSelectPIN;
        this.useFleetPIN = useFleetPIN;
        this.vATRegNumber = vATRegNumber;
        this.vATRegNumber2 = vATRegNumber2;
        this.registrationNumber = registrationNumber;
        this.registrationNumber2 = registrationNumber2;
        this.salesLedgerBalance = salesLedgerBalance;
        this.exposure = exposure;
        this.outstandingDebt = outstandingDebt;
        this.availableCredit = availableCredit;
        this.band = band;
        this.globalCustomerReferenceId = globalCustomerReferenceId;
        this.creditLimit = creditLimit;
        this.creditLimitInCustomerCurrency = creditLimitInCustomerCurrency;
        this.billingCurrencyCode = billingCurrencyCode;
        this.billingCurrencySymbol = billingCurrencySymbol;
        this.paymentMethod = paymentMethod;
        this.paymentTerms = paymentTerms;
        this.temporaryCreditLimitIncrease = temporaryCreditLimitIncrease;
        this.temporaryCreditLimitIncreaseInCustomerCurrency =
                temporaryCreditLimitIncreaseInCustomerCurrency;
        this.temporaryCreditLimitExpiryDate = temporaryCreditLimitExpiryDate;
        this.payerBankAccount = payerBankAccount;
        this.cardDeliveryAddress = cardDeliveryAddress;
        this.correspondanceAddress = correspondanceAddress;
        this.billingAddress = billingAddress;
        this.hasActiveVolBasedPricing = hasActiveVolBasedPricing;
        this.hasActiveVolBasedBonus = hasActiveVolBasedBonus;
        this.hasActiveVolBasedAssociationBonus = hasActiveVolBasedAssociationBonus;
        this.financeCurrency = financeCurrency;
        this.tollsCustomerId = tollsCustomerId;
        this.tollsColcoCountryTypeId = tollsColcoCountryTypeId;
        this.contracts = contracts;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting company id of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting company id of the customer.
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting company id of the customer.
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting company id of the customer.
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting company code of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting company code of the customer.
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting company code of the customer.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting company code of the customer.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for CountryCode.
     * ISO code of the customer country.
     * @return Returns the Internal String
     */
    @JsonGetter("CountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCountryCode() {
        return this.countryCode;
    }

    /**
     * Getter for CountryCode.
     * ISO code of the customer country.
     * @return Returns the String
     */
    public String getCountryCode() {
        return OptionalNullable.getFrom(countryCode);
    }

    /**
     * Setter for CountryCode.
     * ISO code of the customer country.
     * @param countryCode Value for String
     */
    @JsonSetter("CountryCode")
    public void setCountryCode(String countryCode) {
        this.countryCode = OptionalNullable.of(countryCode);
    }

    /**
     * UnSetter for CountryCode.
     * ISO code of the customer country.
     */
    public void unsetCountryCode() {
        countryCode = null;
    }

    /**
     * Internal Getter for Country.
     * Country of the customer
     * @return Returns the Internal String
     */
    @JsonGetter("Country")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCountry() {
        return this.country;
    }

    /**
     * Getter for Country.
     * Country of the customer
     * @return Returns the String
     */
    public String getCountry() {
        return OptionalNullable.getFrom(country);
    }

    /**
     * Setter for Country.
     * Country of the customer
     * @param country Value for String
     */
    @JsonSetter("Country")
    public void setCountry(String country) {
        this.country = OptionalNullable.of(country);
    }

    /**
     * UnSetter for Country.
     * Country of the customer
     */
    public void unsetCountry() {
        country = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer id of the customer
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer id of the customer
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer id of the customer
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer id of the customer
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the customer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the customer
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the customer
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the customer
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerFullName.
     * Full Name of the Payer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerFullName() {
        return this.payerFullName;
    }

    /**
     * Getter for PayerFullName.
     * Full Name of the Payer
     * @return Returns the String
     */
    public String getPayerFullName() {
        return OptionalNullable.getFrom(payerFullName);
    }

    /**
     * Setter for PayerFullName.
     * Full Name of the Payer
     * @param payerFullName Value for String
     */
    @JsonSetter("PayerFullName")
    public void setPayerFullName(String payerFullName) {
        this.payerFullName = OptionalNullable.of(payerFullName);
    }

    /**
     * UnSetter for PayerFullName.
     * Full Name of the Payer
     */
    public void unsetPayerFullName() {
        payerFullName = null;
    }

    /**
     * Internal Getter for PayerShortName.
     * Short name of the payer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerShortName() {
        return this.payerShortName;
    }

    /**
     * Getter for PayerShortName.
     * Short name of the payer
     * @return Returns the String
     */
    public String getPayerShortName() {
        return OptionalNullable.getFrom(payerShortName);
    }

    /**
     * Setter for PayerShortName.
     * Short name of the payer
     * @param payerShortName Value for String
     */
    @JsonSetter("PayerShortName")
    public void setPayerShortName(String payerShortName) {
        this.payerShortName = OptionalNullable.of(payerShortName);
    }

    /**
     * UnSetter for PayerShortName.
     * Short name of the payer
     */
    public void unsetPayerShortName() {
        payerShortName = null;
    }

    /**
     * Internal Getter for PayerGroupId.
     * Payer Group Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerGroupId() {
        return this.payerGroupId;
    }

    /**
     * Getter for PayerGroupId.
     * Payer Group Id
     * @return Returns the Integer
     */
    public Integer getPayerGroupId() {
        return OptionalNullable.getFrom(payerGroupId);
    }

    /**
     * Setter for PayerGroupId.
     * Payer Group Id
     * @param payerGroupId Value for Integer
     */
    @JsonSetter("PayerGroupId")
    public void setPayerGroupId(Integer payerGroupId) {
        this.payerGroupId = OptionalNullable.of(payerGroupId);
    }

    /**
     * UnSetter for PayerGroupId.
     * Payer Group Id
     */
    public void unsetPayerGroupId() {
        payerGroupId = null;
    }

    /**
     * Internal Getter for AmountDue.
     * Invoiced amount and due for payment from the last SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountDue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountDue() {
        return this.amountDue;
    }

    /**
     * Getter for AmountDue.
     * Invoiced amount and due for payment from the last SOA.
     * @return Returns the Double
     */
    public Double getAmountDue() {
        return OptionalNullable.getFrom(amountDue);
    }

    /**
     * Setter for AmountDue.
     * Invoiced amount and due for payment from the last SOA.
     * @param amountDue Value for Double
     */
    @JsonSetter("AmountDue")
    public void setAmountDue(Double amountDue) {
        this.amountDue = OptionalNullable.of(amountDue);
    }

    /**
     * UnSetter for AmountDue.
     * Invoiced amount and due for payment from the last SOA.
     */
    public void unsetAmountDue() {
        amountDue = null;
    }

    /**
     * Internal Getter for AmountOverdue.
     * Invoiced amount and overdue for payment from the last SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdue() {
        return this.amountOverdue;
    }

    /**
     * Getter for AmountOverdue.
     * Invoiced amount and overdue for payment from the last SOA.
     * @return Returns the Double
     */
    public Double getAmountOverdue() {
        return OptionalNullable.getFrom(amountOverdue);
    }

    /**
     * Setter for AmountOverdue.
     * Invoiced amount and overdue for payment from the last SOA.
     * @param amountOverdue Value for Double
     */
    @JsonSetter("AmountOverdue")
    public void setAmountOverdue(Double amountOverdue) {
        this.amountOverdue = OptionalNullable.of(amountOverdue);
    }

    /**
     * UnSetter for AmountOverdue.
     * Invoiced amount and overdue for payment from the last SOA.
     */
    public void unsetAmountOverdue() {
        amountOverdue = null;
    }

    /**
     * Internal Getter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountNotOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountNotOverdue() {
        return this.amountNotOverdue;
    }

    /**
     * Getter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     * @return Returns the Double
     */
    public Double getAmountNotOverdue() {
        return OptionalNullable.getFrom(amountNotOverdue);
    }

    /**
     * Setter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     * @param amountNotOverdue Value for Double
     */
    @JsonSetter("AmountNotOverdue")
    public void setAmountNotOverdue(Double amountNotOverdue) {
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
    }

    /**
     * UnSetter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment from the last SOA.
     */
    public void unsetAmountNotOverdue() {
        amountNotOverdue = null;
    }

    /**
     * Internal Getter for OutstandingBalance.
     * Current outstanding balance amount from the last SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingBalance() {
        return this.outstandingBalance;
    }

    /**
     * Getter for OutstandingBalance.
     * Current outstanding balance amount from the last SOA.
     * @return Returns the Double
     */
    public Double getOutstandingBalance() {
        return OptionalNullable.getFrom(outstandingBalance);
    }

    /**
     * Setter for OutstandingBalance.
     * Current outstanding balance amount from the last SOA.
     * @param outstandingBalance Value for Double
     */
    @JsonSetter("OutstandingBalance")
    public void setOutstandingBalance(Double outstandingBalance) {
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
    }

    /**
     * UnSetter for OutstandingBalance.
     * Current outstanding balance amount from the last SOA.
     */
    public void unsetOutstandingBalance() {
        outstandingBalance = null;
    }

    /**
     * Internal Getter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount from the last SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("UnallocatedPayment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnallocatedPayment() {
        return this.unallocatedPayment;
    }

    /**
     * Getter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount from the last SOA.
     * @return Returns the Double
     */
    public Double getUnallocatedPayment() {
        return OptionalNullable.getFrom(unallocatedPayment);
    }

    /**
     * Setter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount from the last SOA.
     * @param unallocatedPayment Value for Double
     */
    @JsonSetter("UnallocatedPayment")
    public void setUnallocatedPayment(Double unallocatedPayment) {
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
    }

    /**
     * UnSetter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount from the last SOA.
     */
    public void unsetUnallocatedPayment() {
        unallocatedPayment = null;
    }

    /**
     * Internal Getter for SOACurrencyCode.
     * Currency ISO code
     * @return Returns the Internal String
     */
    @JsonGetter("SOACurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSOACurrencyCode() {
        return this.sOACurrencyCode;
    }

    /**
     * Getter for SOACurrencyCode.
     * Currency ISO code
     * @return Returns the String
     */
    public String getSOACurrencyCode() {
        return OptionalNullable.getFrom(sOACurrencyCode);
    }

    /**
     * Setter for SOACurrencyCode.
     * Currency ISO code
     * @param sOACurrencyCode Value for String
     */
    @JsonSetter("SOACurrencyCode")
    public void setSOACurrencyCode(String sOACurrencyCode) {
        this.sOACurrencyCode = OptionalNullable.of(sOACurrencyCode);
    }

    /**
     * UnSetter for SOACurrencyCode.
     * Currency ISO code
     */
    public void unsetSOACurrencyCode() {
        sOACurrencyCode = null;
    }

    /**
     * Internal Getter for SOACurrencySymbol.
     * Currency symbol
     * @return Returns the Internal String
     */
    @JsonGetter("SOACurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSOACurrencySymbol() {
        return this.sOACurrencySymbol;
    }

    /**
     * Getter for SOACurrencySymbol.
     * Currency symbol
     * @return Returns the String
     */
    public String getSOACurrencySymbol() {
        return OptionalNullable.getFrom(sOACurrencySymbol);
    }

    /**
     * Setter for SOACurrencySymbol.
     * Currency symbol
     * @param sOACurrencySymbol Value for String
     */
    @JsonSetter("SOACurrencySymbol")
    public void setSOACurrencySymbol(String sOACurrencySymbol) {
        this.sOACurrencySymbol = OptionalNullable.of(sOACurrencySymbol);
    }

    /**
     * UnSetter for SOACurrencySymbol.
     * Currency symbol
     */
    public void unsetSOACurrencySymbol() {
        sOACurrencySymbol = null;
    }

    /**
     * Internal Getter for SOACreditLimitCurrencyCode.
     * Currency ISO code
     * @return Returns the Internal String
     */
    @JsonGetter("SOACreditLimitCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSOACreditLimitCurrencyCode() {
        return this.sOACreditLimitCurrencyCode;
    }

    /**
     * Getter for SOACreditLimitCurrencyCode.
     * Currency ISO code
     * @return Returns the String
     */
    public String getSOACreditLimitCurrencyCode() {
        return OptionalNullable.getFrom(sOACreditLimitCurrencyCode);
    }

    /**
     * Setter for SOACreditLimitCurrencyCode.
     * Currency ISO code
     * @param sOACreditLimitCurrencyCode Value for String
     */
    @JsonSetter("SOACreditLimitCurrencyCode")
    public void setSOACreditLimitCurrencyCode(String sOACreditLimitCurrencyCode) {
        this.sOACreditLimitCurrencyCode = OptionalNullable.of(sOACreditLimitCurrencyCode);
    }

    /**
     * UnSetter for SOACreditLimitCurrencyCode.
     * Currency ISO code
     */
    public void unsetSOACreditLimitCurrencyCode() {
        sOACreditLimitCurrencyCode = null;
    }

    /**
     * Internal Getter for SOACreditLimitCurrencySymbol.
     * Currency symbol
     * @return Returns the Internal String
     */
    @JsonGetter("SOACreditLimitCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSOACreditLimitCurrencySymbol() {
        return this.sOACreditLimitCurrencySymbol;
    }

    /**
     * Getter for SOACreditLimitCurrencySymbol.
     * Currency symbol
     * @return Returns the String
     */
    public String getSOACreditLimitCurrencySymbol() {
        return OptionalNullable.getFrom(sOACreditLimitCurrencySymbol);
    }

    /**
     * Setter for SOACreditLimitCurrencySymbol.
     * Currency symbol
     * @param sOACreditLimitCurrencySymbol Value for String
     */
    @JsonSetter("SOACreditLimitCurrencySymbol")
    public void setSOACreditLimitCurrencySymbol(String sOACreditLimitCurrencySymbol) {
        this.sOACreditLimitCurrencySymbol = OptionalNullable.of(sOACreditLimitCurrencySymbol);
    }

    /**
     * UnSetter for SOACreditLimitCurrencySymbol.
     * Currency symbol
     */
    public void unsetSOACreditLimitCurrencySymbol() {
        sOACreditLimitCurrencySymbol = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencyCode.
     * Currency ISO code
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencyCode() {
        return this.lastPaymentCurrencyCode;
    }

    /**
     * Getter for LastPaymentCurrencyCode.
     * Currency ISO code
     * @return Returns the String
     */
    public String getLastPaymentCurrencyCode() {
        return OptionalNullable.getFrom(lastPaymentCurrencyCode);
    }

    /**
     * Setter for LastPaymentCurrencyCode.
     * Currency ISO code
     * @param lastPaymentCurrencyCode Value for String
     */
    @JsonSetter("LastPaymentCurrencyCode")
    public void setLastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
    }

    /**
     * UnSetter for LastPaymentCurrencyCode.
     * Currency ISO code
     */
    public void unsetLastPaymentCurrencyCode() {
        lastPaymentCurrencyCode = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencySymbol.
     * currency symbol
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencySymbol() {
        return this.lastPaymentCurrencySymbol;
    }

    /**
     * Getter for LastPaymentCurrencySymbol.
     * currency symbol
     * @return Returns the String
     */
    public String getLastPaymentCurrencySymbol() {
        return OptionalNullable.getFrom(lastPaymentCurrencySymbol);
    }

    /**
     * Setter for LastPaymentCurrencySymbol.
     * currency symbol
     * @param lastPaymentCurrencySymbol Value for String
     */
    @JsonSetter("LastPaymentCurrencySymbol")
    public void setLastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
    }

    /**
     * UnSetter for LastPaymentCurrencySymbol.
     * currency symbol
     */
    public void unsetLastPaymentCurrencySymbol() {
        lastPaymentCurrencySymbol = null;
    }

    /**
     * Internal Getter for LastPaymentAmount.
     * Latest payment amount for the requested payer.
     * @return Returns the Internal Double
     */
    @JsonGetter("LastPaymentAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLastPaymentAmount() {
        return this.lastPaymentAmount;
    }

    /**
     * Getter for LastPaymentAmount.
     * Latest payment amount for the requested payer.
     * @return Returns the Double
     */
    public Double getLastPaymentAmount() {
        return OptionalNullable.getFrom(lastPaymentAmount);
    }

    /**
     * Setter for LastPaymentAmount.
     * Latest payment amount for the requested payer.
     * @param lastPaymentAmount Value for Double
     */
    @JsonSetter("LastPaymentAmount")
    public void setLastPaymentAmount(Double lastPaymentAmount) {
        this.lastPaymentAmount = OptionalNullable.of(lastPaymentAmount);
    }

    /**
     * UnSetter for LastPaymentAmount.
     * Latest payment amount for the requested payer.
     */
    public void unsetLastPaymentAmount() {
        lastPaymentAmount = null;
    }

    /**
     * Internal Getter for LastPaymentDate.
     * Latest payment date for the requested payer.
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentDate() {
        return this.lastPaymentDate;
    }

    /**
     * Getter for LastPaymentDate.
     * Latest payment date for the requested payer.
     * @return Returns the String
     */
    public String getLastPaymentDate() {
        return OptionalNullable.getFrom(lastPaymentDate);
    }

    /**
     * Setter for LastPaymentDate.
     * Latest payment date for the requested payer.
     * @param lastPaymentDate Value for String
     */
    @JsonSetter("LastPaymentDate")
    public void setLastPaymentDate(String lastPaymentDate) {
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
    }

    /**
     * UnSetter for LastPaymentDate.
     * Latest payment date for the requested payer.
     */
    public void unsetLastPaymentDate() {
        lastPaymentDate = null;
    }

    /**
     * Internal Getter for SOALastPaymentAmount.
     * Last payment amount in statement of account for the requested payer.
     * @return Returns the Internal Double
     */
    @JsonGetter("SOALastPaymentAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSOALastPaymentAmount() {
        return this.sOALastPaymentAmount;
    }

    /**
     * Getter for SOALastPaymentAmount.
     * Last payment amount in statement of account for the requested payer.
     * @return Returns the Double
     */
    public Double getSOALastPaymentAmount() {
        return OptionalNullable.getFrom(sOALastPaymentAmount);
    }

    /**
     * Setter for SOALastPaymentAmount.
     * Last payment amount in statement of account for the requested payer.
     * @param sOALastPaymentAmount Value for Double
     */
    @JsonSetter("SOALastPaymentAmount")
    public void setSOALastPaymentAmount(Double sOALastPaymentAmount) {
        this.sOALastPaymentAmount = OptionalNullable.of(sOALastPaymentAmount);
    }

    /**
     * UnSetter for SOALastPaymentAmount.
     * Last payment amount in statement of account for the requested payer.
     */
    public void unsetSOALastPaymentAmount() {
        sOALastPaymentAmount = null;
    }

    /**
     * Internal Getter for SOALastPaymentDate.
     * Last payment date in statement of account for the requested payer.
     * @return Returns the Internal String
     */
    @JsonGetter("SOALastPaymentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSOALastPaymentDate() {
        return this.sOALastPaymentDate;
    }

    /**
     * Getter for SOALastPaymentDate.
     * Last payment date in statement of account for the requested payer.
     * @return Returns the String
     */
    public String getSOALastPaymentDate() {
        return OptionalNullable.getFrom(sOALastPaymentDate);
    }

    /**
     * Setter for SOALastPaymentDate.
     * Last payment date in statement of account for the requested payer.
     * @param sOALastPaymentDate Value for String
     */
    @JsonSetter("SOALastPaymentDate")
    public void setSOALastPaymentDate(String sOALastPaymentDate) {
        this.sOALastPaymentDate = OptionalNullable.of(sOALastPaymentDate);
    }

    /**
     * UnSetter for SOALastPaymentDate.
     * Last payment date in statement of account for the requested payer.
     */
    public void unsetSOALastPaymentDate() {
        sOALastPaymentDate = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * Currency ISO code
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * Currency ISO code
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * Currency ISO code
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * Currency ISO code
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Currency Symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Currency Symbol
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Currency Symbol
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Currency Symbol
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @return Returns the Internal String
     */
    @JsonGetter("ColCoCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetColCoCountryCode() {
        return this.colCoCountryCode;
    }

    /**
     * Getter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @return Returns the String
     */
    public String getColCoCountryCode() {
        return OptionalNullable.getFrom(colCoCountryCode);
    }

    /**
     * Setter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     * @param colCoCountryCode Value for String
     */
    @JsonSetter("ColCoCountryCode")
    public void setColCoCountryCode(String colCoCountryCode) {
        this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
    }

    /**
     * UnSetter for ColCoCountryCode.
     * The 2-character ISO Code for the customer and card owning country.
     */
    public void unsetColCoCountryCode() {
        colCoCountryCode = null;
    }

    /**
     * Internal Getter for LocalCurrencyCode.
     * Currency ISO code of the local country.
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyCode() {
        return this.localCurrencyCode;
    }

    /**
     * Getter for LocalCurrencyCode.
     * Currency ISO code of the local country.
     * @return Returns the String
     */
    public String getLocalCurrencyCode() {
        return OptionalNullable.getFrom(localCurrencyCode);
    }

    /**
     * Setter for LocalCurrencyCode.
     * Currency ISO code of the local country.
     * @param localCurrencyCode Value for String
     */
    @JsonSetter("LocalCurrencyCode")
    public void setLocalCurrencyCode(String localCurrencyCode) {
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
    }

    /**
     * UnSetter for LocalCurrencyCode.
     * Currency ISO code of the local country.
     */
    public void unsetLocalCurrencyCode() {
        localCurrencyCode = null;
    }

    /**
     * Internal Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencySymbol() {
        return this.localCurrencySymbol;
    }

    /**
     * Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country
     * @return Returns the String
     */
    public String getLocalCurrencySymbol() {
        return OptionalNullable.getFrom(localCurrencySymbol);
    }

    /**
     * Setter for LocalCurrencySymbol.
     * Currency Symbol of the local country
     * @param localCurrencySymbol Value for String
     */
    @JsonSetter("LocalCurrencySymbol")
    public void setLocalCurrencySymbol(String localCurrencySymbol) {
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
    }

    /**
     * UnSetter for LocalCurrencySymbol.
     * Currency Symbol of the local country
     */
    public void unsetLocalCurrencySymbol() {
        localCurrencySymbol = null;
    }

    /**
     * Internal Getter for LocalCurrencyExchangeRate.
     * Exchange rate from OU base currency to local currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("LocalCurrencyExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLocalCurrencyExchangeRate() {
        return this.localCurrencyExchangeRate;
    }

    /**
     * Getter for LocalCurrencyExchangeRate.
     * Exchange rate from OU base currency to local currency.
     * @return Returns the Double
     */
    public Double getLocalCurrencyExchangeRate() {
        return OptionalNullable.getFrom(localCurrencyExchangeRate);
    }

    /**
     * Setter for LocalCurrencyExchangeRate.
     * Exchange rate from OU base currency to local currency.
     * @param localCurrencyExchangeRate Value for Double
     */
    @JsonSetter("LocalCurrencyExchangeRate")
    public void setLocalCurrencyExchangeRate(Double localCurrencyExchangeRate) {
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
    }

    /**
     * UnSetter for LocalCurrencyExchangeRate.
     * Exchange rate from OU base currency to local currency.
     */
    public void unsetLocalCurrencyExchangeRate() {
        localCurrencyExchangeRate = null;
    }

    /**
     * Internal Getter for LocalCurrencyExchangeRateSoA.
     * Exchange rate from SoA credit limit currency to local currency
     * @return Returns the Internal Double
     */
    @JsonGetter("LocalCurrencyExchangeRate_SoA")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLocalCurrencyExchangeRateSoA() {
        return this.localCurrencyExchangeRateSoA;
    }

    /**
     * Getter for LocalCurrencyExchangeRateSoA.
     * Exchange rate from SoA credit limit currency to local currency
     * @return Returns the Double
     */
    public Double getLocalCurrencyExchangeRateSoA() {
        return OptionalNullable.getFrom(localCurrencyExchangeRateSoA);
    }

    /**
     * Setter for LocalCurrencyExchangeRateSoA.
     * Exchange rate from SoA credit limit currency to local currency
     * @param localCurrencyExchangeRateSoA Value for Double
     */
    @JsonSetter("LocalCurrencyExchangeRate_SoA")
    public void setLocalCurrencyExchangeRateSoA(Double localCurrencyExchangeRateSoA) {
        this.localCurrencyExchangeRateSoA = OptionalNullable.of(localCurrencyExchangeRateSoA);
    }

    /**
     * UnSetter for LocalCurrencyExchangeRateSoA.
     * Exchange rate from SoA credit limit currency to local currency
     */
    public void unsetLocalCurrencyExchangeRateSoA() {
        localCurrencyExchangeRateSoA = null;
    }

    /**
     * Internal Getter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run E.g.: 1, 2, 3, etc.
     * @return Returns the Internal Integer
     */
    @JsonGetter("BillingFrequencyTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBillingFrequencyTypeId() {
        return this.billingFrequencyTypeId;
    }

    /**
     * Getter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run E.g.: 1, 2, 3, etc.
     * @return Returns the Integer
     */
    public Integer getBillingFrequencyTypeId() {
        return OptionalNullable.getFrom(billingFrequencyTypeId);
    }

    /**
     * Setter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run E.g.: 1, 2, 3, etc.
     * @param billingFrequencyTypeId Value for Integer
     */
    @JsonSetter("BillingFrequencyTypeId")
    public void setBillingFrequencyTypeId(Integer billingFrequencyTypeId) {
        this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
    }

    /**
     * UnSetter for BillingFrequencyTypeId.
     * Billing/Invoice frequency Identifier. Indicates the frequency in which the transactions will
     * be considered for invoicing in a bulling run E.g.: 1, 2, 3, etc.
     */
    public void unsetBillingFrequencyTypeId() {
        billingFrequencyTypeId = null;
    }

    /**
     * Internal Getter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1	Daily (all days) 2	Daily (only working days) 3	Weekly -
     * Monday 4	Weekly – Tuesday Etc.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingFrequencyType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingFrequencyType() {
        return this.billingFrequencyType;
    }

    /**
     * Getter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1	Daily (all days) 2	Daily (only working days) 3	Weekly -
     * Monday 4	Weekly – Tuesday Etc.
     * @return Returns the String
     */
    public String getBillingFrequencyType() {
        return OptionalNullable.getFrom(billingFrequencyType);
    }

    /**
     * Setter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1	Daily (all days) 2	Daily (only working days) 3	Weekly -
     * Monday 4	Weekly – Tuesday Etc.
     * @param billingFrequencyType Value for String
     */
    @JsonSetter("BillingFrequencyType")
    public void setBillingFrequencyType(String billingFrequencyType) {
        this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
    }

    /**
     * UnSetter for BillingFrequencyType.
     * Billing/Invoice frequency. The frequency in which the transactions will be considered for
     * invoicing in a bulling run E.g.: 1	Daily (all days) 2	Daily (only working days) 3	Weekly -
     * Monday 4	Weekly – Tuesday Etc.
     */
    public void unsetBillingFrequencyType() {
        billingFrequencyType = null;
    }

    /**
     * Internal Getter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @return Returns the Internal Integer
     */
    @JsonGetter("BillingRunFrequencyTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetBillingRunFrequencyTypeId() {
        return this.billingRunFrequencyTypeId;
    }

    /**
     * Getter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @return Returns the Integer
     */
    public Integer getBillingRunFrequencyTypeId() {
        return OptionalNullable.getFrom(billingRunFrequencyTypeId);
    }

    /**
     * Setter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     * @param billingRunFrequencyTypeId Value for Integer
     */
    @JsonSetter("BillingRunFrequencyTypeId")
    public void setBillingRunFrequencyTypeId(Integer billingRunFrequencyTypeId) {
        this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
    }

    /**
     * UnSetter for BillingRunFrequencyTypeId.
     * Frequency at which the billing process is triggered. E.g.: 1, 2, 3, etc.
     */
    public void unsetBillingRunFrequencyTypeId() {
        billingRunFrequencyTypeId = null;
    }

    /**
     * Internal Getter for BillingRunFrequnecy.
     * Frequency at which the billing process is triggered.E.g.: 1	Daily (all days) 2	Daily (only
     * working days) 3	Weekly - Monday 4	Weekly – Tuesday Etc.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingRunFrequnecy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingRunFrequnecy() {
        return this.billingRunFrequnecy;
    }

    /**
     * Getter for BillingRunFrequnecy.
     * Frequency at which the billing process is triggered.E.g.: 1	Daily (all days) 2	Daily (only
     * working days) 3	Weekly - Monday 4	Weekly – Tuesday Etc.
     * @return Returns the String
     */
    public String getBillingRunFrequnecy() {
        return OptionalNullable.getFrom(billingRunFrequnecy);
    }

    /**
     * Setter for BillingRunFrequnecy.
     * Frequency at which the billing process is triggered.E.g.: 1	Daily (all days) 2	Daily (only
     * working days) 3	Weekly - Monday 4	Weekly – Tuesday Etc.
     * @param billingRunFrequnecy Value for String
     */
    @JsonSetter("BillingRunFrequnecy")
    public void setBillingRunFrequnecy(String billingRunFrequnecy) {
        this.billingRunFrequnecy = OptionalNullable.of(billingRunFrequnecy);
    }

    /**
     * UnSetter for BillingRunFrequnecy.
     * Frequency at which the billing process is triggered.E.g.: 1	Daily (all days) 2	Daily (only
     * working days) 3	Weekly - Monday 4	Weekly – Tuesday Etc.
     */
    public void unsetBillingRunFrequnecy() {
        billingRunFrequnecy = null;
    }

    /**
     * Internal Getter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day1Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay1Run() {
        return this.day1Run;
    }

    /**
     * Getter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Integer
     */
    public Integer getDay1Run() {
        return OptionalNullable.getFrom(day1Run);
    }

    /**
     * Setter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @param day1Run Value for Integer
     */
    @JsonSetter("Day1Run")
    public void setDay1Run(Integer day1Run) {
        this.day1Run = OptionalNullable.of(day1Run);
    }

    /**
     * UnSetter for Day1Run.
     * The first day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     */
    public void unsetDay1Run() {
        day1Run = null;
    }

    /**
     * Internal Getter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day2Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay2Run() {
        return this.day2Run;
    }

    /**
     * Getter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Integer
     */
    public Integer getDay2Run() {
        return OptionalNullable.getFrom(day2Run);
    }

    /**
     * Setter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @param day2Run Value for Integer
     */
    @JsonSetter("Day2Run")
    public void setDay2Run(Integer day2Run) {
        this.day2Run = OptionalNullable.of(day2Run);
    }

    /**
     * UnSetter for Day2Run.
     * The second day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     */
    public void unsetDay2Run() {
        day2Run = null;
    }

    /**
     * Internal Getter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day3Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay3Run() {
        return this.day3Run;
    }

    /**
     * Getter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Integer
     */
    public Integer getDay3Run() {
        return OptionalNullable.getFrom(day3Run);
    }

    /**
     * Setter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @param day3Run Value for Integer
     */
    @JsonSetter("Day3Run")
    public void setDay3Run(Integer day3Run) {
        this.day3Run = OptionalNullable.of(day3Run);
    }

    /**
     * UnSetter for Day3Run.
     * The third day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     */
    public void unsetDay3Run() {
        day3Run = null;
    }

    /**
     * Internal Getter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Day4Run")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDay4Run() {
        return this.day4Run;
    }

    /**
     * Getter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @return Returns the Integer
     */
    public Integer getDay4Run() {
        return OptionalNullable.getFrom(day4Run);
    }

    /**
     * Setter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     * @param day4Run Value for Integer
     */
    @JsonSetter("Day4Run")
    public void setDay4Run(Integer day4Run) {
        this.day4Run = OptionalNullable.of(day4Run);
    }

    /**
     * UnSetter for Day4Run.
     * The fourth day in a month when the billing should run in case of multiple billing runs
     * configured with in a single month.
     */
    public void unsetDay4Run() {
        day4Run = null;
    }

    /**
     * Getter for InvoiceDistributionMethods.
     * @return Returns the List of InvoiceDistributionMethod
     */
    @JsonGetter("InvoiceDistributionMethods")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<InvoiceDistributionMethod> getInvoiceDistributionMethods() {
        return invoiceDistributionMethods;
    }

    /**
     * Setter for InvoiceDistributionMethods.
     * @param invoiceDistributionMethods Value for List of InvoiceDistributionMethod
     */
    @JsonSetter("InvoiceDistributionMethods")
    public void setInvoiceDistributionMethods(List<InvoiceDistributionMethod> invoiceDistributionMethods) {
        this.invoiceDistributionMethods = invoiceDistributionMethods;
    }

    /**
     * Internal Getter for OutputType.
     * Invoice output type (Id-Description) E.g.: 1-PDF 6-Print
     * @return Returns the Internal String
     */
    @JsonGetter("OutputType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOutputType() {
        return this.outputType;
    }

    /**
     * Getter for OutputType.
     * Invoice output type (Id-Description) E.g.: 1-PDF 6-Print
     * @return Returns the String
     */
    public String getOutputType() {
        return OptionalNullable.getFrom(outputType);
    }

    /**
     * Setter for OutputType.
     * Invoice output type (Id-Description) E.g.: 1-PDF 6-Print
     * @param outputType Value for String
     */
    @JsonSetter("OutputType")
    public void setOutputType(String outputType) {
        this.outputType = OptionalNullable.of(outputType);
    }

    /**
     * UnSetter for OutputType.
     * Invoice output type (Id-Description) E.g.: 1-PDF 6-Print
     */
    public void unsetOutputType() {
        outputType = null;
    }

    /**
     * Internal Getter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceAccountID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceAccountID() {
        return this.invoiceAccountID;
    }

    /**
     * Getter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @return Returns the Integer
     */
    public Integer getInvoiceAccountID() {
        return OptionalNullable.getFrom(invoiceAccountID);
    }

    /**
     * Setter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     * @param invoiceAccountID Value for Integer
     */
    @JsonSetter("InvoiceAccountID")
    public void setInvoiceAccountID(Integer invoiceAccountID) {
        this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
    }

    /**
     * UnSetter for InvoiceAccountID.
     * The Account ID of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountID() {
        invoiceAccountID = null;
    }

    /**
     * Internal Getter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountNumber() {
        return this.invoiceAccountNumber;
    }

    /**
     * Getter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @return Returns the String
     */
    public String getInvoiceAccountNumber() {
        return OptionalNullable.getFrom(invoiceAccountNumber);
    }

    /**
     * Setter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     * @param invoiceAccountNumber Value for String
     */
    @JsonSetter("InvoiceAccountNumber")
    public void setInvoiceAccountNumber(String invoiceAccountNumber) {
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
    }

    /**
     * UnSetter for InvoiceAccountNumber.
     * The Account Number of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountNumber() {
        invoiceAccountNumber = null;
    }

    /**
     * Internal Getter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountShortName() {
        return this.invoiceAccountShortName;
    }

    /**
     * Getter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @return Returns the String
     */
    public String getInvoiceAccountShortName() {
        return OptionalNullable.getFrom(invoiceAccountShortName);
    }

    /**
     * Setter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     * @param invoiceAccountShortName Value for String
     */
    @JsonSetter("InvoiceAccountShortName")
    public void setInvoiceAccountShortName(String invoiceAccountShortName) {
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
    }

    /**
     * UnSetter for InvoiceAccountShortName.
     * The Account Short Name of the account on which the invoice is generated.
     */
    public void unsetInvoiceAccountShortName() {
        invoiceAccountShortName = null;
    }

    /**
     * Getter for BestOfIndicator.
     * Best of Indicator of the Pricing customer/account configured.
     * @return Returns the Boolean
     */
    @JsonGetter("BestOfIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getBestOfIndicator() {
        return bestOfIndicator;
    }

    /**
     * Setter for BestOfIndicator.
     * Best of Indicator of the Pricing customer/account configured.
     * @param bestOfIndicator Value for Boolean
     */
    @JsonSetter("BestOfIndicator")
    public void setBestOfIndicator(Boolean bestOfIndicator) {
        this.bestOfIndicator = bestOfIndicator;
    }

    /**
     * Getter for IsInternational.
     * Whether the account is international.
     * @return Returns the Boolean
     */
    @JsonGetter("IsInternational")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsInternational() {
        return isInternational;
    }

    /**
     * Setter for IsInternational.
     * Whether the account is international.
     * @param isInternational Value for Boolean
     */
    @JsonSetter("IsInternational")
    public void setIsInternational(Boolean isInternational) {
        this.isInternational = isInternational;
    }

    /**
     * Internal Getter for TotalAccounts.
     * Total number of accounts under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalAccounts() {
        return this.totalAccounts;
    }

    /**
     * Getter for TotalAccounts.
     * Total number of accounts under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalAccounts() {
        return OptionalNullable.getFrom(totalAccounts);
    }

    /**
     * Setter for TotalAccounts.
     * Total number of accounts under the payer.
     * @param totalAccounts Value for Integer
     */
    @JsonSetter("TotalAccounts")
    public void setTotalAccounts(Integer totalAccounts) {
        this.totalAccounts = OptionalNullable.of(totalAccounts);
    }

    /**
     * UnSetter for TotalAccounts.
     * Total number of accounts under the payer.
     */
    public void unsetTotalAccounts() {
        totalAccounts = null;
    }

    /**
     * Internal Getter for TotalActiveAccounts.
     * Total number of active accounts under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalActiveAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalActiveAccounts() {
        return this.totalActiveAccounts;
    }

    /**
     * Getter for TotalActiveAccounts.
     * Total number of active accounts under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalActiveAccounts() {
        return OptionalNullable.getFrom(totalActiveAccounts);
    }

    /**
     * Setter for TotalActiveAccounts.
     * Total number of active accounts under the payer.
     * @param totalActiveAccounts Value for Integer
     */
    @JsonSetter("TotalActiveAccounts")
    public void setTotalActiveAccounts(Integer totalActiveAccounts) {
        this.totalActiveAccounts = OptionalNullable.of(totalActiveAccounts);
    }

    /**
     * UnSetter for TotalActiveAccounts.
     * Total number of active accounts under the payer.
     */
    public void unsetTotalActiveAccounts() {
        totalActiveAccounts = null;
    }

    /**
     * Internal Getter for TotalCards.
     * Total number of cards under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCards() {
        return this.totalCards;
    }

    /**
     * Getter for TotalCards.
     * Total number of cards under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalCards() {
        return OptionalNullable.getFrom(totalCards);
    }

    /**
     * Setter for TotalCards.
     * Total number of cards under the payer.
     * @param totalCards Value for Integer
     */
    @JsonSetter("TotalCards")
    public void setTotalCards(Integer totalCards) {
        this.totalCards = OptionalNullable.of(totalCards);
    }

    /**
     * UnSetter for TotalCards.
     * Total number of cards under the payer.
     */
    public void unsetTotalCards() {
        totalCards = null;
    }

    /**
     * Internal Getter for TotalActiveCards.
     * Total number of active cards under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalActiveCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalActiveCards() {
        return this.totalActiveCards;
    }

    /**
     * Getter for TotalActiveCards.
     * Total number of active cards under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalActiveCards() {
        return OptionalNullable.getFrom(totalActiveCards);
    }

    /**
     * Setter for TotalActiveCards.
     * Total number of active cards under the payer.
     * @param totalActiveCards Value for Integer
     */
    @JsonSetter("TotalActiveCards")
    public void setTotalActiveCards(Integer totalActiveCards) {
        this.totalActiveCards = OptionalNullable.of(totalActiveCards);
    }

    /**
     * UnSetter for TotalActiveCards.
     * Total number of active cards under the payer.
     */
    public void unsetTotalActiveCards() {
        totalActiveCards = null;
    }

    /**
     * Internal Getter for TotalBlockedCards.
     * Total number of cards under the payer that are permanently blocked
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBlockedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBlockedCards() {
        return this.totalBlockedCards;
    }

    /**
     * Getter for TotalBlockedCards.
     * Total number of cards under the payer that are permanently blocked
     * @return Returns the Integer
     */
    public Integer getTotalBlockedCards() {
        return OptionalNullable.getFrom(totalBlockedCards);
    }

    /**
     * Setter for TotalBlockedCards.
     * Total number of cards under the payer that are permanently blocked
     * @param totalBlockedCards Value for Integer
     */
    @JsonSetter("TotalBlockedCards")
    public void setTotalBlockedCards(Integer totalBlockedCards) {
        this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
    }

    /**
     * UnSetter for TotalBlockedCards.
     * Total number of cards under the payer that are permanently blocked
     */
    public void unsetTotalBlockedCards() {
        totalBlockedCards = null;
    }

    /**
     * Internal Getter for TotalCancelledCards.
     * Total number of cards under the payer that are cancelled
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCancelledCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCancelledCards() {
        return this.totalCancelledCards;
    }

    /**
     * Getter for TotalCancelledCards.
     * Total number of cards under the payer that are cancelled
     * @return Returns the Integer
     */
    public Integer getTotalCancelledCards() {
        return OptionalNullable.getFrom(totalCancelledCards);
    }

    /**
     * Setter for TotalCancelledCards.
     * Total number of cards under the payer that are cancelled
     * @param totalCancelledCards Value for Integer
     */
    @JsonSetter("TotalCancelledCards")
    public void setTotalCancelledCards(Integer totalCancelledCards) {
        this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
    }

    /**
     * UnSetter for TotalCancelledCards.
     * Total number of cards under the payer that are cancelled
     */
    public void unsetTotalCancelledCards() {
        totalCancelledCards = null;
    }

    /**
     * Internal Getter for TotalExpiredCards.
     * Total number of expired cards under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalExpiredCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalExpiredCards() {
        return this.totalExpiredCards;
    }

    /**
     * Getter for TotalExpiredCards.
     * Total number of expired cards under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalExpiredCards() {
        return OptionalNullable.getFrom(totalExpiredCards);
    }

    /**
     * Setter for TotalExpiredCards.
     * Total number of expired cards under the payer.
     * @param totalExpiredCards Value for Integer
     */
    @JsonSetter("TotalExpiredCards")
    public void setTotalExpiredCards(Integer totalExpiredCards) {
        this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
    }

    /**
     * UnSetter for TotalExpiredCards.
     * Total number of expired cards under the payer.
     */
    public void unsetTotalExpiredCards() {
        totalExpiredCards = null;
    }

    /**
     * Internal Getter for TotalRenewalPendingCards.
     * Total number of Renewal Pending cards under the payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalRenewalPendingCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalRenewalPendingCards() {
        return this.totalRenewalPendingCards;
    }

    /**
     * Getter for TotalRenewalPendingCards.
     * Total number of Renewal Pending cards under the payer.
     * @return Returns the Integer
     */
    public Integer getTotalRenewalPendingCards() {
        return OptionalNullable.getFrom(totalRenewalPendingCards);
    }

    /**
     * Setter for TotalRenewalPendingCards.
     * Total number of Renewal Pending cards under the payer.
     * @param totalRenewalPendingCards Value for Integer
     */
    @JsonSetter("TotalRenewalPendingCards")
    public void setTotalRenewalPendingCards(Integer totalRenewalPendingCards) {
        this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
    }

    /**
     * UnSetter for TotalRenewalPendingCards.
     * Total number of Renewal Pending cards under the payer.
     */
    public void unsetTotalRenewalPendingCards() {
        totalRenewalPendingCards = null;
    }

    /**
     * Internal Getter for TotalReplacedCards.
     * Total number of cards under the payer with status as “Replaced
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalReplacedCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalReplacedCards() {
        return this.totalReplacedCards;
    }

    /**
     * Getter for TotalReplacedCards.
     * Total number of cards under the payer with status as “Replaced
     * @return Returns the Integer
     */
    public Integer getTotalReplacedCards() {
        return OptionalNullable.getFrom(totalReplacedCards);
    }

    /**
     * Setter for TotalReplacedCards.
     * Total number of cards under the payer with status as “Replaced
     * @param totalReplacedCards Value for Integer
     */
    @JsonSetter("TotalReplacedCards")
    public void setTotalReplacedCards(Integer totalReplacedCards) {
        this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
    }

    /**
     * UnSetter for TotalReplacedCards.
     * Total number of cards under the payer with status as “Replaced
     */
    public void unsetTotalReplacedCards() {
        totalReplacedCards = null;
    }

    /**
     * Internal Getter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalTemporaryBlockCardsByCustomer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalTemporaryBlockCardsByCustomer() {
        return this.totalTemporaryBlockCardsByCustomer;
    }

    /**
     * Getter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     * @return Returns the Integer
     */
    public Integer getTotalTemporaryBlockCardsByCustomer() {
        return OptionalNullable.getFrom(totalTemporaryBlockCardsByCustomer);
    }

    /**
     * Setter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     * @param totalTemporaryBlockCardsByCustomer Value for Integer
     */
    @JsonSetter("TotalTemporaryBlockCardsByCustomer")
    public void setTotalTemporaryBlockCardsByCustomer(Integer totalTemporaryBlockCardsByCustomer) {
        this.totalTemporaryBlockCardsByCustomer = OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
    }

    /**
     * UnSetter for TotalTemporaryBlockCardsByCustomer.
     * Total number of cards under the payer that are temporarily blocked by customer.
     */
    public void unsetTotalTemporaryBlockCardsByCustomer() {
        totalTemporaryBlockCardsByCustomer = null;
    }

    /**
     * Internal Getter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalTemporaryBlockCardsByShell")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalTemporaryBlockCardsByShell() {
        return this.totalTemporaryBlockCardsByShell;
    }

    /**
     * Getter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     * @return Returns the Integer
     */
    public Integer getTotalTemporaryBlockCardsByShell() {
        return OptionalNullable.getFrom(totalTemporaryBlockCardsByShell);
    }

    /**
     * Setter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     * @param totalTemporaryBlockCardsByShell Value for Integer
     */
    @JsonSetter("TotalTemporaryBlockCardsByShell")
    public void setTotalTemporaryBlockCardsByShell(Integer totalTemporaryBlockCardsByShell) {
        this.totalTemporaryBlockCardsByShell = OptionalNullable.of(totalTemporaryBlockCardsByShell);
    }

    /**
     * UnSetter for TotalTemporaryBlockCardsByShell.
     * Total number of cards under the payer that are temporarily blocked by Shell.
     */
    public void unsetTotalTemporaryBlockCardsByShell() {
        totalTemporaryBlockCardsByShell = null;
    }

    /**
     * Internal Getter for TotalNewCards.
     * Total number of cards in “New” status
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalNewCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalNewCards() {
        return this.totalNewCards;
    }

    /**
     * Getter for TotalNewCards.
     * Total number of cards in “New” status
     * @return Returns the Integer
     */
    public Integer getTotalNewCards() {
        return OptionalNullable.getFrom(totalNewCards);
    }

    /**
     * Setter for TotalNewCards.
     * Total number of cards in “New” status
     * @param totalNewCards Value for Integer
     */
    @JsonSetter("TotalNewCards")
    public void setTotalNewCards(Integer totalNewCards) {
        this.totalNewCards = OptionalNullable.of(totalNewCards);
    }

    /**
     * UnSetter for TotalNewCards.
     * Total number of cards in “New” status
     */
    public void unsetTotalNewCards() {
        totalNewCards = null;
    }

    /**
     * Internal Getter for TotalFraudCards.
     * Total number of cards in Fraud status
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalFraudCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalFraudCards() {
        return this.totalFraudCards;
    }

    /**
     * Getter for TotalFraudCards.
     * Total number of cards in Fraud status
     * @return Returns the Integer
     */
    public Integer getTotalFraudCards() {
        return OptionalNullable.getFrom(totalFraudCards);
    }

    /**
     * Setter for TotalFraudCards.
     * Total number of cards in Fraud status
     * @param totalFraudCards Value for Integer
     */
    @JsonSetter("TotalFraudCards")
    public void setTotalFraudCards(Integer totalFraudCards) {
        this.totalFraudCards = OptionalNullable.of(totalFraudCards);
    }

    /**
     * UnSetter for TotalFraudCards.
     * Total number of cards in Fraud status
     */
    public void unsetTotalFraudCards() {
        totalFraudCards = null;
    }

    /**
     * Internal Getter for TotalBlockedAccounts.
     * Total number of accounts in Blocked status
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBlockedAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBlockedAccounts() {
        return this.totalBlockedAccounts;
    }

    /**
     * Getter for TotalBlockedAccounts.
     * Total number of accounts in Blocked status
     * @return Returns the Integer
     */
    public Integer getTotalBlockedAccounts() {
        return OptionalNullable.getFrom(totalBlockedAccounts);
    }

    /**
     * Setter for TotalBlockedAccounts.
     * Total number of accounts in Blocked status
     * @param totalBlockedAccounts Value for Integer
     */
    @JsonSetter("TotalBlockedAccounts")
    public void setTotalBlockedAccounts(Integer totalBlockedAccounts) {
        this.totalBlockedAccounts = OptionalNullable.of(totalBlockedAccounts);
    }

    /**
     * UnSetter for TotalBlockedAccounts.
     * Total number of accounts in Blocked status
     */
    public void unsetTotalBlockedAccounts() {
        totalBlockedAccounts = null;
    }

    /**
     * Internal Getter for TotalCancelledAccounts.
     * Total number of accounts in Cancel status
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalCancelledAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalCancelledAccounts() {
        return this.totalCancelledAccounts;
    }

    /**
     * Getter for TotalCancelledAccounts.
     * Total number of accounts in Cancel status
     * @return Returns the Integer
     */
    public Integer getTotalCancelledAccounts() {
        return OptionalNullable.getFrom(totalCancelledAccounts);
    }

    /**
     * Setter for TotalCancelledAccounts.
     * Total number of accounts in Cancel status
     * @param totalCancelledAccounts Value for Integer
     */
    @JsonSetter("TotalCancelledAccounts")
    public void setTotalCancelledAccounts(Integer totalCancelledAccounts) {
        this.totalCancelledAccounts = OptionalNullable.of(totalCancelledAccounts);
    }

    /**
     * UnSetter for TotalCancelledAccounts.
     * Total number of accounts in Cancel status
     */
    public void unsetTotalCancelledAccounts() {
        totalCancelledAccounts = null;
    }

    /**
     * Internal Getter for PayerTradingName.
     * Trading name for the Payer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerTradingName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerTradingName() {
        return this.payerTradingName;
    }

    /**
     * Getter for PayerTradingName.
     * Trading name for the Payer
     * @return Returns the String
     */
    public String getPayerTradingName() {
        return OptionalNullable.getFrom(payerTradingName);
    }

    /**
     * Setter for PayerTradingName.
     * Trading name for the Payer
     * @param payerTradingName Value for String
     */
    @JsonSetter("PayerTradingName")
    public void setPayerTradingName(String payerTradingName) {
        this.payerTradingName = OptionalNullable.of(payerTradingName);
    }

    /**
     * UnSetter for PayerTradingName.
     * Trading name for the Payer
     */
    public void unsetPayerTradingName() {
        payerTradingName = null;
    }

    /**
     * Getter for Status.
     * Payer current status id and description e.g. (Id – Description): 1-Active 2-Requested from
     * UTA 3-Awaiting embossing 4-Manufactured 5-Awaiting despatch
     * @return Returns the String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Payer current status id and description e.g. (Id – Description): 1-Active 2-Requested from
     * UTA 3-Awaiting embossing 4-Manufactured 5-Awaiting despatch
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Internal Getter for BillingLanguage.
     * Payer Billing Language id and description
     * @return Returns the Internal String
     */
    @JsonGetter("BillingLanguage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingLanguage() {
        return this.billingLanguage;
    }

    /**
     * Getter for BillingLanguage.
     * Payer Billing Language id and description
     * @return Returns the String
     */
    public String getBillingLanguage() {
        return OptionalNullable.getFrom(billingLanguage);
    }

    /**
     * Setter for BillingLanguage.
     * Payer Billing Language id and description
     * @param billingLanguage Value for String
     */
    @JsonSetter("BillingLanguage")
    public void setBillingLanguage(String billingLanguage) {
        this.billingLanguage = OptionalNullable.of(billingLanguage);
    }

    /**
     * UnSetter for BillingLanguage.
     * Payer Billing Language id and description
     */
    public void unsetBillingLanguage() {
        billingLanguage = null;
    }

    /**
     * Internal Getter for LegalEntity.
     * Legal entity id and description of the Payer
     * @return Returns the Internal String
     */
    @JsonGetter("LegalEntity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLegalEntity() {
        return this.legalEntity;
    }

    /**
     * Getter for LegalEntity.
     * Legal entity id and description of the Payer
     * @return Returns the String
     */
    public String getLegalEntity() {
        return OptionalNullable.getFrom(legalEntity);
    }

    /**
     * Setter for LegalEntity.
     * Legal entity id and description of the Payer
     * @param legalEntity Value for String
     */
    @JsonSetter("LegalEntity")
    public void setLegalEntity(String legalEntity) {
        this.legalEntity = OptionalNullable.of(legalEntity);
    }

    /**
     * UnSetter for LegalEntity.
     * Legal entity id and description of the Payer
     */
    public void unsetLegalEntity() {
        legalEntity = null;
    }

    /**
     * Internal Getter for DateEstablished.
     * Payer/Company Established Date.
     * @return Returns the Internal String
     */
    @JsonGetter("DateEstablished")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDateEstablished() {
        return this.dateEstablished;
    }

    /**
     * Getter for DateEstablished.
     * Payer/Company Established Date.
     * @return Returns the String
     */
    public String getDateEstablished() {
        return OptionalNullable.getFrom(dateEstablished);
    }

    /**
     * Setter for DateEstablished.
     * Payer/Company Established Date.
     * @param dateEstablished Value for String
     */
    @JsonSetter("DateEstablished")
    public void setDateEstablished(String dateEstablished) {
        this.dateEstablished = OptionalNullable.of(dateEstablished);
    }

    /**
     * UnSetter for DateEstablished.
     * Payer/Company Established Date.
     */
    public void unsetDateEstablished() {
        dateEstablished = null;
    }

    /**
     * Internal Getter for CustomerClassification.
     * Payer/Company Classification id and description
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerClassification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerClassification() {
        return this.customerClassification;
    }

    /**
     * Getter for CustomerClassification.
     * Payer/Company Classification id and description
     * @return Returns the String
     */
    public String getCustomerClassification() {
        return OptionalNullable.getFrom(customerClassification);
    }

    /**
     * Setter for CustomerClassification.
     * Payer/Company Classification id and description
     * @param customerClassification Value for String
     */
    @JsonSetter("CustomerClassification")
    public void setCustomerClassification(String customerClassification) {
        this.customerClassification = OptionalNullable.of(customerClassification);
    }

    /**
     * UnSetter for CustomerClassification.
     * Payer/Company Classification id and description
     */
    public void unsetCustomerClassification() {
        customerClassification = null;
    }

    /**
     * Internal Getter for IndustryClass.
     * Payer/Company Industry class id and description
     * @return Returns the Internal String
     */
    @JsonGetter("IndustryClass")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIndustryClass() {
        return this.industryClass;
    }

    /**
     * Getter for IndustryClass.
     * Payer/Company Industry class id and description
     * @return Returns the String
     */
    public String getIndustryClass() {
        return OptionalNullable.getFrom(industryClass);
    }

    /**
     * Setter for IndustryClass.
     * Payer/Company Industry class id and description
     * @param industryClass Value for String
     */
    @JsonSetter("IndustryClass")
    public void setIndustryClass(String industryClass) {
        this.industryClass = OptionalNullable.of(industryClass);
    }

    /**
     * UnSetter for IndustryClass.
     * Payer/Company Industry class id and description
     */
    public void unsetIndustryClass() {
        industryClass = null;
    }

    /**
     * Internal Getter for MarketingSegmentation.
     * Marketing Segmentation id and description
     * @return Returns the Internal String
     */
    @JsonGetter("MarketingSegmentation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMarketingSegmentation() {
        return this.marketingSegmentation;
    }

    /**
     * Getter for MarketingSegmentation.
     * Marketing Segmentation id and description
     * @return Returns the String
     */
    public String getMarketingSegmentation() {
        return OptionalNullable.getFrom(marketingSegmentation);
    }

    /**
     * Setter for MarketingSegmentation.
     * Marketing Segmentation id and description
     * @param marketingSegmentation Value for String
     */
    @JsonSetter("MarketingSegmentation")
    public void setMarketingSegmentation(String marketingSegmentation) {
        this.marketingSegmentation = OptionalNullable.of(marketingSegmentation);
    }

    /**
     * UnSetter for MarketingSegmentation.
     * Marketing Segmentation id and description
     */
    public void unsetMarketingSegmentation() {
        marketingSegmentation = null;
    }

    /**
     * Internal Getter for LineOfBusiness.
     * Payer/Company Line of Business Id and Description
     * @return Returns the Internal String
     */
    @JsonGetter("LineOfBusiness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLineOfBusiness() {
        return this.lineOfBusiness;
    }

    /**
     * Getter for LineOfBusiness.
     * Payer/Company Line of Business Id and Description
     * @return Returns the String
     */
    public String getLineOfBusiness() {
        return OptionalNullable.getFrom(lineOfBusiness);
    }

    /**
     * Setter for LineOfBusiness.
     * Payer/Company Line of Business Id and Description
     * @param lineOfBusiness Value for String
     */
    @JsonSetter("LineOfBusiness")
    public void setLineOfBusiness(String lineOfBusiness) {
        this.lineOfBusiness = OptionalNullable.of(lineOfBusiness);
    }

    /**
     * UnSetter for LineOfBusiness.
     * Payer/Company Line of Business Id and Description
     */
    public void unsetLineOfBusiness() {
        lineOfBusiness = null;
    }

    /**
     * Getter for PrintCreditLimit.
     * Is Credit Limit printed on the statement of account: True/False If True Credit Limit is
     * printed on invoice/SOA
     * @return Returns the Boolean
     */
    @JsonGetter("PrintCreditLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPrintCreditLimit() {
        return printCreditLimit;
    }

    /**
     * Setter for PrintCreditLimit.
     * Is Credit Limit printed on the statement of account: True/False If True Credit Limit is
     * printed on invoice/SOA
     * @param printCreditLimit Value for Boolean
     */
    @JsonSetter("PrintCreditLimit")
    public void setPrintCreditLimit(Boolean printCreditLimit) {
        this.printCreditLimit = printCreditLimit;
    }

    /**
     * Internal Getter for CardGroupType.
     * Card Group Type configured for Payer e.g. (Id – Description): 1-Horizontal only 2-Vertical
     * only 3-Both
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupType() {
        return this.cardGroupType;
    }

    /**
     * Getter for CardGroupType.
     * Card Group Type configured for Payer e.g. (Id – Description): 1-Horizontal only 2-Vertical
     * only 3-Both
     * @return Returns the String
     */
    public String getCardGroupType() {
        return OptionalNullable.getFrom(cardGroupType);
    }

    /**
     * Setter for CardGroupType.
     * Card Group Type configured for Payer e.g. (Id – Description): 1-Horizontal only 2-Vertical
     * only 3-Both
     * @param cardGroupType Value for String
     */
    @JsonSetter("CardGroupType")
    public void setCardGroupType(String cardGroupType) {
        this.cardGroupType = OptionalNullable.of(cardGroupType);
    }

    /**
     * UnSetter for CardGroupType.
     * Card Group Type configured for Payer e.g. (Id – Description): 1-Horizontal only 2-Vertical
     * only 3-Both
     */
    public void unsetCardGroupType() {
        cardGroupType = null;
    }

    /**
     * Getter for RenewCards.
     * If set to True cards will be automatically renewed on expiry
     * @return Returns the Boolean
     */
    @JsonGetter("RenewCards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getRenewCards() {
        return renewCards;
    }

    /**
     * Setter for RenewCards.
     * If set to True cards will be automatically renewed on expiry
     * @param renewCards Value for Boolean
     */
    @JsonSetter("RenewCards")
    public void setRenewCards(Boolean renewCards) {
        this.renewCards = renewCards;
    }

    /**
     * Getter for AllowSelectPIN.
     * If set to True then Self Select PIN is allowed for Payer
     * @return Returns the Boolean
     */
    @JsonGetter("AllowSelectPIN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getAllowSelectPIN() {
        return allowSelectPIN;
    }

    /**
     * Setter for AllowSelectPIN.
     * If set to True then Self Select PIN is allowed for Payer
     * @param allowSelectPIN Value for Boolean
     */
    @JsonSetter("AllowSelectPIN")
    public void setAllowSelectPIN(Boolean allowSelectPIN) {
        this.allowSelectPIN = allowSelectPIN;
    }

    /**
     * Getter for UseFleetPIN.
     * If set to True then Fleet PIN is applied for the cards directly under payer
     * @return Returns the Boolean
     */
    @JsonGetter("UseFleetPIN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUseFleetPIN() {
        return useFleetPIN;
    }

    /**
     * Setter for UseFleetPIN.
     * If set to True then Fleet PIN is applied for the cards directly under payer
     * @param useFleetPIN Value for Boolean
     */
    @JsonSetter("UseFleetPIN")
    public void setUseFleetPIN(Boolean useFleetPIN) {
        this.useFleetPIN = useFleetPIN;
    }

    /**
     * Internal Getter for VATRegNumber.
     * Payer/Company VAT registration number.
     * @return Returns the Internal String
     */
    @JsonGetter("VATRegNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATRegNumber() {
        return this.vATRegNumber;
    }

    /**
     * Getter for VATRegNumber.
     * Payer/Company VAT registration number.
     * @return Returns the String
     */
    public String getVATRegNumber() {
        return OptionalNullable.getFrom(vATRegNumber);
    }

    /**
     * Setter for VATRegNumber.
     * Payer/Company VAT registration number.
     * @param vATRegNumber Value for String
     */
    @JsonSetter("VATRegNumber")
    public void setVATRegNumber(String vATRegNumber) {
        this.vATRegNumber = OptionalNullable.of(vATRegNumber);
    }

    /**
     * UnSetter for VATRegNumber.
     * Payer/Company VAT registration number.
     */
    public void unsetVATRegNumber() {
        vATRegNumber = null;
    }

    /**
     * Getter for VATRegNumber2.
     * Payer/Company VAT registration number 2.
     * @return Returns the String
     */
    @JsonGetter("VATRegNumber2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVATRegNumber2() {
        return vATRegNumber2;
    }

    /**
     * Setter for VATRegNumber2.
     * Payer/Company VAT registration number 2.
     * @param vATRegNumber2 Value for String
     */
    @JsonSetter("VATRegNumber2")
    public void setVATRegNumber2(String vATRegNumber2) {
        this.vATRegNumber2 = vATRegNumber2;
    }

    /**
     * Internal Getter for RegistrationNumber.
     * Payer/Company Registration number
     * @return Returns the Internal String
     */
    @JsonGetter("RegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRegistrationNumber() {
        return this.registrationNumber;
    }

    /**
     * Getter for RegistrationNumber.
     * Payer/Company Registration number
     * @return Returns the String
     */
    public String getRegistrationNumber() {
        return OptionalNullable.getFrom(registrationNumber);
    }

    /**
     * Setter for RegistrationNumber.
     * Payer/Company Registration number
     * @param registrationNumber Value for String
     */
    @JsonSetter("RegistrationNumber")
    public void setRegistrationNumber(String registrationNumber) {
        this.registrationNumber = OptionalNullable.of(registrationNumber);
    }

    /**
     * UnSetter for RegistrationNumber.
     * Payer/Company Registration number
     */
    public void unsetRegistrationNumber() {
        registrationNumber = null;
    }

    /**
     * Internal Getter for RegistrationNumber2.
     * Payer/Company Registration number2
     * @return Returns the Internal String
     */
    @JsonGetter("RegistrationNumber2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRegistrationNumber2() {
        return this.registrationNumber2;
    }

    /**
     * Getter for RegistrationNumber2.
     * Payer/Company Registration number2
     * @return Returns the String
     */
    public String getRegistrationNumber2() {
        return OptionalNullable.getFrom(registrationNumber2);
    }

    /**
     * Setter for RegistrationNumber2.
     * Payer/Company Registration number2
     * @param registrationNumber2 Value for String
     */
    @JsonSetter("RegistrationNumber2")
    public void setRegistrationNumber2(String registrationNumber2) {
        this.registrationNumber2 = OptionalNullable.of(registrationNumber2);
    }

    /**
     * UnSetter for RegistrationNumber2.
     * Payer/Company Registration number2
     */
    public void unsetRegistrationNumber2() {
        registrationNumber2 = null;
    }

    /**
     * Internal Getter for SalesLedgerBalance.
     * Sales Ledger Balance (Billed)
     * @return Returns the Internal Double
     */
    @JsonGetter("SalesLedgerBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSalesLedgerBalance() {
        return this.salesLedgerBalance;
    }

    /**
     * Getter for SalesLedgerBalance.
     * Sales Ledger Balance (Billed)
     * @return Returns the Double
     */
    public Double getSalesLedgerBalance() {
        return OptionalNullable.getFrom(salesLedgerBalance);
    }

    /**
     * Setter for SalesLedgerBalance.
     * Sales Ledger Balance (Billed)
     * @param salesLedgerBalance Value for Double
     */
    @JsonSetter("SalesLedgerBalance")
    public void setSalesLedgerBalance(Double salesLedgerBalance) {
        this.salesLedgerBalance = OptionalNullable.of(salesLedgerBalance);
    }

    /**
     * UnSetter for SalesLedgerBalance.
     * Sales Ledger Balance (Billed)
     */
    public void unsetSalesLedgerBalance() {
        salesLedgerBalance = null;
    }

    /**
     * Internal Getter for Exposure.
     * Exposure after guarantee
     * @return Returns the Internal Double
     */
    @JsonGetter("Exposure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetExposure() {
        return this.exposure;
    }

    /**
     * Getter for Exposure.
     * Exposure after guarantee
     * @return Returns the Double
     */
    public Double getExposure() {
        return OptionalNullable.getFrom(exposure);
    }

    /**
     * Setter for Exposure.
     * Exposure after guarantee
     * @param exposure Value for Double
     */
    @JsonSetter("Exposure")
    public void setExposure(Double exposure) {
        this.exposure = OptionalNullable.of(exposure);
    }

    /**
     * UnSetter for Exposure.
     * Exposure after guarantee
     */
    public void unsetExposure() {
        exposure = null;
    }

    /**
     * Internal Getter for OutstandingDebt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingDebt")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingDebt() {
        return this.outstandingDebt;
    }

    /**
     * Getter for OutstandingDebt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     * @return Returns the Double
     */
    public Double getOutstandingDebt() {
        return OptionalNullable.getFrom(outstandingDebt);
    }

    /**
     * Setter for OutstandingDebt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     * @param outstandingDebt Value for Double
     */
    @JsonSetter("OutstandingDebt")
    public void setOutstandingDebt(Double outstandingDebt) {
        this.outstandingDebt = OptionalNullable.of(outstandingDebt);
    }

    /**
     * UnSetter for OutstandingDebt.
     * Total outstanding debt (including billed and unbilled sales and fee items)
     */
    public void unsetOutstandingDebt() {
        outstandingDebt = null;
    }

    /**
     * Internal Getter for AvailableCredit.
     * The available credit for the payer. This is the credit limit minus the outstanding debt.
     * @return Returns the Internal Double
     */
    @JsonGetter("AvailableCredit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAvailableCredit() {
        return this.availableCredit;
    }

    /**
     * Getter for AvailableCredit.
     * The available credit for the payer. This is the credit limit minus the outstanding debt.
     * @return Returns the Double
     */
    public Double getAvailableCredit() {
        return OptionalNullable.getFrom(availableCredit);
    }

    /**
     * Setter for AvailableCredit.
     * The available credit for the payer. This is the credit limit minus the outstanding debt.
     * @param availableCredit Value for Double
     */
    @JsonSetter("AvailableCredit")
    public void setAvailableCredit(Double availableCredit) {
        this.availableCredit = OptionalNullable.of(availableCredit);
    }

    /**
     * UnSetter for AvailableCredit.
     * The available credit for the payer. This is the credit limit minus the outstanding debt.
     */
    public void unsetAvailableCredit() {
        availableCredit = null;
    }

    /**
     * Internal Getter for Band.
     * Band Id and Description of the Payer in Card Platform. e.g. (Id – Description): 1-Platinum
     * 2-Gold 3-Silver 4-Bronze
     * @return Returns the Internal String
     */
    @JsonGetter("Band")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBand() {
        return this.band;
    }

    /**
     * Getter for Band.
     * Band Id and Description of the Payer in Card Platform. e.g. (Id – Description): 1-Platinum
     * 2-Gold 3-Silver 4-Bronze
     * @return Returns the String
     */
    public String getBand() {
        return OptionalNullable.getFrom(band);
    }

    /**
     * Setter for Band.
     * Band Id and Description of the Payer in Card Platform. e.g. (Id – Description): 1-Platinum
     * 2-Gold 3-Silver 4-Bronze
     * @param band Value for String
     */
    @JsonSetter("Band")
    public void setBand(String band) {
        this.band = OptionalNullable.of(band);
    }

    /**
     * UnSetter for Band.
     * Band Id and Description of the Payer in Card Platform. e.g. (Id – Description): 1-Platinum
     * 2-Gold 3-Silver 4-Bronze
     */
    public void unsetBand() {
        band = null;
    }

    /**
     * Internal Getter for GlobalCustomerReferenceId.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     * @return Returns the Internal String
     */
    @JsonGetter("GlobalCustomerReferenceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetGlobalCustomerReferenceId() {
        return this.globalCustomerReferenceId;
    }

    /**
     * Getter for GlobalCustomerReferenceId.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     * @return Returns the String
     */
    public String getGlobalCustomerReferenceId() {
        return OptionalNullable.getFrom(globalCustomerReferenceId);
    }

    /**
     * Setter for GlobalCustomerReferenceId.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     * @param globalCustomerReferenceId Value for String
     */
    @JsonSetter("GlobalCustomerReferenceId")
    public void setGlobalCustomerReferenceId(String globalCustomerReferenceId) {
        this.globalCustomerReferenceId = OptionalNullable.of(globalCustomerReferenceId);
    }

    /**
     * UnSetter for GlobalCustomerReferenceId.
     * Global Customer reference id configured in card platform for Payer (Same as Payer Group)
     */
    public void unsetGlobalCustomerReferenceId() {
        globalCustomerReferenceId = null;
    }

    /**
     * Internal Getter for CreditLimit.
     * Payment Credit limit of Payer.
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimit() {
        return this.creditLimit;
    }

    /**
     * Getter for CreditLimit.
     * Payment Credit limit of Payer.
     * @return Returns the Double
     */
    public Double getCreditLimit() {
        return OptionalNullable.getFrom(creditLimit);
    }

    /**
     * Setter for CreditLimit.
     * Payment Credit limit of Payer.
     * @param creditLimit Value for Double
     */
    @JsonSetter("CreditLimit")
    public void setCreditLimit(Double creditLimit) {
        this.creditLimit = OptionalNullable.of(creditLimit);
    }

    /**
     * UnSetter for CreditLimit.
     * Payment Credit limit of Payer.
     */
    public void unsetCreditLimit() {
        creditLimit = null;
    }

    /**
     * Internal Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the PayerDetail response.
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimitInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimitInCustomerCurrency() {
        return this.creditLimitInCustomerCurrency;
    }

    /**
     * Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the PayerDetail response.
     * @return Returns the Double
     */
    public Double getCreditLimitInCustomerCurrency() {
        return OptionalNullable.getFrom(creditLimitInCustomerCurrency);
    }

    /**
     * Setter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the PayerDetail response.
     * @param creditLimitInCustomerCurrency Value for Double
     */
    @JsonSetter("CreditLimitInCustomerCurrency")
    public void setCreditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
    }

    /**
     * UnSetter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the PayerDetail response.
     */
    public void unsetCreditLimitInCustomerCurrency() {
        creditLimitInCustomerCurrency = null;
    }

    /**
     * Internal Getter for BillingCurrencyCode.
     * Customer Billing currency ISO code.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencyCode() {
        return this.billingCurrencyCode;
    }

    /**
     * Getter for BillingCurrencyCode.
     * Customer Billing currency ISO code.
     * @return Returns the String
     */
    public String getBillingCurrencyCode() {
        return OptionalNullable.getFrom(billingCurrencyCode);
    }

    /**
     * Setter for BillingCurrencyCode.
     * Customer Billing currency ISO code.
     * @param billingCurrencyCode Value for String
     */
    @JsonSetter("BillingCurrencyCode")
    public void setBillingCurrencyCode(String billingCurrencyCode) {
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
    }

    /**
     * UnSetter for BillingCurrencyCode.
     * Customer Billing currency ISO code.
     */
    public void unsetBillingCurrencyCode() {
        billingCurrencyCode = null;
    }

    /**
     * Internal Getter for BillingCurrencySymbol.
     * Customer Billing currency Symbol.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencySymbol() {
        return this.billingCurrencySymbol;
    }

    /**
     * Getter for BillingCurrencySymbol.
     * Customer Billing currency Symbol.
     * @return Returns the String
     */
    public String getBillingCurrencySymbol() {
        return OptionalNullable.getFrom(billingCurrencySymbol);
    }

    /**
     * Setter for BillingCurrencySymbol.
     * Customer Billing currency Symbol.
     * @param billingCurrencySymbol Value for String
     */
    @JsonSetter("BillingCurrencySymbol")
    public void setBillingCurrencySymbol(String billingCurrencySymbol) {
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
    }

    /**
     * UnSetter for BillingCurrencySymbol.
     * Customer Billing currency Symbol.
     */
    public void unsetBillingCurrencySymbol() {
        billingCurrencySymbol = null;
    }

    /**
     * Internal Getter for PaymentMethod.
     * Payment method Id and Description as configured for Payer in Card Platform
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentMethod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Getter for PaymentMethod.
     * Payment method Id and Description as configured for Payer in Card Platform
     * @return Returns the String
     */
    public String getPaymentMethod() {
        return OptionalNullable.getFrom(paymentMethod);
    }

    /**
     * Setter for PaymentMethod.
     * Payment method Id and Description as configured for Payer in Card Platform
     * @param paymentMethod Value for String
     */
    @JsonSetter("PaymentMethod")
    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = OptionalNullable.of(paymentMethod);
    }

    /**
     * UnSetter for PaymentMethod.
     * Payment method Id and Description as configured for Payer in Card Platform
     */
    public void unsetPaymentMethod() {
        paymentMethod = null;
    }

    /**
     * Internal Getter for PaymentTerms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentTerms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentTerms() {
        return this.paymentTerms;
    }

    /**
     * Getter for PaymentTerms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     * @return Returns the String
     */
    public String getPaymentTerms() {
        return OptionalNullable.getFrom(paymentTerms);
    }

    /**
     * Setter for PaymentTerms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     * @param paymentTerms Value for String
     */
    @JsonSetter("PaymentTerms")
    public void setPaymentTerms(String paymentTerms) {
        this.paymentTerms = OptionalNullable.of(paymentTerms);
    }

    /**
     * UnSetter for PaymentTerms.
     * Payment terms Id and Description as configured for Payer in Card Platform
     */
    public void unsetPaymentTerms() {
        paymentTerms = null;
    }

    /**
     * Internal Getter for TemporaryCreditLimitIncrease.
     * Temporary Credit limit increase value
     * @return Returns the Internal Double
     */
    @JsonGetter("TemporaryCreditLimitIncrease")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTemporaryCreditLimitIncrease() {
        return this.temporaryCreditLimitIncrease;
    }

    /**
     * Getter for TemporaryCreditLimitIncrease.
     * Temporary Credit limit increase value
     * @return Returns the Double
     */
    public Double getTemporaryCreditLimitIncrease() {
        return OptionalNullable.getFrom(temporaryCreditLimitIncrease);
    }

    /**
     * Setter for TemporaryCreditLimitIncrease.
     * Temporary Credit limit increase value
     * @param temporaryCreditLimitIncrease Value for Double
     */
    @JsonSetter("TemporaryCreditLimitIncrease")
    public void setTemporaryCreditLimitIncrease(Double temporaryCreditLimitIncrease) {
        this.temporaryCreditLimitIncrease = OptionalNullable.of(temporaryCreditLimitIncrease);
    }

    /**
     * UnSetter for TemporaryCreditLimitIncrease.
     * Temporary Credit limit increase value
     */
    public void unsetTemporaryCreditLimitIncrease() {
        temporaryCreditLimitIncrease = null;
    }

    /**
     * Internal Getter for TemporaryCreditLimitIncreaseInCustomerCurrency.
     * Temporary Credit limit increase value
     * @return Returns the Internal Double
     */
    @JsonGetter("TemporaryCreditLimitIncreaseInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTemporaryCreditLimitIncreaseInCustomerCurrency() {
        return this.temporaryCreditLimitIncreaseInCustomerCurrency;
    }

    /**
     * Getter for TemporaryCreditLimitIncreaseInCustomerCurrency.
     * Temporary Credit limit increase value
     * @return Returns the Double
     */
    public Double getTemporaryCreditLimitIncreaseInCustomerCurrency() {
        return OptionalNullable.getFrom(temporaryCreditLimitIncreaseInCustomerCurrency);
    }

    /**
     * Setter for TemporaryCreditLimitIncreaseInCustomerCurrency.
     * Temporary Credit limit increase value
     * @param temporaryCreditLimitIncreaseInCustomerCurrency Value for Double
     */
    @JsonSetter("TemporaryCreditLimitIncreaseInCustomerCurrency")
    public void setTemporaryCreditLimitIncreaseInCustomerCurrency(Double temporaryCreditLimitIncreaseInCustomerCurrency) {
        this.temporaryCreditLimitIncreaseInCustomerCurrency = OptionalNullable.of(temporaryCreditLimitIncreaseInCustomerCurrency);
    }

    /**
     * UnSetter for TemporaryCreditLimitIncreaseInCustomerCurrency.
     * Temporary Credit limit increase value
     */
    public void unsetTemporaryCreditLimitIncreaseInCustomerCurrency() {
        temporaryCreditLimitIncreaseInCustomerCurrency = null;
    }

    /**
     * Internal Getter for TemporaryCreditLimitExpiryDate.
     * Temporary Credit limit expiry date
     * @return Returns the Internal String
     */
    @JsonGetter("TemporaryCreditLimitExpiryDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTemporaryCreditLimitExpiryDate() {
        return this.temporaryCreditLimitExpiryDate;
    }

    /**
     * Getter for TemporaryCreditLimitExpiryDate.
     * Temporary Credit limit expiry date
     * @return Returns the String
     */
    public String getTemporaryCreditLimitExpiryDate() {
        return OptionalNullable.getFrom(temporaryCreditLimitExpiryDate);
    }

    /**
     * Setter for TemporaryCreditLimitExpiryDate.
     * Temporary Credit limit expiry date
     * @param temporaryCreditLimitExpiryDate Value for String
     */
    @JsonSetter("TemporaryCreditLimitExpiryDate")
    public void setTemporaryCreditLimitExpiryDate(String temporaryCreditLimitExpiryDate) {
        this.temporaryCreditLimitExpiryDate = OptionalNullable.of(temporaryCreditLimitExpiryDate);
    }

    /**
     * UnSetter for TemporaryCreditLimitExpiryDate.
     * Temporary Credit limit expiry date
     */
    public void unsetTemporaryCreditLimitExpiryDate() {
        temporaryCreditLimitExpiryDate = null;
    }

    /**
     * Getter for PayerBankAccount.
     * @return Returns the List of BankAccount
     */
    @JsonGetter("PayerBankAccount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<BankAccount> getPayerBankAccount() {
        return payerBankAccount;
    }

    /**
     * Setter for PayerBankAccount.
     * @param payerBankAccount Value for List of BankAccount
     */
    @JsonSetter("PayerBankAccount")
    public void setPayerBankAccount(List<BankAccount> payerBankAccount) {
        this.payerBankAccount = payerBankAccount;
    }

    /**
     * Getter for CardDeliveryAddress.
     * @return Returns the Address
     */
    @JsonGetter("CardDeliveryAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Address getCardDeliveryAddress() {
        return cardDeliveryAddress;
    }

    /**
     * Setter for CardDeliveryAddress.
     * @param cardDeliveryAddress Value for Address
     */
    @JsonSetter("CardDeliveryAddress")
    public void setCardDeliveryAddress(Address cardDeliveryAddress) {
        this.cardDeliveryAddress = cardDeliveryAddress;
    }

    /**
     * Getter for CorrespondanceAddress.
     * @return Returns the Address
     */
    @JsonGetter("CorrespondanceAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Address getCorrespondanceAddress() {
        return correspondanceAddress;
    }

    /**
     * Setter for CorrespondanceAddress.
     * @param correspondanceAddress Value for Address
     */
    @JsonSetter("CorrespondanceAddress")
    public void setCorrespondanceAddress(Address correspondanceAddress) {
        this.correspondanceAddress = correspondanceAddress;
    }

    /**
     * Getter for BillingAddress.
     * @return Returns the Address
     */
    @JsonGetter("BillingAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Address getBillingAddress() {
        return billingAddress;
    }

    /**
     * Setter for BillingAddress.
     * @param billingAddress Value for Address
     */
    @JsonSetter("BillingAddress")
    public void setBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
    }

    /**
     * Getter for HasActiveVolBasedPricing.
     * True, if the payer is setup for volume-based pricing and is active on the current date, else
     * false. This field is returned only when IncludeBonusParameters is set to True in the request.
     * Else set to null.
     * @return Returns the Boolean
     */
    @JsonGetter("HasActiveVolBasedPricing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasActiveVolBasedPricing() {
        return hasActiveVolBasedPricing;
    }

    /**
     * Setter for HasActiveVolBasedPricing.
     * True, if the payer is setup for volume-based pricing and is active on the current date, else
     * false. This field is returned only when IncludeBonusParameters is set to True in the request.
     * Else set to null.
     * @param hasActiveVolBasedPricing Value for Boolean
     */
    @JsonSetter("HasActiveVolBasedPricing")
    public void setHasActiveVolBasedPricing(Boolean hasActiveVolBasedPricing) {
        this.hasActiveVolBasedPricing = hasActiveVolBasedPricing;
    }

    /**
     * Getter for HasActiveVolBasedBonus.
     * True, if the payer is setup for volume-based bonus and is active on the current date, else
     * false. This field is returned only when IncludeBonusParameters is set to True in the request.
     * Else set to null.
     * @return Returns the Boolean
     */
    @JsonGetter("HasActiveVolBasedBonus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasActiveVolBasedBonus() {
        return hasActiveVolBasedBonus;
    }

    /**
     * Setter for HasActiveVolBasedBonus.
     * True, if the payer is setup for volume-based bonus and is active on the current date, else
     * false. This field is returned only when IncludeBonusParameters is set to True in the request.
     * Else set to null.
     * @param hasActiveVolBasedBonus Value for Boolean
     */
    @JsonSetter("HasActiveVolBasedBonus")
    public void setHasActiveVolBasedBonus(Boolean hasActiveVolBasedBonus) {
        this.hasActiveVolBasedBonus = hasActiveVolBasedBonus;
    }

    /**
     * Getter for HasActiveVolBasedAssociationBonus.
     * True, if the payer is setup for volume-based association bonus and is active on the current
     * date, else false. This field is returned only when IncludeBonusParameters is set to True in
     * the request. Else set to null.
     * @return Returns the Boolean
     */
    @JsonGetter("HasActiveVolBasedAssociationBonus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasActiveVolBasedAssociationBonus() {
        return hasActiveVolBasedAssociationBonus;
    }

    /**
     * Setter for HasActiveVolBasedAssociationBonus.
     * True, if the payer is setup for volume-based association bonus and is active on the current
     * date, else false. This field is returned only when IncludeBonusParameters is set to True in
     * the request. Else set to null.
     * @param hasActiveVolBasedAssociationBonus Value for Boolean
     */
    @JsonSetter("HasActiveVolBasedAssociationBonus")
    public void setHasActiveVolBasedAssociationBonus(Boolean hasActiveVolBasedAssociationBonus) {
        this.hasActiveVolBasedAssociationBonus = hasActiveVolBasedAssociationBonus;
    }

    /**
     * Getter for FinanceCurrency.
     * This entity will not be present in the response if the ‘IncludeFinanceCurrency’ flag in the
     * request is ‘false’
     * @return Returns the FinanceCurrency
     */
    @JsonGetter("FinanceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FinanceCurrency getFinanceCurrency() {
        return financeCurrency;
    }

    /**
     * Setter for FinanceCurrency.
     * This entity will not be present in the response if the ‘IncludeFinanceCurrency’ flag in the
     * request is ‘false’
     * @param financeCurrency Value for FinanceCurrency
     */
    @JsonSetter("FinanceCurrency")
    public void setFinanceCurrency(FinanceCurrency financeCurrency) {
        this.financeCurrency = financeCurrency;
    }

    /**
     * Internal Getter for TollsCustomerId.
     * Customer id in e-TM system This field will have value only when ReturnTollsCustomerId is set
     * to true in the request else set to null or empty.
     * @return Returns the Internal String
     */
    @JsonGetter("TollsCustomerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTollsCustomerId() {
        return this.tollsCustomerId;
    }

    /**
     * Getter for TollsCustomerId.
     * Customer id in e-TM system This field will have value only when ReturnTollsCustomerId is set
     * to true in the request else set to null or empty.
     * @return Returns the String
     */
    public String getTollsCustomerId() {
        return OptionalNullable.getFrom(tollsCustomerId);
    }

    /**
     * Setter for TollsCustomerId.
     * Customer id in e-TM system This field will have value only when ReturnTollsCustomerId is set
     * to true in the request else set to null or empty.
     * @param tollsCustomerId Value for String
     */
    @JsonSetter("TollsCustomerId")
    public void setTollsCustomerId(String tollsCustomerId) {
        this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
    }

    /**
     * UnSetter for TollsCustomerId.
     * Customer id in e-TM system This field will have value only when ReturnTollsCustomerId is set
     * to true in the request else set to null or empty.
     */
    public void unsetTollsCustomerId() {
        tollsCustomerId = null;
    }

    /**
     * Internal Getter for TollsColcoCountryTypeId.
     * String	Colco country type id in e-TM system This field will have value only when
     * ReturnTollsCustomerId is set to true in the request else set to null or empty.
     * @return Returns the Internal String
     */
    @JsonGetter("TollsColcoCountryTypeId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTollsColcoCountryTypeId() {
        return this.tollsColcoCountryTypeId;
    }

    /**
     * Getter for TollsColcoCountryTypeId.
     * String	Colco country type id in e-TM system This field will have value only when
     * ReturnTollsCustomerId is set to true in the request else set to null or empty.
     * @return Returns the String
     */
    public String getTollsColcoCountryTypeId() {
        return OptionalNullable.getFrom(tollsColcoCountryTypeId);
    }

    /**
     * Setter for TollsColcoCountryTypeId.
     * String	Colco country type id in e-TM system This field will have value only when
     * ReturnTollsCustomerId is set to true in the request else set to null or empty.
     * @param tollsColcoCountryTypeId Value for String
     */
    @JsonSetter("TollsColcoCountryTypeId")
    public void setTollsColcoCountryTypeId(String tollsColcoCountryTypeId) {
        this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
    }

    /**
     * UnSetter for TollsColcoCountryTypeId.
     * String	Colco country type id in e-TM system This field will have value only when
     * ReturnTollsCustomerId is set to true in the request else set to null or empty.
     */
    public void unsetTollsColcoCountryTypeId() {
        tollsColcoCountryTypeId = null;
    }

    /**
     * Getter for Contracts.
     * @return Returns the List of CustomerContract
     */
    @JsonGetter("Contracts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<CustomerContract> getContracts() {
        return contracts;
    }

    /**
     * Setter for Contracts.
     * @param contracts Value for List of CustomerContract
     */
    @JsonSetter("Contracts")
    public void setContracts(List<CustomerContract> contracts) {
        this.contracts = contracts;
    }

    /**
     * Converts this PayerDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PayerDetails [" + "colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", countryCode=" + countryCode + ", country=" + country + ", payerId=" + payerId
                + ", payerNumber=" + payerNumber + ", payerFullName=" + payerFullName
                + ", payerShortName=" + payerShortName + ", payerGroupId=" + payerGroupId
                + ", amountDue=" + amountDue + ", amountOverdue=" + amountOverdue
                + ", amountNotOverdue=" + amountNotOverdue + ", outstandingBalance="
                + outstandingBalance + ", unallocatedPayment=" + unallocatedPayment
                + ", sOACurrencyCode=" + sOACurrencyCode + ", sOACurrencySymbol="
                + sOACurrencySymbol + ", sOACreditLimitCurrencyCode=" + sOACreditLimitCurrencyCode
                + ", sOACreditLimitCurrencySymbol=" + sOACreditLimitCurrencySymbol
                + ", lastPaymentCurrencyCode=" + lastPaymentCurrencyCode
                + ", lastPaymentCurrencySymbol=" + lastPaymentCurrencySymbol
                + ", lastPaymentAmount=" + lastPaymentAmount + ", lastPaymentDate="
                + lastPaymentDate + ", sOALastPaymentAmount=" + sOALastPaymentAmount
                + ", sOALastPaymentDate=" + sOALastPaymentDate + ", currencyCode=" + currencyCode
                + ", currencySymbol=" + currencySymbol + ", colCoCountryCode=" + colCoCountryCode
                + ", localCurrencyCode=" + localCurrencyCode + ", localCurrencySymbol="
                + localCurrencySymbol + ", localCurrencyExchangeRate=" + localCurrencyExchangeRate
                + ", localCurrencyExchangeRateSoA=" + localCurrencyExchangeRateSoA
                + ", billingFrequencyTypeId=" + billingFrequencyTypeId + ", billingFrequencyType="
                + billingFrequencyType + ", billingRunFrequencyTypeId=" + billingRunFrequencyTypeId
                + ", billingRunFrequnecy=" + billingRunFrequnecy + ", day1Run=" + day1Run
                + ", day2Run=" + day2Run + ", day3Run=" + day3Run + ", day4Run=" + day4Run
                + ", invoiceDistributionMethods=" + invoiceDistributionMethods + ", outputType="
                + outputType + ", invoiceAccountID=" + invoiceAccountID + ", invoiceAccountNumber="
                + invoiceAccountNumber + ", invoiceAccountShortName=" + invoiceAccountShortName
                + ", bestOfIndicator=" + bestOfIndicator + ", isInternational=" + isInternational
                + ", totalAccounts=" + totalAccounts + ", totalActiveAccounts="
                + totalActiveAccounts + ", totalCards=" + totalCards + ", totalActiveCards="
                + totalActiveCards + ", totalBlockedCards=" + totalBlockedCards
                + ", totalCancelledCards=" + totalCancelledCards + ", totalExpiredCards="
                + totalExpiredCards + ", totalRenewalPendingCards=" + totalRenewalPendingCards
                + ", totalReplacedCards=" + totalReplacedCards
                + ", totalTemporaryBlockCardsByCustomer=" + totalTemporaryBlockCardsByCustomer
                + ", totalTemporaryBlockCardsByShell=" + totalTemporaryBlockCardsByShell
                + ", totalNewCards=" + totalNewCards + ", totalFraudCards=" + totalFraudCards
                + ", totalBlockedAccounts=" + totalBlockedAccounts + ", totalCancelledAccounts="
                + totalCancelledAccounts + ", payerTradingName=" + payerTradingName + ", status="
                + status + ", billingLanguage=" + billingLanguage + ", legalEntity=" + legalEntity
                + ", dateEstablished=" + dateEstablished + ", customerClassification="
                + customerClassification + ", industryClass=" + industryClass
                + ", marketingSegmentation=" + marketingSegmentation + ", lineOfBusiness="
                + lineOfBusiness + ", printCreditLimit=" + printCreditLimit + ", cardGroupType="
                + cardGroupType + ", renewCards=" + renewCards + ", allowSelectPIN="
                + allowSelectPIN + ", useFleetPIN=" + useFleetPIN + ", vATRegNumber=" + vATRegNumber
                + ", vATRegNumber2=" + vATRegNumber2 + ", registrationNumber=" + registrationNumber
                + ", registrationNumber2=" + registrationNumber2 + ", salesLedgerBalance="
                + salesLedgerBalance + ", exposure=" + exposure + ", outstandingDebt="
                + outstandingDebt + ", availableCredit=" + availableCredit + ", band=" + band
                + ", globalCustomerReferenceId=" + globalCustomerReferenceId + ", creditLimit="
                + creditLimit + ", creditLimitInCustomerCurrency=" + creditLimitInCustomerCurrency
                + ", billingCurrencyCode=" + billingCurrencyCode + ", billingCurrencySymbol="
                + billingCurrencySymbol + ", paymentMethod=" + paymentMethod + ", paymentTerms="
                + paymentTerms + ", temporaryCreditLimitIncrease=" + temporaryCreditLimitIncrease
                + ", temporaryCreditLimitIncreaseInCustomerCurrency="
                + temporaryCreditLimitIncreaseInCustomerCurrency
                + ", temporaryCreditLimitExpiryDate=" + temporaryCreditLimitExpiryDate
                + ", payerBankAccount=" + payerBankAccount + ", cardDeliveryAddress="
                + cardDeliveryAddress + ", correspondanceAddress=" + correspondanceAddress
                + ", billingAddress=" + billingAddress + ", hasActiveVolBasedPricing="
                + hasActiveVolBasedPricing + ", hasActiveVolBasedBonus=" + hasActiveVolBasedBonus
                + ", hasActiveVolBasedAssociationBonus=" + hasActiveVolBasedAssociationBonus
                + ", financeCurrency=" + financeCurrency + ", tollsCustomerId=" + tollsCustomerId
                + ", tollsColcoCountryTypeId=" + tollsColcoCountryTypeId + ", contracts="
                + contracts + "]";
    }

    /**
     * Builds a new {@link PayerDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PayerDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .invoiceDistributionMethods(getInvoiceDistributionMethods())
                .bestOfIndicator(getBestOfIndicator())
                .isInternational(getIsInternational())
                .status(getStatus())
                .printCreditLimit(getPrintCreditLimit())
                .renewCards(getRenewCards())
                .allowSelectPIN(getAllowSelectPIN())
                .useFleetPIN(getUseFleetPIN())
                .vATRegNumber2(getVATRegNumber2())
                .payerBankAccount(getPayerBankAccount())
                .cardDeliveryAddress(getCardDeliveryAddress())
                .correspondanceAddress(getCorrespondanceAddress())
                .billingAddress(getBillingAddress())
                .hasActiveVolBasedPricing(getHasActiveVolBasedPricing())
                .hasActiveVolBasedBonus(getHasActiveVolBasedBonus())
                .hasActiveVolBasedAssociationBonus(getHasActiveVolBasedAssociationBonus())
                .financeCurrency(getFinanceCurrency())
                .contracts(getContracts());
        builder.colCoId = internalGetColCoId();
        builder.colCoCode = internalGetColCoCode();
        builder.countryCode = internalGetCountryCode();
        builder.country = internalGetCountry();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerFullName = internalGetPayerFullName();
        builder.payerShortName = internalGetPayerShortName();
        builder.payerGroupId = internalGetPayerGroupId();
        builder.amountDue = internalGetAmountDue();
        builder.amountOverdue = internalGetAmountOverdue();
        builder.amountNotOverdue = internalGetAmountNotOverdue();
        builder.outstandingBalance = internalGetOutstandingBalance();
        builder.unallocatedPayment = internalGetUnallocatedPayment();
        builder.sOACurrencyCode = internalGetSOACurrencyCode();
        builder.sOACurrencySymbol = internalGetSOACurrencySymbol();
        builder.sOACreditLimitCurrencyCode = internalGetSOACreditLimitCurrencyCode();
        builder.sOACreditLimitCurrencySymbol = internalGetSOACreditLimitCurrencySymbol();
        builder.lastPaymentCurrencyCode = internalGetLastPaymentCurrencyCode();
        builder.lastPaymentCurrencySymbol = internalGetLastPaymentCurrencySymbol();
        builder.lastPaymentAmount = internalGetLastPaymentAmount();
        builder.lastPaymentDate = internalGetLastPaymentDate();
        builder.sOALastPaymentAmount = internalGetSOALastPaymentAmount();
        builder.sOALastPaymentDate = internalGetSOALastPaymentDate();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.colCoCountryCode = internalGetColCoCountryCode();
        builder.localCurrencyCode = internalGetLocalCurrencyCode();
        builder.localCurrencySymbol = internalGetLocalCurrencySymbol();
        builder.localCurrencyExchangeRate = internalGetLocalCurrencyExchangeRate();
        builder.localCurrencyExchangeRateSoA = internalGetLocalCurrencyExchangeRateSoA();
        builder.billingFrequencyTypeId = internalGetBillingFrequencyTypeId();
        builder.billingFrequencyType = internalGetBillingFrequencyType();
        builder.billingRunFrequencyTypeId = internalGetBillingRunFrequencyTypeId();
        builder.billingRunFrequnecy = internalGetBillingRunFrequnecy();
        builder.day1Run = internalGetDay1Run();
        builder.day2Run = internalGetDay2Run();
        builder.day3Run = internalGetDay3Run();
        builder.day4Run = internalGetDay4Run();
        builder.outputType = internalGetOutputType();
        builder.invoiceAccountID = internalGetInvoiceAccountID();
        builder.invoiceAccountNumber = internalGetInvoiceAccountNumber();
        builder.invoiceAccountShortName = internalGetInvoiceAccountShortName();
        builder.totalAccounts = internalGetTotalAccounts();
        builder.totalActiveAccounts = internalGetTotalActiveAccounts();
        builder.totalCards = internalGetTotalCards();
        builder.totalActiveCards = internalGetTotalActiveCards();
        builder.totalBlockedCards = internalGetTotalBlockedCards();
        builder.totalCancelledCards = internalGetTotalCancelledCards();
        builder.totalExpiredCards = internalGetTotalExpiredCards();
        builder.totalRenewalPendingCards = internalGetTotalRenewalPendingCards();
        builder.totalReplacedCards = internalGetTotalReplacedCards();
        builder.totalTemporaryBlockCardsByCustomer =
                internalGetTotalTemporaryBlockCardsByCustomer();
        builder.totalTemporaryBlockCardsByShell = internalGetTotalTemporaryBlockCardsByShell();
        builder.totalNewCards = internalGetTotalNewCards();
        builder.totalFraudCards = internalGetTotalFraudCards();
        builder.totalBlockedAccounts = internalGetTotalBlockedAccounts();
        builder.totalCancelledAccounts = internalGetTotalCancelledAccounts();
        builder.payerTradingName = internalGetPayerTradingName();
        builder.billingLanguage = internalGetBillingLanguage();
        builder.legalEntity = internalGetLegalEntity();
        builder.dateEstablished = internalGetDateEstablished();
        builder.customerClassification = internalGetCustomerClassification();
        builder.industryClass = internalGetIndustryClass();
        builder.marketingSegmentation = internalGetMarketingSegmentation();
        builder.lineOfBusiness = internalGetLineOfBusiness();
        builder.cardGroupType = internalGetCardGroupType();
        builder.vATRegNumber = internalGetVATRegNumber();
        builder.registrationNumber = internalGetRegistrationNumber();
        builder.registrationNumber2 = internalGetRegistrationNumber2();
        builder.salesLedgerBalance = internalGetSalesLedgerBalance();
        builder.exposure = internalGetExposure();
        builder.outstandingDebt = internalGetOutstandingDebt();
        builder.availableCredit = internalGetAvailableCredit();
        builder.band = internalGetBand();
        builder.globalCustomerReferenceId = internalGetGlobalCustomerReferenceId();
        builder.creditLimit = internalGetCreditLimit();
        builder.creditLimitInCustomerCurrency = internalGetCreditLimitInCustomerCurrency();
        builder.billingCurrencyCode = internalGetBillingCurrencyCode();
        builder.billingCurrencySymbol = internalGetBillingCurrencySymbol();
        builder.paymentMethod = internalGetPaymentMethod();
        builder.paymentTerms = internalGetPaymentTerms();
        builder.temporaryCreditLimitIncrease = internalGetTemporaryCreditLimitIncrease();
        builder.temporaryCreditLimitIncreaseInCustomerCurrency =
                internalGetTemporaryCreditLimitIncreaseInCustomerCurrency();
        builder.temporaryCreditLimitExpiryDate = internalGetTemporaryCreditLimitExpiryDate();
        builder.tollsCustomerId = internalGetTollsCustomerId();
        builder.tollsColcoCountryTypeId = internalGetTollsColcoCountryTypeId();
        return builder;
    }

    /**
     * Class to build instances of {@link PayerDetails}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<String> countryCode;
        private OptionalNullable<String> country;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerFullName;
        private OptionalNullable<String> payerShortName;
        private OptionalNullable<Integer> payerGroupId;
        private OptionalNullable<Double> amountDue;
        private OptionalNullable<Double> amountOverdue;
        private OptionalNullable<Double> amountNotOverdue;
        private OptionalNullable<Double> outstandingBalance;
        private OptionalNullable<Double> unallocatedPayment;
        private OptionalNullable<String> sOACurrencyCode;
        private OptionalNullable<String> sOACurrencySymbol;
        private OptionalNullable<String> sOACreditLimitCurrencyCode;
        private OptionalNullable<String> sOACreditLimitCurrencySymbol;
        private OptionalNullable<String> lastPaymentCurrencyCode;
        private OptionalNullable<String> lastPaymentCurrencySymbol;
        private OptionalNullable<Double> lastPaymentAmount;
        private OptionalNullable<String> lastPaymentDate;
        private OptionalNullable<Double> sOALastPaymentAmount;
        private OptionalNullable<String> sOALastPaymentDate;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<String> colCoCountryCode;
        private OptionalNullable<String> localCurrencyCode;
        private OptionalNullable<String> localCurrencySymbol;
        private OptionalNullable<Double> localCurrencyExchangeRate;
        private OptionalNullable<Double> localCurrencyExchangeRateSoA;
        private OptionalNullable<Integer> billingFrequencyTypeId;
        private OptionalNullable<String> billingFrequencyType;
        private OptionalNullable<Integer> billingRunFrequencyTypeId;
        private OptionalNullable<String> billingRunFrequnecy;
        private OptionalNullable<Integer> day1Run;
        private OptionalNullable<Integer> day2Run;
        private OptionalNullable<Integer> day3Run;
        private OptionalNullable<Integer> day4Run;
        private List<InvoiceDistributionMethod> invoiceDistributionMethods;
        private OptionalNullable<String> outputType;
        private OptionalNullable<Integer> invoiceAccountID;
        private OptionalNullable<String> invoiceAccountNumber;
        private OptionalNullable<String> invoiceAccountShortName;
        private Boolean bestOfIndicator = false;
        private Boolean isInternational = false;
        private OptionalNullable<Integer> totalAccounts;
        private OptionalNullable<Integer> totalActiveAccounts;
        private OptionalNullable<Integer> totalCards;
        private OptionalNullable<Integer> totalActiveCards;
        private OptionalNullable<Integer> totalBlockedCards;
        private OptionalNullable<Integer> totalCancelledCards;
        private OptionalNullable<Integer> totalExpiredCards;
        private OptionalNullable<Integer> totalRenewalPendingCards;
        private OptionalNullable<Integer> totalReplacedCards;
        private OptionalNullable<Integer> totalTemporaryBlockCardsByCustomer;
        private OptionalNullable<Integer> totalTemporaryBlockCardsByShell;
        private OptionalNullable<Integer> totalNewCards;
        private OptionalNullable<Integer> totalFraudCards;
        private OptionalNullable<Integer> totalBlockedAccounts;
        private OptionalNullable<Integer> totalCancelledAccounts;
        private OptionalNullable<String> payerTradingName;
        private String status;
        private OptionalNullable<String> billingLanguage;
        private OptionalNullable<String> legalEntity;
        private OptionalNullable<String> dateEstablished;
        private OptionalNullable<String> customerClassification;
        private OptionalNullable<String> industryClass;
        private OptionalNullable<String> marketingSegmentation;
        private OptionalNullable<String> lineOfBusiness;
        private Boolean printCreditLimit = false;
        private OptionalNullable<String> cardGroupType;
        private Boolean renewCards = false;
        private Boolean allowSelectPIN = false;
        private Boolean useFleetPIN;
        private OptionalNullable<String> vATRegNumber;
        private String vATRegNumber2;
        private OptionalNullable<String> registrationNumber;
        private OptionalNullable<String> registrationNumber2;
        private OptionalNullable<Double> salesLedgerBalance;
        private OptionalNullable<Double> exposure;
        private OptionalNullable<Double> outstandingDebt;
        private OptionalNullable<Double> availableCredit;
        private OptionalNullable<String> band;
        private OptionalNullable<String> globalCustomerReferenceId;
        private OptionalNullable<Double> creditLimit;
        private OptionalNullable<Double> creditLimitInCustomerCurrency;
        private OptionalNullable<String> billingCurrencyCode;
        private OptionalNullable<String> billingCurrencySymbol;
        private OptionalNullable<String> paymentMethod;
        private OptionalNullable<String> paymentTerms;
        private OptionalNullable<Double> temporaryCreditLimitIncrease;
        private OptionalNullable<Double> temporaryCreditLimitIncreaseInCustomerCurrency;
        private OptionalNullable<String> temporaryCreditLimitExpiryDate;
        private List<BankAccount> payerBankAccount;
        private Address cardDeliveryAddress;
        private Address correspondanceAddress;
        private Address billingAddress;
        private Boolean hasActiveVolBasedPricing;
        private Boolean hasActiveVolBasedBonus;
        private Boolean hasActiveVolBasedAssociationBonus;
        private FinanceCurrency financeCurrency;
        private OptionalNullable<String> tollsCustomerId;
        private OptionalNullable<String> tollsColcoCountryTypeId;
        private List<CustomerContract> contracts;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for countryCode.
         * @param  countryCode  String value for countryCode.
         * @return Builder
         */
        public Builder countryCode(String countryCode) {
            this.countryCode = OptionalNullable.of(countryCode);
            return this;
        }

        /**
         * UnSetter for countryCode.
         * @return Builder
         */
        public Builder unsetCountryCode() {
            countryCode = null;
            return this;
        }

        /**
         * Setter for country.
         * @param  country  String value for country.
         * @return Builder
         */
        public Builder country(String country) {
            this.country = OptionalNullable.of(country);
            return this;
        }

        /**
         * UnSetter for country.
         * @return Builder
         */
        public Builder unsetCountry() {
            country = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerFullName.
         * @param  payerFullName  String value for payerFullName.
         * @return Builder
         */
        public Builder payerFullName(String payerFullName) {
            this.payerFullName = OptionalNullable.of(payerFullName);
            return this;
        }

        /**
         * UnSetter for payerFullName.
         * @return Builder
         */
        public Builder unsetPayerFullName() {
            payerFullName = null;
            return this;
        }

        /**
         * Setter for payerShortName.
         * @param  payerShortName  String value for payerShortName.
         * @return Builder
         */
        public Builder payerShortName(String payerShortName) {
            this.payerShortName = OptionalNullable.of(payerShortName);
            return this;
        }

        /**
         * UnSetter for payerShortName.
         * @return Builder
         */
        public Builder unsetPayerShortName() {
            payerShortName = null;
            return this;
        }

        /**
         * Setter for payerGroupId.
         * @param  payerGroupId  Integer value for payerGroupId.
         * @return Builder
         */
        public Builder payerGroupId(Integer payerGroupId) {
            this.payerGroupId = OptionalNullable.of(payerGroupId);
            return this;
        }

        /**
         * UnSetter for payerGroupId.
         * @return Builder
         */
        public Builder unsetPayerGroupId() {
            payerGroupId = null;
            return this;
        }

        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = OptionalNullable.of(amountDue);
            return this;
        }

        /**
         * UnSetter for amountDue.
         * @return Builder
         */
        public Builder unsetAmountDue() {
            amountDue = null;
            return this;
        }

        /**
         * Setter for amountOverdue.
         * @param  amountOverdue  Double value for amountOverdue.
         * @return Builder
         */
        public Builder amountOverdue(Double amountOverdue) {
            this.amountOverdue = OptionalNullable.of(amountOverdue);
            return this;
        }

        /**
         * UnSetter for amountOverdue.
         * @return Builder
         */
        public Builder unsetAmountOverdue() {
            amountOverdue = null;
            return this;
        }

        /**
         * Setter for amountNotOverdue.
         * @param  amountNotOverdue  Double value for amountNotOverdue.
         * @return Builder
         */
        public Builder amountNotOverdue(Double amountNotOverdue) {
            this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
            return this;
        }

        /**
         * UnSetter for amountNotOverdue.
         * @return Builder
         */
        public Builder unsetAmountNotOverdue() {
            amountNotOverdue = null;
            return this;
        }

        /**
         * Setter for outstandingBalance.
         * @param  outstandingBalance  Double value for outstandingBalance.
         * @return Builder
         */
        public Builder outstandingBalance(Double outstandingBalance) {
            this.outstandingBalance = OptionalNullable.of(outstandingBalance);
            return this;
        }

        /**
         * UnSetter for outstandingBalance.
         * @return Builder
         */
        public Builder unsetOutstandingBalance() {
            outstandingBalance = null;
            return this;
        }

        /**
         * Setter for unallocatedPayment.
         * @param  unallocatedPayment  Double value for unallocatedPayment.
         * @return Builder
         */
        public Builder unallocatedPayment(Double unallocatedPayment) {
            this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
            return this;
        }

        /**
         * UnSetter for unallocatedPayment.
         * @return Builder
         */
        public Builder unsetUnallocatedPayment() {
            unallocatedPayment = null;
            return this;
        }

        /**
         * Setter for sOACurrencyCode.
         * @param  sOACurrencyCode  String value for sOACurrencyCode.
         * @return Builder
         */
        public Builder sOACurrencyCode(String sOACurrencyCode) {
            this.sOACurrencyCode = OptionalNullable.of(sOACurrencyCode);
            return this;
        }

        /**
         * UnSetter for sOACurrencyCode.
         * @return Builder
         */
        public Builder unsetSOACurrencyCode() {
            sOACurrencyCode = null;
            return this;
        }

        /**
         * Setter for sOACurrencySymbol.
         * @param  sOACurrencySymbol  String value for sOACurrencySymbol.
         * @return Builder
         */
        public Builder sOACurrencySymbol(String sOACurrencySymbol) {
            this.sOACurrencySymbol = OptionalNullable.of(sOACurrencySymbol);
            return this;
        }

        /**
         * UnSetter for sOACurrencySymbol.
         * @return Builder
         */
        public Builder unsetSOACurrencySymbol() {
            sOACurrencySymbol = null;
            return this;
        }

        /**
         * Setter for sOACreditLimitCurrencyCode.
         * @param  sOACreditLimitCurrencyCode  String value for sOACreditLimitCurrencyCode.
         * @return Builder
         */
        public Builder sOACreditLimitCurrencyCode(String sOACreditLimitCurrencyCode) {
            this.sOACreditLimitCurrencyCode = OptionalNullable.of(sOACreditLimitCurrencyCode);
            return this;
        }

        /**
         * UnSetter for sOACreditLimitCurrencyCode.
         * @return Builder
         */
        public Builder unsetSOACreditLimitCurrencyCode() {
            sOACreditLimitCurrencyCode = null;
            return this;
        }

        /**
         * Setter for sOACreditLimitCurrencySymbol.
         * @param  sOACreditLimitCurrencySymbol  String value for sOACreditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder sOACreditLimitCurrencySymbol(String sOACreditLimitCurrencySymbol) {
            this.sOACreditLimitCurrencySymbol = OptionalNullable.of(sOACreditLimitCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for sOACreditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder unsetSOACreditLimitCurrencySymbol() {
            sOACreditLimitCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencyCode.
         * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder lastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
            this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencyCode() {
            lastPaymentCurrencyCode = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencySymbol.
         * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder lastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
            this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencySymbol() {
            lastPaymentCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for lastPaymentAmount.
         * @param  lastPaymentAmount  Double value for lastPaymentAmount.
         * @return Builder
         */
        public Builder lastPaymentAmount(Double lastPaymentAmount) {
            this.lastPaymentAmount = OptionalNullable.of(lastPaymentAmount);
            return this;
        }

        /**
         * UnSetter for lastPaymentAmount.
         * @return Builder
         */
        public Builder unsetLastPaymentAmount() {
            lastPaymentAmount = null;
            return this;
        }

        /**
         * Setter for lastPaymentDate.
         * @param  lastPaymentDate  String value for lastPaymentDate.
         * @return Builder
         */
        public Builder lastPaymentDate(String lastPaymentDate) {
            this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
            return this;
        }

        /**
         * UnSetter for lastPaymentDate.
         * @return Builder
         */
        public Builder unsetLastPaymentDate() {
            lastPaymentDate = null;
            return this;
        }

        /**
         * Setter for sOALastPaymentAmount.
         * @param  sOALastPaymentAmount  Double value for sOALastPaymentAmount.
         * @return Builder
         */
        public Builder sOALastPaymentAmount(Double sOALastPaymentAmount) {
            this.sOALastPaymentAmount = OptionalNullable.of(sOALastPaymentAmount);
            return this;
        }

        /**
         * UnSetter for sOALastPaymentAmount.
         * @return Builder
         */
        public Builder unsetSOALastPaymentAmount() {
            sOALastPaymentAmount = null;
            return this;
        }

        /**
         * Setter for sOALastPaymentDate.
         * @param  sOALastPaymentDate  String value for sOALastPaymentDate.
         * @return Builder
         */
        public Builder sOALastPaymentDate(String sOALastPaymentDate) {
            this.sOALastPaymentDate = OptionalNullable.of(sOALastPaymentDate);
            return this;
        }

        /**
         * UnSetter for sOALastPaymentDate.
         * @return Builder
         */
        public Builder unsetSOALastPaymentDate() {
            sOALastPaymentDate = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for colCoCountryCode.
         * @param  colCoCountryCode  String value for colCoCountryCode.
         * @return Builder
         */
        public Builder colCoCountryCode(String colCoCountryCode) {
            this.colCoCountryCode = OptionalNullable.of(colCoCountryCode);
            return this;
        }

        /**
         * UnSetter for colCoCountryCode.
         * @return Builder
         */
        public Builder unsetColCoCountryCode() {
            colCoCountryCode = null;
            return this;
        }

        /**
         * Setter for localCurrencyCode.
         * @param  localCurrencyCode  String value for localCurrencyCode.
         * @return Builder
         */
        public Builder localCurrencyCode(String localCurrencyCode) {
            this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
            return this;
        }

        /**
         * UnSetter for localCurrencyCode.
         * @return Builder
         */
        public Builder unsetLocalCurrencyCode() {
            localCurrencyCode = null;
            return this;
        }

        /**
         * Setter for localCurrencySymbol.
         * @param  localCurrencySymbol  String value for localCurrencySymbol.
         * @return Builder
         */
        public Builder localCurrencySymbol(String localCurrencySymbol) {
            this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for localCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLocalCurrencySymbol() {
            localCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for localCurrencyExchangeRate.
         * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder localCurrencyExchangeRate(Double localCurrencyExchangeRate) {
            this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
            return this;
        }

        /**
         * UnSetter for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder unsetLocalCurrencyExchangeRate() {
            localCurrencyExchangeRate = null;
            return this;
        }

        /**
         * Setter for localCurrencyExchangeRateSoA.
         * @param  localCurrencyExchangeRateSoA  Double value for localCurrencyExchangeRateSoA.
         * @return Builder
         */
        public Builder localCurrencyExchangeRateSoA(Double localCurrencyExchangeRateSoA) {
            this.localCurrencyExchangeRateSoA = OptionalNullable.of(localCurrencyExchangeRateSoA);
            return this;
        }

        /**
         * UnSetter for localCurrencyExchangeRateSoA.
         * @return Builder
         */
        public Builder unsetLocalCurrencyExchangeRateSoA() {
            localCurrencyExchangeRateSoA = null;
            return this;
        }

        /**
         * Setter for billingFrequencyTypeId.
         * @param  billingFrequencyTypeId  Integer value for billingFrequencyTypeId.
         * @return Builder
         */
        public Builder billingFrequencyTypeId(Integer billingFrequencyTypeId) {
            this.billingFrequencyTypeId = OptionalNullable.of(billingFrequencyTypeId);
            return this;
        }

        /**
         * UnSetter for billingFrequencyTypeId.
         * @return Builder
         */
        public Builder unsetBillingFrequencyTypeId() {
            billingFrequencyTypeId = null;
            return this;
        }

        /**
         * Setter for billingFrequencyType.
         * @param  billingFrequencyType  String value for billingFrequencyType.
         * @return Builder
         */
        public Builder billingFrequencyType(String billingFrequencyType) {
            this.billingFrequencyType = OptionalNullable.of(billingFrequencyType);
            return this;
        }

        /**
         * UnSetter for billingFrequencyType.
         * @return Builder
         */
        public Builder unsetBillingFrequencyType() {
            billingFrequencyType = null;
            return this;
        }

        /**
         * Setter for billingRunFrequencyTypeId.
         * @param  billingRunFrequencyTypeId  Integer value for billingRunFrequencyTypeId.
         * @return Builder
         */
        public Builder billingRunFrequencyTypeId(Integer billingRunFrequencyTypeId) {
            this.billingRunFrequencyTypeId = OptionalNullable.of(billingRunFrequencyTypeId);
            return this;
        }

        /**
         * UnSetter for billingRunFrequencyTypeId.
         * @return Builder
         */
        public Builder unsetBillingRunFrequencyTypeId() {
            billingRunFrequencyTypeId = null;
            return this;
        }

        /**
         * Setter for billingRunFrequnecy.
         * @param  billingRunFrequnecy  String value for billingRunFrequnecy.
         * @return Builder
         */
        public Builder billingRunFrequnecy(String billingRunFrequnecy) {
            this.billingRunFrequnecy = OptionalNullable.of(billingRunFrequnecy);
            return this;
        }

        /**
         * UnSetter for billingRunFrequnecy.
         * @return Builder
         */
        public Builder unsetBillingRunFrequnecy() {
            billingRunFrequnecy = null;
            return this;
        }

        /**
         * Setter for day1Run.
         * @param  day1Run  Integer value for day1Run.
         * @return Builder
         */
        public Builder day1Run(Integer day1Run) {
            this.day1Run = OptionalNullable.of(day1Run);
            return this;
        }

        /**
         * UnSetter for day1Run.
         * @return Builder
         */
        public Builder unsetDay1Run() {
            day1Run = null;
            return this;
        }

        /**
         * Setter for day2Run.
         * @param  day2Run  Integer value for day2Run.
         * @return Builder
         */
        public Builder day2Run(Integer day2Run) {
            this.day2Run = OptionalNullable.of(day2Run);
            return this;
        }

        /**
         * UnSetter for day2Run.
         * @return Builder
         */
        public Builder unsetDay2Run() {
            day2Run = null;
            return this;
        }

        /**
         * Setter for day3Run.
         * @param  day3Run  Integer value for day3Run.
         * @return Builder
         */
        public Builder day3Run(Integer day3Run) {
            this.day3Run = OptionalNullable.of(day3Run);
            return this;
        }

        /**
         * UnSetter for day3Run.
         * @return Builder
         */
        public Builder unsetDay3Run() {
            day3Run = null;
            return this;
        }

        /**
         * Setter for day4Run.
         * @param  day4Run  Integer value for day4Run.
         * @return Builder
         */
        public Builder day4Run(Integer day4Run) {
            this.day4Run = OptionalNullable.of(day4Run);
            return this;
        }

        /**
         * UnSetter for day4Run.
         * @return Builder
         */
        public Builder unsetDay4Run() {
            day4Run = null;
            return this;
        }

        /**
         * Setter for invoiceDistributionMethods.
         * @param  invoiceDistributionMethods  List of InvoiceDistributionMethod value for
         *         invoiceDistributionMethods.
         * @return Builder
         */
        public Builder invoiceDistributionMethods(
                List<InvoiceDistributionMethod> invoiceDistributionMethods) {
            this.invoiceDistributionMethods = invoiceDistributionMethods;
            return this;
        }

        /**
         * Setter for outputType.
         * @param  outputType  String value for outputType.
         * @return Builder
         */
        public Builder outputType(String outputType) {
            this.outputType = OptionalNullable.of(outputType);
            return this;
        }

        /**
         * UnSetter for outputType.
         * @return Builder
         */
        public Builder unsetOutputType() {
            outputType = null;
            return this;
        }

        /**
         * Setter for invoiceAccountID.
         * @param  invoiceAccountID  Integer value for invoiceAccountID.
         * @return Builder
         */
        public Builder invoiceAccountID(Integer invoiceAccountID) {
            this.invoiceAccountID = OptionalNullable.of(invoiceAccountID);
            return this;
        }

        /**
         * UnSetter for invoiceAccountID.
         * @return Builder
         */
        public Builder unsetInvoiceAccountID() {
            invoiceAccountID = null;
            return this;
        }

        /**
         * Setter for invoiceAccountNumber.
         * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
         * @return Builder
         */
        public Builder invoiceAccountNumber(String invoiceAccountNumber) {
            this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
            return this;
        }

        /**
         * UnSetter for invoiceAccountNumber.
         * @return Builder
         */
        public Builder unsetInvoiceAccountNumber() {
            invoiceAccountNumber = null;
            return this;
        }

        /**
         * Setter for invoiceAccountShortName.
         * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
         * @return Builder
         */
        public Builder invoiceAccountShortName(String invoiceAccountShortName) {
            this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
            return this;
        }

        /**
         * UnSetter for invoiceAccountShortName.
         * @return Builder
         */
        public Builder unsetInvoiceAccountShortName() {
            invoiceAccountShortName = null;
            return this;
        }

        /**
         * Setter for bestOfIndicator.
         * @param  bestOfIndicator  Boolean value for bestOfIndicator.
         * @return Builder
         */
        public Builder bestOfIndicator(Boolean bestOfIndicator) {
            this.bestOfIndicator = bestOfIndicator;
            return this;
        }

        /**
         * Setter for isInternational.
         * @param  isInternational  Boolean value for isInternational.
         * @return Builder
         */
        public Builder isInternational(Boolean isInternational) {
            this.isInternational = isInternational;
            return this;
        }

        /**
         * Setter for totalAccounts.
         * @param  totalAccounts  Integer value for totalAccounts.
         * @return Builder
         */
        public Builder totalAccounts(Integer totalAccounts) {
            this.totalAccounts = OptionalNullable.of(totalAccounts);
            return this;
        }

        /**
         * UnSetter for totalAccounts.
         * @return Builder
         */
        public Builder unsetTotalAccounts() {
            totalAccounts = null;
            return this;
        }

        /**
         * Setter for totalActiveAccounts.
         * @param  totalActiveAccounts  Integer value for totalActiveAccounts.
         * @return Builder
         */
        public Builder totalActiveAccounts(Integer totalActiveAccounts) {
            this.totalActiveAccounts = OptionalNullable.of(totalActiveAccounts);
            return this;
        }

        /**
         * UnSetter for totalActiveAccounts.
         * @return Builder
         */
        public Builder unsetTotalActiveAccounts() {
            totalActiveAccounts = null;
            return this;
        }

        /**
         * Setter for totalCards.
         * @param  totalCards  Integer value for totalCards.
         * @return Builder
         */
        public Builder totalCards(Integer totalCards) {
            this.totalCards = OptionalNullable.of(totalCards);
            return this;
        }

        /**
         * UnSetter for totalCards.
         * @return Builder
         */
        public Builder unsetTotalCards() {
            totalCards = null;
            return this;
        }

        /**
         * Setter for totalActiveCards.
         * @param  totalActiveCards  Integer value for totalActiveCards.
         * @return Builder
         */
        public Builder totalActiveCards(Integer totalActiveCards) {
            this.totalActiveCards = OptionalNullable.of(totalActiveCards);
            return this;
        }

        /**
         * UnSetter for totalActiveCards.
         * @return Builder
         */
        public Builder unsetTotalActiveCards() {
            totalActiveCards = null;
            return this;
        }

        /**
         * Setter for totalBlockedCards.
         * @param  totalBlockedCards  Integer value for totalBlockedCards.
         * @return Builder
         */
        public Builder totalBlockedCards(Integer totalBlockedCards) {
            this.totalBlockedCards = OptionalNullable.of(totalBlockedCards);
            return this;
        }

        /**
         * UnSetter for totalBlockedCards.
         * @return Builder
         */
        public Builder unsetTotalBlockedCards() {
            totalBlockedCards = null;
            return this;
        }

        /**
         * Setter for totalCancelledCards.
         * @param  totalCancelledCards  Integer value for totalCancelledCards.
         * @return Builder
         */
        public Builder totalCancelledCards(Integer totalCancelledCards) {
            this.totalCancelledCards = OptionalNullable.of(totalCancelledCards);
            return this;
        }

        /**
         * UnSetter for totalCancelledCards.
         * @return Builder
         */
        public Builder unsetTotalCancelledCards() {
            totalCancelledCards = null;
            return this;
        }

        /**
         * Setter for totalExpiredCards.
         * @param  totalExpiredCards  Integer value for totalExpiredCards.
         * @return Builder
         */
        public Builder totalExpiredCards(Integer totalExpiredCards) {
            this.totalExpiredCards = OptionalNullable.of(totalExpiredCards);
            return this;
        }

        /**
         * UnSetter for totalExpiredCards.
         * @return Builder
         */
        public Builder unsetTotalExpiredCards() {
            totalExpiredCards = null;
            return this;
        }

        /**
         * Setter for totalRenewalPendingCards.
         * @param  totalRenewalPendingCards  Integer value for totalRenewalPendingCards.
         * @return Builder
         */
        public Builder totalRenewalPendingCards(Integer totalRenewalPendingCards) {
            this.totalRenewalPendingCards = OptionalNullable.of(totalRenewalPendingCards);
            return this;
        }

        /**
         * UnSetter for totalRenewalPendingCards.
         * @return Builder
         */
        public Builder unsetTotalRenewalPendingCards() {
            totalRenewalPendingCards = null;
            return this;
        }

        /**
         * Setter for totalReplacedCards.
         * @param  totalReplacedCards  Integer value for totalReplacedCards.
         * @return Builder
         */
        public Builder totalReplacedCards(Integer totalReplacedCards) {
            this.totalReplacedCards = OptionalNullable.of(totalReplacedCards);
            return this;
        }

        /**
         * UnSetter for totalReplacedCards.
         * @return Builder
         */
        public Builder unsetTotalReplacedCards() {
            totalReplacedCards = null;
            return this;
        }

        /**
         * Setter for totalTemporaryBlockCardsByCustomer.
         * @param  totalTemporaryBlockCardsByCustomer  Integer value for
         *         totalTemporaryBlockCardsByCustomer.
         * @return Builder
         */
        public Builder totalTemporaryBlockCardsByCustomer(
                Integer totalTemporaryBlockCardsByCustomer) {
            this.totalTemporaryBlockCardsByCustomer =
                    OptionalNullable.of(totalTemporaryBlockCardsByCustomer);
            return this;
        }

        /**
         * UnSetter for totalTemporaryBlockCardsByCustomer.
         * @return Builder
         */
        public Builder unsetTotalTemporaryBlockCardsByCustomer() {
            totalTemporaryBlockCardsByCustomer = null;
            return this;
        }

        /**
         * Setter for totalTemporaryBlockCardsByShell.
         * @param  totalTemporaryBlockCardsByShell  Integer value for
         *         totalTemporaryBlockCardsByShell.
         * @return Builder
         */
        public Builder totalTemporaryBlockCardsByShell(Integer totalTemporaryBlockCardsByShell) {
            this.totalTemporaryBlockCardsByShell =
                    OptionalNullable.of(totalTemporaryBlockCardsByShell);
            return this;
        }

        /**
         * UnSetter for totalTemporaryBlockCardsByShell.
         * @return Builder
         */
        public Builder unsetTotalTemporaryBlockCardsByShell() {
            totalTemporaryBlockCardsByShell = null;
            return this;
        }

        /**
         * Setter for totalNewCards.
         * @param  totalNewCards  Integer value for totalNewCards.
         * @return Builder
         */
        public Builder totalNewCards(Integer totalNewCards) {
            this.totalNewCards = OptionalNullable.of(totalNewCards);
            return this;
        }

        /**
         * UnSetter for totalNewCards.
         * @return Builder
         */
        public Builder unsetTotalNewCards() {
            totalNewCards = null;
            return this;
        }

        /**
         * Setter for totalFraudCards.
         * @param  totalFraudCards  Integer value for totalFraudCards.
         * @return Builder
         */
        public Builder totalFraudCards(Integer totalFraudCards) {
            this.totalFraudCards = OptionalNullable.of(totalFraudCards);
            return this;
        }

        /**
         * UnSetter for totalFraudCards.
         * @return Builder
         */
        public Builder unsetTotalFraudCards() {
            totalFraudCards = null;
            return this;
        }

        /**
         * Setter for totalBlockedAccounts.
         * @param  totalBlockedAccounts  Integer value for totalBlockedAccounts.
         * @return Builder
         */
        public Builder totalBlockedAccounts(Integer totalBlockedAccounts) {
            this.totalBlockedAccounts = OptionalNullable.of(totalBlockedAccounts);
            return this;
        }

        /**
         * UnSetter for totalBlockedAccounts.
         * @return Builder
         */
        public Builder unsetTotalBlockedAccounts() {
            totalBlockedAccounts = null;
            return this;
        }

        /**
         * Setter for totalCancelledAccounts.
         * @param  totalCancelledAccounts  Integer value for totalCancelledAccounts.
         * @return Builder
         */
        public Builder totalCancelledAccounts(Integer totalCancelledAccounts) {
            this.totalCancelledAccounts = OptionalNullable.of(totalCancelledAccounts);
            return this;
        }

        /**
         * UnSetter for totalCancelledAccounts.
         * @return Builder
         */
        public Builder unsetTotalCancelledAccounts() {
            totalCancelledAccounts = null;
            return this;
        }

        /**
         * Setter for payerTradingName.
         * @param  payerTradingName  String value for payerTradingName.
         * @return Builder
         */
        public Builder payerTradingName(String payerTradingName) {
            this.payerTradingName = OptionalNullable.of(payerTradingName);
            return this;
        }

        /**
         * UnSetter for payerTradingName.
         * @return Builder
         */
        public Builder unsetPayerTradingName() {
            payerTradingName = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for billingLanguage.
         * @param  billingLanguage  String value for billingLanguage.
         * @return Builder
         */
        public Builder billingLanguage(String billingLanguage) {
            this.billingLanguage = OptionalNullable.of(billingLanguage);
            return this;
        }

        /**
         * UnSetter for billingLanguage.
         * @return Builder
         */
        public Builder unsetBillingLanguage() {
            billingLanguage = null;
            return this;
        }

        /**
         * Setter for legalEntity.
         * @param  legalEntity  String value for legalEntity.
         * @return Builder
         */
        public Builder legalEntity(String legalEntity) {
            this.legalEntity = OptionalNullable.of(legalEntity);
            return this;
        }

        /**
         * UnSetter for legalEntity.
         * @return Builder
         */
        public Builder unsetLegalEntity() {
            legalEntity = null;
            return this;
        }

        /**
         * Setter for dateEstablished.
         * @param  dateEstablished  String value for dateEstablished.
         * @return Builder
         */
        public Builder dateEstablished(String dateEstablished) {
            this.dateEstablished = OptionalNullable.of(dateEstablished);
            return this;
        }

        /**
         * UnSetter for dateEstablished.
         * @return Builder
         */
        public Builder unsetDateEstablished() {
            dateEstablished = null;
            return this;
        }

        /**
         * Setter for customerClassification.
         * @param  customerClassification  String value for customerClassification.
         * @return Builder
         */
        public Builder customerClassification(String customerClassification) {
            this.customerClassification = OptionalNullable.of(customerClassification);
            return this;
        }

        /**
         * UnSetter for customerClassification.
         * @return Builder
         */
        public Builder unsetCustomerClassification() {
            customerClassification = null;
            return this;
        }

        /**
         * Setter for industryClass.
         * @param  industryClass  String value for industryClass.
         * @return Builder
         */
        public Builder industryClass(String industryClass) {
            this.industryClass = OptionalNullable.of(industryClass);
            return this;
        }

        /**
         * UnSetter for industryClass.
         * @return Builder
         */
        public Builder unsetIndustryClass() {
            industryClass = null;
            return this;
        }

        /**
         * Setter for marketingSegmentation.
         * @param  marketingSegmentation  String value for marketingSegmentation.
         * @return Builder
         */
        public Builder marketingSegmentation(String marketingSegmentation) {
            this.marketingSegmentation = OptionalNullable.of(marketingSegmentation);
            return this;
        }

        /**
         * UnSetter for marketingSegmentation.
         * @return Builder
         */
        public Builder unsetMarketingSegmentation() {
            marketingSegmentation = null;
            return this;
        }

        /**
         * Setter for lineOfBusiness.
         * @param  lineOfBusiness  String value for lineOfBusiness.
         * @return Builder
         */
        public Builder lineOfBusiness(String lineOfBusiness) {
            this.lineOfBusiness = OptionalNullable.of(lineOfBusiness);
            return this;
        }

        /**
         * UnSetter for lineOfBusiness.
         * @return Builder
         */
        public Builder unsetLineOfBusiness() {
            lineOfBusiness = null;
            return this;
        }

        /**
         * Setter for printCreditLimit.
         * @param  printCreditLimit  Boolean value for printCreditLimit.
         * @return Builder
         */
        public Builder printCreditLimit(Boolean printCreditLimit) {
            this.printCreditLimit = printCreditLimit;
            return this;
        }

        /**
         * Setter for cardGroupType.
         * @param  cardGroupType  String value for cardGroupType.
         * @return Builder
         */
        public Builder cardGroupType(String cardGroupType) {
            this.cardGroupType = OptionalNullable.of(cardGroupType);
            return this;
        }

        /**
         * UnSetter for cardGroupType.
         * @return Builder
         */
        public Builder unsetCardGroupType() {
            cardGroupType = null;
            return this;
        }

        /**
         * Setter for renewCards.
         * @param  renewCards  Boolean value for renewCards.
         * @return Builder
         */
        public Builder renewCards(Boolean renewCards) {
            this.renewCards = renewCards;
            return this;
        }

        /**
         * Setter for allowSelectPIN.
         * @param  allowSelectPIN  Boolean value for allowSelectPIN.
         * @return Builder
         */
        public Builder allowSelectPIN(Boolean allowSelectPIN) {
            this.allowSelectPIN = allowSelectPIN;
            return this;
        }

        /**
         * Setter for useFleetPIN.
         * @param  useFleetPIN  Boolean value for useFleetPIN.
         * @return Builder
         */
        public Builder useFleetPIN(Boolean useFleetPIN) {
            this.useFleetPIN = useFleetPIN;
            return this;
        }

        /**
         * Setter for vATRegNumber.
         * @param  vATRegNumber  String value for vATRegNumber.
         * @return Builder
         */
        public Builder vATRegNumber(String vATRegNumber) {
            this.vATRegNumber = OptionalNullable.of(vATRegNumber);
            return this;
        }

        /**
         * UnSetter for vATRegNumber.
         * @return Builder
         */
        public Builder unsetVATRegNumber() {
            vATRegNumber = null;
            return this;
        }

        /**
         * Setter for vATRegNumber2.
         * @param  vATRegNumber2  String value for vATRegNumber2.
         * @return Builder
         */
        public Builder vATRegNumber2(String vATRegNumber2) {
            this.vATRegNumber2 = vATRegNumber2;
            return this;
        }

        /**
         * Setter for registrationNumber.
         * @param  registrationNumber  String value for registrationNumber.
         * @return Builder
         */
        public Builder registrationNumber(String registrationNumber) {
            this.registrationNumber = OptionalNullable.of(registrationNumber);
            return this;
        }

        /**
         * UnSetter for registrationNumber.
         * @return Builder
         */
        public Builder unsetRegistrationNumber() {
            registrationNumber = null;
            return this;
        }

        /**
         * Setter for registrationNumber2.
         * @param  registrationNumber2  String value for registrationNumber2.
         * @return Builder
         */
        public Builder registrationNumber2(String registrationNumber2) {
            this.registrationNumber2 = OptionalNullable.of(registrationNumber2);
            return this;
        }

        /**
         * UnSetter for registrationNumber2.
         * @return Builder
         */
        public Builder unsetRegistrationNumber2() {
            registrationNumber2 = null;
            return this;
        }

        /**
         * Setter for salesLedgerBalance.
         * @param  salesLedgerBalance  Double value for salesLedgerBalance.
         * @return Builder
         */
        public Builder salesLedgerBalance(Double salesLedgerBalance) {
            this.salesLedgerBalance = OptionalNullable.of(salesLedgerBalance);
            return this;
        }

        /**
         * UnSetter for salesLedgerBalance.
         * @return Builder
         */
        public Builder unsetSalesLedgerBalance() {
            salesLedgerBalance = null;
            return this;
        }

        /**
         * Setter for exposure.
         * @param  exposure  Double value for exposure.
         * @return Builder
         */
        public Builder exposure(Double exposure) {
            this.exposure = OptionalNullable.of(exposure);
            return this;
        }

        /**
         * UnSetter for exposure.
         * @return Builder
         */
        public Builder unsetExposure() {
            exposure = null;
            return this;
        }

        /**
         * Setter for outstandingDebt.
         * @param  outstandingDebt  Double value for outstandingDebt.
         * @return Builder
         */
        public Builder outstandingDebt(Double outstandingDebt) {
            this.outstandingDebt = OptionalNullable.of(outstandingDebt);
            return this;
        }

        /**
         * UnSetter for outstandingDebt.
         * @return Builder
         */
        public Builder unsetOutstandingDebt() {
            outstandingDebt = null;
            return this;
        }

        /**
         * Setter for availableCredit.
         * @param  availableCredit  Double value for availableCredit.
         * @return Builder
         */
        public Builder availableCredit(Double availableCredit) {
            this.availableCredit = OptionalNullable.of(availableCredit);
            return this;
        }

        /**
         * UnSetter for availableCredit.
         * @return Builder
         */
        public Builder unsetAvailableCredit() {
            availableCredit = null;
            return this;
        }

        /**
         * Setter for band.
         * @param  band  String value for band.
         * @return Builder
         */
        public Builder band(String band) {
            this.band = OptionalNullable.of(band);
            return this;
        }

        /**
         * UnSetter for band.
         * @return Builder
         */
        public Builder unsetBand() {
            band = null;
            return this;
        }

        /**
         * Setter for globalCustomerReferenceId.
         * @param  globalCustomerReferenceId  String value for globalCustomerReferenceId.
         * @return Builder
         */
        public Builder globalCustomerReferenceId(String globalCustomerReferenceId) {
            this.globalCustomerReferenceId = OptionalNullable.of(globalCustomerReferenceId);
            return this;
        }

        /**
         * UnSetter for globalCustomerReferenceId.
         * @return Builder
         */
        public Builder unsetGlobalCustomerReferenceId() {
            globalCustomerReferenceId = null;
            return this;
        }

        /**
         * Setter for creditLimit.
         * @param  creditLimit  Double value for creditLimit.
         * @return Builder
         */
        public Builder creditLimit(Double creditLimit) {
            this.creditLimit = OptionalNullable.of(creditLimit);
            return this;
        }

        /**
         * UnSetter for creditLimit.
         * @return Builder
         */
        public Builder unsetCreditLimit() {
            creditLimit = null;
            return this;
        }

        /**
         * Setter for creditLimitInCustomerCurrency.
         * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder creditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
            this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetCreditLimitInCustomerCurrency() {
            creditLimitInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for billingCurrencyCode.
         * @param  billingCurrencyCode  String value for billingCurrencyCode.
         * @return Builder
         */
        public Builder billingCurrencyCode(String billingCurrencyCode) {
            this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
            return this;
        }

        /**
         * UnSetter for billingCurrencyCode.
         * @return Builder
         */
        public Builder unsetBillingCurrencyCode() {
            billingCurrencyCode = null;
            return this;
        }

        /**
         * Setter for billingCurrencySymbol.
         * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
         * @return Builder
         */
        public Builder billingCurrencySymbol(String billingCurrencySymbol) {
            this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for billingCurrencySymbol.
         * @return Builder
         */
        public Builder unsetBillingCurrencySymbol() {
            billingCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  String value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = OptionalNullable.of(paymentMethod);
            return this;
        }

        /**
         * UnSetter for paymentMethod.
         * @return Builder
         */
        public Builder unsetPaymentMethod() {
            paymentMethod = null;
            return this;
        }

        /**
         * Setter for paymentTerms.
         * @param  paymentTerms  String value for paymentTerms.
         * @return Builder
         */
        public Builder paymentTerms(String paymentTerms) {
            this.paymentTerms = OptionalNullable.of(paymentTerms);
            return this;
        }

        /**
         * UnSetter for paymentTerms.
         * @return Builder
         */
        public Builder unsetPaymentTerms() {
            paymentTerms = null;
            return this;
        }

        /**
         * Setter for temporaryCreditLimitIncrease.
         * @param  temporaryCreditLimitIncrease  Double value for temporaryCreditLimitIncrease.
         * @return Builder
         */
        public Builder temporaryCreditLimitIncrease(Double temporaryCreditLimitIncrease) {
            this.temporaryCreditLimitIncrease = OptionalNullable.of(temporaryCreditLimitIncrease);
            return this;
        }

        /**
         * UnSetter for temporaryCreditLimitIncrease.
         * @return Builder
         */
        public Builder unsetTemporaryCreditLimitIncrease() {
            temporaryCreditLimitIncrease = null;
            return this;
        }

        /**
         * Setter for temporaryCreditLimitIncreaseInCustomerCurrency.
         * @param  temporaryCreditLimitIncreaseInCustomerCurrency  Double value for
         *         temporaryCreditLimitIncreaseInCustomerCurrency.
         * @return Builder
         */
        public Builder temporaryCreditLimitIncreaseInCustomerCurrency(
                Double temporaryCreditLimitIncreaseInCustomerCurrency) {
            this.temporaryCreditLimitIncreaseInCustomerCurrency =
                    OptionalNullable.of(temporaryCreditLimitIncreaseInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for temporaryCreditLimitIncreaseInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetTemporaryCreditLimitIncreaseInCustomerCurrency() {
            temporaryCreditLimitIncreaseInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for temporaryCreditLimitExpiryDate.
         * @param  temporaryCreditLimitExpiryDate  String value for temporaryCreditLimitExpiryDate.
         * @return Builder
         */
        public Builder temporaryCreditLimitExpiryDate(String temporaryCreditLimitExpiryDate) {
            this.temporaryCreditLimitExpiryDate =
                    OptionalNullable.of(temporaryCreditLimitExpiryDate);
            return this;
        }

        /**
         * UnSetter for temporaryCreditLimitExpiryDate.
         * @return Builder
         */
        public Builder unsetTemporaryCreditLimitExpiryDate() {
            temporaryCreditLimitExpiryDate = null;
            return this;
        }

        /**
         * Setter for payerBankAccount.
         * @param  payerBankAccount  List of BankAccount value for payerBankAccount.
         * @return Builder
         */
        public Builder payerBankAccount(List<BankAccount> payerBankAccount) {
            this.payerBankAccount = payerBankAccount;
            return this;
        }

        /**
         * Setter for cardDeliveryAddress.
         * @param  cardDeliveryAddress  Address value for cardDeliveryAddress.
         * @return Builder
         */
        public Builder cardDeliveryAddress(Address cardDeliveryAddress) {
            this.cardDeliveryAddress = cardDeliveryAddress;
            return this;
        }

        /**
         * Setter for correspondanceAddress.
         * @param  correspondanceAddress  Address value for correspondanceAddress.
         * @return Builder
         */
        public Builder correspondanceAddress(Address correspondanceAddress) {
            this.correspondanceAddress = correspondanceAddress;
            return this;
        }

        /**
         * Setter for billingAddress.
         * @param  billingAddress  Address value for billingAddress.
         * @return Builder
         */
        public Builder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * Setter for hasActiveVolBasedPricing.
         * @param  hasActiveVolBasedPricing  Boolean value for hasActiveVolBasedPricing.
         * @return Builder
         */
        public Builder hasActiveVolBasedPricing(Boolean hasActiveVolBasedPricing) {
            this.hasActiveVolBasedPricing = hasActiveVolBasedPricing;
            return this;
        }

        /**
         * Setter for hasActiveVolBasedBonus.
         * @param  hasActiveVolBasedBonus  Boolean value for hasActiveVolBasedBonus.
         * @return Builder
         */
        public Builder hasActiveVolBasedBonus(Boolean hasActiveVolBasedBonus) {
            this.hasActiveVolBasedBonus = hasActiveVolBasedBonus;
            return this;
        }

        /**
         * Setter for hasActiveVolBasedAssociationBonus.
         * @param  hasActiveVolBasedAssociationBonus  Boolean value for
         *         hasActiveVolBasedAssociationBonus.
         * @return Builder
         */
        public Builder hasActiveVolBasedAssociationBonus(
                Boolean hasActiveVolBasedAssociationBonus) {
            this.hasActiveVolBasedAssociationBonus = hasActiveVolBasedAssociationBonus;
            return this;
        }

        /**
         * Setter for financeCurrency.
         * @param  financeCurrency  FinanceCurrency value for financeCurrency.
         * @return Builder
         */
        public Builder financeCurrency(FinanceCurrency financeCurrency) {
            this.financeCurrency = financeCurrency;
            return this;
        }

        /**
         * Setter for tollsCustomerId.
         * @param  tollsCustomerId  String value for tollsCustomerId.
         * @return Builder
         */
        public Builder tollsCustomerId(String tollsCustomerId) {
            this.tollsCustomerId = OptionalNullable.of(tollsCustomerId);
            return this;
        }

        /**
         * UnSetter for tollsCustomerId.
         * @return Builder
         */
        public Builder unsetTollsCustomerId() {
            tollsCustomerId = null;
            return this;
        }

        /**
         * Setter for tollsColcoCountryTypeId.
         * @param  tollsColcoCountryTypeId  String value for tollsColcoCountryTypeId.
         * @return Builder
         */
        public Builder tollsColcoCountryTypeId(String tollsColcoCountryTypeId) {
            this.tollsColcoCountryTypeId = OptionalNullable.of(tollsColcoCountryTypeId);
            return this;
        }

        /**
         * UnSetter for tollsColcoCountryTypeId.
         * @return Builder
         */
        public Builder unsetTollsColcoCountryTypeId() {
            tollsColcoCountryTypeId = null;
            return this;
        }

        /**
         * Setter for contracts.
         * @param  contracts  List of CustomerContract value for contracts.
         * @return Builder
         */
        public Builder contracts(List<CustomerContract> contracts) {
            this.contracts = contracts;
            return this;
        }

        /**
         * Builds a new {@link PayerDetails} object using the set fields.
         * @return {@link PayerDetails}
         */
        public PayerDetails build() {
            return new PayerDetails(colCoId, colCoCode, countryCode, country, payerId, payerNumber,
                    payerFullName, payerShortName, payerGroupId, amountDue, amountOverdue,
                    amountNotOverdue, outstandingBalance, unallocatedPayment, sOACurrencyCode,
                    sOACurrencySymbol, sOACreditLimitCurrencyCode, sOACreditLimitCurrencySymbol,
                    lastPaymentCurrencyCode, lastPaymentCurrencySymbol, lastPaymentAmount,
                    lastPaymentDate, sOALastPaymentAmount, sOALastPaymentDate, currencyCode,
                    currencySymbol, colCoCountryCode, localCurrencyCode, localCurrencySymbol,
                    localCurrencyExchangeRate, localCurrencyExchangeRateSoA, billingFrequencyTypeId,
                    billingFrequencyType, billingRunFrequencyTypeId, billingRunFrequnecy, day1Run,
                    day2Run, day3Run, day4Run, invoiceDistributionMethods, outputType,
                    invoiceAccountID, invoiceAccountNumber, invoiceAccountShortName,
                    bestOfIndicator, isInternational, totalAccounts, totalActiveAccounts,
                    totalCards, totalActiveCards, totalBlockedCards, totalCancelledCards,
                    totalExpiredCards, totalRenewalPendingCards, totalReplacedCards,
                    totalTemporaryBlockCardsByCustomer, totalTemporaryBlockCardsByShell,
                    totalNewCards, totalFraudCards, totalBlockedAccounts, totalCancelledAccounts,
                    payerTradingName, status, billingLanguage, legalEntity, dateEstablished,
                    customerClassification, industryClass, marketingSegmentation, lineOfBusiness,
                    printCreditLimit, cardGroupType, renewCards, allowSelectPIN, useFleetPIN,
                    vATRegNumber, vATRegNumber2, registrationNumber, registrationNumber2,
                    salesLedgerBalance, exposure, outstandingDebt, availableCredit, band,
                    globalCustomerReferenceId, creditLimit, creditLimitInCustomerCurrency,
                    billingCurrencyCode, billingCurrencySymbol, paymentMethod, paymentTerms,
                    temporaryCreditLimitIncrease, temporaryCreditLimitIncreaseInCustomerCurrency,
                    temporaryCreditLimitExpiryDate, payerBankAccount, cardDeliveryAddress,
                    correspondanceAddress, billingAddress, hasActiveVolBasedPricing,
                    hasActiveVolBasedBonus, hasActiveVolBasedAssociationBonus, financeCurrency,
                    tollsCustomerId, tollsColcoCountryTypeId, contracts);
        }
    }
}
