/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for TransactionExceptionsRequest type.
 */
public class TransactionExceptionsRequest {
    private Integer colCoId;
    private Integer colCoCode;
    private Integer payerId;
    private String payerNumber;
    private List<Accounts> accounts;
    private String transactionsFromDate;
    private String transactionsToDate;
    private Double value;
    private int condition;
    private List<ExceptionProduct> products;
    private Integer exceptionPeriod;
    private int outputType;
    private Boolean fuelOnly;
    private List<Integer> siteGroupIds;
    private Boolean useFieldId;

    /**
     * Default constructor.
     */
    public TransactionExceptionsRequest() {
    }

    /**
     * Initialization constructor.
     * @param  transactionsFromDate  String value for transactionsFromDate.
     * @param  transactionsToDate  String value for transactionsToDate.
     * @param  condition  int value for condition.
     * @param  outputType  int value for outputType.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  List of Accounts value for accounts.
     * @param  value  Double value for value.
     * @param  products  List of ExceptionProduct value for products.
     * @param  exceptionPeriod  Integer value for exceptionPeriod.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  siteGroupIds  List of Integer value for siteGroupIds.
     * @param  useFieldId  Boolean value for useFieldId.
     */
    public TransactionExceptionsRequest(
            String transactionsFromDate,
            String transactionsToDate,
            int condition,
            int outputType,
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            List<Accounts> accounts,
            Double value,
            List<ExceptionProduct> products,
            Integer exceptionPeriod,
            Boolean fuelOnly,
            List<Integer> siteGroupIds,
            Boolean useFieldId) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accounts = accounts;
        this.transactionsFromDate = transactionsFromDate;
        this.transactionsToDate = transactionsToDate;
        this.value = value;
        this.condition = condition;
        this.products = products;
        this.exceptionPeriod = exceptionPeriod;
        this.outputType = outputType;
        this.fuelOnly = fuelOnly;
        this.siteGroupIds = siteGroupIds;
        this.useFieldId = useFieldId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = payerId;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @return Returns the String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPayerNumber() {
        return payerNumber;
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = payerNumber;
    }

    /**
     * Getter for Accounts.
     * @return Returns the List of Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Accounts> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for List of Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<Accounts> accounts) {
        this.accounts = accounts;
    }

    /**
     * Getter for TransactionsFromDate.
     * Exceptions to be searched in transactions from date. Should be with in last 24 months from
     * the ToDate parameter. Mandatory Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("TransactionsFromDate")
    public String getTransactionsFromDate() {
        return transactionsFromDate;
    }

    /**
     * Setter for TransactionsFromDate.
     * Exceptions to be searched in transactions from date. Should be with in last 24 months from
     * the ToDate parameter. Mandatory Format: yyyyMMdd
     * @param transactionsFromDate Value for String
     */
    @JsonSetter("TransactionsFromDate")
    public void setTransactionsFromDate(String transactionsFromDate) {
        this.transactionsFromDate = transactionsFromDate;
    }

    /**
     * Getter for TransactionsToDate.
     * Exceptions to be searched in transactions until date. Mandatory. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("TransactionsToDate")
    public String getTransactionsToDate() {
        return transactionsToDate;
    }

    /**
     * Setter for TransactionsToDate.
     * Exceptions to be searched in transactions until date. Mandatory. Format: yyyyMMdd
     * @param transactionsToDate Value for String
     */
    @JsonSetter("TransactionsToDate")
    public void setTransactionsToDate(String transactionsToDate) {
        this.transactionsToDate = transactionsToDate;
    }

    /**
     * Getter for Value.
     * Value to be used on the Filter Condition
     * @return Returns the Double
     */
    @JsonGetter("Value")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getValue() {
        return value;
    }

    /**
     * Setter for Value.
     * Value to be used on the Filter Condition
     * @param value Value for Double
     */
    @JsonSetter("Value")
    public void setValue(Double value) {
        this.value = value;
    }

    /**
     * Getter for Condition.
     * Filter condition for the Exceptions. Mandatory 1. VolumeGreaterThan 2. VolumeLessThan 3.
     * UsageGreaterThan 4. UsageLessThan 5. ValueGreaterThan (in Customer Currency) 6. ValueLessThan
     * (in Customer Currency) Note: - When “OutputType” = 1 is passed as input, above 3 and 4
     * Condition are not applicable.
     * @return Returns the int
     */
    @JsonGetter("Condition")
    public int getCondition() {
        return condition;
    }

    /**
     * Setter for Condition.
     * Filter condition for the Exceptions. Mandatory 1. VolumeGreaterThan 2. VolumeLessThan 3.
     * UsageGreaterThan 4. UsageLessThan 5. ValueGreaterThan (in Customer Currency) 6. ValueLessThan
     * (in Customer Currency) Note: - When “OutputType” = 1 is passed as input, above 3 and 4
     * Condition are not applicable.
     * @param condition Value for int
     */
    @JsonSetter("Condition")
    public void setCondition(int condition) {
        this.condition = condition;
    }

    /**
     * Getter for Products.
     * @return Returns the List of ExceptionProduct
     */
    @JsonGetter("Products")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ExceptionProduct> getProducts() {
        return products;
    }

    /**
     * Setter for Products.
     * @param products Value for List of ExceptionProduct
     */
    @JsonSetter("Products")
    public void setProducts(List<ExceptionProduct> products) {
        this.products = products;
    }

    /**
     * Getter for ExceptionPeriod.
     * Period in which the Exceptions such as Monthly/Weekly or Daily volume, value or usage to be
     * identified in the given transactions date range. It is only applied when the Output Type is
     * specified as "Cards". Mandatory when Output Type is Cards 1. Month 2. Week 3. Day 4. Date
     * Range
     * @return Returns the Integer
     */
    @JsonGetter("ExceptionPeriod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getExceptionPeriod() {
        return exceptionPeriod;
    }

    /**
     * Setter for ExceptionPeriod.
     * Period in which the Exceptions such as Monthly/Weekly or Daily volume, value or usage to be
     * identified in the given transactions date range. It is only applied when the Output Type is
     * specified as "Cards". Mandatory when Output Type is Cards 1. Month 2. Week 3. Day 4. Date
     * Range
     * @param exceptionPeriod Value for Integer
     */
    @JsonSetter("ExceptionPeriod")
    public void setExceptionPeriod(Integer exceptionPeriod) {
        this.exceptionPeriod = exceptionPeriod;
    }

    /**
     * Getter for OutputType.
     * Output Type for Exceptions. Mandatory. Possible values: 1. Transactions 2. Cards
     * @return Returns the int
     */
    @JsonGetter("OutputType")
    public int getOutputType() {
        return outputType;
    }

    /**
     * Setter for OutputType.
     * Output Type for Exceptions. Mandatory. Possible values: 1. Transactions 2. Cards
     * @param outputType Value for int
     */
    @JsonSetter("OutputType")
    public void setOutputType(int outputType) {
        this.outputType = outputType;
    }

    /**
     * Getter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @return Returns the Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFuelOnly() {
        return fuelOnly;
    }

    /**
     * Setter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = fuelOnly;
    }

    /**
     * Getter for SiteGroupIds.
     * SiteGroupIds to be applied to the Filter Condition. Optional When not passed, ignored. When
     * passed, transactions that are matching with the provided list of site group id’s are only
     * returned.
     * @return Returns the List of Integer
     */
    @JsonGetter("SiteGroupIds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integer> getSiteGroupIds() {
        return siteGroupIds;
    }

    /**
     * Setter for SiteGroupIds.
     * SiteGroupIds to be applied to the Filter Condition. Optional When not passed, ignored. When
     * passed, transactions that are matching with the provided list of site group id’s are only
     * returned.
     * @param siteGroupIds Value for List of Integer
     */
    @JsonSetter("SiteGroupIds")
    public void setSiteGroupIds(List<Integer> siteGroupIds) {
        this.siteGroupIds = siteGroupIds;
    }

    /**
     * Getter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs.
     * @return Returns the Boolean
     */
    @JsonGetter("UseFieldId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUseFieldId() {
        return useFieldId;
    }

    /**
     * Setter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs.
     * @param useFieldId Value for Boolean
     */
    @JsonSetter("UseFieldId")
    public void setUseFieldId(Boolean useFieldId) {
        this.useFieldId = useFieldId;
    }

    /**
     * Converts this TransactionExceptionsRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TransactionExceptionsRequest [" + "transactionsFromDate=" + transactionsFromDate
                + ", transactionsToDate=" + transactionsToDate + ", condition=" + condition
                + ", outputType=" + outputType + ", colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", accounts=" + accounts
                + ", value=" + value + ", products=" + products + ", exceptionPeriod="
                + exceptionPeriod + ", fuelOnly=" + fuelOnly + ", siteGroupIds=" + siteGroupIds
                + ", useFieldId=" + useFieldId + "]";
    }

    /**
     * Builds a new {@link TransactionExceptionsRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TransactionExceptionsRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(transactionsFromDate, transactionsToDate, condition,
                outputType)
                .colCoId(getColCoId())
                .colCoCode(getColCoCode())
                .payerId(getPayerId())
                .payerNumber(getPayerNumber())
                .accounts(getAccounts())
                .value(getValue())
                .products(getProducts())
                .exceptionPeriod(getExceptionPeriod())
                .fuelOnly(getFuelOnly())
                .siteGroupIds(getSiteGroupIds())
                .useFieldId(getUseFieldId());
        return builder;
    }

    /**
     * Class to build instances of {@link TransactionExceptionsRequest}.
     */
    public static class Builder {
        private String transactionsFromDate;
        private String transactionsToDate;
        private int condition;
        private int outputType;
        private Integer colCoId;
        private Integer colCoCode;
        private Integer payerId;
        private String payerNumber;
        private List<Accounts> accounts;
        private Double value;
        private List<ExceptionProduct> products;
        private Integer exceptionPeriod;
        private Boolean fuelOnly;
        private List<Integer> siteGroupIds;
        private Boolean useFieldId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  transactionsFromDate  String value for transactionsFromDate.
         * @param  transactionsToDate  String value for transactionsToDate.
         * @param  condition  int value for condition.
         * @param  outputType  int value for outputType.
         */
        public Builder(String transactionsFromDate, String transactionsToDate, int condition,
                int outputType) {
            this.transactionsFromDate = transactionsFromDate;
            this.transactionsToDate = transactionsToDate;
            this.condition = condition;
            this.outputType = outputType;
        }

        /**
         * Setter for transactionsFromDate.
         * @param  transactionsFromDate  String value for transactionsFromDate.
         * @return Builder
         */
        public Builder transactionsFromDate(String transactionsFromDate) {
            this.transactionsFromDate = transactionsFromDate;
            return this;
        }

        /**
         * Setter for transactionsToDate.
         * @param  transactionsToDate  String value for transactionsToDate.
         * @return Builder
         */
        public Builder transactionsToDate(String transactionsToDate) {
            this.transactionsToDate = transactionsToDate;
            return this;
        }

        /**
         * Setter for condition.
         * @param  condition  int value for condition.
         * @return Builder
         */
        public Builder condition(int condition) {
            this.condition = condition;
            return this;
        }

        /**
         * Setter for outputType.
         * @param  outputType  int value for outputType.
         * @return Builder
         */
        public Builder outputType(int outputType) {
            this.outputType = outputType;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = payerNumber;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(List<Accounts> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for value.
         * @param  value  Double value for value.
         * @return Builder
         */
        public Builder value(Double value) {
            this.value = value;
            return this;
        }

        /**
         * Setter for products.
         * @param  products  List of ExceptionProduct value for products.
         * @return Builder
         */
        public Builder products(List<ExceptionProduct> products) {
            this.products = products;
            return this;
        }

        /**
         * Setter for exceptionPeriod.
         * @param  exceptionPeriod  Integer value for exceptionPeriod.
         * @return Builder
         */
        public Builder exceptionPeriod(Integer exceptionPeriod) {
            this.exceptionPeriod = exceptionPeriod;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = fuelOnly;
            return this;
        }

        /**
         * Setter for siteGroupIds.
         * @param  siteGroupIds  List of Integer value for siteGroupIds.
         * @return Builder
         */
        public Builder siteGroupIds(List<Integer> siteGroupIds) {
            this.siteGroupIds = siteGroupIds;
            return this;
        }

        /**
         * Setter for useFieldId.
         * @param  useFieldId  Boolean value for useFieldId.
         * @return Builder
         */
        public Builder useFieldId(Boolean useFieldId) {
            this.useFieldId = useFieldId;
            return this;
        }

        /**
         * Builds a new {@link TransactionExceptionsRequest} object using the set fields.
         * @return {@link TransactionExceptionsRequest}
         */
        public TransactionExceptionsRequest build() {
            return new TransactionExceptionsRequest(transactionsFromDate, transactionsToDate,
                    condition, outputType, colCoId, colCoCode, payerId, payerNumber, accounts,
                    value, products, exceptionPeriod, fuelOnly, siteGroupIds, useFieldId);
        }
    }
}
