/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for SearchSOAReq type.
 */
public class SearchSOAReq {
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<Integer> period;
    private OptionalNullable<String> invoiceDate;
    private List<String> invoiceStatus;
    private List<Integer> sortBy;
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> payerId;

    /**
     * Default constructor.
     */
    public SearchSOAReq() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceStatus  List of String value for invoiceStatus.
     * @param  sortBy  List of Integer value for sortBy.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     */
    public SearchSOAReq(
            Integer colCoCode,
            String payerNumber,
            String invoiceNumber,
            String fromDate,
            String toDate,
            Integer period,
            String invoiceDate,
            List<String> invoiceStatus,
            List<Integer> sortBy,
            Integer colCoId,
            Integer payerId) {
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.period = OptionalNullable.of(period);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.invoiceStatus = invoiceStatus;
        this.sortBy = sortBy;
        this.colCoId = OptionalNullable.of(colCoId);
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceStatus  List of String value for invoiceStatus.
     * @param  sortBy  List of Integer value for sortBy.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     */

    protected SearchSOAReq(OptionalNullable<Integer> colCoCode,
            OptionalNullable<String> payerNumber, OptionalNullable<String> invoiceNumber,
            OptionalNullable<String> fromDate, OptionalNullable<String> toDate,
            OptionalNullable<Integer> period, OptionalNullable<String> invoiceDate,
            List<String> invoiceStatus, List<Integer> sortBy, OptionalNullable<Integer> colCoId,
            OptionalNullable<Integer> payerId) {
        this.colCoCode = colCoCode;
        this.payerNumber = payerNumber;
        this.invoiceNumber = invoiceNumber;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.invoiceDate = invoiceDate;
        this.invoiceStatus = invoiceStatus;
        this.sortBy = sortBy;
        this.colCoId = colCoId;
        this.payerId = payerId;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code of the selected payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer.
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code of the selected payer.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given.
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given.
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given.
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for FromDate.
     * SOA searched from this date. Optional. This input is a search criterion, if given. Date
     * format: yyyy/MM/dd
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * SOA searched from this date. Optional. This input is a search criterion, if given. Date
     * format: yyyy/MM/dd
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * SOA searched from this date. Optional. This input is a search criterion, if given. Date
     * format: yyyy/MM/dd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * SOA searched from this date. Optional. This input is a search criterion, if given. Date
     * format: yyyy/MM/dd
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for Period.
     * Invoice date search period. Valid values - Last 7 days – Issued in last 7 days. Last 30 days
     * – Issued in last 30 days. Last 90 days – Issued in last 90 days. Optional. This input is a
     * search criterion, if given.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPeriod() {
        return this.period;
    }

    /**
     * Getter for Period.
     * Invoice date search period. Valid values - Last 7 days – Issued in last 7 days. Last 30 days
     * – Issued in last 30 days. Last 90 days – Issued in last 90 days. Optional. This input is a
     * search criterion, if given.
     * @return Returns the Integer
     */
    public Integer getPeriod() {
        return OptionalNullable.getFrom(period);
    }

    /**
     * Setter for Period.
     * Invoice date search period. Valid values - Last 7 days – Issued in last 7 days. Last 30 days
     * – Issued in last 30 days. Last 90 days – Issued in last 90 days. Optional. This input is a
     * search criterion, if given.
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = OptionalNullable.of(period);
    }

    /**
     * UnSetter for Period.
     * Invoice date search period. Valid values - Last 7 days – Issued in last 7 days. Last 30 days
     * – Issued in last 30 days. Last 90 days – Issued in last 90 days. Optional. This input is a
     * search criterion, if given.
     */
    public void unsetPeriod() {
        period = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given.
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given.
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given.
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Getter for InvoiceStatus.
     * Possible options are: 1. StatementDate ASC 2. StatementDate DESC Optional Note: This option
     * uses a column name with a combination of “ASC or DESC” for sorting. If only the column name
     * is provided, it is sorted by ascending. Sorting is allowed only ASC or DESC, If both provided
     * in the input ASC will be taken as precedence.
     * @return Returns the List of String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getInvoiceStatus() {
        return invoiceStatus;
    }

    /**
     * Setter for InvoiceStatus.
     * Possible options are: 1. StatementDate ASC 2. StatementDate DESC Optional Note: This option
     * uses a column name with a combination of “ASC or DESC” for sorting. If only the column name
     * is provided, it is sorted by ascending. Sorting is allowed only ASC or DESC, If both provided
     * in the input ASC will be taken as precedence.
     * @param invoiceStatus Value for List of String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(List<String> invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
    }

    /**
     * Getter for SortBy.
     * Possible options are: 1. StatementDate ASC 2. StatementDate DESC Optional Note: This option
     * uses a column name with a combination of “ASC or DESC” for sorting. If only the column name
     * is provided, it is sorted by ascending. Sorting is allowed only ASC or DESC, If both provided
     * in the input ASC will be taken as precedence.
     * @return Returns the List of Integer
     */
    @JsonGetter("SortBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Integer> getSortBy() {
        return sortBy;
    }

    /**
     * Setter for SortBy.
     * Possible options are: 1. StatementDate ASC 2. StatementDate DESC Optional Note: This option
     * uses a column name with a combination of “ASC or DESC” for sorting. If only the column name
     * is provided, it is sorted by ascending. Sorting is allowed only ASC or DESC, If both provided
     * in the input ASC will be taken as precedence.
     * @param sortBy Value for List of Integer
     */
    @JsonSetter("SortBy")
    public void setSortBy(List<Integer> sortBy) {
        this.sortBy = sortBy;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1-Philippines 5-UK
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Converts this SearchSOAReq into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SearchSOAReq [" + "colCoCode=" + colCoCode + ", payerNumber=" + payerNumber
                + ", invoiceNumber=" + invoiceNumber + ", fromDate=" + fromDate + ", toDate="
                + toDate + ", period=" + period + ", invoiceDate=" + invoiceDate
                + ", invoiceStatus=" + invoiceStatus + ", sortBy=" + sortBy + ", colCoId=" + colCoId
                + ", payerId=" + payerId + "]";
    }

    /**
     * Builds a new {@link SearchSOAReq.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SearchSOAReq.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .invoiceStatus(getInvoiceStatus())
                .sortBy(getSortBy());
        builder.colCoCode = internalGetColCoCode();
        builder.payerNumber = internalGetPayerNumber();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.period = internalGetPeriod();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.colCoId = internalGetColCoId();
        builder.payerId = internalGetPayerId();
        return builder;
    }

    /**
     * Class to build instances of {@link SearchSOAReq}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<Integer> period;
        private OptionalNullable<String> invoiceDate;
        private List<String> invoiceStatus;
        private List<Integer> sortBy;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> payerId;



        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = OptionalNullable.of(period);
            return this;
        }

        /**
         * UnSetter for period.
         * @return Builder
         */
        public Builder unsetPeriod() {
            period = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  List of String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(List<String> invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        /**
         * Setter for sortBy.
         * @param  sortBy  List of Integer value for sortBy.
         * @return Builder
         */
        public Builder sortBy(List<Integer> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Builds a new {@link SearchSOAReq} object using the set fields.
         * @return {@link SearchSOAReq}
         */
        public SearchSOAReq build() {
            return new SearchSOAReq(colCoCode, payerNumber, invoiceNumber, fromDate, toDate, period,
                    invoiceDate, invoiceStatus, sortBy, colCoId, payerId);
        }
    }
}
