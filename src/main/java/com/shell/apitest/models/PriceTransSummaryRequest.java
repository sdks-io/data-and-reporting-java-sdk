/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for PriceTransSummaryRequest type.
 */
public class PriceTransSummaryRequest {
    private Integer colCoId;
    private Integer colCoCode;
    private Integer payerId;
    private String payerNumber;
    private Accounts accounts;
    private Integer cardId;
    private String cardPAN;
    private String driverName;
    private String vehicleRegistrationNumber;
    private String invoiceStatus;
    private Integer productId;
    private String productCode;
    private String purchasedInCountry;
    private Integer cardGroupId;
    private String fromDate;
    private String toDate;
    private Integer period;
    private String siteCode;
    private Integer siteGroupId;
    private String postingDateFrom;
    private String postingDateTo;
    private String salesItemId;
    private String transactionId;
    private String invoiceDate;
    private String invoiceNumber;
    private Boolean validInvoiceDateOnly;
    private String invoiceFromDate;
    private String invoiceToDate;
    private Boolean fuelOnly;
    private Boolean includeFees;

    /**
     * Default constructor.
     */
    public PriceTransSummaryRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  Accounts value for accounts.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  siteCode  String value for siteCode.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  salesItemId  String value for salesItemId.
     * @param  transactionId  String value for transactionId.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     */
    public PriceTransSummaryRequest(
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            Accounts accounts,
            Integer cardId,
            String cardPAN,
            String driverName,
            String vehicleRegistrationNumber,
            String invoiceStatus,
            Integer productId,
            String productCode,
            String purchasedInCountry,
            Integer cardGroupId,
            String fromDate,
            String toDate,
            Integer period,
            String siteCode,
            Integer siteGroupId,
            String postingDateFrom,
            String postingDateTo,
            String salesItemId,
            String transactionId,
            String invoiceDate,
            String invoiceNumber,
            Boolean validInvoiceDateOnly,
            String invoiceFromDate,
            String invoiceToDate,
            Boolean fuelOnly,
            Boolean includeFees) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accounts = accounts;
        this.cardId = cardId;
        this.cardPAN = cardPAN;
        this.driverName = driverName;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.invoiceStatus = invoiceStatus;
        this.productId = productId;
        this.productCode = productCode;
        this.purchasedInCountry = purchasedInCountry;
        this.cardGroupId = cardGroupId;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.siteCode = siteCode;
        this.siteGroupId = siteGroupId;
        this.postingDateFrom = postingDateFrom;
        this.postingDateTo = postingDateTo;
        this.salesItemId = salesItemId;
        this.transactionId = transactionId;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.validInvoiceDateOnly = validInvoiceDateOnly;
        this.invoiceFromDate = invoiceFromDate;
        this.invoiceToDate = invoiceToDate;
        this.fuelOnly = fuelOnly;
        this.includeFees = includeFees;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPayerId() {
        return payerId;
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = payerId;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     * @return Returns the String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPayerNumber() {
        return payerNumber;
    }

    /**
     * Setter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = payerNumber;
    }

    /**
     * Getter for Accounts.
     * @return Returns the Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Accounts getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(Accounts accounts) {
        this.accounts = accounts;
    }

    /**
     * Getter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     * @return Returns the Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardId() {
        return cardId;
    }

    /**
     * Setter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = cardId;
    }

    /**
     * Getter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     * @return Returns the String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCardPAN() {
        return cardPAN;
    }

    /**
     * Setter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = cardPAN;
    }

    /**
     * Getter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     * @return Returns the String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDriverName() {
        return driverName;
    }

    /**
     * Setter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = driverName;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     * @return Returns the String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVehicleRegistrationNumber() {
        return vehicleRegistrationNumber;
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     * @param vehicleRegistrationNumber Value for String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(String vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
    }

    /**
     * Getter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     * @return Returns the String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceStatus() {
        return invoiceStatus;
    }

    /**
     * Setter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
    }

    /**
     * Getter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     * @return Returns the Integer
     */
    @JsonGetter("ProductId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProductId() {
        return productId;
    }

    /**
     * Setter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     * @param productId Value for Integer
     */
    @JsonSetter("ProductId")
    public void setProductId(Integer productId) {
        this.productId = productId;
    }

    /**
     * Getter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     * @return Returns the String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getProductCode() {
        return productCode;
    }

    /**
     * Setter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }

    /**
     * Getter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPurchasedInCountry() {
        return purchasedInCountry;
    }

    /**
     * Setter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = purchasedInCountry;
    }

    /**
     * Getter for CardGroupId.
     * Card Group Id in GFN
     * @return Returns the Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCardGroupId() {
        return cardGroupId;
    }

    /**
     * Setter for CardGroupId.
     * Card Group Id in GFN
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = cardGroupId;
    }

    /**
     * Getter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFromDate() {
        return fromDate;
    }

    /**
     * Setter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = fromDate;
    }

    /**
     * Getter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToDate() {
        return toDate;
    }

    /**
     * Setter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = toDate;
    }

    /**
     * Getter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     * @return Returns the Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPeriod() {
        return period;
    }

    /**
     * Setter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = period;
    }

    /**
     * Getter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSiteCode() {
        return siteCode;
    }

    /**
     * Setter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     * @param siteCode Value for String
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(String siteCode) {
        this.siteCode = siteCode;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     * @return Returns the Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getSiteGroupId() {
        return siteGroupId;
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = siteGroupId;
    }

    /**
     * Getter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    @JsonGetter("PostingDateFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPostingDateFrom() {
        return postingDateFrom;
    }

    /**
     * Setter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @param postingDateFrom Value for String
     */
    @JsonSetter("PostingDateFrom")
    public void setPostingDateFrom(String postingDateFrom) {
        this.postingDateFrom = postingDateFrom;
    }

    /**
     * Getter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    @JsonGetter("PostingDateTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPostingDateTo() {
        return postingDateTo;
    }

    /**
     * Setter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @param postingDateTo Value for String
     */
    @JsonSetter("PostingDateTo")
    public void setPostingDateTo(String postingDateTo) {
        this.postingDateTo = postingDateTo;
    }

    /**
     * Getter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     * @return Returns the String
     */
    @JsonGetter("SalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSalesItemId() {
        return salesItemId;
    }

    /**
     * Setter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     * @param salesItemId Value for String
     */
    @JsonSetter("SalesItemId")
    public void setSalesItemId(String salesItemId) {
        this.salesItemId = salesItemId;
    }

    /**
     * Getter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionId() {
        return transactionId;
    }

    /**
     * Setter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    /**
     * Getter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * Setter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @return Returns the String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    /**
     * Getter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     * @return Returns the Boolean
     */
    @JsonGetter("ValidInvoiceDateOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getValidInvoiceDateOnly() {
        return validInvoiceDateOnly;
    }

    /**
     * Setter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     * @param validInvoiceDateOnly Value for Boolean
     */
    @JsonSetter("ValidInvoiceDateOnly")
    public void setValidInvoiceDateOnly(Boolean validInvoiceDateOnly) {
        this.validInvoiceDateOnly = validInvoiceDateOnly;
    }

    /**
     * Getter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceFromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceFromDate() {
        return invoiceFromDate;
    }

    /**
     * Setter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @param invoiceFromDate Value for String
     */
    @JsonSetter("InvoiceFromDate")
    public void setInvoiceFromDate(String invoiceFromDate) {
        this.invoiceFromDate = invoiceFromDate;
    }

    /**
     * Getter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceToDate() {
        return invoiceToDate;
    }

    /**
     * Setter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @param invoiceToDate Value for String
     */
    @JsonSetter("InvoiceToDate")
    public void setInvoiceToDate(String invoiceToDate) {
        this.invoiceToDate = invoiceToDate;
    }

    /**
     * Getter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @return Returns the Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFuelOnly() {
        return fuelOnly;
    }

    /**
     * Setter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = fuelOnly;
    }

    /**
     * Getter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     * @return Returns the Boolean
     */
    @JsonGetter("IncludeFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIncludeFees() {
        return includeFees;
    }

    /**
     * Setter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     * @param includeFees Value for Boolean
     */
    @JsonSetter("IncludeFees")
    public void setIncludeFees(Boolean includeFees) {
        this.includeFees = includeFees;
    }

    /**
     * Converts this PriceTransSummaryRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PriceTransSummaryRequest [" + "colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", accounts=" + accounts
                + ", cardId=" + cardId + ", cardPAN=" + cardPAN + ", driverName=" + driverName
                + ", vehicleRegistrationNumber=" + vehicleRegistrationNumber + ", invoiceStatus="
                + invoiceStatus + ", productId=" + productId + ", productCode=" + productCode
                + ", purchasedInCountry=" + purchasedInCountry + ", cardGroupId=" + cardGroupId
                + ", fromDate=" + fromDate + ", toDate=" + toDate + ", period=" + period
                + ", siteCode=" + siteCode + ", siteGroupId=" + siteGroupId + ", postingDateFrom="
                + postingDateFrom + ", postingDateTo=" + postingDateTo + ", salesItemId="
                + salesItemId + ", transactionId=" + transactionId + ", invoiceDate=" + invoiceDate
                + ", invoiceNumber=" + invoiceNumber + ", validInvoiceDateOnly="
                + validInvoiceDateOnly + ", invoiceFromDate=" + invoiceFromDate + ", invoiceToDate="
                + invoiceToDate + ", fuelOnly=" + fuelOnly + ", includeFees=" + includeFees + "]";
    }

    /**
     * Builds a new {@link PriceTransSummaryRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PriceTransSummaryRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .colCoId(getColCoId())
                .colCoCode(getColCoCode())
                .payerId(getPayerId())
                .payerNumber(getPayerNumber())
                .accounts(getAccounts())
                .cardId(getCardId())
                .cardPAN(getCardPAN())
                .driverName(getDriverName())
                .vehicleRegistrationNumber(getVehicleRegistrationNumber())
                .invoiceStatus(getInvoiceStatus())
                .productId(getProductId())
                .productCode(getProductCode())
                .purchasedInCountry(getPurchasedInCountry())
                .cardGroupId(getCardGroupId())
                .fromDate(getFromDate())
                .toDate(getToDate())
                .period(getPeriod())
                .siteCode(getSiteCode())
                .siteGroupId(getSiteGroupId())
                .postingDateFrom(getPostingDateFrom())
                .postingDateTo(getPostingDateTo())
                .salesItemId(getSalesItemId())
                .transactionId(getTransactionId())
                .invoiceDate(getInvoiceDate())
                .invoiceNumber(getInvoiceNumber())
                .validInvoiceDateOnly(getValidInvoiceDateOnly())
                .invoiceFromDate(getInvoiceFromDate())
                .invoiceToDate(getInvoiceToDate())
                .fuelOnly(getFuelOnly())
                .includeFees(getIncludeFees());
        return builder;
    }

    /**
     * Class to build instances of {@link PriceTransSummaryRequest}.
     */
    public static class Builder {
        private Integer colCoId;
        private Integer colCoCode;
        private Integer payerId;
        private String payerNumber;
        private Accounts accounts;
        private Integer cardId;
        private String cardPAN;
        private String driverName;
        private String vehicleRegistrationNumber;
        private String invoiceStatus;
        private Integer productId;
        private String productCode;
        private String purchasedInCountry;
        private Integer cardGroupId;
        private String fromDate;
        private String toDate;
        private Integer period;
        private String siteCode;
        private Integer siteGroupId;
        private String postingDateFrom;
        private String postingDateTo;
        private String salesItemId;
        private String transactionId;
        private String invoiceDate;
        private String invoiceNumber;
        private Boolean validInvoiceDateOnly;
        private String invoiceFromDate;
        private String invoiceToDate;
        private Boolean fuelOnly;
        private Boolean includeFees;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = payerId;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = payerNumber;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(Accounts accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = cardId;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = cardPAN;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = driverName;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(String vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = vehicleRegistrationNumber;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        /**
         * Setter for productId.
         * @param  productId  Integer value for productId.
         * @return Builder
         */
        public Builder productId(Integer productId) {
            this.productId = productId;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = productCode;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = purchasedInCountry;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = cardGroupId;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = fromDate;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = toDate;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = period;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  String value for siteCode.
         * @return Builder
         */
        public Builder siteCode(String siteCode) {
            this.siteCode = siteCode;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = siteGroupId;
            return this;
        }

        /**
         * Setter for postingDateFrom.
         * @param  postingDateFrom  String value for postingDateFrom.
         * @return Builder
         */
        public Builder postingDateFrom(String postingDateFrom) {
            this.postingDateFrom = postingDateFrom;
            return this;
        }

        /**
         * Setter for postingDateTo.
         * @param  postingDateTo  String value for postingDateTo.
         * @return Builder
         */
        public Builder postingDateTo(String postingDateTo) {
            this.postingDateTo = postingDateTo;
            return this;
        }

        /**
         * Setter for salesItemId.
         * @param  salesItemId  String value for salesItemId.
         * @return Builder
         */
        public Builder salesItemId(String salesItemId) {
            this.salesItemId = salesItemId;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * Setter for validInvoiceDateOnly.
         * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
         * @return Builder
         */
        public Builder validInvoiceDateOnly(Boolean validInvoiceDateOnly) {
            this.validInvoiceDateOnly = validInvoiceDateOnly;
            return this;
        }

        /**
         * Setter for invoiceFromDate.
         * @param  invoiceFromDate  String value for invoiceFromDate.
         * @return Builder
         */
        public Builder invoiceFromDate(String invoiceFromDate) {
            this.invoiceFromDate = invoiceFromDate;
            return this;
        }

        /**
         * Setter for invoiceToDate.
         * @param  invoiceToDate  String value for invoiceToDate.
         * @return Builder
         */
        public Builder invoiceToDate(String invoiceToDate) {
            this.invoiceToDate = invoiceToDate;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = fuelOnly;
            return this;
        }

        /**
         * Setter for includeFees.
         * @param  includeFees  Boolean value for includeFees.
         * @return Builder
         */
        public Builder includeFees(Boolean includeFees) {
            this.includeFees = includeFees;
            return this;
        }

        /**
         * Builds a new {@link PriceTransSummaryRequest} object using the set fields.
         * @return {@link PriceTransSummaryRequest}
         */
        public PriceTransSummaryRequest build() {
            return new PriceTransSummaryRequest(colCoId, colCoCode, payerId, payerNumber, accounts,
                    cardId, cardPAN, driverName, vehicleRegistrationNumber, invoiceStatus,
                    productId, productCode, purchasedInCountry, cardGroupId, fromDate, toDate,
                    period, siteCode, siteGroupId, postingDateFrom, postingDateTo, salesItemId,
                    transactionId, invoiceDate, invoiceNumber, validInvoiceDateOnly,
                    invoiceFromDate, invoiceToDate, fuelOnly, includeFees);
        }
    }
}
