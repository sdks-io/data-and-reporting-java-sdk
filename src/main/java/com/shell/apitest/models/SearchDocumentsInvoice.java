/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for SearchDocumentsInvoice type.
 */
public class SearchDocumentsInvoice {
    private Integer documentReference;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> documentType;
    private OptionalNullable<Double> grossAmount;
    private OptionalNullable<Double> netAmount;
    private OptionalNullable<Double> taxAmount;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> invoiceStatus;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> dueDate;
    private OptionalNullable<String> vATCountryISOCode;

    /**
     * Default constructor.
     */
    public SearchDocumentsInvoice() {
    }

    /**
     * Initialization constructor.
     * @param  documentReference  Integer value for documentReference.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  payerName  String value for payerName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  documentType  String value for documentType.
     * @param  grossAmount  Double value for grossAmount.
     * @param  netAmount  Double value for netAmount.
     * @param  taxAmount  Double value for taxAmount.
     * @param  currencyCode  String value for currencyCode.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  dueDate  String value for dueDate.
     * @param  vATCountryISOCode  String value for vATCountryISOCode.
     */
    public SearchDocumentsInvoice(
            Integer documentReference,
            String invoiceNumber,
            String payerName,
            String accountNumber,
            String accountName,
            String documentType,
            Double grossAmount,
            Double netAmount,
            Double taxAmount,
            String currencyCode,
            String invoiceStatus,
            String invoiceDate,
            String dueDate,
            String vATCountryISOCode) {
        this.documentReference = documentReference;
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.payerName = OptionalNullable.of(payerName);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountName = OptionalNullable.of(accountName);
        this.documentType = OptionalNullable.of(documentType);
        this.grossAmount = OptionalNullable.of(grossAmount);
        this.netAmount = OptionalNullable.of(netAmount);
        this.taxAmount = OptionalNullable.of(taxAmount);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.dueDate = OptionalNullable.of(dueDate);
        this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
    }

    /**
     * Initialization constructor.
     * @param  documentReference  Integer value for documentReference.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  payerName  String value for payerName.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  documentType  String value for documentType.
     * @param  grossAmount  Double value for grossAmount.
     * @param  netAmount  Double value for netAmount.
     * @param  taxAmount  Double value for taxAmount.
     * @param  currencyCode  String value for currencyCode.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  dueDate  String value for dueDate.
     * @param  vATCountryISOCode  String value for vATCountryISOCode.
     */

    protected SearchDocumentsInvoice(Integer documentReference,
            OptionalNullable<String> invoiceNumber, OptionalNullable<String> payerName,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountName,
            OptionalNullable<String> documentType, OptionalNullable<Double> grossAmount,
            OptionalNullable<Double> netAmount, OptionalNullable<Double> taxAmount,
            OptionalNullable<String> currencyCode, OptionalNullable<String> invoiceStatus,
            OptionalNullable<String> invoiceDate, OptionalNullable<String> dueDate,
            OptionalNullable<String> vATCountryISOCode) {
        this.documentReference = documentReference;
        this.invoiceNumber = invoiceNumber;
        this.payerName = payerName;
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.documentType = documentType;
        this.grossAmount = grossAmount;
        this.netAmount = netAmount;
        this.taxAmount = taxAmount;
        this.currencyCode = currencyCode;
        this.invoiceStatus = invoiceStatus;
        this.invoiceDate = invoiceDate;
        this.dueDate = dueDate;
        this.vATCountryISOCode = vATCountryISOCode;
    }

    /**
     * Getter for DocumentReference.
     * Unique Invoice Reference id of the invoice for downloading the zip file containing PDF and
     * proofing elements. Example: 123456
     * @return Returns the Integer
     */
    @JsonGetter("DocumentReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDocumentReference() {
        return documentReference;
    }

    /**
     * Setter for DocumentReference.
     * Unique Invoice Reference id of the invoice for downloading the zip file containing PDF and
     * proofing elements. Example: 123456
     * @param documentReference Value for Integer
     */
    @JsonSetter("DocumentReference")
    public void setDocumentReference(Integer documentReference) {
        this.documentReference = documentReference;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Payment customer number. Example: GB000000123
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Payment customer number. Example: GB000000123
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Payment customer number. Example: GB000000123
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Payment customer number. Example: GB000000123
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for PayerName.
     * Customer payer name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Customer payer name
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Customer payer name
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Customer payer name
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number Example: GB99215176
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number Example: GB99215176
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number Example: GB99215176
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number Example: GB99215176
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountName.
     * Invoice account name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Invoice account name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Invoice account name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Invoice account name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for DocumentType.
     * Document type String containing one of the following values: • NAT (National) • INT
     * (International) • SOA (Statement of Account)
     * @return Returns the Internal String
     */
    @JsonGetter("DocumentType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDocumentType() {
        return this.documentType;
    }

    /**
     * Getter for DocumentType.
     * Document type String containing one of the following values: • NAT (National) • INT
     * (International) • SOA (Statement of Account)
     * @return Returns the String
     */
    public String getDocumentType() {
        return OptionalNullable.getFrom(documentType);
    }

    /**
     * Setter for DocumentType.
     * Document type String containing one of the following values: • NAT (National) • INT
     * (International) • SOA (Statement of Account)
     * @param documentType Value for String
     */
    @JsonSetter("DocumentType")
    public void setDocumentType(String documentType) {
        this.documentType = OptionalNullable.of(documentType);
    }

    /**
     * UnSetter for DocumentType.
     * Document type String containing one of the following values: • NAT (National) • INT
     * (International) • SOA (Statement of Account)
     */
    public void unsetDocumentType() {
        documentType = null;
    }

    /**
     * Internal Getter for GrossAmount.
     * Included tax amount in the invoice
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossAmount() {
        return this.grossAmount;
    }

    /**
     * Getter for GrossAmount.
     * Included tax amount in the invoice
     * @return Returns the Double
     */
    public Double getGrossAmount() {
        return OptionalNullable.getFrom(grossAmount);
    }

    /**
     * Setter for GrossAmount.
     * Included tax amount in the invoice
     * @param grossAmount Value for Double
     */
    @JsonSetter("GrossAmount")
    public void setGrossAmount(Double grossAmount) {
        this.grossAmount = OptionalNullable.of(grossAmount);
    }

    /**
     * UnSetter for GrossAmount.
     * Included tax amount in the invoice
     */
    public void unsetGrossAmount() {
        grossAmount = null;
    }

    /**
     * Internal Getter for NetAmount.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetAmount() {
        return this.netAmount;
    }

    /**
     * Getter for NetAmount.
     * @return Returns the Double
     */
    public Double getNetAmount() {
        return OptionalNullable.getFrom(netAmount);
    }

    /**
     * Setter for NetAmount.
     * @param netAmount Value for Double
     */
    @JsonSetter("NetAmount")
    public void setNetAmount(Double netAmount) {
        this.netAmount = OptionalNullable.of(netAmount);
    }

    /**
     * UnSetter for NetAmount.
     */
    public void unsetNetAmount() {
        netAmount = null;
    }

    /**
     * Internal Getter for TaxAmount.
     * @return Returns the Internal Double
     */
    @JsonGetter("TaxAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTaxAmount() {
        return this.taxAmount;
    }

    /**
     * Getter for TaxAmount.
     * @return Returns the Double
     */
    public Double getTaxAmount() {
        return OptionalNullable.getFrom(taxAmount);
    }

    /**
     * Setter for TaxAmount.
     * @param taxAmount Value for Double
     */
    @JsonSetter("TaxAmount")
    public void setTaxAmount(Double taxAmount) {
        this.taxAmount = OptionalNullable.of(taxAmount);
    }

    /**
     * UnSetter for TaxAmount.
     */
    public void unsetTaxAmount() {
        taxAmount = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for InvoiceStatus.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceStatus() {
        return this.invoiceStatus;
    }

    /**
     * Getter for InvoiceStatus.
     * @return Returns the String
     */
    public String getInvoiceStatus() {
        return OptionalNullable.getFrom(invoiceStatus);
    }

    /**
     * Setter for InvoiceStatus.
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
    }

    /**
     * UnSetter for InvoiceStatus.
     */
    public void unsetInvoiceStatus() {
        invoiceStatus = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for DueDate.
     * @return Returns the Internal String
     */
    @JsonGetter("DueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDueDate() {
        return this.dueDate;
    }

    /**
     * Getter for DueDate.
     * @return Returns the String
     */
    public String getDueDate() {
        return OptionalNullable.getFrom(dueDate);
    }

    /**
     * Setter for DueDate.
     * @param dueDate Value for String
     */
    @JsonSetter("DueDate")
    public void setDueDate(String dueDate) {
        this.dueDate = OptionalNullable.of(dueDate);
    }

    /**
     * UnSetter for DueDate.
     */
    public void unsetDueDate() {
        dueDate = null;
    }

    /**
     * Internal Getter for VATCountryISOCode.
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountryISOCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountryISOCode() {
        return this.vATCountryISOCode;
    }

    /**
     * Getter for VATCountryISOCode.
     * @return Returns the String
     */
    public String getVATCountryISOCode() {
        return OptionalNullable.getFrom(vATCountryISOCode);
    }

    /**
     * Setter for VATCountryISOCode.
     * @param vATCountryISOCode Value for String
     */
    @JsonSetter("VATCountryISOCode")
    public void setVATCountryISOCode(String vATCountryISOCode) {
        this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
    }

    /**
     * UnSetter for VATCountryISOCode.
     */
    public void unsetVATCountryISOCode() {
        vATCountryISOCode = null;
    }

    /**
     * Converts this SearchDocumentsInvoice into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SearchDocumentsInvoice [" + "documentReference=" + documentReference
                + ", invoiceNumber=" + invoiceNumber + ", payerName=" + payerName
                + ", accountNumber=" + accountNumber + ", accountName=" + accountName
                + ", documentType=" + documentType + ", grossAmount=" + grossAmount + ", netAmount="
                + netAmount + ", taxAmount=" + taxAmount + ", currencyCode=" + currencyCode
                + ", invoiceStatus=" + invoiceStatus + ", invoiceDate=" + invoiceDate + ", dueDate="
                + dueDate + ", vATCountryISOCode=" + vATCountryISOCode + "]";
    }

    /**
     * Builds a new {@link SearchDocumentsInvoice.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SearchDocumentsInvoice.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .documentReference(getDocumentReference());
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.payerName = internalGetPayerName();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountName = internalGetAccountName();
        builder.documentType = internalGetDocumentType();
        builder.grossAmount = internalGetGrossAmount();
        builder.netAmount = internalGetNetAmount();
        builder.taxAmount = internalGetTaxAmount();
        builder.currencyCode = internalGetCurrencyCode();
        builder.invoiceStatus = internalGetInvoiceStatus();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.dueDate = internalGetDueDate();
        builder.vATCountryISOCode = internalGetVATCountryISOCode();
        return builder;
    }

    /**
     * Class to build instances of {@link SearchDocumentsInvoice}.
     */
    public static class Builder {
        private Integer documentReference;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> documentType;
        private OptionalNullable<Double> grossAmount;
        private OptionalNullable<Double> netAmount;
        private OptionalNullable<Double> taxAmount;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> invoiceStatus;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> dueDate;
        private OptionalNullable<String> vATCountryISOCode;



        /**
         * Setter for documentReference.
         * @param  documentReference  Integer value for documentReference.
         * @return Builder
         */
        public Builder documentReference(Integer documentReference) {
            this.documentReference = documentReference;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for documentType.
         * @param  documentType  String value for documentType.
         * @return Builder
         */
        public Builder documentType(String documentType) {
            this.documentType = OptionalNullable.of(documentType);
            return this;
        }

        /**
         * UnSetter for documentType.
         * @return Builder
         */
        public Builder unsetDocumentType() {
            documentType = null;
            return this;
        }

        /**
         * Setter for grossAmount.
         * @param  grossAmount  Double value for grossAmount.
         * @return Builder
         */
        public Builder grossAmount(Double grossAmount) {
            this.grossAmount = OptionalNullable.of(grossAmount);
            return this;
        }

        /**
         * UnSetter for grossAmount.
         * @return Builder
         */
        public Builder unsetGrossAmount() {
            grossAmount = null;
            return this;
        }

        /**
         * Setter for netAmount.
         * @param  netAmount  Double value for netAmount.
         * @return Builder
         */
        public Builder netAmount(Double netAmount) {
            this.netAmount = OptionalNullable.of(netAmount);
            return this;
        }

        /**
         * UnSetter for netAmount.
         * @return Builder
         */
        public Builder unsetNetAmount() {
            netAmount = null;
            return this;
        }

        /**
         * Setter for taxAmount.
         * @param  taxAmount  Double value for taxAmount.
         * @return Builder
         */
        public Builder taxAmount(Double taxAmount) {
            this.taxAmount = OptionalNullable.of(taxAmount);
            return this;
        }

        /**
         * UnSetter for taxAmount.
         * @return Builder
         */
        public Builder unsetTaxAmount() {
            taxAmount = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = OptionalNullable.of(invoiceStatus);
            return this;
        }

        /**
         * UnSetter for invoiceStatus.
         * @return Builder
         */
        public Builder unsetInvoiceStatus() {
            invoiceStatus = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for dueDate.
         * @param  dueDate  String value for dueDate.
         * @return Builder
         */
        public Builder dueDate(String dueDate) {
            this.dueDate = OptionalNullable.of(dueDate);
            return this;
        }

        /**
         * UnSetter for dueDate.
         * @return Builder
         */
        public Builder unsetDueDate() {
            dueDate = null;
            return this;
        }

        /**
         * Setter for vATCountryISOCode.
         * @param  vATCountryISOCode  String value for vATCountryISOCode.
         * @return Builder
         */
        public Builder vATCountryISOCode(String vATCountryISOCode) {
            this.vATCountryISOCode = OptionalNullable.of(vATCountryISOCode);
            return this;
        }

        /**
         * UnSetter for vATCountryISOCode.
         * @return Builder
         */
        public Builder unsetVATCountryISOCode() {
            vATCountryISOCode = null;
            return this;
        }

        /**
         * Builds a new {@link SearchDocumentsInvoice} object using the set fields.
         * @return {@link SearchDocumentsInvoice}
         */
        public SearchDocumentsInvoice build() {
            return new SearchDocumentsInvoice(documentReference, invoiceNumber, payerName,
                    accountNumber, accountName, documentType, grossAmount, netAmount, taxAmount,
                    currencyCode, invoiceStatus, invoiceDate, dueDate, vATCountryISOCode);
        }
    }
}
