/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for PastStatementOfAccounts type.
 */
public class PastStatementOfAccounts {
    private OptionalNullable<Double> amountDue;
    private OptionalNullable<Double> amountNotOverdue;
    private OptionalNullable<Double> amountOverdue;
    private OptionalNullable<Double> amountOverdueFromUnallocated;
    private OptionalNullable<Double> amountPaid;
    private OptionalNullable<Double> balanceOnThisStatement;
    private OptionalNullable<String> billingCurrencyCode;
    private OptionalNullable<String> billingCurrencySymbol;
    private OptionalNullable<Double> creditLimit;
    private OptionalNullable<String> creditLimitCurrencyCode;
    private OptionalNullable<String> creditLimitCurrencySymbol;
    private OptionalNullable<Double> creditLimitInCustomerCurrency;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Boolean> fullyPaid;
    private OptionalNullable<String> lastPaymentCurrencyCode;
    private OptionalNullable<String> lastPaymentCurrencySymbol;
    private OptionalNullable<String> lastPaymentDate;
    private OptionalNullable<Double> lastPaymentValue;
    private OptionalNullable<Double> outstandingBalance;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> paymentDueDate;
    private OptionalNullable<String> soAReferenceNumber;
    private OptionalNullable<String> statementDate;
    private OptionalNullable<Integer> statementOfAccountId;
    private OptionalNullable<Integer> totalBillingDocuments;
    private OptionalNullable<Double> totalNetAmountBillingCurrency;
    private OptionalNullable<Double> totalSummaryBillingDocuments;
    private OptionalNullable<Double> totalVATAmountBillingCurrency;
    private OptionalNullable<Double> unallocatedPayment;
    private OptionalNullable<String> localCurrencyCode;
    private OptionalNullable<String> localCurrencySymbol;
    private OptionalNullable<Double> localCurrencyExchangeRate;

    /**
     * Default constructor.
     */
    public PastStatementOfAccounts() {
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountOverdueFromUnallocated  Double value for amountOverdueFromUnallocated.
     * @param  amountPaid  Double value for amountPaid.
     * @param  balanceOnThisStatement  Double value for balanceOnThisStatement.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  creditLimit  Double value for creditLimit.
     * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
     * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  fullyPaid  Boolean value for fullyPaid.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  lastPaymentValue  Double value for lastPaymentValue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
     * @param  totalSummaryBillingDocuments  Double value for totalSummaryBillingDocuments.
     * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
     * @param  unallocatedPayment  Double value for unallocatedPayment.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
     */
    public PastStatementOfAccounts(
            Double amountDue,
            Double amountNotOverdue,
            Double amountOverdue,
            Double amountOverdueFromUnallocated,
            Double amountPaid,
            Double balanceOnThisStatement,
            String billingCurrencyCode,
            String billingCurrencySymbol,
            Double creditLimit,
            String creditLimitCurrencyCode,
            String creditLimitCurrencySymbol,
            Double creditLimitInCustomerCurrency,
            String currencyCode,
            String currencySymbol,
            Boolean fullyPaid,
            String lastPaymentCurrencyCode,
            String lastPaymentCurrencySymbol,
            String lastPaymentDate,
            Double lastPaymentValue,
            Double outstandingBalance,
            Integer payerId,
            String payerNumber,
            String paymentDueDate,
            String soAReferenceNumber,
            String statementDate,
            Integer statementOfAccountId,
            Integer totalBillingDocuments,
            Double totalNetAmountBillingCurrency,
            Double totalSummaryBillingDocuments,
            Double totalVATAmountBillingCurrency,
            Double unallocatedPayment,
            String localCurrencyCode,
            String localCurrencySymbol,
            Double localCurrencyExchangeRate) {
        this.amountDue = OptionalNullable.of(amountDue);
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
        this.amountOverdue = OptionalNullable.of(amountOverdue);
        this.amountOverdueFromUnallocated = OptionalNullable.of(amountOverdueFromUnallocated);
        this.amountPaid = OptionalNullable.of(amountPaid);
        this.balanceOnThisStatement = OptionalNullable.of(balanceOnThisStatement);
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
        this.creditLimit = OptionalNullable.of(creditLimit);
        this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
        this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.fullyPaid = OptionalNullable.of(fullyPaid);
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
        this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
        this.statementDate = OptionalNullable.of(statementDate);
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
        this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
        this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
        this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountOverdueFromUnallocated  Double value for amountOverdueFromUnallocated.
     * @param  amountPaid  Double value for amountPaid.
     * @param  balanceOnThisStatement  Double value for balanceOnThisStatement.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  creditLimit  Double value for creditLimit.
     * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
     * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  fullyPaid  Boolean value for fullyPaid.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  lastPaymentValue  Double value for lastPaymentValue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
     * @param  totalSummaryBillingDocuments  Double value for totalSummaryBillingDocuments.
     * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
     * @param  unallocatedPayment  Double value for unallocatedPayment.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
     */

    protected PastStatementOfAccounts(OptionalNullable<Double> amountDue,
            OptionalNullable<Double> amountNotOverdue, OptionalNullable<Double> amountOverdue,
            OptionalNullable<Double> amountOverdueFromUnallocated,
            OptionalNullable<Double> amountPaid, OptionalNullable<Double> balanceOnThisStatement,
            OptionalNullable<String> billingCurrencyCode,
            OptionalNullable<String> billingCurrencySymbol, OptionalNullable<Double> creditLimit,
            OptionalNullable<String> creditLimitCurrencyCode,
            OptionalNullable<String> creditLimitCurrencySymbol,
            OptionalNullable<Double> creditLimitInCustomerCurrency,
            OptionalNullable<String> currencyCode, OptionalNullable<String> currencySymbol,
            OptionalNullable<Boolean> fullyPaid, OptionalNullable<String> lastPaymentCurrencyCode,
            OptionalNullable<String> lastPaymentCurrencySymbol,
            OptionalNullable<String> lastPaymentDate, OptionalNullable<Double> lastPaymentValue,
            OptionalNullable<Double> outstandingBalance, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, OptionalNullable<String> paymentDueDate,
            OptionalNullable<String> soAReferenceNumber, OptionalNullable<String> statementDate,
            OptionalNullable<Integer> statementOfAccountId,
            OptionalNullable<Integer> totalBillingDocuments,
            OptionalNullable<Double> totalNetAmountBillingCurrency,
            OptionalNullable<Double> totalSummaryBillingDocuments,
            OptionalNullable<Double> totalVATAmountBillingCurrency,
            OptionalNullable<Double> unallocatedPayment, OptionalNullable<String> localCurrencyCode,
            OptionalNullable<String> localCurrencySymbol,
            OptionalNullable<Double> localCurrencyExchangeRate) {
        this.amountDue = amountDue;
        this.amountNotOverdue = amountNotOverdue;
        this.amountOverdue = amountOverdue;
        this.amountOverdueFromUnallocated = amountOverdueFromUnallocated;
        this.amountPaid = amountPaid;
        this.balanceOnThisStatement = balanceOnThisStatement;
        this.billingCurrencyCode = billingCurrencyCode;
        this.billingCurrencySymbol = billingCurrencySymbol;
        this.creditLimit = creditLimit;
        this.creditLimitCurrencyCode = creditLimitCurrencyCode;
        this.creditLimitCurrencySymbol = creditLimitCurrencySymbol;
        this.creditLimitInCustomerCurrency = creditLimitInCustomerCurrency;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.fullyPaid = fullyPaid;
        this.lastPaymentCurrencyCode = lastPaymentCurrencyCode;
        this.lastPaymentCurrencySymbol = lastPaymentCurrencySymbol;
        this.lastPaymentDate = lastPaymentDate;
        this.lastPaymentValue = lastPaymentValue;
        this.outstandingBalance = outstandingBalance;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.paymentDueDate = paymentDueDate;
        this.soAReferenceNumber = soAReferenceNumber;
        this.statementDate = statementDate;
        this.statementOfAccountId = statementOfAccountId;
        this.totalBillingDocuments = totalBillingDocuments;
        this.totalNetAmountBillingCurrency = totalNetAmountBillingCurrency;
        this.totalSummaryBillingDocuments = totalSummaryBillingDocuments;
        this.totalVATAmountBillingCurrency = totalVATAmountBillingCurrency;
        this.unallocatedPayment = unallocatedPayment;
        this.localCurrencyCode = localCurrencyCode;
        this.localCurrencySymbol = localCurrencySymbol;
        this.localCurrencyExchangeRate = localCurrencyExchangeRate;
    }

    /**
     * Internal Getter for AmountDue.
     * Invoiced amount under this statement of account and due for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountDue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountDue() {
        return this.amountDue;
    }

    /**
     * Getter for AmountDue.
     * Invoiced amount under this statement of account and due for payment.
     * @return Returns the Double
     */
    public Double getAmountDue() {
        return OptionalNullable.getFrom(amountDue);
    }

    /**
     * Setter for AmountDue.
     * Invoiced amount under this statement of account and due for payment.
     * @param amountDue Value for Double
     */
    @JsonSetter("AmountDue")
    public void setAmountDue(Double amountDue) {
        this.amountDue = OptionalNullable.of(amountDue);
    }

    /**
     * UnSetter for AmountDue.
     * Invoiced amount under this statement of account and due for payment.
     */
    public void unsetAmountDue() {
        amountDue = null;
    }

    /**
     * Internal Getter for AmountNotOverdue.
     * Total Invoiced amount until this SOA and not overdue for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountNotOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountNotOverdue() {
        return this.amountNotOverdue;
    }

    /**
     * Getter for AmountNotOverdue.
     * Total Invoiced amount until this SOA and not overdue for payment.
     * @return Returns the Double
     */
    public Double getAmountNotOverdue() {
        return OptionalNullable.getFrom(amountNotOverdue);
    }

    /**
     * Setter for AmountNotOverdue.
     * Total Invoiced amount until this SOA and not overdue for payment.
     * @param amountNotOverdue Value for Double
     */
    @JsonSetter("AmountNotOverdue")
    public void setAmountNotOverdue(Double amountNotOverdue) {
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
    }

    /**
     * UnSetter for AmountNotOverdue.
     * Total Invoiced amount until this SOA and not overdue for payment.
     */
    public void unsetAmountNotOverdue() {
        amountNotOverdue = null;
    }

    /**
     * Internal Getter for AmountOverdue.
     * Overdue amount from the previously generated statement of accounts.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdue() {
        return this.amountOverdue;
    }

    /**
     * Getter for AmountOverdue.
     * Overdue amount from the previously generated statement of accounts.
     * @return Returns the Double
     */
    public Double getAmountOverdue() {
        return OptionalNullable.getFrom(amountOverdue);
    }

    /**
     * Setter for AmountOverdue.
     * Overdue amount from the previously generated statement of accounts.
     * @param amountOverdue Value for Double
     */
    @JsonSetter("AmountOverdue")
    public void setAmountOverdue(Double amountOverdue) {
        this.amountOverdue = OptionalNullable.of(amountOverdue);
    }

    /**
     * UnSetter for AmountOverdue.
     * Overdue amount from the previously generated statement of accounts.
     */
    public void unsetAmountOverdue() {
        amountOverdue = null;
    }

    /**
     * Internal Getter for AmountOverdueFromUnallocated.
     * Overdue amount calculated from unallocated payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdueFromUnallocated")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdueFromUnallocated() {
        return this.amountOverdueFromUnallocated;
    }

    /**
     * Getter for AmountOverdueFromUnallocated.
     * Overdue amount calculated from unallocated payment.
     * @return Returns the Double
     */
    public Double getAmountOverdueFromUnallocated() {
        return OptionalNullable.getFrom(amountOverdueFromUnallocated);
    }

    /**
     * Setter for AmountOverdueFromUnallocated.
     * Overdue amount calculated from unallocated payment.
     * @param amountOverdueFromUnallocated Value for Double
     */
    @JsonSetter("AmountOverdueFromUnallocated")
    public void setAmountOverdueFromUnallocated(Double amountOverdueFromUnallocated) {
        this.amountOverdueFromUnallocated = OptionalNullable.of(amountOverdueFromUnallocated);
    }

    /**
     * UnSetter for AmountOverdueFromUnallocated.
     * Overdue amount calculated from unallocated payment.
     */
    public void unsetAmountOverdueFromUnallocated() {
        amountOverdueFromUnallocated = null;
    }

    /**
     * Internal Getter for AmountPaid.
     * Amount settled for this Statement.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountPaid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountPaid() {
        return this.amountPaid;
    }

    /**
     * Getter for AmountPaid.
     * Amount settled for this Statement.
     * @return Returns the Double
     */
    public Double getAmountPaid() {
        return OptionalNullable.getFrom(amountPaid);
    }

    /**
     * Setter for AmountPaid.
     * Amount settled for this Statement.
     * @param amountPaid Value for Double
     */
    @JsonSetter("AmountPaid")
    public void setAmountPaid(Double amountPaid) {
        this.amountPaid = OptionalNullable.of(amountPaid);
    }

    /**
     * UnSetter for AmountPaid.
     * Amount settled for this Statement.
     */
    public void unsetAmountPaid() {
        amountPaid = null;
    }

    /**
     * Internal Getter for BalanceOnThisStatement.
     * Balance amount to be settled on this SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("BalanceOnThisStatement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetBalanceOnThisStatement() {
        return this.balanceOnThisStatement;
    }

    /**
     * Getter for BalanceOnThisStatement.
     * Balance amount to be settled on this SOA.
     * @return Returns the Double
     */
    public Double getBalanceOnThisStatement() {
        return OptionalNullable.getFrom(balanceOnThisStatement);
    }

    /**
     * Setter for BalanceOnThisStatement.
     * Balance amount to be settled on this SOA.
     * @param balanceOnThisStatement Value for Double
     */
    @JsonSetter("BalanceOnThisStatement")
    public void setBalanceOnThisStatement(Double balanceOnThisStatement) {
        this.balanceOnThisStatement = OptionalNullable.of(balanceOnThisStatement);
    }

    /**
     * UnSetter for BalanceOnThisStatement.
     * Balance amount to be settled on this SOA.
     */
    public void unsetBalanceOnThisStatement() {
        balanceOnThisStatement = null;
    }

    /**
     * Internal Getter for BillingCurrencyCode.
     * Billing currency ISO code. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencyCode() {
        return this.billingCurrencyCode;
    }

    /**
     * Getter for BillingCurrencyCode.
     * Billing currency ISO code. Example: EUR
     * @return Returns the String
     */
    public String getBillingCurrencyCode() {
        return OptionalNullable.getFrom(billingCurrencyCode);
    }

    /**
     * Setter for BillingCurrencyCode.
     * Billing currency ISO code. Example: EUR
     * @param billingCurrencyCode Value for String
     */
    @JsonSetter("BillingCurrencyCode")
    public void setBillingCurrencyCode(String billingCurrencyCode) {
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
    }

    /**
     * UnSetter for BillingCurrencyCode.
     * Billing currency ISO code. Example: EUR
     */
    public void unsetBillingCurrencyCode() {
        billingCurrencyCode = null;
    }

    /**
     * Internal Getter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencySymbol() {
        return this.billingCurrencySymbol;
    }

    /**
     * Getter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @return Returns the String
     */
    public String getBillingCurrencySymbol() {
        return OptionalNullable.getFrom(billingCurrencySymbol);
    }

    /**
     * Setter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @param billingCurrencySymbol Value for String
     */
    @JsonSetter("BillingCurrencySymbol")
    public void setBillingCurrencySymbol(String billingCurrencySymbol) {
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
    }

    /**
     * UnSetter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     */
    public void unsetBillingCurrencySymbol() {
        billingCurrencySymbol = null;
    }

    /**
     * Internal Getter for CreditLimit.
     * Credit limit.
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimit() {
        return this.creditLimit;
    }

    /**
     * Getter for CreditLimit.
     * Credit limit.
     * @return Returns the Double
     */
    public Double getCreditLimit() {
        return OptionalNullable.getFrom(creditLimit);
    }

    /**
     * Setter for CreditLimit.
     * Credit limit.
     * @param creditLimit Value for Double
     */
    @JsonSetter("CreditLimit")
    public void setCreditLimit(Double creditLimit) {
        this.creditLimit = OptionalNullable.of(creditLimit);
    }

    /**
     * UnSetter for CreditLimit.
     * Credit limit.
     */
    public void unsetCreditLimit() {
        creditLimit = null;
    }

    /**
     * Internal Getter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CreditLimitCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditLimitCurrencyCode() {
        return this.creditLimitCurrencyCode;
    }

    /**
     * Getter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @return Returns the String
     */
    public String getCreditLimitCurrencyCode() {
        return OptionalNullable.getFrom(creditLimitCurrencyCode);
    }

    /**
     * Setter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @param creditLimitCurrencyCode Value for String
     */
    @JsonSetter("CreditLimitCurrencyCode")
    public void setCreditLimitCurrencyCode(String creditLimitCurrencyCode) {
        this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
    }

    /**
     * UnSetter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     */
    public void unsetCreditLimitCurrencyCode() {
        creditLimitCurrencyCode = null;
    }

    /**
     * Internal Getter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CreditLimitCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditLimitCurrencySymbol() {
        return this.creditLimitCurrencySymbol;
    }

    /**
     * Getter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @return Returns the String
     */
    public String getCreditLimitCurrencySymbol() {
        return OptionalNullable.getFrom(creditLimitCurrencySymbol);
    }

    /**
     * Setter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @param creditLimitCurrencySymbol Value for String
     */
    @JsonSetter("CreditLimitCurrencySymbol")
    public void setCreditLimitCurrencySymbol(String creditLimitCurrencySymbol) {
        this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
    }

    /**
     * UnSetter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     */
    public void unsetCreditLimitCurrencySymbol() {
        creditLimitCurrencySymbol = null;
    }

    /**
     * Internal Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the SOADetail response.
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimitInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimitInCustomerCurrency() {
        return this.creditLimitInCustomerCurrency;
    }

    /**
     * Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the SOADetail response.
     * @return Returns the Double
     */
    public Double getCreditLimitInCustomerCurrency() {
        return OptionalNullable.getFrom(creditLimitInCustomerCurrency);
    }

    /**
     * Setter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the SOADetail response.
     * @param creditLimitInCustomerCurrency Value for Double
     */
    @JsonSetter("CreditLimitInCustomerCurrency")
    public void setCreditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
    }

    /**
     * UnSetter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. Note: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the SOADetail response.
     */
    public void unsetCreditLimitInCustomerCurrency() {
        creditLimitInCustomerCurrency = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for FullyPaid.
     * True If all summary billing documents under this SOA are fully paid (i.e., the fully paid
     * flag is set to true for all documents or the amount allocated is greater than or equal to the
     * amount due under this SOA.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FullyPaid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFullyPaid() {
        return this.fullyPaid;
    }

    /**
     * Getter for FullyPaid.
     * True If all summary billing documents under this SOA are fully paid (i.e., the fully paid
     * flag is set to true for all documents or the amount allocated is greater than or equal to the
     * amount due under this SOA.
     * @return Returns the Boolean
     */
    public Boolean getFullyPaid() {
        return OptionalNullable.getFrom(fullyPaid);
    }

    /**
     * Setter for FullyPaid.
     * True If all summary billing documents under this SOA are fully paid (i.e., the fully paid
     * flag is set to true for all documents or the amount allocated is greater than or equal to the
     * amount due under this SOA.
     * @param fullyPaid Value for Boolean
     */
    @JsonSetter("FullyPaid")
    public void setFullyPaid(Boolean fullyPaid) {
        this.fullyPaid = OptionalNullable.of(fullyPaid);
    }

    /**
     * UnSetter for FullyPaid.
     * True If all summary billing documents under this SOA are fully paid (i.e., the fully paid
     * flag is set to true for all documents or the amount allocated is greater than or equal to the
     * amount due under this SOA.
     */
    public void unsetFullyPaid() {
        fullyPaid = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencyCode.
     * ISO code of last payment currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencyCode() {
        return this.lastPaymentCurrencyCode;
    }

    /**
     * Getter for LastPaymentCurrencyCode.
     * ISO code of last payment currency. Example: EUR
     * @return Returns the String
     */
    public String getLastPaymentCurrencyCode() {
        return OptionalNullable.getFrom(lastPaymentCurrencyCode);
    }

    /**
     * Setter for LastPaymentCurrencyCode.
     * ISO code of last payment currency. Example: EUR
     * @param lastPaymentCurrencyCode Value for String
     */
    @JsonSetter("LastPaymentCurrencyCode")
    public void setLastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
    }

    /**
     * UnSetter for LastPaymentCurrencyCode.
     * ISO code of last payment currency. Example: EUR
     */
    public void unsetLastPaymentCurrencyCode() {
        lastPaymentCurrencyCode = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencySymbol.
     * Symbol of last payment currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencySymbol() {
        return this.lastPaymentCurrencySymbol;
    }

    /**
     * Getter for LastPaymentCurrencySymbol.
     * Symbol of last payment currency. Example: €
     * @return Returns the String
     */
    public String getLastPaymentCurrencySymbol() {
        return OptionalNullable.getFrom(lastPaymentCurrencySymbol);
    }

    /**
     * Setter for LastPaymentCurrencySymbol.
     * Symbol of last payment currency. Example: €
     * @param lastPaymentCurrencySymbol Value for String
     */
    @JsonSetter("LastPaymentCurrencySymbol")
    public void setLastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
    }

    /**
     * UnSetter for LastPaymentCurrencySymbol.
     * Symbol of last payment currency. Example: €
     */
    public void unsetLastPaymentCurrencySymbol() {
        lastPaymentCurrencySymbol = null;
    }

    /**
     * Internal Getter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentDate() {
        return this.lastPaymentDate;
    }

    /**
     * Getter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getLastPaymentDate() {
        return OptionalNullable.getFrom(lastPaymentDate);
    }

    /**
     * Setter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @param lastPaymentDate Value for String
     */
    @JsonSetter("LastPaymentDate")
    public void setLastPaymentDate(String lastPaymentDate) {
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
    }

    /**
     * UnSetter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     */
    public void unsetLastPaymentDate() {
        lastPaymentDate = null;
    }

    /**
     * Internal Getter for LastPaymentValue.
     * Last payment value.
     * @return Returns the Internal Double
     */
    @JsonGetter("LastPaymentValue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLastPaymentValue() {
        return this.lastPaymentValue;
    }

    /**
     * Getter for LastPaymentValue.
     * Last payment value.
     * @return Returns the Double
     */
    public Double getLastPaymentValue() {
        return OptionalNullable.getFrom(lastPaymentValue);
    }

    /**
     * Setter for LastPaymentValue.
     * Last payment value.
     * @param lastPaymentValue Value for Double
     */
    @JsonSetter("LastPaymentValue")
    public void setLastPaymentValue(Double lastPaymentValue) {
        this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
    }

    /**
     * UnSetter for LastPaymentValue.
     * Last payment value.
     */
    public void unsetLastPaymentValue() {
        lastPaymentValue = null;
    }

    /**
     * Internal Getter for OutstandingBalance.
     * Total outstanding balance at the time of this SOA generation.
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingBalance() {
        return this.outstandingBalance;
    }

    /**
     * Getter for OutstandingBalance.
     * Total outstanding balance at the time of this SOA generation.
     * @return Returns the Double
     */
    public Double getOutstandingBalance() {
        return OptionalNullable.getFrom(outstandingBalance);
    }

    /**
     * Setter for OutstandingBalance.
     * Total outstanding balance at the time of this SOA generation.
     * @param outstandingBalance Value for Double
     */
    @JsonSetter("OutstandingBalance")
    public void setOutstandingBalance(Double outstandingBalance) {
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
    }

    /**
     * UnSetter for OutstandingBalance.
     * Total outstanding balance at the time of this SOA generation.
     */
    public void unsetOutstandingBalance() {
        outstandingBalance = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payment customer id of the customer.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payment customer id of the customer.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentDueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentDueDate() {
        return this.paymentDueDate;
    }

    /**
     * Getter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getPaymentDueDate() {
        return OptionalNullable.getFrom(paymentDueDate);
    }

    /**
     * Setter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @param paymentDueDate Value for String
     */
    @JsonSetter("PaymentDueDate")
    public void setPaymentDueDate(String paymentDueDate) {
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
    }

    /**
     * UnSetter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     */
    public void unsetPaymentDueDate() {
        paymentDueDate = null;
    }

    /**
     * Internal Getter for SoAReferenceNumber.
     * Statement of account reference number.
     * @return Returns the Internal String
     */
    @JsonGetter("SoAReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSoAReferenceNumber() {
        return this.soAReferenceNumber;
    }

    /**
     * Getter for SoAReferenceNumber.
     * Statement of account reference number.
     * @return Returns the String
     */
    public String getSoAReferenceNumber() {
        return OptionalNullable.getFrom(soAReferenceNumber);
    }

    /**
     * Setter for SoAReferenceNumber.
     * Statement of account reference number.
     * @param soAReferenceNumber Value for String
     */
    @JsonSetter("SoAReferenceNumber")
    public void setSoAReferenceNumber(String soAReferenceNumber) {
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
    }

    /**
     * UnSetter for SoAReferenceNumber.
     * Statement of account reference number.
     */
    public void unsetSoAReferenceNumber() {
        soAReferenceNumber = null;
    }

    /**
     * Internal Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("StatementDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDate() {
        return this.statementDate;
    }

    /**
     * Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getStatementDate() {
        return OptionalNullable.getFrom(statementDate);
    }

    /**
     * Setter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @param statementDate Value for String
     */
    @JsonSetter("StatementDate")
    public void setStatementDate(String statementDate) {
        this.statementDate = OptionalNullable.of(statementDate);
    }

    /**
     * UnSetter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     */
    public void unsetStatementDate() {
        statementDate = null;
    }

    /**
     * Internal Getter for StatementOfAccountId.
     * Statement of account identifier,
     * @return Returns the Internal Integer
     */
    @JsonGetter("StatementOfAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetStatementOfAccountId() {
        return this.statementOfAccountId;
    }

    /**
     * Getter for StatementOfAccountId.
     * Statement of account identifier,
     * @return Returns the Integer
     */
    public Integer getStatementOfAccountId() {
        return OptionalNullable.getFrom(statementOfAccountId);
    }

    /**
     * Setter for StatementOfAccountId.
     * Statement of account identifier,
     * @param statementOfAccountId Value for Integer
     */
    @JsonSetter("StatementOfAccountId")
    public void setStatementOfAccountId(Integer statementOfAccountId) {
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
    }

    /**
     * UnSetter for StatementOfAccountId.
     * Statement of account identifier,
     */
    public void unsetStatementOfAccountId() {
        statementOfAccountId = null;
    }

    /**
     * Internal Getter for TotalBillingDocuments.
     * Total number of billing documents generated under this Statement of Account.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBillingDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBillingDocuments() {
        return this.totalBillingDocuments;
    }

    /**
     * Getter for TotalBillingDocuments.
     * Total number of billing documents generated under this Statement of Account.
     * @return Returns the Integer
     */
    public Integer getTotalBillingDocuments() {
        return OptionalNullable.getFrom(totalBillingDocuments);
    }

    /**
     * Setter for TotalBillingDocuments.
     * Total number of billing documents generated under this Statement of Account.
     * @param totalBillingDocuments Value for Integer
     */
    @JsonSetter("TotalBillingDocuments")
    public void setTotalBillingDocuments(Integer totalBillingDocuments) {
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
    }

    /**
     * UnSetter for TotalBillingDocuments.
     * Total number of billing documents generated under this Statement of Account.
     */
    public void unsetTotalBillingDocuments() {
        totalBillingDocuments = null;
    }

    /**
     * Internal Getter for TotalNetAmountBillingCurrency.
     * Total NET amount from all billing documents in this SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalNetAmountBillingCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalNetAmountBillingCurrency() {
        return this.totalNetAmountBillingCurrency;
    }

    /**
     * Getter for TotalNetAmountBillingCurrency.
     * Total NET amount from all billing documents in this SOA.
     * @return Returns the Double
     */
    public Double getTotalNetAmountBillingCurrency() {
        return OptionalNullable.getFrom(totalNetAmountBillingCurrency);
    }

    /**
     * Setter for TotalNetAmountBillingCurrency.
     * Total NET amount from all billing documents in this SOA.
     * @param totalNetAmountBillingCurrency Value for Double
     */
    @JsonSetter("TotalNetAmountBillingCurrency")
    public void setTotalNetAmountBillingCurrency(Double totalNetAmountBillingCurrency) {
        this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
    }

    /**
     * UnSetter for TotalNetAmountBillingCurrency.
     * Total NET amount from all billing documents in this SOA.
     */
    public void unsetTotalNetAmountBillingCurrency() {
        totalNetAmountBillingCurrency = null;
    }

    /**
     * Internal Getter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalSummaryBillingDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalSummaryBillingDocuments() {
        return this.totalSummaryBillingDocuments;
    }

    /**
     * Getter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @return Returns the Double
     */
    public Double getTotalSummaryBillingDocuments() {
        return OptionalNullable.getFrom(totalSummaryBillingDocuments);
    }

    /**
     * Setter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @param totalSummaryBillingDocuments Value for Double
     */
    @JsonSetter("TotalSummaryBillingDocuments")
    public void setTotalSummaryBillingDocuments(Double totalSummaryBillingDocuments) {
        this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
    }

    /**
     * UnSetter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     */
    public void unsetTotalSummaryBillingDocuments() {
        totalSummaryBillingDocuments = null;
    }

    /**
     * Internal Getter for TotalVATAmountBillingCurrency.
     * Total VAT amount from all billing documents in this SOA.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVATAmountBillingCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVATAmountBillingCurrency() {
        return this.totalVATAmountBillingCurrency;
    }

    /**
     * Getter for TotalVATAmountBillingCurrency.
     * Total VAT amount from all billing documents in this SOA.
     * @return Returns the Double
     */
    public Double getTotalVATAmountBillingCurrency() {
        return OptionalNullable.getFrom(totalVATAmountBillingCurrency);
    }

    /**
     * Setter for TotalVATAmountBillingCurrency.
     * Total VAT amount from all billing documents in this SOA.
     * @param totalVATAmountBillingCurrency Value for Double
     */
    @JsonSetter("TotalVATAmountBillingCurrency")
    public void setTotalVATAmountBillingCurrency(Double totalVATAmountBillingCurrency) {
        this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
    }

    /**
     * UnSetter for TotalVATAmountBillingCurrency.
     * Total VAT amount from all billing documents in this SOA.
     */
    public void unsetTotalVATAmountBillingCurrency() {
        totalVATAmountBillingCurrency = null;
    }

    /**
     * Internal Getter for UnallocatedPayment.
     * Amount paid but not allocated to any invoices at the time of this SOA generation.
     * @return Returns the Internal Double
     */
    @JsonGetter("UnallocatedPayment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnallocatedPayment() {
        return this.unallocatedPayment;
    }

    /**
     * Getter for UnallocatedPayment.
     * Amount paid but not allocated to any invoices at the time of this SOA generation.
     * @return Returns the Double
     */
    public Double getUnallocatedPayment() {
        return OptionalNullable.getFrom(unallocatedPayment);
    }

    /**
     * Setter for UnallocatedPayment.
     * Amount paid but not allocated to any invoices at the time of this SOA generation.
     * @param unallocatedPayment Value for Double
     */
    @JsonSetter("UnallocatedPayment")
    public void setUnallocatedPayment(Double unallocatedPayment) {
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
    }

    /**
     * UnSetter for UnallocatedPayment.
     * Amount paid but not allocated to any invoices at the time of this SOA generation.
     */
    public void unsetUnallocatedPayment() {
        unallocatedPayment = null;
    }

    /**
     * Internal Getter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyCode() {
        return this.localCurrencyCode;
    }

    /**
     * Getter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @return Returns the String
     */
    public String getLocalCurrencyCode() {
        return OptionalNullable.getFrom(localCurrencyCode);
    }

    /**
     * Setter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @param localCurrencyCode Value for String
     */
    @JsonSetter("LocalCurrencyCode")
    public void setLocalCurrencyCode(String localCurrencyCode) {
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
    }

    /**
     * UnSetter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     */
    public void unsetLocalCurrencyCode() {
        localCurrencyCode = null;
    }

    /**
     * Internal Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencySymbol() {
        return this.localCurrencySymbol;
    }

    /**
     * Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @return Returns the String
     */
    public String getLocalCurrencySymbol() {
        return OptionalNullable.getFrom(localCurrencySymbol);
    }

    /**
     * Setter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @param localCurrencySymbol Value for String
     */
    @JsonSetter("LocalCurrencySymbol")
    public void setLocalCurrencySymbol(String localCurrencySymbol) {
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
    }

    /**
     * UnSetter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     */
    public void unsetLocalCurrencySymbol() {
        localCurrencySymbol = null;
    }

    /**
     * Internal Getter for LocalCurrencyExchangeRate.
     * Exchange rate from Billing currency to local currency. Example: 1.2
     * @return Returns the Internal Double
     */
    @JsonGetter("LocalCurrencyExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLocalCurrencyExchangeRate() {
        return this.localCurrencyExchangeRate;
    }

    /**
     * Getter for LocalCurrencyExchangeRate.
     * Exchange rate from Billing currency to local currency. Example: 1.2
     * @return Returns the Double
     */
    public Double getLocalCurrencyExchangeRate() {
        return OptionalNullable.getFrom(localCurrencyExchangeRate);
    }

    /**
     * Setter for LocalCurrencyExchangeRate.
     * Exchange rate from Billing currency to local currency. Example: 1.2
     * @param localCurrencyExchangeRate Value for Double
     */
    @JsonSetter("LocalCurrencyExchangeRate")
    public void setLocalCurrencyExchangeRate(Double localCurrencyExchangeRate) {
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
    }

    /**
     * UnSetter for LocalCurrencyExchangeRate.
     * Exchange rate from Billing currency to local currency. Example: 1.2
     */
    public void unsetLocalCurrencyExchangeRate() {
        localCurrencyExchangeRate = null;
    }

    /**
     * Converts this PastStatementOfAccounts into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PastStatementOfAccounts [" + "amountDue=" + amountDue + ", amountNotOverdue="
                + amountNotOverdue + ", amountOverdue=" + amountOverdue
                + ", amountOverdueFromUnallocated=" + amountOverdueFromUnallocated + ", amountPaid="
                + amountPaid + ", balanceOnThisStatement=" + balanceOnThisStatement
                + ", billingCurrencyCode=" + billingCurrencyCode + ", billingCurrencySymbol="
                + billingCurrencySymbol + ", creditLimit=" + creditLimit
                + ", creditLimitCurrencyCode=" + creditLimitCurrencyCode
                + ", creditLimitCurrencySymbol=" + creditLimitCurrencySymbol
                + ", creditLimitInCustomerCurrency=" + creditLimitInCustomerCurrency
                + ", currencyCode=" + currencyCode + ", currencySymbol=" + currencySymbol
                + ", fullyPaid=" + fullyPaid + ", lastPaymentCurrencyCode="
                + lastPaymentCurrencyCode + ", lastPaymentCurrencySymbol="
                + lastPaymentCurrencySymbol + ", lastPaymentDate=" + lastPaymentDate
                + ", lastPaymentValue=" + lastPaymentValue + ", outstandingBalance="
                + outstandingBalance + ", payerId=" + payerId + ", payerNumber=" + payerNumber
                + ", paymentDueDate=" + paymentDueDate + ", soAReferenceNumber="
                + soAReferenceNumber + ", statementDate=" + statementDate
                + ", statementOfAccountId=" + statementOfAccountId + ", totalBillingDocuments="
                + totalBillingDocuments + ", totalNetAmountBillingCurrency="
                + totalNetAmountBillingCurrency + ", totalSummaryBillingDocuments="
                + totalSummaryBillingDocuments + ", totalVATAmountBillingCurrency="
                + totalVATAmountBillingCurrency + ", unallocatedPayment=" + unallocatedPayment
                + ", localCurrencyCode=" + localCurrencyCode + ", localCurrencySymbol="
                + localCurrencySymbol + ", localCurrencyExchangeRate=" + localCurrencyExchangeRate
                + "]";
    }

    /**
     * Builds a new {@link PastStatementOfAccounts.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PastStatementOfAccounts.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.amountDue = internalGetAmountDue();
        builder.amountNotOverdue = internalGetAmountNotOverdue();
        builder.amountOverdue = internalGetAmountOverdue();
        builder.amountOverdueFromUnallocated = internalGetAmountOverdueFromUnallocated();
        builder.amountPaid = internalGetAmountPaid();
        builder.balanceOnThisStatement = internalGetBalanceOnThisStatement();
        builder.billingCurrencyCode = internalGetBillingCurrencyCode();
        builder.billingCurrencySymbol = internalGetBillingCurrencySymbol();
        builder.creditLimit = internalGetCreditLimit();
        builder.creditLimitCurrencyCode = internalGetCreditLimitCurrencyCode();
        builder.creditLimitCurrencySymbol = internalGetCreditLimitCurrencySymbol();
        builder.creditLimitInCustomerCurrency = internalGetCreditLimitInCustomerCurrency();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.fullyPaid = internalGetFullyPaid();
        builder.lastPaymentCurrencyCode = internalGetLastPaymentCurrencyCode();
        builder.lastPaymentCurrencySymbol = internalGetLastPaymentCurrencySymbol();
        builder.lastPaymentDate = internalGetLastPaymentDate();
        builder.lastPaymentValue = internalGetLastPaymentValue();
        builder.outstandingBalance = internalGetOutstandingBalance();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.paymentDueDate = internalGetPaymentDueDate();
        builder.soAReferenceNumber = internalGetSoAReferenceNumber();
        builder.statementDate = internalGetStatementDate();
        builder.statementOfAccountId = internalGetStatementOfAccountId();
        builder.totalBillingDocuments = internalGetTotalBillingDocuments();
        builder.totalNetAmountBillingCurrency = internalGetTotalNetAmountBillingCurrency();
        builder.totalSummaryBillingDocuments = internalGetTotalSummaryBillingDocuments();
        builder.totalVATAmountBillingCurrency = internalGetTotalVATAmountBillingCurrency();
        builder.unallocatedPayment = internalGetUnallocatedPayment();
        builder.localCurrencyCode = internalGetLocalCurrencyCode();
        builder.localCurrencySymbol = internalGetLocalCurrencySymbol();
        builder.localCurrencyExchangeRate = internalGetLocalCurrencyExchangeRate();
        return builder;
    }

    /**
     * Class to build instances of {@link PastStatementOfAccounts}.
     */
    public static class Builder {
        private OptionalNullable<Double> amountDue;
        private OptionalNullable<Double> amountNotOverdue;
        private OptionalNullable<Double> amountOverdue;
        private OptionalNullable<Double> amountOverdueFromUnallocated;
        private OptionalNullable<Double> amountPaid;
        private OptionalNullable<Double> balanceOnThisStatement;
        private OptionalNullable<String> billingCurrencyCode;
        private OptionalNullable<String> billingCurrencySymbol;
        private OptionalNullable<Double> creditLimit;
        private OptionalNullable<String> creditLimitCurrencyCode;
        private OptionalNullable<String> creditLimitCurrencySymbol;
        private OptionalNullable<Double> creditLimitInCustomerCurrency;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Boolean> fullyPaid;
        private OptionalNullable<String> lastPaymentCurrencyCode;
        private OptionalNullable<String> lastPaymentCurrencySymbol;
        private OptionalNullable<String> lastPaymentDate;
        private OptionalNullable<Double> lastPaymentValue;
        private OptionalNullable<Double> outstandingBalance;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> paymentDueDate;
        private OptionalNullable<String> soAReferenceNumber;
        private OptionalNullable<String> statementDate;
        private OptionalNullable<Integer> statementOfAccountId;
        private OptionalNullable<Integer> totalBillingDocuments;
        private OptionalNullable<Double> totalNetAmountBillingCurrency;
        private OptionalNullable<Double> totalSummaryBillingDocuments;
        private OptionalNullable<Double> totalVATAmountBillingCurrency;
        private OptionalNullable<Double> unallocatedPayment;
        private OptionalNullable<String> localCurrencyCode;
        private OptionalNullable<String> localCurrencySymbol;
        private OptionalNullable<Double> localCurrencyExchangeRate;



        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = OptionalNullable.of(amountDue);
            return this;
        }

        /**
         * UnSetter for amountDue.
         * @return Builder
         */
        public Builder unsetAmountDue() {
            amountDue = null;
            return this;
        }

        /**
         * Setter for amountNotOverdue.
         * @param  amountNotOverdue  Double value for amountNotOverdue.
         * @return Builder
         */
        public Builder amountNotOverdue(Double amountNotOverdue) {
            this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
            return this;
        }

        /**
         * UnSetter for amountNotOverdue.
         * @return Builder
         */
        public Builder unsetAmountNotOverdue() {
            amountNotOverdue = null;
            return this;
        }

        /**
         * Setter for amountOverdue.
         * @param  amountOverdue  Double value for amountOverdue.
         * @return Builder
         */
        public Builder amountOverdue(Double amountOverdue) {
            this.amountOverdue = OptionalNullable.of(amountOverdue);
            return this;
        }

        /**
         * UnSetter for amountOverdue.
         * @return Builder
         */
        public Builder unsetAmountOverdue() {
            amountOverdue = null;
            return this;
        }

        /**
         * Setter for amountOverdueFromUnallocated.
         * @param  amountOverdueFromUnallocated  Double value for amountOverdueFromUnallocated.
         * @return Builder
         */
        public Builder amountOverdueFromUnallocated(Double amountOverdueFromUnallocated) {
            this.amountOverdueFromUnallocated = OptionalNullable.of(amountOverdueFromUnallocated);
            return this;
        }

        /**
         * UnSetter for amountOverdueFromUnallocated.
         * @return Builder
         */
        public Builder unsetAmountOverdueFromUnallocated() {
            amountOverdueFromUnallocated = null;
            return this;
        }

        /**
         * Setter for amountPaid.
         * @param  amountPaid  Double value for amountPaid.
         * @return Builder
         */
        public Builder amountPaid(Double amountPaid) {
            this.amountPaid = OptionalNullable.of(amountPaid);
            return this;
        }

        /**
         * UnSetter for amountPaid.
         * @return Builder
         */
        public Builder unsetAmountPaid() {
            amountPaid = null;
            return this;
        }

        /**
         * Setter for balanceOnThisStatement.
         * @param  balanceOnThisStatement  Double value for balanceOnThisStatement.
         * @return Builder
         */
        public Builder balanceOnThisStatement(Double balanceOnThisStatement) {
            this.balanceOnThisStatement = OptionalNullable.of(balanceOnThisStatement);
            return this;
        }

        /**
         * UnSetter for balanceOnThisStatement.
         * @return Builder
         */
        public Builder unsetBalanceOnThisStatement() {
            balanceOnThisStatement = null;
            return this;
        }

        /**
         * Setter for billingCurrencyCode.
         * @param  billingCurrencyCode  String value for billingCurrencyCode.
         * @return Builder
         */
        public Builder billingCurrencyCode(String billingCurrencyCode) {
            this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
            return this;
        }

        /**
         * UnSetter for billingCurrencyCode.
         * @return Builder
         */
        public Builder unsetBillingCurrencyCode() {
            billingCurrencyCode = null;
            return this;
        }

        /**
         * Setter for billingCurrencySymbol.
         * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
         * @return Builder
         */
        public Builder billingCurrencySymbol(String billingCurrencySymbol) {
            this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for billingCurrencySymbol.
         * @return Builder
         */
        public Builder unsetBillingCurrencySymbol() {
            billingCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for creditLimit.
         * @param  creditLimit  Double value for creditLimit.
         * @return Builder
         */
        public Builder creditLimit(Double creditLimit) {
            this.creditLimit = OptionalNullable.of(creditLimit);
            return this;
        }

        /**
         * UnSetter for creditLimit.
         * @return Builder
         */
        public Builder unsetCreditLimit() {
            creditLimit = null;
            return this;
        }

        /**
         * Setter for creditLimitCurrencyCode.
         * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
         * @return Builder
         */
        public Builder creditLimitCurrencyCode(String creditLimitCurrencyCode) {
            this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
            return this;
        }

        /**
         * UnSetter for creditLimitCurrencyCode.
         * @return Builder
         */
        public Builder unsetCreditLimitCurrencyCode() {
            creditLimitCurrencyCode = null;
            return this;
        }

        /**
         * Setter for creditLimitCurrencySymbol.
         * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder creditLimitCurrencySymbol(String creditLimitCurrencySymbol) {
            this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for creditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCreditLimitCurrencySymbol() {
            creditLimitCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for creditLimitInCustomerCurrency.
         * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder creditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
            this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetCreditLimitInCustomerCurrency() {
            creditLimitInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for fullyPaid.
         * @param  fullyPaid  Boolean value for fullyPaid.
         * @return Builder
         */
        public Builder fullyPaid(Boolean fullyPaid) {
            this.fullyPaid = OptionalNullable.of(fullyPaid);
            return this;
        }

        /**
         * UnSetter for fullyPaid.
         * @return Builder
         */
        public Builder unsetFullyPaid() {
            fullyPaid = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencyCode.
         * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder lastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
            this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencyCode() {
            lastPaymentCurrencyCode = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencySymbol.
         * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder lastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
            this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencySymbol() {
            lastPaymentCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for lastPaymentDate.
         * @param  lastPaymentDate  String value for lastPaymentDate.
         * @return Builder
         */
        public Builder lastPaymentDate(String lastPaymentDate) {
            this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
            return this;
        }

        /**
         * UnSetter for lastPaymentDate.
         * @return Builder
         */
        public Builder unsetLastPaymentDate() {
            lastPaymentDate = null;
            return this;
        }

        /**
         * Setter for lastPaymentValue.
         * @param  lastPaymentValue  Double value for lastPaymentValue.
         * @return Builder
         */
        public Builder lastPaymentValue(Double lastPaymentValue) {
            this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
            return this;
        }

        /**
         * UnSetter for lastPaymentValue.
         * @return Builder
         */
        public Builder unsetLastPaymentValue() {
            lastPaymentValue = null;
            return this;
        }

        /**
         * Setter for outstandingBalance.
         * @param  outstandingBalance  Double value for outstandingBalance.
         * @return Builder
         */
        public Builder outstandingBalance(Double outstandingBalance) {
            this.outstandingBalance = OptionalNullable.of(outstandingBalance);
            return this;
        }

        /**
         * UnSetter for outstandingBalance.
         * @return Builder
         */
        public Builder unsetOutstandingBalance() {
            outstandingBalance = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for paymentDueDate.
         * @param  paymentDueDate  String value for paymentDueDate.
         * @return Builder
         */
        public Builder paymentDueDate(String paymentDueDate) {
            this.paymentDueDate = OptionalNullable.of(paymentDueDate);
            return this;
        }

        /**
         * UnSetter for paymentDueDate.
         * @return Builder
         */
        public Builder unsetPaymentDueDate() {
            paymentDueDate = null;
            return this;
        }

        /**
         * Setter for soAReferenceNumber.
         * @param  soAReferenceNumber  String value for soAReferenceNumber.
         * @return Builder
         */
        public Builder soAReferenceNumber(String soAReferenceNumber) {
            this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
            return this;
        }

        /**
         * UnSetter for soAReferenceNumber.
         * @return Builder
         */
        public Builder unsetSoAReferenceNumber() {
            soAReferenceNumber = null;
            return this;
        }

        /**
         * Setter for statementDate.
         * @param  statementDate  String value for statementDate.
         * @return Builder
         */
        public Builder statementDate(String statementDate) {
            this.statementDate = OptionalNullable.of(statementDate);
            return this;
        }

        /**
         * UnSetter for statementDate.
         * @return Builder
         */
        public Builder unsetStatementDate() {
            statementDate = null;
            return this;
        }

        /**
         * Setter for statementOfAccountId.
         * @param  statementOfAccountId  Integer value for statementOfAccountId.
         * @return Builder
         */
        public Builder statementOfAccountId(Integer statementOfAccountId) {
            this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
            return this;
        }

        /**
         * UnSetter for statementOfAccountId.
         * @return Builder
         */
        public Builder unsetStatementOfAccountId() {
            statementOfAccountId = null;
            return this;
        }

        /**
         * Setter for totalBillingDocuments.
         * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
         * @return Builder
         */
        public Builder totalBillingDocuments(Integer totalBillingDocuments) {
            this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
            return this;
        }

        /**
         * UnSetter for totalBillingDocuments.
         * @return Builder
         */
        public Builder unsetTotalBillingDocuments() {
            totalBillingDocuments = null;
            return this;
        }

        /**
         * Setter for totalNetAmountBillingCurrency.
         * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
         * @return Builder
         */
        public Builder totalNetAmountBillingCurrency(Double totalNetAmountBillingCurrency) {
            this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
            return this;
        }

        /**
         * UnSetter for totalNetAmountBillingCurrency.
         * @return Builder
         */
        public Builder unsetTotalNetAmountBillingCurrency() {
            totalNetAmountBillingCurrency = null;
            return this;
        }

        /**
         * Setter for totalSummaryBillingDocuments.
         * @param  totalSummaryBillingDocuments  Double value for totalSummaryBillingDocuments.
         * @return Builder
         */
        public Builder totalSummaryBillingDocuments(Double totalSummaryBillingDocuments) {
            this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
            return this;
        }

        /**
         * UnSetter for totalSummaryBillingDocuments.
         * @return Builder
         */
        public Builder unsetTotalSummaryBillingDocuments() {
            totalSummaryBillingDocuments = null;
            return this;
        }

        /**
         * Setter for totalVATAmountBillingCurrency.
         * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
         * @return Builder
         */
        public Builder totalVATAmountBillingCurrency(Double totalVATAmountBillingCurrency) {
            this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
            return this;
        }

        /**
         * UnSetter for totalVATAmountBillingCurrency.
         * @return Builder
         */
        public Builder unsetTotalVATAmountBillingCurrency() {
            totalVATAmountBillingCurrency = null;
            return this;
        }

        /**
         * Setter for unallocatedPayment.
         * @param  unallocatedPayment  Double value for unallocatedPayment.
         * @return Builder
         */
        public Builder unallocatedPayment(Double unallocatedPayment) {
            this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
            return this;
        }

        /**
         * UnSetter for unallocatedPayment.
         * @return Builder
         */
        public Builder unsetUnallocatedPayment() {
            unallocatedPayment = null;
            return this;
        }

        /**
         * Setter for localCurrencyCode.
         * @param  localCurrencyCode  String value for localCurrencyCode.
         * @return Builder
         */
        public Builder localCurrencyCode(String localCurrencyCode) {
            this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
            return this;
        }

        /**
         * UnSetter for localCurrencyCode.
         * @return Builder
         */
        public Builder unsetLocalCurrencyCode() {
            localCurrencyCode = null;
            return this;
        }

        /**
         * Setter for localCurrencySymbol.
         * @param  localCurrencySymbol  String value for localCurrencySymbol.
         * @return Builder
         */
        public Builder localCurrencySymbol(String localCurrencySymbol) {
            this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for localCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLocalCurrencySymbol() {
            localCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for localCurrencyExchangeRate.
         * @param  localCurrencyExchangeRate  Double value for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder localCurrencyExchangeRate(Double localCurrencyExchangeRate) {
            this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
            return this;
        }

        /**
         * UnSetter for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder unsetLocalCurrencyExchangeRate() {
            localCurrencyExchangeRate = null;
            return this;
        }

        /**
         * Builds a new {@link PastStatementOfAccounts} object using the set fields.
         * @return {@link PastStatementOfAccounts}
         */
        public PastStatementOfAccounts build() {
            return new PastStatementOfAccounts(amountDue, amountNotOverdue, amountOverdue,
                    amountOverdueFromUnallocated, amountPaid, balanceOnThisStatement,
                    billingCurrencyCode, billingCurrencySymbol, creditLimit,
                    creditLimitCurrencyCode, creditLimitCurrencySymbol,
                    creditLimitInCustomerCurrency, currencyCode, currencySymbol, fullyPaid,
                    lastPaymentCurrencyCode, lastPaymentCurrencySymbol, lastPaymentDate,
                    lastPaymentValue, outstandingBalance, payerId, payerNumber, paymentDueDate,
                    soAReferenceNumber, statementDate, statementOfAccountId, totalBillingDocuments,
                    totalNetAmountBillingCurrency, totalSummaryBillingDocuments,
                    totalVATAmountBillingCurrency, unallocatedPayment, localCurrencyCode,
                    localCurrencySymbol, localCurrencyExchangeRate);
        }
    }
}
