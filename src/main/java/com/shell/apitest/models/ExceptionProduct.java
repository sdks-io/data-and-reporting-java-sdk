/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for ExceptionProduct type.
 */
public class ExceptionProduct {
    private OptionalNullable<Integer> productid;
    private OptionalNullable<String> productCode;

    /**
     * Default constructor.
     */
    public ExceptionProduct() {
    }

    /**
     * Initialization constructor.
     * @param  productid  Integer value for productid.
     * @param  productCode  String value for productCode.
     */
    public ExceptionProduct(
            Integer productid,
            String productCode) {
        this.productid = OptionalNullable.of(productid);
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * Initialization constructor.
     * @param  productid  Integer value for productid.
     * @param  productCode  String value for productCode.
     */

    protected ExceptionProduct(OptionalNullable<Integer> productid,
            OptionalNullable<String> productCode) {
        this.productid = productid;
        this.productCode = productCode;
    }

    /**
     * Internal Getter for Productid.
     * Product Id Optional if ProductCode is passed else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Productid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductid() {
        return this.productid;
    }

    /**
     * Getter for Productid.
     * Product Id Optional if ProductCode is passed else Mandatory.
     * @return Returns the Integer
     */
    public Integer getProductid() {
        return OptionalNullable.getFrom(productid);
    }

    /**
     * Setter for Productid.
     * Product Id Optional if ProductCode is passed else Mandatory.
     * @param productid Value for Integer
     */
    @JsonSetter("Productid")
    public void setProductid(Integer productid) {
        this.productid = OptionalNullable.of(productid);
    }

    /**
     * UnSetter for Productid.
     * Product Id Optional if ProductCode is passed else Mandatory.
     */
    public void unsetProductid() {
        productid = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code Optional if ProductId is passed else Mandatory.
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code Optional if ProductId is passed else Mandatory.
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code Optional if ProductId is passed else Mandatory.
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code Optional if ProductId is passed else Mandatory.
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Converts this ExceptionProduct into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ExceptionProduct [" + "productid=" + productid + ", productCode=" + productCode
                + "]";
    }

    /**
     * Builds a new {@link ExceptionProduct.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ExceptionProduct.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.productid = internalGetProductid();
        builder.productCode = internalGetProductCode();
        return builder;
    }

    /**
     * Class to build instances of {@link ExceptionProduct}.
     */
    public static class Builder {
        private OptionalNullable<Integer> productid;
        private OptionalNullable<String> productCode;



        /**
         * Setter for productid.
         * @param  productid  Integer value for productid.
         * @return Builder
         */
        public Builder productid(Integer productid) {
            this.productid = OptionalNullable.of(productid);
            return this;
        }

        /**
         * UnSetter for productid.
         * @return Builder
         */
        public Builder unsetProductid() {
            productid = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Builds a new {@link ExceptionProduct} object using the set fields.
         * @return {@link ExceptionProduct}
         */
        public ExceptionProduct build() {
            return new ExceptionProduct(productid, productCode);
        }
    }
}
