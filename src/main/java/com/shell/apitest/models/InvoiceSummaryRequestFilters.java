/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for InvoiceSummaryRequestFilters type.
 */
public class InvoiceSummaryRequestFilters {
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Integer> invoiceId;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<Integer> summaryDocumentId;
    private OptionalNullable<String> summaryDocumentNumber;
    private OptionalNullable<String> statementOfAccountId;
    private OptionalNullable<String> soAReferenceNumber;
    private OptionalNullable<Integer> period;
    private OptionalNullable<String> invoiceStatus;
    private OptionalNullable<String> invoicedOnBehalfOf;
    private OptionalNullable<Boolean> includeEInvoiceDetails;
    private OptionalNullable<Integer> colCoCode;
    private List<Accounts> accounts;
    private OptionalNullable<String> type;

    /**
     * Default constructor.
     */
    public InvoiceSummaryRequestFilters() {
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  invoiceId  Integer value for invoiceId.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  statementOfAccountId  String value for statementOfAccountId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  period  Integer value for period.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  includeEInvoiceDetails  Boolean value for includeEInvoiceDetails.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  accounts  List of Accounts value for accounts.
     * @param  type  String value for type.
     */
    public InvoiceSummaryRequestFilters(
            Integer colCoId,
            Integer payerId,
            String payerNumber,
            Integer invoiceId,
            String invoiceNumber,
            String fromDate,
            String toDate,
            String invoiceDate,
            Integer summaryDocumentId,
            String summaryDocumentNumber,
            String statementOfAccountId,
            String soAReferenceNumber,
            Integer period,
            String invoiceStatus,
            String invoicedOnBehalfOf,
            Boolean includeEInvoiceDetails,
            Integer colCoCode,
            List<Accounts> accounts,
            String type) {
        this.colCoId = OptionalNullable.of(colCoId);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.invoiceId = OptionalNullable.of(invoiceId);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
        this.period = OptionalNullable.of(period);
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
        this.includeEInvoiceDetails = OptionalNullable.of(includeEInvoiceDetails);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.accounts = accounts;
        this.type = OptionalNullable.of(type);
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  invoiceId  Integer value for invoiceId.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  statementOfAccountId  String value for statementOfAccountId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  period  Integer value for period.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  includeEInvoiceDetails  Boolean value for includeEInvoiceDetails.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  accounts  List of Accounts value for accounts.
     * @param  type  String value for type.
     */

    protected InvoiceSummaryRequestFilters(OptionalNullable<Integer> colCoId,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<Integer> invoiceId, OptionalNullable<String> invoiceNumber,
            OptionalNullable<String> fromDate, OptionalNullable<String> toDate,
            OptionalNullable<String> invoiceDate, OptionalNullable<Integer> summaryDocumentId,
            OptionalNullable<String> summaryDocumentNumber,
            OptionalNullable<String> statementOfAccountId,
            OptionalNullable<String> soAReferenceNumber, OptionalNullable<Integer> period,
            OptionalNullable<String> invoiceStatus, OptionalNullable<String> invoicedOnBehalfOf,
            OptionalNullable<Boolean> includeEInvoiceDetails, OptionalNullable<Integer> colCoCode,
            List<Accounts> accounts, OptionalNullable<String> type) {
        this.colCoId = colCoId;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.invoiceId = invoiceId;
        this.invoiceNumber = invoiceNumber;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.invoiceDate = invoiceDate;
        this.summaryDocumentId = summaryDocumentId;
        this.summaryDocumentNumber = summaryDocumentNumber;
        this.statementOfAccountId = statementOfAccountId;
        this.soAReferenceNumber = soAReferenceNumber;
        this.period = period;
        this.invoiceStatus = invoiceStatus;
        this.invoicedOnBehalfOf = invoicedOnBehalfOf;
        this.includeEInvoiceDetails = includeEInvoiceDetails;
        this.colCoCode = colCoCode;
        this.accounts = accounts;
        this.type = type;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional. Example: 1-Philippines 5-UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional. Example: 1-Philippines 5-UK
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional. Example: 1-Philippines 5-UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer. Optional. Example: 1-Philippines 5-UK
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory Example:
     * 123456
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory Example:
     * GB000000123
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory Example:
     * GB000000123
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory Example:
     * GB000000123
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory Example:
     * GB000000123
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for InvoiceId.
     * Invoice id. Optional. This input is a search criterion, if given. Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceId() {
        return this.invoiceId;
    }

    /**
     * Getter for InvoiceId.
     * Invoice id. Optional. This input is a search criterion, if given. Example: 1
     * @return Returns the Integer
     */
    public Integer getInvoiceId() {
        return OptionalNullable.getFrom(invoiceId);
    }

    /**
     * Setter for InvoiceId.
     * Invoice id. Optional. This input is a search criterion, if given. Example: 1
     * @param invoiceId Value for Integer
     */
    @JsonSetter("InvoiceId")
    public void setInvoiceId(Integer invoiceId) {
        this.invoiceId = OptionalNullable.of(invoiceId);
    }

    /**
     * UnSetter for InvoiceId.
     * Invoice id. Optional. This input is a search criterion, if given. Example: 1
     */
    public void unsetInvoiceId() {
        invoiceId = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given. Example: 0123456789
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given. Example: 0123456789
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given. Example: 0123456789
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice number. Optional. This input is a search criterion, if given. Example: 0123456789
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for FromDate.
     * Invoice date searched from this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘ToDate’ is not provided.
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * Invoice date searched from this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘ToDate’ is not provided.
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * Invoice date searched from this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘ToDate’ is not provided.
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * Invoice date searched from this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘ToDate’ is not provided.
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘FromDate’ is not provided.
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘FromDate’ is not provided.
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘FromDate’ is not provided.
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Invoice date searched until this date. Optional. This input is a search criterion, if given.
     * Date format: yyyyMMdd Example: 20170830 Note: This criterion is ignored if ‘Period’ is given.
     * Also, this criterion is ignored if ‘FromDate’ is not provided.
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given. Date format:
     * yyyyMMdd Example: 20170830
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given. Date format:
     * yyyyMMdd Example: 20170830
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given. Date format:
     * yyyyMMdd Example: 20170830
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Date of invoicing. Optional. This input is a search criterion, if given. Date format:
     * yyyyMMdd Example: 20170830
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentId.
     * Summary document id Optional. This input is a search criterion, if given. Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("SummaryDocumentId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSummaryDocumentId() {
        return this.summaryDocumentId;
    }

    /**
     * Getter for SummaryDocumentId.
     * Summary document id Optional. This input is a search criterion, if given. Example: 1
     * @return Returns the Integer
     */
    public Integer getSummaryDocumentId() {
        return OptionalNullable.getFrom(summaryDocumentId);
    }

    /**
     * Setter for SummaryDocumentId.
     * Summary document id Optional. This input is a search criterion, if given. Example: 1
     * @param summaryDocumentId Value for Integer
     */
    @JsonSetter("SummaryDocumentId")
    public void setSummaryDocumentId(Integer summaryDocumentId) {
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
    }

    /**
     * UnSetter for SummaryDocumentId.
     * Summary document id Optional. This input is a search criterion, if given. Example: 1
     */
    public void unsetSummaryDocumentId() {
        summaryDocumentId = null;
    }

    /**
     * Internal Getter for SummaryDocumentNumber.
     * Summary document number Optional. This input is a search criterion, if given. Example:
     * ‘0/CZ0000000123456/2017’
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentNumber() {
        return this.summaryDocumentNumber;
    }

    /**
     * Getter for SummaryDocumentNumber.
     * Summary document number Optional. This input is a search criterion, if given. Example:
     * ‘0/CZ0000000123456/2017’
     * @return Returns the String
     */
    public String getSummaryDocumentNumber() {
        return OptionalNullable.getFrom(summaryDocumentNumber);
    }

    /**
     * Setter for SummaryDocumentNumber.
     * Summary document number Optional. This input is a search criterion, if given. Example:
     * ‘0/CZ0000000123456/2017’
     * @param summaryDocumentNumber Value for String
     */
    @JsonSetter("SummaryDocumentNumber")
    public void setSummaryDocumentNumber(String summaryDocumentNumber) {
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
    }

    /**
     * UnSetter for SummaryDocumentNumber.
     * Summary document number Optional. This input is a search criterion, if given. Example:
     * ‘0/CZ0000000123456/2017’
     */
    public void unsetSummaryDocumentNumber() {
        summaryDocumentNumber = null;
    }

    /**
     * Internal Getter for StatementOfAccountId.
     * Statement of Account Id of the payment customer. Optional. This input is a search criterion,
     * if given. Example: 1
     * @return Returns the Internal String
     */
    @JsonGetter("StatementOfAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementOfAccountId() {
        return this.statementOfAccountId;
    }

    /**
     * Getter for StatementOfAccountId.
     * Statement of Account Id of the payment customer. Optional. This input is a search criterion,
     * if given. Example: 1
     * @return Returns the String
     */
    public String getStatementOfAccountId() {
        return OptionalNullable.getFrom(statementOfAccountId);
    }

    /**
     * Setter for StatementOfAccountId.
     * Statement of Account Id of the payment customer. Optional. This input is a search criterion,
     * if given. Example: 1
     * @param statementOfAccountId Value for String
     */
    @JsonSetter("StatementOfAccountId")
    public void setStatementOfAccountId(String statementOfAccountId) {
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
    }

    /**
     * UnSetter for StatementOfAccountId.
     * Statement of Account Id of the payment customer. Optional. This input is a search criterion,
     * if given. Example: 1
     */
    public void unsetStatementOfAccountId() {
        statementOfAccountId = null;
    }

    /**
     * Internal Getter for SoAReferenceNumber.
     * Statement of Account reference number of the payment customer. Optional. This input is a
     * search criterion, if given. Example: 123
     * @return Returns the Internal String
     */
    @JsonGetter("SoAReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSoAReferenceNumber() {
        return this.soAReferenceNumber;
    }

    /**
     * Getter for SoAReferenceNumber.
     * Statement of Account reference number of the payment customer. Optional. This input is a
     * search criterion, if given. Example: 123
     * @return Returns the String
     */
    public String getSoAReferenceNumber() {
        return OptionalNullable.getFrom(soAReferenceNumber);
    }

    /**
     * Setter for SoAReferenceNumber.
     * Statement of Account reference number of the payment customer. Optional. This input is a
     * search criterion, if given. Example: 123
     * @param soAReferenceNumber Value for String
     */
    @JsonSetter("SoAReferenceNumber")
    public void setSoAReferenceNumber(String soAReferenceNumber) {
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
    }

    /**
     * UnSetter for SoAReferenceNumber.
     * Statement of Account reference number of the payment customer. Optional. This input is a
     * search criterion, if given. Example: 123
     */
    public void unsetSoAReferenceNumber() {
        soAReferenceNumber = null;
    }

    /**
     * Internal Getter for Period.
     * Invoice date search period. Valid values – 1.	Last 7 days – Issued in last 7 days. 2.	Last 30
     * days – Issued in last 30 days. 3.	Last 90 days – Issued in last 90 days. Optional. This input
     * is a search criterion, if given. Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPeriod() {
        return this.period;
    }

    /**
     * Getter for Period.
     * Invoice date search period. Valid values – 1.	Last 7 days – Issued in last 7 days. 2.	Last 30
     * days – Issued in last 30 days. 3.	Last 90 days – Issued in last 90 days. Optional. This input
     * is a search criterion, if given. Example: 1
     * @return Returns the Integer
     */
    public Integer getPeriod() {
        return OptionalNullable.getFrom(period);
    }

    /**
     * Setter for Period.
     * Invoice date search period. Valid values – 1.	Last 7 days – Issued in last 7 days. 2.	Last 30
     * days – Issued in last 30 days. 3.	Last 90 days – Issued in last 90 days. Optional. This input
     * is a search criterion, if given. Example: 1
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = OptionalNullable.of(period);
    }

    /**
     * UnSetter for Period.
     * Invoice date search period. Valid values – 1.	Last 7 days – Issued in last 7 days. 2.	Last 30
     * days – Issued in last 30 days. 3.	Last 90 days – Issued in last 90 days. Optional. This input
     * is a search criterion, if given. Example: 1
     */
    public void unsetPeriod() {
        period = null;
    }

    /**
     * Internal Getter for InvoiceStatus.
     * Status of the invoice. Valid values – •	Due – Invoices due for payment and is within the due
     * date. •	Paid – Fully paid Invoices. •	Overdue – Invoices due of payment and has crossed the
     * due date. •	CreditNote – Credit notes •	CreditStatement Optional. This input is a search
     * criterion, if given.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceStatus() {
        return this.invoiceStatus;
    }

    /**
     * Getter for InvoiceStatus.
     * Status of the invoice. Valid values – •	Due – Invoices due for payment and is within the due
     * date. •	Paid – Fully paid Invoices. •	Overdue – Invoices due of payment and has crossed the
     * due date. •	CreditNote – Credit notes •	CreditStatement Optional. This input is a search
     * criterion, if given.
     * @return Returns the String
     */
    public String getInvoiceStatus() {
        return OptionalNullable.getFrom(invoiceStatus);
    }

    /**
     * Setter for InvoiceStatus.
     * Status of the invoice. Valid values – •	Due – Invoices due for payment and is within the due
     * date. •	Paid – Fully paid Invoices. •	Overdue – Invoices due of payment and has crossed the
     * due date. •	CreditNote – Credit notes •	CreditStatement Optional. This input is a search
     * criterion, if given.
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
    }

    /**
     * UnSetter for InvoiceStatus.
     * Status of the invoice. Valid values – •	Due – Invoices due for payment and is within the due
     * date. •	Paid – Fully paid Invoices. •	Overdue – Invoices due of payment and has crossed the
     * due date. •	CreditNote – Credit notes •	CreditStatement Optional. This input is a search
     * criterion, if given.
     */
    public void unsetInvoiceStatus() {
        invoiceStatus = null;
    }

    /**
     * Internal Getter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. Optional
     * @return Returns the Internal String
     */
    @JsonGetter("InvoicedOnBehalfOf")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoicedOnBehalfOf() {
        return this.invoicedOnBehalfOf;
    }

    /**
     * Getter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. Optional
     * @return Returns the String
     */
    public String getInvoicedOnBehalfOf() {
        return OptionalNullable.getFrom(invoicedOnBehalfOf);
    }

    /**
     * Setter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. Optional
     * @param invoicedOnBehalfOf Value for String
     */
    @JsonSetter("InvoicedOnBehalfOf")
    public void setInvoicedOnBehalfOf(String invoicedOnBehalfOf) {
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
    }

    /**
     * UnSetter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. Optional
     */
    public void unsetInvoicedOnBehalfOf() {
        invoicedOnBehalfOf = null;
    }

    /**
     * Internal Getter for IncludeEInvoiceDetails.
     * Whether to include the additional invoice details in the API response. Optional. Default
     * value “False”. The parameters that are populated •	DocumentReference •	AdditionalDocuments
     * The above fields will not be present in the response when the respective data is not
     * available in the source system.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeEInvoiceDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeEInvoiceDetails() {
        return this.includeEInvoiceDetails;
    }

    /**
     * Getter for IncludeEInvoiceDetails.
     * Whether to include the additional invoice details in the API response. Optional. Default
     * value “False”. The parameters that are populated •	DocumentReference •	AdditionalDocuments
     * The above fields will not be present in the response when the respective data is not
     * available in the source system.
     * @return Returns the Boolean
     */
    public Boolean getIncludeEInvoiceDetails() {
        return OptionalNullable.getFrom(includeEInvoiceDetails);
    }

    /**
     * Setter for IncludeEInvoiceDetails.
     * Whether to include the additional invoice details in the API response. Optional. Default
     * value “False”. The parameters that are populated •	DocumentReference •	AdditionalDocuments
     * The above fields will not be present in the response when the respective data is not
     * available in the source system.
     * @param includeEInvoiceDetails Value for Boolean
     */
    @JsonSetter("IncludeEInvoiceDetails")
    public void setIncludeEInvoiceDetails(Boolean includeEInvoiceDetails) {
        this.includeEInvoiceDetails = OptionalNullable.of(includeEInvoiceDetails);
    }

    /**
     * UnSetter for IncludeEInvoiceDetails.
     * Whether to include the additional invoice details in the API response. Optional. Default
     * value “False”. The parameters that are populated •	DocumentReference •	AdditionalDocuments
     * The above fields will not be present in the response when the respective data is not
     * available in the source system.
     */
    public void unsetIncludeEInvoiceDetails() {
        includeEInvoiceDetails = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory - It is mandatory field to external
     * source ATOS for E-invoicing. Example: 86-Philippines 5-UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory - It is mandatory field to external
     * source ATOS for E-invoicing. Example: 86-Philippines 5-UK
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory - It is mandatory field to external
     * source ATOS for E-invoicing. Example: 86-Philippines 5-UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory - It is mandatory field to external
     * source ATOS for E-invoicing. Example: 86-Philippines 5-UK
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Getter for Accounts.
     * @return Returns the List of Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Accounts> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for List of Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<Accounts> accounts) {
        this.accounts = accounts;
    }

    /**
     * Internal Getter for Type.
     * Invoice type. Allowed values – •	Original – Original document. •	Reversal – Reversed
     * document. •	Replacement – Replaced document. Optional. (When not passed all invoice, types
     * are considered for search) This input is a search criterion, if given. Example: Original
     * @return Returns the Internal String
     */
    @JsonGetter("Type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetType() {
        return this.type;
    }

    /**
     * Getter for Type.
     * Invoice type. Allowed values – •	Original – Original document. •	Reversal – Reversed
     * document. •	Replacement – Replaced document. Optional. (When not passed all invoice, types
     * are considered for search) This input is a search criterion, if given. Example: Original
     * @return Returns the String
     */
    public String getType() {
        return OptionalNullable.getFrom(type);
    }

    /**
     * Setter for Type.
     * Invoice type. Allowed values – •	Original – Original document. •	Reversal – Reversed
     * document. •	Replacement – Replaced document. Optional. (When not passed all invoice, types
     * are considered for search) This input is a search criterion, if given. Example: Original
     * @param type Value for String
     */
    @JsonSetter("Type")
    public void setType(String type) {
        this.type = OptionalNullable.of(type);
    }

    /**
     * UnSetter for Type.
     * Invoice type. Allowed values – •	Original – Original document. •	Reversal – Reversed
     * document. •	Replacement – Replaced document. Optional. (When not passed all invoice, types
     * are considered for search) This input is a search criterion, if given. Example: Original
     */
    public void unsetType() {
        type = null;
    }

    /**
     * Converts this InvoiceSummaryRequestFilters into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InvoiceSummaryRequestFilters [" + "colCoId=" + colCoId + ", payerId=" + payerId
                + ", payerNumber=" + payerNumber + ", invoiceId=" + invoiceId + ", invoiceNumber="
                + invoiceNumber + ", fromDate=" + fromDate + ", toDate=" + toDate + ", invoiceDate="
                + invoiceDate + ", summaryDocumentId=" + summaryDocumentId
                + ", summaryDocumentNumber=" + summaryDocumentNumber + ", statementOfAccountId="
                + statementOfAccountId + ", soAReferenceNumber=" + soAReferenceNumber + ", period="
                + period + ", invoiceStatus=" + invoiceStatus + ", invoicedOnBehalfOf="
                + invoicedOnBehalfOf + ", includeEInvoiceDetails=" + includeEInvoiceDetails
                + ", colCoCode=" + colCoCode + ", accounts=" + accounts + ", type=" + type + "]";
    }

    /**
     * Builds a new {@link InvoiceSummaryRequestFilters.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InvoiceSummaryRequestFilters.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accounts(getAccounts());
        builder.colCoId = internalGetColCoId();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.invoiceId = internalGetInvoiceId();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.summaryDocumentId = internalGetSummaryDocumentId();
        builder.summaryDocumentNumber = internalGetSummaryDocumentNumber();
        builder.statementOfAccountId = internalGetStatementOfAccountId();
        builder.soAReferenceNumber = internalGetSoAReferenceNumber();
        builder.period = internalGetPeriod();
        builder.invoiceStatus = internalGetInvoiceStatus();
        builder.invoicedOnBehalfOf = internalGetInvoicedOnBehalfOf();
        builder.includeEInvoiceDetails = internalGetIncludeEInvoiceDetails();
        builder.colCoCode = internalGetColCoCode();
        builder.type = internalGetType();
        return builder;
    }

    /**
     * Class to build instances of {@link InvoiceSummaryRequestFilters}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Integer> invoiceId;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<Integer> summaryDocumentId;
        private OptionalNullable<String> summaryDocumentNumber;
        private OptionalNullable<String> statementOfAccountId;
        private OptionalNullable<String> soAReferenceNumber;
        private OptionalNullable<Integer> period;
        private OptionalNullable<String> invoiceStatus;
        private OptionalNullable<String> invoicedOnBehalfOf;
        private OptionalNullable<Boolean> includeEInvoiceDetails;
        private OptionalNullable<Integer> colCoCode;
        private List<Accounts> accounts;
        private OptionalNullable<String> type;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for invoiceId.
         * @param  invoiceId  Integer value for invoiceId.
         * @return Builder
         */
        public Builder invoiceId(Integer invoiceId) {
            this.invoiceId = OptionalNullable.of(invoiceId);
            return this;
        }

        /**
         * UnSetter for invoiceId.
         * @return Builder
         */
        public Builder unsetInvoiceId() {
            invoiceId = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentId.
         * @param  summaryDocumentId  Integer value for summaryDocumentId.
         * @return Builder
         */
        public Builder summaryDocumentId(Integer summaryDocumentId) {
            this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
            return this;
        }

        /**
         * UnSetter for summaryDocumentId.
         * @return Builder
         */
        public Builder unsetSummaryDocumentId() {
            summaryDocumentId = null;
            return this;
        }

        /**
         * Setter for summaryDocumentNumber.
         * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
         * @return Builder
         */
        public Builder summaryDocumentNumber(String summaryDocumentNumber) {
            this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
            return this;
        }

        /**
         * UnSetter for summaryDocumentNumber.
         * @return Builder
         */
        public Builder unsetSummaryDocumentNumber() {
            summaryDocumentNumber = null;
            return this;
        }

        /**
         * Setter for statementOfAccountId.
         * @param  statementOfAccountId  String value for statementOfAccountId.
         * @return Builder
         */
        public Builder statementOfAccountId(String statementOfAccountId) {
            this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
            return this;
        }

        /**
         * UnSetter for statementOfAccountId.
         * @return Builder
         */
        public Builder unsetStatementOfAccountId() {
            statementOfAccountId = null;
            return this;
        }

        /**
         * Setter for soAReferenceNumber.
         * @param  soAReferenceNumber  String value for soAReferenceNumber.
         * @return Builder
         */
        public Builder soAReferenceNumber(String soAReferenceNumber) {
            this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
            return this;
        }

        /**
         * UnSetter for soAReferenceNumber.
         * @return Builder
         */
        public Builder unsetSoAReferenceNumber() {
            soAReferenceNumber = null;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = OptionalNullable.of(period);
            return this;
        }

        /**
         * UnSetter for period.
         * @return Builder
         */
        public Builder unsetPeriod() {
            period = null;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = OptionalNullable.of(invoiceStatus);
            return this;
        }

        /**
         * UnSetter for invoiceStatus.
         * @return Builder
         */
        public Builder unsetInvoiceStatus() {
            invoiceStatus = null;
            return this;
        }

        /**
         * Setter for invoicedOnBehalfOf.
         * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder invoicedOnBehalfOf(String invoicedOnBehalfOf) {
            this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
            return this;
        }

        /**
         * UnSetter for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder unsetInvoicedOnBehalfOf() {
            invoicedOnBehalfOf = null;
            return this;
        }

        /**
         * Setter for includeEInvoiceDetails.
         * @param  includeEInvoiceDetails  Boolean value for includeEInvoiceDetails.
         * @return Builder
         */
        public Builder includeEInvoiceDetails(Boolean includeEInvoiceDetails) {
            this.includeEInvoiceDetails = OptionalNullable.of(includeEInvoiceDetails);
            return this;
        }

        /**
         * UnSetter for includeEInvoiceDetails.
         * @return Builder
         */
        public Builder unsetIncludeEInvoiceDetails() {
            includeEInvoiceDetails = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(List<Accounts> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = OptionalNullable.of(type);
            return this;
        }

        /**
         * UnSetter for type.
         * @return Builder
         */
        public Builder unsetType() {
            type = null;
            return this;
        }

        /**
         * Builds a new {@link InvoiceSummaryRequestFilters} object using the set fields.
         * @return {@link InvoiceSummaryRequestFilters}
         */
        public InvoiceSummaryRequestFilters build() {
            return new InvoiceSummaryRequestFilters(colCoId, payerId, payerNumber, invoiceId,
                    invoiceNumber, fromDate, toDate, invoiceDate, summaryDocumentId,
                    summaryDocumentNumber, statementOfAccountId, soAReferenceNumber, period,
                    invoiceStatus, invoicedOnBehalfOf, includeEInvoiceDetails, colCoCode, accounts,
                    type);
        }
    }
}
