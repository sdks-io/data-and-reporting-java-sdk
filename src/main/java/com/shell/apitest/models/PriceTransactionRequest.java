/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for PriceTransactionRequest type.
 */
public class PriceTransactionRequest {
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private Accounts accounts;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> vehicleRegistrationNumber;
    private OptionalNullable<String> invoiceStatus;
    private OptionalNullable<Integer> productId;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> sortOrder;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<Integer> period;
    private OptionalNullable<String> siteCode;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> postingDateFrom;
    private OptionalNullable<String> postingDateTo;
    private OptionalNullable<String> salesItemId;
    private OptionalNullable<String> transactionId;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<Boolean> validInvoiceDateOnly;
    private OptionalNullable<String> invoiceFromDate;
    private OptionalNullable<String> invoiceToDate;
    private OptionalNullable<Boolean> fuelOnly;
    private OptionalNullable<Boolean> includeFees;
    private OptionalNullable<Boolean> useFieldId;
    private OptionalNullable<Integer> currentPage;
    private Integer pageSize;

    /**
     * Default constructor.
     */
    public PriceTransactionRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  Accounts value for accounts.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  sortOrder  String value for sortOrder.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  siteCode  String value for siteCode.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  salesItemId  String value for salesItemId.
     * @param  transactionId  String value for transactionId.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     * @param  useFieldId  Boolean value for useFieldId.
     * @param  currentPage  Integer value for currentPage.
     * @param  pageSize  Integer value for pageSize.
     */
    public PriceTransactionRequest(
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            Accounts accounts,
            Integer cardId,
            String cardPAN,
            String driverName,
            String vehicleRegistrationNumber,
            String invoiceStatus,
            Integer productId,
            String productCode,
            String purchasedInCountry,
            Integer cardGroupId,
            String sortOrder,
            String fromDate,
            String toDate,
            Integer period,
            String siteCode,
            Integer siteGroupId,
            String postingDateFrom,
            String postingDateTo,
            String salesItemId,
            String transactionId,
            String invoiceDate,
            String invoiceNumber,
            Boolean validInvoiceDateOnly,
            String invoiceFromDate,
            String invoiceToDate,
            Boolean fuelOnly,
            Boolean includeFees,
            Boolean useFieldId,
            Integer currentPage,
            Integer pageSize) {
        this.colCoId = OptionalNullable.of(colCoId);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.accounts = accounts;
        this.cardId = OptionalNullable.of(cardId);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.driverName = OptionalNullable.of(driverName);
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
        this.productId = OptionalNullable.of(productId);
        this.productCode = OptionalNullable.of(productCode);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.sortOrder = OptionalNullable.of(sortOrder);
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.period = OptionalNullable.of(period);
        this.siteCode = OptionalNullable.of(siteCode);
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.postingDateFrom = OptionalNullable.of(postingDateFrom);
        this.postingDateTo = OptionalNullable.of(postingDateTo);
        this.salesItemId = OptionalNullable.of(salesItemId);
        this.transactionId = OptionalNullable.of(transactionId);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.validInvoiceDateOnly = OptionalNullable.of(validInvoiceDateOnly);
        this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
        this.invoiceToDate = OptionalNullable.of(invoiceToDate);
        this.fuelOnly = OptionalNullable.of(fuelOnly);
        this.includeFees = OptionalNullable.of(includeFees);
        this.useFieldId = OptionalNullable.of(useFieldId);
        this.currentPage = OptionalNullable.of(currentPage);
        this.pageSize = pageSize;
    }

    /**
     * Initialization constructor.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accounts  Accounts value for accounts.
     * @param  cardId  Integer value for cardId.
     * @param  cardPAN  String value for cardPAN.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  sortOrder  String value for sortOrder.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  siteCode  String value for siteCode.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  salesItemId  String value for salesItemId.
     * @param  transactionId  String value for transactionId.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     * @param  useFieldId  Boolean value for useFieldId.
     * @param  currentPage  Integer value for currentPage.
     * @param  pageSize  Integer value for pageSize.
     */

    protected PriceTransactionRequest(OptionalNullable<Integer> colCoId,
            OptionalNullable<Integer> colCoCode, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, Accounts accounts,
            OptionalNullable<Integer> cardId, OptionalNullable<String> cardPAN,
            OptionalNullable<String> driverName, OptionalNullable<String> vehicleRegistrationNumber,
            OptionalNullable<String> invoiceStatus, OptionalNullable<Integer> productId,
            OptionalNullable<String> productCode, OptionalNullable<String> purchasedInCountry,
            OptionalNullable<Integer> cardGroupId, OptionalNullable<String> sortOrder,
            OptionalNullable<String> fromDate, OptionalNullable<String> toDate,
            OptionalNullable<Integer> period, OptionalNullable<String> siteCode,
            OptionalNullable<Integer> siteGroupId, OptionalNullable<String> postingDateFrom,
            OptionalNullable<String> postingDateTo, OptionalNullable<String> salesItemId,
            OptionalNullable<String> transactionId, OptionalNullable<String> invoiceDate,
            OptionalNullable<String> invoiceNumber, OptionalNullable<Boolean> validInvoiceDateOnly,
            OptionalNullable<String> invoiceFromDate, OptionalNullable<String> invoiceToDate,
            OptionalNullable<Boolean> fuelOnly, OptionalNullable<Boolean> includeFees,
            OptionalNullable<Boolean> useFieldId, OptionalNullable<Integer> currentPage,
            Integer pageSize) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accounts = accounts;
        this.cardId = cardId;
        this.cardPAN = cardPAN;
        this.driverName = driverName;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.invoiceStatus = invoiceStatus;
        this.productId = productId;
        this.productCode = productCode;
        this.purchasedInCountry = purchasedInCountry;
        this.cardGroupId = cardGroupId;
        this.sortOrder = sortOrder;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.siteCode = siteCode;
        this.siteGroupId = siteGroupId;
        this.postingDateFrom = postingDateFrom;
        this.postingDateTo = postingDateTo;
        this.salesItemId = salesItemId;
        this.transactionId = transactionId;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.validInvoiceDateOnly = validInvoiceDateOnly;
        this.invoiceFromDate = invoiceFromDate;
        this.invoiceToDate = invoiceToDate;
        this.fuelOnly = fuelOnly;
        this.includeFees = includeFees;
        this.useFieldId = useFieldId;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number (Ex: GB000000123) of the selected payer. Optional if PayerId is passed else
     * Mandatory Example: GB000000123
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Getter for Accounts.
     * @return Returns the Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Accounts getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(Accounts accounts) {
        this.accounts = accounts;
    }

    /**
     * Internal Getter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Card Id (i.e. Unique Card Id in GFN) Optional When both Card Id and Card PAN are not present
     * on request, the response will have transactions of all cards under the selected payer or
     * account
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Full Card PAN Optional When both Card Id and Card PAN are not present on request, the
     * response will have transactions of all cards under the selected payer or account.
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name (of Card record) Optional Minimum of 4 characters should be provided else not
     * considered Transactions of the card having the entered value at any part of the Driver Name
     * will be returned
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistrationNumber() {
        return this.vehicleRegistrationNumber;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     * @return Returns the String
     */
    public String getVehicleRegistrationNumber() {
        return OptionalNullable.getFrom(vehicleRegistrationNumber);
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     * @param vehicleRegistrationNumber Value for String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(String vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
    }

    /**
     * UnSetter for VehicleRegistrationNumber.
     * Vehicle Registration (of Card record) Optional Minimum of 4 characters should be provided
     * else not considered Transactions of the card having the entered value at any part of the VRN
     * will be returned
     */
    public void unsetVehicleRegistrationNumber() {
        vehicleRegistrationNumber = null;
    }

    /**
     * Internal Getter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceStatus() {
        return this.invoiceStatus;
    }

    /**
     * Getter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     * @return Returns the String
     */
    public String getInvoiceStatus() {
        return OptionalNullable.getFrom(invoiceStatus);
    }

    /**
     * Setter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = OptionalNullable.of(invoiceStatus);
    }

    /**
     * UnSetter for InvoiceStatus.
     * Invoice status of the transactions. Mandatory Possible options: I - Invoiced U – Un-Invoiced
     * A – All
     */
    public void unsetInvoiceStatus() {
        invoiceStatus = null;
    }

    /**
     * Internal Getter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductId() {
        return this.productId;
    }

    /**
     * Getter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     * @return Returns the Integer
     */
    public Integer getProductId() {
        return OptionalNullable.getFrom(productId);
    }

    /**
     * Setter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     * @param productId Value for Integer
     */
    @JsonSetter("ProductId")
    public void setProductId(Integer productId) {
        this.productId = OptionalNullable.of(productId);
    }

    /**
     * UnSetter for ProductId.
     * Product Id Example: 21 Unleaded - High octane 22 Unleaded - Medium octane 23 Unleaded - Low
     * octane 24 Unleaded Environmental
     */
    public void unsetProductId() {
        productId = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code – Global as per GFN configuration Optional Max Length: 8 Example: 10 TMF Charges
     * 11 Tunnel/Bridges 12 Motorway toll 13 Ferries
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Note: If IncludeFees is true then this filter will be ignored
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card Group Id in GFN
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card Group Id in GFN
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card Group Id in GFN
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card Group Id in GFN
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for SortOrder.
     * Allowed Sorting Options: 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. DriverNameAscending (If Driver Name is null
     * then VRN value will be considered) 6. DriverNameDescending (If Driver Name is null then VRN
     * value will be considered) 7. VRNAscending (If VRN is null then Driver Name value will be
     * considered) 8. VRNDescending (If VRN is null then Driver Name value will be considered) 9.
     * NetAmountAscending 10. NetAmountDescensding Example value to be passed: “1,3”
     * @return Returns the Internal String
     */
    @JsonGetter("SortOrder")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSortOrder() {
        return this.sortOrder;
    }

    /**
     * Getter for SortOrder.
     * Allowed Sorting Options: 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. DriverNameAscending (If Driver Name is null
     * then VRN value will be considered) 6. DriverNameDescending (If Driver Name is null then VRN
     * value will be considered) 7. VRNAscending (If VRN is null then Driver Name value will be
     * considered) 8. VRNDescending (If VRN is null then Driver Name value will be considered) 9.
     * NetAmountAscending 10. NetAmountDescensding Example value to be passed: “1,3”
     * @return Returns the String
     */
    public String getSortOrder() {
        return OptionalNullable.getFrom(sortOrder);
    }

    /**
     * Setter for SortOrder.
     * Allowed Sorting Options: 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. DriverNameAscending (If Driver Name is null
     * then VRN value will be considered) 6. DriverNameDescending (If Driver Name is null then VRN
     * value will be considered) 7. VRNAscending (If VRN is null then Driver Name value will be
     * considered) 8. VRNDescending (If VRN is null then Driver Name value will be considered) 9.
     * NetAmountAscending 10. NetAmountDescensding Example value to be passed: “1,3”
     * @param sortOrder Value for String
     */
    @JsonSetter("SortOrder")
    public void setSortOrder(String sortOrder) {
        this.sortOrder = OptionalNullable.of(sortOrder);
    }

    /**
     * UnSetter for SortOrder.
     * Allowed Sorting Options: 1. TransactionDateAscending 2. TransactionDateDescending 3.
     * GrossAmountDescending 4. GrossAmountAscending 5. DriverNameAscending (If Driver Name is null
     * then VRN value will be considered) 6. DriverNameDescending (If Driver Name is null then VRN
     * value will be considered) 7. VRNAscending (If VRN is null then Driver Name value will be
     * considered) 8. VRNDescending (If VRN is null then Driver Name value will be considered) 9.
     * NetAmountAscending 10. NetAmountDescensding Example value to be passed: “1,3”
     */
    public void unsetSortOrder() {
        sortOrder = null;
    }

    /**
     * Internal Getter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Transactions to Date/Time. Optional- Refer introduction section of this operation for the
     * priority and sequence of different date and invoice number filters that are conditionally
     * applied. Note: 1) When the value is blank and FromDate is provided on the input, all
     * transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPeriod() {
        return this.period;
    }

    /**
     * Getter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     * @return Returns the Integer
     */
    public Integer getPeriod() {
        return OptionalNullable.getFrom(period);
    }

    /**
     * Setter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = OptionalNullable.of(period);
    }

    /**
     * UnSetter for Period.
     * Transactions Period. Possible values are: 1. Last 7 Days 2. Last 30 Days 3. Last 90 Days
     * Optional - Refer introduction section of this operation for the priority and sequence of
     * different date and invoice number filters that are conditionally applied.
     */
    public void unsetPeriod() {
        period = null;
    }

    /**
     * Internal Getter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    public String getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     * @param siteCode Value for String
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(String siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * Site Code as configured in GFN Example: 050001 - CHARNOCK RICHARD NTHBOUND MWSA 0755 050002 -
     * CHARNOCK RICHARD STHBOUND MWSA 0755 050005 - HARTSHEAD MOOR EASTBOUND MWSA 0761. 050006 -
     * HARTSHEAD MOOR WESTBOUND MWSA. Note: If IncludeFees is true then this filter will be ignored
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Site Group Id in GFN Optional Example: 202 Note: If IncludeFees is true then this filter will
     * be ignored
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDateFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDateFrom() {
        return this.postingDateFrom;
    }

    /**
     * Getter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    public String getPostingDateFrom() {
        return OptionalNullable.getFrom(postingDateFrom);
    }

    /**
     * Setter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @param postingDateFrom Value for String
     */
    @JsonSetter("PostingDateFrom")
    public void setPostingDateFrom(String postingDateFrom) {
        this.postingDateFrom = OptionalNullable.of(postingDateFrom);
    }

    /**
     * UnSetter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     */
    public void unsetPostingDateFrom() {
        postingDateFrom = null;
    }

    /**
     * Internal Getter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDateTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDateTo() {
        return this.postingDateTo;
    }

    /**
     * Getter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    public String getPostingDateTo() {
        return OptionalNullable.getFrom(postingDateTo);
    }

    /**
     * Setter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @param postingDateTo Value for String
     */
    @JsonSetter("PostingDateTo")
    public void setPostingDateTo(String postingDateTo) {
        this.postingDateTo = OptionalNullable.of(postingDateTo);
    }

    /**
     * UnSetter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     */
    public void unsetPostingDateTo() {
        postingDateTo = null;
    }

    /**
     * Internal Getter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     * @return Returns the Internal String
     */
    @JsonGetter("SalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSalesItemId() {
        return this.salesItemId;
    }

    /**
     * Getter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     * @return Returns the String
     */
    public String getSalesItemId() {
        return OptionalNullable.getFrom(salesItemId);
    }

    /**
     * Setter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     * @param salesItemId Value for String
     */
    @JsonSetter("SalesItemId")
    public void setSalesItemId(String salesItemId) {
        this.salesItemId = OptionalNullable.of(salesItemId);
    }

    /**
     * UnSetter for SalesItemId.
     * Unique SalesItemId (Either Billed on Unbilled) Optional Note: If IncludeFees is true then
     * this filter will be ignored
     */
    public void unsetSalesItemId() {
        salesItemId = null;
    }

    /**
     * Internal Getter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     * @return Returns the String
     */
    public String getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     * Unique Transaction Id Optional Note: If IncludeFees is true then this filter will be ignored
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. Format: yyyyMMdd
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("ValidInvoiceDateOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetValidInvoiceDateOnly() {
        return this.validInvoiceDateOnly;
    }

    /**
     * Getter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     * @return Returns the Boolean
     */
    public Boolean getValidInvoiceDateOnly() {
        return OptionalNullable.getFrom(validInvoiceDateOnly);
    }

    /**
     * Setter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     * @param validInvoiceDateOnly Value for Boolean
     */
    @JsonSetter("ValidInvoiceDateOnly")
    public void setValidInvoiceDateOnly(Boolean validInvoiceDateOnly) {
        this.validInvoiceDateOnly = OptionalNullable.of(validInvoiceDateOnly);
    }

    /**
     * UnSetter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked.
     */
    public void unsetValidInvoiceDateOnly() {
        validInvoiceDateOnly = null;
    }

    /**
     * Internal Getter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceFromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceFromDate() {
        return this.invoiceFromDate;
    }

    /**
     * Getter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    public String getInvoiceFromDate() {
        return OptionalNullable.getFrom(invoiceFromDate);
    }

    /**
     * Setter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @param invoiceFromDate Value for String
     */
    @JsonSetter("InvoiceFromDate")
    public void setInvoiceFromDate(String invoiceFromDate) {
        this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
    }

    /**
     * UnSetter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) day’s duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     */
    public void unsetInvoiceFromDate() {
        invoiceFromDate = null;
    }

    /**
     * Internal Getter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceToDate() {
        return this.invoiceToDate;
    }

    /**
     * Getter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getInvoiceToDate() {
        return OptionalNullable.getFrom(invoiceToDate);
    }

    /**
     * Setter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @param invoiceToDate Value for String
     */
    @JsonSetter("InvoiceToDate")
    public void setInvoiceToDate(String invoiceToDate) {
        this.invoiceToDate = OptionalNullable.of(invoiceToDate);
    }

    /**
     * UnSetter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     */
    public void unsetInvoiceToDate() {
        invoiceToDate = null;
    }

    /**
     * Internal Getter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelOnly() {
        return this.fuelOnly;
    }

    /**
     * Getter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @return Returns the Boolean
     */
    public Boolean getFuelOnly() {
        return OptionalNullable.getFrom(fuelOnly);
    }

    /**
     * Setter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = OptionalNullable.of(fuelOnly);
    }

    /**
     * UnSetter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked.
     */
    public void unsetFuelOnly() {
        fuelOnly = null;
    }

    /**
     * Internal Getter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeFees() {
        return this.includeFees;
    }

    /**
     * Getter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     * @return Returns the Boolean
     */
    public Boolean getIncludeFees() {
        return OptionalNullable.getFrom(includeFees);
    }

    /**
     * Setter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     * @param includeFees Value for Boolean
     */
    @JsonSetter("IncludeFees")
    public void setIncludeFees(Boolean includeFees) {
        this.includeFees = OptionalNullable.of(includeFees);
    }

    /**
     * UnSetter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore few filters, all
     * sales items along with fees included on the same response
     */
    public void unsetIncludeFees() {
        includeFees = null;
    }

    /**
     * Internal Getter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs. This will reduce the output payload size significantly for
     * large data sets and help faster transmission of data over networks.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("UseFieldId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetUseFieldId() {
        return this.useFieldId;
    }

    /**
     * Getter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs. This will reduce the output payload size significantly for
     * large data sets and help faster transmission of data over networks.
     * @return Returns the Boolean
     */
    public Boolean getUseFieldId() {
        return OptionalNullable.getFrom(useFieldId);
    }

    /**
     * Setter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs. This will reduce the output payload size significantly for
     * large data sets and help faster transmission of data over networks.
     * @param useFieldId Value for Boolean
     */
    @JsonSetter("UseFieldId")
    public void setUseFieldId(Boolean useFieldId) {
        this.useFieldId = OptionalNullable.of(useFieldId);
    }

    /**
     * UnSetter for UseFieldId.
     * True/False Optional Default value – False. When set to True, the property names in the output
     * will be replaced by Field IDs. This will reduce the output payload size significantly for
     * large data sets and help faster transmission of data over networks.
     */
    public void unsetUseFieldId() {
        useFieldId = null;
    }

    /**
     * Internal Getter for CurrentPage.
     * Current Page Number
     * @return Returns the Internal Integer
     */
    @JsonGetter("CurrentPage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCurrentPage() {
        return this.currentPage;
    }

    /**
     * Getter for CurrentPage.
     * Current Page Number
     * @return Returns the Integer
     */
    public Integer getCurrentPage() {
        return OptionalNullable.getFrom(currentPage);
    }

    /**
     * Setter for CurrentPage.
     * Current Page Number
     * @param currentPage Value for Integer
     */
    @JsonSetter("CurrentPage")
    public void setCurrentPage(Integer currentPage) {
        this.currentPage = OptionalNullable.of(currentPage);
    }

    /**
     * UnSetter for CurrentPage.
     * Current Page Number
     */
    public void unsetCurrentPage() {
        currentPage = null;
    }

    /**
     * Getter for PageSize.
     * Page Size – Number of records to show on a page Optional Default value 50
     * @return Returns the Integer
     */
    @JsonGetter("PageSize")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * Setter for PageSize.
     * Page Size – Number of records to show on a page Optional Default value 50
     * @param pageSize Value for Integer
     */
    @JsonSetter("PageSize")
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * Converts this PriceTransactionRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PriceTransactionRequest [" + "colCoId=" + colCoId + ", colCoCode=" + colCoCode
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", accounts=" + accounts
                + ", cardId=" + cardId + ", cardPAN=" + cardPAN + ", driverName=" + driverName
                + ", vehicleRegistrationNumber=" + vehicleRegistrationNumber + ", invoiceStatus="
                + invoiceStatus + ", productId=" + productId + ", productCode=" + productCode
                + ", purchasedInCountry=" + purchasedInCountry + ", cardGroupId=" + cardGroupId
                + ", sortOrder=" + sortOrder + ", fromDate=" + fromDate + ", toDate=" + toDate
                + ", period=" + period + ", siteCode=" + siteCode + ", siteGroupId=" + siteGroupId
                + ", postingDateFrom=" + postingDateFrom + ", postingDateTo=" + postingDateTo
                + ", salesItemId=" + salesItemId + ", transactionId=" + transactionId
                + ", invoiceDate=" + invoiceDate + ", invoiceNumber=" + invoiceNumber
                + ", validInvoiceDateOnly=" + validInvoiceDateOnly + ", invoiceFromDate="
                + invoiceFromDate + ", invoiceToDate=" + invoiceToDate + ", fuelOnly=" + fuelOnly
                + ", includeFees=" + includeFees + ", useFieldId=" + useFieldId + ", currentPage="
                + currentPage + ", pageSize=" + pageSize + "]";
    }

    /**
     * Builds a new {@link PriceTransactionRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PriceTransactionRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accounts(getAccounts())
                .pageSize(getPageSize());
        builder.colCoId = internalGetColCoId();
        builder.colCoCode = internalGetColCoCode();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.cardId = internalGetCardId();
        builder.cardPAN = internalGetCardPAN();
        builder.driverName = internalGetDriverName();
        builder.vehicleRegistrationNumber = internalGetVehicleRegistrationNumber();
        builder.invoiceStatus = internalGetInvoiceStatus();
        builder.productId = internalGetProductId();
        builder.productCode = internalGetProductCode();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.cardGroupId = internalGetCardGroupId();
        builder.sortOrder = internalGetSortOrder();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.period = internalGetPeriod();
        builder.siteCode = internalGetSiteCode();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.postingDateFrom = internalGetPostingDateFrom();
        builder.postingDateTo = internalGetPostingDateTo();
        builder.salesItemId = internalGetSalesItemId();
        builder.transactionId = internalGetTransactionId();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.validInvoiceDateOnly = internalGetValidInvoiceDateOnly();
        builder.invoiceFromDate = internalGetInvoiceFromDate();
        builder.invoiceToDate = internalGetInvoiceToDate();
        builder.fuelOnly = internalGetFuelOnly();
        builder.includeFees = internalGetIncludeFees();
        builder.useFieldId = internalGetUseFieldId();
        builder.currentPage = internalGetCurrentPage();
        return builder;
    }

    /**
     * Class to build instances of {@link PriceTransactionRequest}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private Accounts accounts;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> vehicleRegistrationNumber;
        private OptionalNullable<String> invoiceStatus;
        private OptionalNullable<Integer> productId;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> sortOrder;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<Integer> period;
        private OptionalNullable<String> siteCode;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> postingDateFrom;
        private OptionalNullable<String> postingDateTo;
        private OptionalNullable<String> salesItemId;
        private OptionalNullable<String> transactionId;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<Boolean> validInvoiceDateOnly;
        private OptionalNullable<String> invoiceFromDate;
        private OptionalNullable<String> invoiceToDate;
        private OptionalNullable<Boolean> fuelOnly;
        private OptionalNullable<Boolean> includeFees;
        private OptionalNullable<Boolean> useFieldId;
        private OptionalNullable<Integer> currentPage;
        private Integer pageSize;



        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(Accounts accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(String vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
            return this;
        }

        /**
         * UnSetter for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder unsetVehicleRegistrationNumber() {
            vehicleRegistrationNumber = null;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = OptionalNullable.of(invoiceStatus);
            return this;
        }

        /**
         * UnSetter for invoiceStatus.
         * @return Builder
         */
        public Builder unsetInvoiceStatus() {
            invoiceStatus = null;
            return this;
        }

        /**
         * Setter for productId.
         * @param  productId  Integer value for productId.
         * @return Builder
         */
        public Builder productId(Integer productId) {
            this.productId = OptionalNullable.of(productId);
            return this;
        }

        /**
         * UnSetter for productId.
         * @return Builder
         */
        public Builder unsetProductId() {
            productId = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for sortOrder.
         * @param  sortOrder  String value for sortOrder.
         * @return Builder
         */
        public Builder sortOrder(String sortOrder) {
            this.sortOrder = OptionalNullable.of(sortOrder);
            return this;
        }

        /**
         * UnSetter for sortOrder.
         * @return Builder
         */
        public Builder unsetSortOrder() {
            sortOrder = null;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = OptionalNullable.of(period);
            return this;
        }

        /**
         * UnSetter for period.
         * @return Builder
         */
        public Builder unsetPeriod() {
            period = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  String value for siteCode.
         * @return Builder
         */
        public Builder siteCode(String siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for postingDateFrom.
         * @param  postingDateFrom  String value for postingDateFrom.
         * @return Builder
         */
        public Builder postingDateFrom(String postingDateFrom) {
            this.postingDateFrom = OptionalNullable.of(postingDateFrom);
            return this;
        }

        /**
         * UnSetter for postingDateFrom.
         * @return Builder
         */
        public Builder unsetPostingDateFrom() {
            postingDateFrom = null;
            return this;
        }

        /**
         * Setter for postingDateTo.
         * @param  postingDateTo  String value for postingDateTo.
         * @return Builder
         */
        public Builder postingDateTo(String postingDateTo) {
            this.postingDateTo = OptionalNullable.of(postingDateTo);
            return this;
        }

        /**
         * UnSetter for postingDateTo.
         * @return Builder
         */
        public Builder unsetPostingDateTo() {
            postingDateTo = null;
            return this;
        }

        /**
         * Setter for salesItemId.
         * @param  salesItemId  String value for salesItemId.
         * @return Builder
         */
        public Builder salesItemId(String salesItemId) {
            this.salesItemId = OptionalNullable.of(salesItemId);
            return this;
        }

        /**
         * UnSetter for salesItemId.
         * @return Builder
         */
        public Builder unsetSalesItemId() {
            salesItemId = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for validInvoiceDateOnly.
         * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
         * @return Builder
         */
        public Builder validInvoiceDateOnly(Boolean validInvoiceDateOnly) {
            this.validInvoiceDateOnly = OptionalNullable.of(validInvoiceDateOnly);
            return this;
        }

        /**
         * UnSetter for validInvoiceDateOnly.
         * @return Builder
         */
        public Builder unsetValidInvoiceDateOnly() {
            validInvoiceDateOnly = null;
            return this;
        }

        /**
         * Setter for invoiceFromDate.
         * @param  invoiceFromDate  String value for invoiceFromDate.
         * @return Builder
         */
        public Builder invoiceFromDate(String invoiceFromDate) {
            this.invoiceFromDate = OptionalNullable.of(invoiceFromDate);
            return this;
        }

        /**
         * UnSetter for invoiceFromDate.
         * @return Builder
         */
        public Builder unsetInvoiceFromDate() {
            invoiceFromDate = null;
            return this;
        }

        /**
         * Setter for invoiceToDate.
         * @param  invoiceToDate  String value for invoiceToDate.
         * @return Builder
         */
        public Builder invoiceToDate(String invoiceToDate) {
            this.invoiceToDate = OptionalNullable.of(invoiceToDate);
            return this;
        }

        /**
         * UnSetter for invoiceToDate.
         * @return Builder
         */
        public Builder unsetInvoiceToDate() {
            invoiceToDate = null;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = OptionalNullable.of(fuelOnly);
            return this;
        }

        /**
         * UnSetter for fuelOnly.
         * @return Builder
         */
        public Builder unsetFuelOnly() {
            fuelOnly = null;
            return this;
        }

        /**
         * Setter for includeFees.
         * @param  includeFees  Boolean value for includeFees.
         * @return Builder
         */
        public Builder includeFees(Boolean includeFees) {
            this.includeFees = OptionalNullable.of(includeFees);
            return this;
        }

        /**
         * UnSetter for includeFees.
         * @return Builder
         */
        public Builder unsetIncludeFees() {
            includeFees = null;
            return this;
        }

        /**
         * Setter for useFieldId.
         * @param  useFieldId  Boolean value for useFieldId.
         * @return Builder
         */
        public Builder useFieldId(Boolean useFieldId) {
            this.useFieldId = OptionalNullable.of(useFieldId);
            return this;
        }

        /**
         * UnSetter for useFieldId.
         * @return Builder
         */
        public Builder unsetUseFieldId() {
            useFieldId = null;
            return this;
        }

        /**
         * Setter for currentPage.
         * @param  currentPage  Integer value for currentPage.
         * @return Builder
         */
        public Builder currentPage(Integer currentPage) {
            this.currentPage = OptionalNullable.of(currentPage);
            return this;
        }

        /**
         * UnSetter for currentPage.
         * @return Builder
         */
        public Builder unsetCurrentPage() {
            currentPage = null;
            return this;
        }

        /**
         * Setter for pageSize.
         * @param  pageSize  Integer value for pageSize.
         * @return Builder
         */
        public Builder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Builds a new {@link PriceTransactionRequest} object using the set fields.
         * @return {@link PriceTransactionRequest}
         */
        public PriceTransactionRequest build() {
            return new PriceTransactionRequest(colCoId, colCoCode, payerId, payerNumber, accounts,
                    cardId, cardPAN, driverName, vehicleRegistrationNumber, invoiceStatus,
                    productId, productCode, purchasedInCountry, cardGroupId, sortOrder, fromDate,
                    toDate, period, siteCode, siteGroupId, postingDateFrom, postingDateTo,
                    salesItemId, transactionId, invoiceDate, invoiceNumber, validInvoiceDateOnly,
                    invoiceFromDate, invoiceToDate, fuelOnly, includeFees, useFieldId, currentPage,
                    pageSize);
        }
    }
}
