/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for LoggedInUserResponse type.
 */
public class LoggedInUserResponse {
    private OptionalNullable<String> userName;
    private OptionalNullable<String> displayName;
    private OptionalNullable<String> idMSSOID;
    private OptionalNullable<String> preferredLanguage;
    private Boolean isSuperAdmin;
    private OptionalNullable<String> dateFormat;
    private OptionalNullable<String> timeFormat;
    private OptionalNullable<Integer> weekBegins;
    private Boolean displayWeek;
    private OptionalNullable<String> cSVSeparator;
    private OptionalNullable<String> decimalSeparator;
    private OptionalNullable<String> reportFormat;
    private Boolean hasAPIAccess;
    private List<Role> roles;
    private List<PayerAccess> payers;
    private List<AccountAccess> accounts;
    private List<ColCoAccess> collectingCompanies;
    private List<EIDAccess> eIDAccessDetails;
    private OptionalNullable<String> userClassificationBySystem;
    private OptionalNullable<String> userClassificationByShell;
    private OptionalNullable<Integer> payerCount;
    private OptionalNullable<Integer> accountCount;
    private OptionalNullable<Integer> cardCount;
    private ErrorStatus error;
    private String requestId;

    /**
     * Default constructor.
     */
    public LoggedInUserResponse() {
        isSuperAdmin = false;
        displayWeek = true;
        hasAPIAccess = true;
    }

    /**
     * Initialization constructor.
     * @param  userName  String value for userName.
     * @param  displayName  String value for displayName.
     * @param  idMSSOID  String value for idMSSOID.
     * @param  preferredLanguage  String value for preferredLanguage.
     * @param  isSuperAdmin  Boolean value for isSuperAdmin.
     * @param  dateFormat  String value for dateFormat.
     * @param  timeFormat  String value for timeFormat.
     * @param  weekBegins  Integer value for weekBegins.
     * @param  displayWeek  Boolean value for displayWeek.
     * @param  cSVSeparator  String value for cSVSeparator.
     * @param  decimalSeparator  String value for decimalSeparator.
     * @param  reportFormat  String value for reportFormat.
     * @param  hasAPIAccess  Boolean value for hasAPIAccess.
     * @param  roles  List of Role value for roles.
     * @param  payers  List of PayerAccess value for payers.
     * @param  accounts  List of AccountAccess value for accounts.
     * @param  collectingCompanies  List of ColCoAccess value for collectingCompanies.
     * @param  eIDAccessDetails  List of EIDAccess value for eIDAccessDetails.
     * @param  userClassificationBySystem  String value for userClassificationBySystem.
     * @param  userClassificationByShell  String value for userClassificationByShell.
     * @param  payerCount  Integer value for payerCount.
     * @param  accountCount  Integer value for accountCount.
     * @param  cardCount  Integer value for cardCount.
     * @param  error  ErrorStatus value for error.
     * @param  requestId  String value for requestId.
     */
    public LoggedInUserResponse(
            String userName,
            String displayName,
            String idMSSOID,
            String preferredLanguage,
            Boolean isSuperAdmin,
            String dateFormat,
            String timeFormat,
            Integer weekBegins,
            Boolean displayWeek,
            String cSVSeparator,
            String decimalSeparator,
            String reportFormat,
            Boolean hasAPIAccess,
            List<Role> roles,
            List<PayerAccess> payers,
            List<AccountAccess> accounts,
            List<ColCoAccess> collectingCompanies,
            List<EIDAccess> eIDAccessDetails,
            String userClassificationBySystem,
            String userClassificationByShell,
            Integer payerCount,
            Integer accountCount,
            Integer cardCount,
            ErrorStatus error,
            String requestId) {
        this.userName = OptionalNullable.of(userName);
        this.displayName = OptionalNullable.of(displayName);
        this.idMSSOID = OptionalNullable.of(idMSSOID);
        this.preferredLanguage = OptionalNullable.of(preferredLanguage);
        this.isSuperAdmin = isSuperAdmin;
        this.dateFormat = OptionalNullable.of(dateFormat);
        this.timeFormat = OptionalNullable.of(timeFormat);
        this.weekBegins = OptionalNullable.of(weekBegins);
        this.displayWeek = displayWeek;
        this.cSVSeparator = OptionalNullable.of(cSVSeparator);
        this.decimalSeparator = OptionalNullable.of(decimalSeparator);
        this.reportFormat = OptionalNullable.of(reportFormat);
        this.hasAPIAccess = hasAPIAccess;
        this.roles = roles;
        this.payers = payers;
        this.accounts = accounts;
        this.collectingCompanies = collectingCompanies;
        this.eIDAccessDetails = eIDAccessDetails;
        this.userClassificationBySystem = OptionalNullable.of(userClassificationBySystem);
        this.userClassificationByShell = OptionalNullable.of(userClassificationByShell);
        this.payerCount = OptionalNullable.of(payerCount);
        this.accountCount = OptionalNullable.of(accountCount);
        this.cardCount = OptionalNullable.of(cardCount);
        this.error = error;
        this.requestId = requestId;
    }

    /**
     * Initialization constructor.
     * @param  userName  String value for userName.
     * @param  displayName  String value for displayName.
     * @param  idMSSOID  String value for idMSSOID.
     * @param  preferredLanguage  String value for preferredLanguage.
     * @param  isSuperAdmin  Boolean value for isSuperAdmin.
     * @param  dateFormat  String value for dateFormat.
     * @param  timeFormat  String value for timeFormat.
     * @param  weekBegins  Integer value for weekBegins.
     * @param  displayWeek  Boolean value for displayWeek.
     * @param  cSVSeparator  String value for cSVSeparator.
     * @param  decimalSeparator  String value for decimalSeparator.
     * @param  reportFormat  String value for reportFormat.
     * @param  hasAPIAccess  Boolean value for hasAPIAccess.
     * @param  roles  List of Role value for roles.
     * @param  payers  List of PayerAccess value for payers.
     * @param  accounts  List of AccountAccess value for accounts.
     * @param  collectingCompanies  List of ColCoAccess value for collectingCompanies.
     * @param  eIDAccessDetails  List of EIDAccess value for eIDAccessDetails.
     * @param  userClassificationBySystem  String value for userClassificationBySystem.
     * @param  userClassificationByShell  String value for userClassificationByShell.
     * @param  payerCount  Integer value for payerCount.
     * @param  accountCount  Integer value for accountCount.
     * @param  cardCount  Integer value for cardCount.
     * @param  error  ErrorStatus value for error.
     * @param  requestId  String value for requestId.
     */

    protected LoggedInUserResponse(OptionalNullable<String> userName,
            OptionalNullable<String> displayName, OptionalNullable<String> idMSSOID,
            OptionalNullable<String> preferredLanguage, Boolean isSuperAdmin,
            OptionalNullable<String> dateFormat, OptionalNullable<String> timeFormat,
            OptionalNullable<Integer> weekBegins, Boolean displayWeek,
            OptionalNullable<String> cSVSeparator, OptionalNullable<String> decimalSeparator,
            OptionalNullable<String> reportFormat, Boolean hasAPIAccess, List<Role> roles,
            List<PayerAccess> payers, List<AccountAccess> accounts,
            List<ColCoAccess> collectingCompanies, List<EIDAccess> eIDAccessDetails,
            OptionalNullable<String> userClassificationBySystem,
            OptionalNullable<String> userClassificationByShell,
            OptionalNullable<Integer> payerCount, OptionalNullable<Integer> accountCount,
            OptionalNullable<Integer> cardCount, ErrorStatus error, String requestId) {
        this.userName = userName;
        this.displayName = displayName;
        this.idMSSOID = idMSSOID;
        this.preferredLanguage = preferredLanguage;
        this.isSuperAdmin = isSuperAdmin;
        this.dateFormat = dateFormat;
        this.timeFormat = timeFormat;
        this.weekBegins = weekBegins;
        this.displayWeek = displayWeek;
        this.cSVSeparator = cSVSeparator;
        this.decimalSeparator = decimalSeparator;
        this.reportFormat = reportFormat;
        this.hasAPIAccess = hasAPIAccess;
        this.roles = roles;
        this.payers = payers;
        this.accounts = accounts;
        this.collectingCompanies = collectingCompanies;
        this.eIDAccessDetails = eIDAccessDetails;
        this.userClassificationBySystem = userClassificationBySystem;
        this.userClassificationByShell = userClassificationByShell;
        this.payerCount = payerCount;
        this.accountCount = accountCount;
        this.cardCount = cardCount;
        this.error = error;
        this.requestId = requestId;
    }

    /**
     * Internal Getter for UserName.
     * Logged in User Identifier
     * @return Returns the Internal String
     */
    @JsonGetter("UserName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUserName() {
        return this.userName;
    }

    /**
     * Getter for UserName.
     * Logged in User Identifier
     * @return Returns the String
     */
    public String getUserName() {
        return OptionalNullable.getFrom(userName);
    }

    /**
     * Setter for UserName.
     * Logged in User Identifier
     * @param userName Value for String
     */
    @JsonSetter("UserName")
    public void setUserName(String userName) {
        this.userName = OptionalNullable.of(userName);
    }

    /**
     * UnSetter for UserName.
     * Logged in User Identifier
     */
    public void unsetUserName() {
        userName = null;
    }

    /**
     * Internal Getter for DisplayName.
     * Name of the logged in user.
     * @return Returns the Internal String
     */
    @JsonGetter("DisplayName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDisplayName() {
        return this.displayName;
    }

    /**
     * Getter for DisplayName.
     * Name of the logged in user.
     * @return Returns the String
     */
    public String getDisplayName() {
        return OptionalNullable.getFrom(displayName);
    }

    /**
     * Setter for DisplayName.
     * Name of the logged in user.
     * @param displayName Value for String
     */
    @JsonSetter("DisplayName")
    public void setDisplayName(String displayName) {
        this.displayName = OptionalNullable.of(displayName);
    }

    /**
     * UnSetter for DisplayName.
     * Name of the logged in user.
     */
    public void unsetDisplayName() {
        displayName = null;
    }

    /**
     * Internal Getter for IdMSSOID.
     * Single Sign On/Unique Identifier of the User in Identity Management system
     * @return Returns the Internal String
     */
    @JsonGetter("IdMSSOID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIdMSSOID() {
        return this.idMSSOID;
    }

    /**
     * Getter for IdMSSOID.
     * Single Sign On/Unique Identifier of the User in Identity Management system
     * @return Returns the String
     */
    public String getIdMSSOID() {
        return OptionalNullable.getFrom(idMSSOID);
    }

    /**
     * Setter for IdMSSOID.
     * Single Sign On/Unique Identifier of the User in Identity Management system
     * @param idMSSOID Value for String
     */
    @JsonSetter("IdMSSOID")
    public void setIdMSSOID(String idMSSOID) {
        this.idMSSOID = OptionalNullable.of(idMSSOID);
    }

    /**
     * UnSetter for IdMSSOID.
     * Single Sign On/Unique Identifier of the User in Identity Management system
     */
    public void unsetIdMSSOID() {
        idMSSOID = null;
    }

    /**
     * Internal Getter for PreferredLanguage.
     * ISO culture code/ Language chosen by the logged in user
     * @return Returns the Internal String
     */
    @JsonGetter("PreferredLanguage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPreferredLanguage() {
        return this.preferredLanguage;
    }

    /**
     * Getter for PreferredLanguage.
     * ISO culture code/ Language chosen by the logged in user
     * @return Returns the String
     */
    public String getPreferredLanguage() {
        return OptionalNullable.getFrom(preferredLanguage);
    }

    /**
     * Setter for PreferredLanguage.
     * ISO culture code/ Language chosen by the logged in user
     * @param preferredLanguage Value for String
     */
    @JsonSetter("PreferredLanguage")
    public void setPreferredLanguage(String preferredLanguage) {
        this.preferredLanguage = OptionalNullable.of(preferredLanguage);
    }

    /**
     * UnSetter for PreferredLanguage.
     * ISO culture code/ Language chosen by the logged in user
     */
    public void unsetPreferredLanguage() {
        preferredLanguage = null;
    }

    /**
     * Getter for IsSuperAdmin.
     * Whether the user is a super administrator
     * @return Returns the Boolean
     */
    @JsonGetter("IsSuperAdmin")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsSuperAdmin() {
        return isSuperAdmin;
    }

    /**
     * Setter for IsSuperAdmin.
     * Whether the user is a super administrator
     * @param isSuperAdmin Value for Boolean
     */
    @JsonSetter("IsSuperAdmin")
    public void setIsSuperAdmin(Boolean isSuperAdmin) {
        this.isSuperAdmin = isSuperAdmin;
    }

    /**
     * Internal Getter for DateFormat.
     * Preferred Date format for the logged in user
     * @return Returns the Internal String
     */
    @JsonGetter("DateFormat")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDateFormat() {
        return this.dateFormat;
    }

    /**
     * Getter for DateFormat.
     * Preferred Date format for the logged in user
     * @return Returns the String
     */
    public String getDateFormat() {
        return OptionalNullable.getFrom(dateFormat);
    }

    /**
     * Setter for DateFormat.
     * Preferred Date format for the logged in user
     * @param dateFormat Value for String
     */
    @JsonSetter("DateFormat")
    public void setDateFormat(String dateFormat) {
        this.dateFormat = OptionalNullable.of(dateFormat);
    }

    /**
     * UnSetter for DateFormat.
     * Preferred Date format for the logged in user
     */
    public void unsetDateFormat() {
        dateFormat = null;
    }

    /**
     * Internal Getter for TimeFormat.
     * Preferred Time format for the logged in user
     * @return Returns the Internal String
     */
    @JsonGetter("TimeFormat")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTimeFormat() {
        return this.timeFormat;
    }

    /**
     * Getter for TimeFormat.
     * Preferred Time format for the logged in user
     * @return Returns the String
     */
    public String getTimeFormat() {
        return OptionalNullable.getFrom(timeFormat);
    }

    /**
     * Setter for TimeFormat.
     * Preferred Time format for the logged in user
     * @param timeFormat Value for String
     */
    @JsonSetter("TimeFormat")
    public void setTimeFormat(String timeFormat) {
        this.timeFormat = OptionalNullable.of(timeFormat);
    }

    /**
     * UnSetter for TimeFormat.
     * Preferred Time format for the logged in user
     */
    public void unsetTimeFormat() {
        timeFormat = null;
    }

    /**
     * Internal Getter for WeekBegins.
     * Preferred Day to Begin the Week. The value will be between 1 to 7 or null.
     * @return Returns the Internal Integer
     */
    @JsonGetter("WeekBegins")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetWeekBegins() {
        return this.weekBegins;
    }

    /**
     * Getter for WeekBegins.
     * Preferred Day to Begin the Week. The value will be between 1 to 7 or null.
     * @return Returns the Integer
     */
    public Integer getWeekBegins() {
        return OptionalNullable.getFrom(weekBegins);
    }

    /**
     * Setter for WeekBegins.
     * Preferred Day to Begin the Week. The value will be between 1 to 7 or null.
     * @param weekBegins Value for Integer
     */
    @JsonSetter("WeekBegins")
    public void setWeekBegins(Integer weekBegins) {
        this.weekBegins = OptionalNullable.of(weekBegins);
    }

    /**
     * UnSetter for WeekBegins.
     * Preferred Day to Begin the Week. The value will be between 1 to 7 or null.
     */
    public void unsetWeekBegins() {
        weekBegins = null;
    }

    /**
     * Getter for DisplayWeek.
     * Preferred Display Week on Fuel Prices configuration for the logged in User.
     * @return Returns the Boolean
     */
    @JsonGetter("DisplayWeek")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDisplayWeek() {
        return displayWeek;
    }

    /**
     * Setter for DisplayWeek.
     * Preferred Display Week on Fuel Prices configuration for the logged in User.
     * @param displayWeek Value for Boolean
     */
    @JsonSetter("DisplayWeek")
    public void setDisplayWeek(Boolean displayWeek) {
        this.displayWeek = displayWeek;
    }

    /**
     * Internal Getter for CSVSeparator.
     * Preferred CSV Separator for the logged in user.
     * @return Returns the Internal String
     */
    @JsonGetter("CSVSeparator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCSVSeparator() {
        return this.cSVSeparator;
    }

    /**
     * Getter for CSVSeparator.
     * Preferred CSV Separator for the logged in user.
     * @return Returns the String
     */
    public String getCSVSeparator() {
        return OptionalNullable.getFrom(cSVSeparator);
    }

    /**
     * Setter for CSVSeparator.
     * Preferred CSV Separator for the logged in user.
     * @param cSVSeparator Value for String
     */
    @JsonSetter("CSVSeparator")
    public void setCSVSeparator(String cSVSeparator) {
        this.cSVSeparator = OptionalNullable.of(cSVSeparator);
    }

    /**
     * UnSetter for CSVSeparator.
     * Preferred CSV Separator for the logged in user.
     */
    public void unsetCSVSeparator() {
        cSVSeparator = null;
    }

    /**
     * Internal Getter for DecimalSeparator.
     * Preferred Decimal separator configured for the logged in user Note: - Colco default value
     * (configured at Microservices) is returned when the user is not provided or does not exist.
     * @return Returns the Internal String
     */
    @JsonGetter("DecimalSeparator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDecimalSeparator() {
        return this.decimalSeparator;
    }

    /**
     * Getter for DecimalSeparator.
     * Preferred Decimal separator configured for the logged in user Note: - Colco default value
     * (configured at Microservices) is returned when the user is not provided or does not exist.
     * @return Returns the String
     */
    public String getDecimalSeparator() {
        return OptionalNullable.getFrom(decimalSeparator);
    }

    /**
     * Setter for DecimalSeparator.
     * Preferred Decimal separator configured for the logged in user Note: - Colco default value
     * (configured at Microservices) is returned when the user is not provided or does not exist.
     * @param decimalSeparator Value for String
     */
    @JsonSetter("DecimalSeparator")
    public void setDecimalSeparator(String decimalSeparator) {
        this.decimalSeparator = OptionalNullable.of(decimalSeparator);
    }

    /**
     * UnSetter for DecimalSeparator.
     * Preferred Decimal separator configured for the logged in user Note: - Colco default value
     * (configured at Microservices) is returned when the user is not provided or does not exist.
     */
    public void unsetDecimalSeparator() {
        decimalSeparator = null;
    }

    /**
     * Internal Getter for ReportFormat.
     * Preferred report format configured for the logged in user
     * @return Returns the Internal String
     */
    @JsonGetter("ReportFormat")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReportFormat() {
        return this.reportFormat;
    }

    /**
     * Getter for ReportFormat.
     * Preferred report format configured for the logged in user
     * @return Returns the String
     */
    public String getReportFormat() {
        return OptionalNullable.getFrom(reportFormat);
    }

    /**
     * Setter for ReportFormat.
     * Preferred report format configured for the logged in user
     * @param reportFormat Value for String
     */
    @JsonSetter("ReportFormat")
    public void setReportFormat(String reportFormat) {
        this.reportFormat = OptionalNullable.of(reportFormat);
    }

    /**
     * UnSetter for ReportFormat.
     * Preferred report format configured for the logged in user
     */
    public void unsetReportFormat() {
        reportFormat = null;
    }

    /**
     * Getter for HasAPIAccess.
     * True/False True, if user has access to the requested API. This is validated based on the role
     * Vs API access matrix and client Vs API access matrix.
     * @return Returns the Boolean
     */
    @JsonGetter("HasAPIAccess")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHasAPIAccess() {
        return hasAPIAccess;
    }

    /**
     * Setter for HasAPIAccess.
     * True/False True, if user has access to the requested API. This is validated based on the role
     * Vs API access matrix and client Vs API access matrix.
     * @param hasAPIAccess Value for Boolean
     */
    @JsonSetter("HasAPIAccess")
    public void setHasAPIAccess(Boolean hasAPIAccess) {
        this.hasAPIAccess = hasAPIAccess;
    }

    /**
     * Getter for Roles.
     * List of roles the user have access to
     * @return Returns the List of Role
     */
    @JsonGetter("Roles")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Role> getRoles() {
        return roles;
    }

    /**
     * Setter for Roles.
     * List of roles the user have access to
     * @param roles Value for List of Role
     */
    @JsonSetter("Roles")
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    /**
     * Getter for Payers.
     * List of payers which the user has access to. • It will return 250 payers only and it is
     * configurable. If the user has more than that, the remaining will be ignored. • The payer
     * which is marked as default will be the first item in the output. Note: This list will be
     * empty for users mapped with roles which has either IsShellAdmin or IsServiceAccount set to
     * true as their access level is controlled at ColCo level only.
     * @return Returns the List of PayerAccess
     */
    @JsonGetter("Payers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PayerAccess> getPayers() {
        return payers;
    }

    /**
     * Setter for Payers.
     * List of payers which the user has access to. • It will return 250 payers only and it is
     * configurable. If the user has more than that, the remaining will be ignored. • The payer
     * which is marked as default will be the first item in the output. Note: This list will be
     * empty for users mapped with roles which has either IsShellAdmin or IsServiceAccount set to
     * true as their access level is controlled at ColCo level only.
     * @param payers Value for List of PayerAccess
     */
    @JsonSetter("Payers")
    public void setPayers(List<PayerAccess> payers) {
        this.payers = payers;
    }

    /**
     * Getter for Accounts.
     * List of accounts which the user has access to. Note: This list will be empty for users mapped
     * with roles which has either IsCustomerAdmin, IsShellAdmin or IsServiceAccount set to true as
     * their access level is controller at either ColCo or payer level only.
     * @return Returns the List of AccountAccess
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<AccountAccess> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * List of accounts which the user has access to. Note: This list will be empty for users mapped
     * with roles which has either IsCustomerAdmin, IsShellAdmin or IsServiceAccount set to true as
     * their access level is controller at either ColCo or payer level only.
     * @param accounts Value for List of AccountAccess
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<AccountAccess> accounts) {
        this.accounts = accounts;
    }

    /**
     * Getter for CollectingCompanies.
     * List of collecting companies to which the user has access to Note: This list will be empty
     * for users mapped with roles which has either IsCustomerAdmin or IsCustomerUser set to true as
     * their access level is controller at Payer or Account level.
     * @return Returns the List of ColCoAccess
     */
    @JsonGetter("CollectingCompanies")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ColCoAccess> getCollectingCompanies() {
        return collectingCompanies;
    }

    /**
     * Setter for CollectingCompanies.
     * List of collecting companies to which the user has access to Note: This list will be empty
     * for users mapped with roles which has either IsCustomerAdmin or IsCustomerUser set to true as
     * their access level is controller at Payer or Account level.
     * @param collectingCompanies Value for List of ColCoAccess
     */
    @JsonSetter("CollectingCompanies")
    public void setCollectingCompanies(List<ColCoAccess> collectingCompanies) {
        this.collectingCompanies = collectingCompanies;
    }

    /**
     * Getter for EIDAccessDetails.
     * List of Electronic Invoice Data configured for the user. Note: This list will be empty if the
     * value of EIDDetails is set to false or empty in the request.
     * @return Returns the List of EIDAccess
     */
    @JsonGetter("EIDAccessDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<EIDAccess> getEIDAccessDetails() {
        return eIDAccessDetails;
    }

    /**
     * Setter for EIDAccessDetails.
     * List of Electronic Invoice Data configured for the user. Note: This list will be empty if the
     * value of EIDDetails is set to false or empty in the request.
     * @param eIDAccessDetails Value for List of EIDAccess
     */
    @JsonSetter("EIDAccessDetails")
    public void setEIDAccessDetails(List<EIDAccess> eIDAccessDetails) {
        this.eIDAccessDetails = eIDAccessDetails;
    }

    /**
     * Internal Getter for UserClassificationBySystem.
     * User classification by system.
     * @return Returns the Internal String
     */
    @JsonGetter("UserClassificationBySystem")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUserClassificationBySystem() {
        return this.userClassificationBySystem;
    }

    /**
     * Getter for UserClassificationBySystem.
     * User classification by system.
     * @return Returns the String
     */
    public String getUserClassificationBySystem() {
        return OptionalNullable.getFrom(userClassificationBySystem);
    }

    /**
     * Setter for UserClassificationBySystem.
     * User classification by system.
     * @param userClassificationBySystem Value for String
     */
    @JsonSetter("UserClassificationBySystem")
    public void setUserClassificationBySystem(String userClassificationBySystem) {
        this.userClassificationBySystem = OptionalNullable.of(userClassificationBySystem);
    }

    /**
     * UnSetter for UserClassificationBySystem.
     * User classification by system.
     */
    public void unsetUserClassificationBySystem() {
        userClassificationBySystem = null;
    }

    /**
     * Internal Getter for UserClassificationByShell.
     * User classification by Shell.
     * @return Returns the Internal String
     */
    @JsonGetter("UserClassificationByShell")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUserClassificationByShell() {
        return this.userClassificationByShell;
    }

    /**
     * Getter for UserClassificationByShell.
     * User classification by Shell.
     * @return Returns the String
     */
    public String getUserClassificationByShell() {
        return OptionalNullable.getFrom(userClassificationByShell);
    }

    /**
     * Setter for UserClassificationByShell.
     * User classification by Shell.
     * @param userClassificationByShell Value for String
     */
    @JsonSetter("UserClassificationByShell")
    public void setUserClassificationByShell(String userClassificationByShell) {
        this.userClassificationByShell = OptionalNullable.of(userClassificationByShell);
    }

    /**
     * UnSetter for UserClassificationByShell.
     * User classification by Shell.
     */
    public void unsetUserClassificationByShell() {
        userClassificationByShell = null;
    }

    /**
     * Internal Getter for PayerCount.
     * Count of payers accessible to the user at the time when user was created or last updated.
     * Note: Count may vary based on customer operations hence it may not be an up to date value.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerCount() {
        return this.payerCount;
    }

    /**
     * Getter for PayerCount.
     * Count of payers accessible to the user at the time when user was created or last updated.
     * Note: Count may vary based on customer operations hence it may not be an up to date value.
     * @return Returns the Integer
     */
    public Integer getPayerCount() {
        return OptionalNullable.getFrom(payerCount);
    }

    /**
     * Setter for PayerCount.
     * Count of payers accessible to the user at the time when user was created or last updated.
     * Note: Count may vary based on customer operations hence it may not be an up to date value.
     * @param payerCount Value for Integer
     */
    @JsonSetter("PayerCount")
    public void setPayerCount(Integer payerCount) {
        this.payerCount = OptionalNullable.of(payerCount);
    }

    /**
     * UnSetter for PayerCount.
     * Count of payers accessible to the user at the time when user was created or last updated.
     * Note: Count may vary based on customer operations hence it may not be an up to date value.
     */
    public void unsetPayerCount() {
        payerCount = null;
    }

    /**
     * Internal Getter for AccountCount.
     * Count of accounts at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountCount() {
        return this.accountCount;
    }

    /**
     * Getter for AccountCount.
     * Count of accounts at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @return Returns the Integer
     */
    public Integer getAccountCount() {
        return OptionalNullable.getFrom(accountCount);
    }

    /**
     * Setter for AccountCount.
     * Count of accounts at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @param accountCount Value for Integer
     */
    @JsonSetter("AccountCount")
    public void setAccountCount(Integer accountCount) {
        this.accountCount = OptionalNullable.of(accountCount);
    }

    /**
     * UnSetter for AccountCount.
     * Count of accounts at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     */
    public void unsetAccountCount() {
        accountCount = null;
    }

    /**
     * Internal Getter for CardCount.
     * Count of cards at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardCount() {
        return this.cardCount;
    }

    /**
     * Getter for CardCount.
     * Count of cards at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @return Returns the Integer
     */
    public Integer getCardCount() {
        return OptionalNullable.getFrom(cardCount);
    }

    /**
     * Setter for CardCount.
     * Count of cards at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     * @param cardCount Value for Integer
     */
    @JsonSetter("CardCount")
    public void setCardCount(Integer cardCount) {
        this.cardCount = OptionalNullable.of(cardCount);
    }

    /**
     * UnSetter for CardCount.
     * Count of cards at the time when the user was created or last updated. Note: Count may vary
     * based on customer operations hence it may not be an up to date value.
     */
    public void unsetCardCount() {
        cardCount = null;
    }

    /**
     * Getter for Error.
     * @return Returns the ErrorStatus
     */
    @JsonGetter("Error")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ErrorStatus getError() {
        return error;
    }

    /**
     * Setter for Error.
     * @param error Value for ErrorStatus
     */
    @JsonSetter("Error")
    public void setError(ErrorStatus error) {
        this.error = error;
    }

    /**
     * Getter for RequestId.
     * Request Id of the API call
     * @return Returns the String
     */
    @JsonGetter("RequestId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRequestId() {
        return requestId;
    }

    /**
     * Setter for RequestId.
     * Request Id of the API call
     * @param requestId Value for String
     */
    @JsonSetter("RequestId")
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Converts this LoggedInUserResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LoggedInUserResponse [" + "userName=" + userName + ", displayName=" + displayName
                + ", idMSSOID=" + idMSSOID + ", preferredLanguage=" + preferredLanguage
                + ", isSuperAdmin=" + isSuperAdmin + ", dateFormat=" + dateFormat + ", timeFormat="
                + timeFormat + ", weekBegins=" + weekBegins + ", displayWeek=" + displayWeek
                + ", cSVSeparator=" + cSVSeparator + ", decimalSeparator=" + decimalSeparator
                + ", reportFormat=" + reportFormat + ", hasAPIAccess=" + hasAPIAccess + ", roles="
                + roles + ", payers=" + payers + ", accounts=" + accounts + ", collectingCompanies="
                + collectingCompanies + ", eIDAccessDetails=" + eIDAccessDetails
                + ", userClassificationBySystem=" + userClassificationBySystem
                + ", userClassificationByShell=" + userClassificationByShell + ", payerCount="
                + payerCount + ", accountCount=" + accountCount + ", cardCount=" + cardCount
                + ", error=" + error + ", requestId=" + requestId + "]";
    }

    /**
     * Builds a new {@link LoggedInUserResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LoggedInUserResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .isSuperAdmin(getIsSuperAdmin())
                .displayWeek(getDisplayWeek())
                .hasAPIAccess(getHasAPIAccess())
                .roles(getRoles())
                .payers(getPayers())
                .accounts(getAccounts())
                .collectingCompanies(getCollectingCompanies())
                .eIDAccessDetails(getEIDAccessDetails())
                .error(getError())
                .requestId(getRequestId());
        builder.userName = internalGetUserName();
        builder.displayName = internalGetDisplayName();
        builder.idMSSOID = internalGetIdMSSOID();
        builder.preferredLanguage = internalGetPreferredLanguage();
        builder.dateFormat = internalGetDateFormat();
        builder.timeFormat = internalGetTimeFormat();
        builder.weekBegins = internalGetWeekBegins();
        builder.cSVSeparator = internalGetCSVSeparator();
        builder.decimalSeparator = internalGetDecimalSeparator();
        builder.reportFormat = internalGetReportFormat();
        builder.userClassificationBySystem = internalGetUserClassificationBySystem();
        builder.userClassificationByShell = internalGetUserClassificationByShell();
        builder.payerCount = internalGetPayerCount();
        builder.accountCount = internalGetAccountCount();
        builder.cardCount = internalGetCardCount();
        return builder;
    }

    /**
     * Class to build instances of {@link LoggedInUserResponse}.
     */
    public static class Builder {
        private OptionalNullable<String> userName;
        private OptionalNullable<String> displayName;
        private OptionalNullable<String> idMSSOID;
        private OptionalNullable<String> preferredLanguage;
        private Boolean isSuperAdmin = false;
        private OptionalNullable<String> dateFormat;
        private OptionalNullable<String> timeFormat;
        private OptionalNullable<Integer> weekBegins;
        private Boolean displayWeek = true;
        private OptionalNullable<String> cSVSeparator;
        private OptionalNullable<String> decimalSeparator;
        private OptionalNullable<String> reportFormat;
        private Boolean hasAPIAccess = true;
        private List<Role> roles;
        private List<PayerAccess> payers;
        private List<AccountAccess> accounts;
        private List<ColCoAccess> collectingCompanies;
        private List<EIDAccess> eIDAccessDetails;
        private OptionalNullable<String> userClassificationBySystem;
        private OptionalNullable<String> userClassificationByShell;
        private OptionalNullable<Integer> payerCount;
        private OptionalNullable<Integer> accountCount;
        private OptionalNullable<Integer> cardCount;
        private ErrorStatus error;
        private String requestId;



        /**
         * Setter for userName.
         * @param  userName  String value for userName.
         * @return Builder
         */
        public Builder userName(String userName) {
            this.userName = OptionalNullable.of(userName);
            return this;
        }

        /**
         * UnSetter for userName.
         * @return Builder
         */
        public Builder unsetUserName() {
            userName = null;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = OptionalNullable.of(displayName);
            return this;
        }

        /**
         * UnSetter for displayName.
         * @return Builder
         */
        public Builder unsetDisplayName() {
            displayName = null;
            return this;
        }

        /**
         * Setter for idMSSOID.
         * @param  idMSSOID  String value for idMSSOID.
         * @return Builder
         */
        public Builder idMSSOID(String idMSSOID) {
            this.idMSSOID = OptionalNullable.of(idMSSOID);
            return this;
        }

        /**
         * UnSetter for idMSSOID.
         * @return Builder
         */
        public Builder unsetIdMSSOID() {
            idMSSOID = null;
            return this;
        }

        /**
         * Setter for preferredLanguage.
         * @param  preferredLanguage  String value for preferredLanguage.
         * @return Builder
         */
        public Builder preferredLanguage(String preferredLanguage) {
            this.preferredLanguage = OptionalNullable.of(preferredLanguage);
            return this;
        }

        /**
         * UnSetter for preferredLanguage.
         * @return Builder
         */
        public Builder unsetPreferredLanguage() {
            preferredLanguage = null;
            return this;
        }

        /**
         * Setter for isSuperAdmin.
         * @param  isSuperAdmin  Boolean value for isSuperAdmin.
         * @return Builder
         */
        public Builder isSuperAdmin(Boolean isSuperAdmin) {
            this.isSuperAdmin = isSuperAdmin;
            return this;
        }

        /**
         * Setter for dateFormat.
         * @param  dateFormat  String value for dateFormat.
         * @return Builder
         */
        public Builder dateFormat(String dateFormat) {
            this.dateFormat = OptionalNullable.of(dateFormat);
            return this;
        }

        /**
         * UnSetter for dateFormat.
         * @return Builder
         */
        public Builder unsetDateFormat() {
            dateFormat = null;
            return this;
        }

        /**
         * Setter for timeFormat.
         * @param  timeFormat  String value for timeFormat.
         * @return Builder
         */
        public Builder timeFormat(String timeFormat) {
            this.timeFormat = OptionalNullable.of(timeFormat);
            return this;
        }

        /**
         * UnSetter for timeFormat.
         * @return Builder
         */
        public Builder unsetTimeFormat() {
            timeFormat = null;
            return this;
        }

        /**
         * Setter for weekBegins.
         * @param  weekBegins  Integer value for weekBegins.
         * @return Builder
         */
        public Builder weekBegins(Integer weekBegins) {
            this.weekBegins = OptionalNullable.of(weekBegins);
            return this;
        }

        /**
         * UnSetter for weekBegins.
         * @return Builder
         */
        public Builder unsetWeekBegins() {
            weekBegins = null;
            return this;
        }

        /**
         * Setter for displayWeek.
         * @param  displayWeek  Boolean value for displayWeek.
         * @return Builder
         */
        public Builder displayWeek(Boolean displayWeek) {
            this.displayWeek = displayWeek;
            return this;
        }

        /**
         * Setter for cSVSeparator.
         * @param  cSVSeparator  String value for cSVSeparator.
         * @return Builder
         */
        public Builder cSVSeparator(String cSVSeparator) {
            this.cSVSeparator = OptionalNullable.of(cSVSeparator);
            return this;
        }

        /**
         * UnSetter for cSVSeparator.
         * @return Builder
         */
        public Builder unsetCSVSeparator() {
            cSVSeparator = null;
            return this;
        }

        /**
         * Setter for decimalSeparator.
         * @param  decimalSeparator  String value for decimalSeparator.
         * @return Builder
         */
        public Builder decimalSeparator(String decimalSeparator) {
            this.decimalSeparator = OptionalNullable.of(decimalSeparator);
            return this;
        }

        /**
         * UnSetter for decimalSeparator.
         * @return Builder
         */
        public Builder unsetDecimalSeparator() {
            decimalSeparator = null;
            return this;
        }

        /**
         * Setter for reportFormat.
         * @param  reportFormat  String value for reportFormat.
         * @return Builder
         */
        public Builder reportFormat(String reportFormat) {
            this.reportFormat = OptionalNullable.of(reportFormat);
            return this;
        }

        /**
         * UnSetter for reportFormat.
         * @return Builder
         */
        public Builder unsetReportFormat() {
            reportFormat = null;
            return this;
        }

        /**
         * Setter for hasAPIAccess.
         * @param  hasAPIAccess  Boolean value for hasAPIAccess.
         * @return Builder
         */
        public Builder hasAPIAccess(Boolean hasAPIAccess) {
            this.hasAPIAccess = hasAPIAccess;
            return this;
        }

        /**
         * Setter for roles.
         * @param  roles  List of Role value for roles.
         * @return Builder
         */
        public Builder roles(List<Role> roles) {
            this.roles = roles;
            return this;
        }

        /**
         * Setter for payers.
         * @param  payers  List of PayerAccess value for payers.
         * @return Builder
         */
        public Builder payers(List<PayerAccess> payers) {
            this.payers = payers;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of AccountAccess value for accounts.
         * @return Builder
         */
        public Builder accounts(List<AccountAccess> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for collectingCompanies.
         * @param  collectingCompanies  List of ColCoAccess value for collectingCompanies.
         * @return Builder
         */
        public Builder collectingCompanies(List<ColCoAccess> collectingCompanies) {
            this.collectingCompanies = collectingCompanies;
            return this;
        }

        /**
         * Setter for eIDAccessDetails.
         * @param  eIDAccessDetails  List of EIDAccess value for eIDAccessDetails.
         * @return Builder
         */
        public Builder eIDAccessDetails(List<EIDAccess> eIDAccessDetails) {
            this.eIDAccessDetails = eIDAccessDetails;
            return this;
        }

        /**
         * Setter for userClassificationBySystem.
         * @param  userClassificationBySystem  String value for userClassificationBySystem.
         * @return Builder
         */
        public Builder userClassificationBySystem(String userClassificationBySystem) {
            this.userClassificationBySystem = OptionalNullable.of(userClassificationBySystem);
            return this;
        }

        /**
         * UnSetter for userClassificationBySystem.
         * @return Builder
         */
        public Builder unsetUserClassificationBySystem() {
            userClassificationBySystem = null;
            return this;
        }

        /**
         * Setter for userClassificationByShell.
         * @param  userClassificationByShell  String value for userClassificationByShell.
         * @return Builder
         */
        public Builder userClassificationByShell(String userClassificationByShell) {
            this.userClassificationByShell = OptionalNullable.of(userClassificationByShell);
            return this;
        }

        /**
         * UnSetter for userClassificationByShell.
         * @return Builder
         */
        public Builder unsetUserClassificationByShell() {
            userClassificationByShell = null;
            return this;
        }

        /**
         * Setter for payerCount.
         * @param  payerCount  Integer value for payerCount.
         * @return Builder
         */
        public Builder payerCount(Integer payerCount) {
            this.payerCount = OptionalNullable.of(payerCount);
            return this;
        }

        /**
         * UnSetter for payerCount.
         * @return Builder
         */
        public Builder unsetPayerCount() {
            payerCount = null;
            return this;
        }

        /**
         * Setter for accountCount.
         * @param  accountCount  Integer value for accountCount.
         * @return Builder
         */
        public Builder accountCount(Integer accountCount) {
            this.accountCount = OptionalNullable.of(accountCount);
            return this;
        }

        /**
         * UnSetter for accountCount.
         * @return Builder
         */
        public Builder unsetAccountCount() {
            accountCount = null;
            return this;
        }

        /**
         * Setter for cardCount.
         * @param  cardCount  Integer value for cardCount.
         * @return Builder
         */
        public Builder cardCount(Integer cardCount) {
            this.cardCount = OptionalNullable.of(cardCount);
            return this;
        }

        /**
         * UnSetter for cardCount.
         * @return Builder
         */
        public Builder unsetCardCount() {
            cardCount = null;
            return this;
        }

        /**
         * Setter for error.
         * @param  error  ErrorStatus value for error.
         * @return Builder
         */
        public Builder error(ErrorStatus error) {
            this.error = error;
            return this;
        }

        /**
         * Setter for requestId.
         * @param  requestId  String value for requestId.
         * @return Builder
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * Builds a new {@link LoggedInUserResponse} object using the set fields.
         * @return {@link LoggedInUserResponse}
         */
        public LoggedInUserResponse build() {
            return new LoggedInUserResponse(userName, displayName, idMSSOID, preferredLanguage,
                    isSuperAdmin, dateFormat, timeFormat, weekBegins, displayWeek, cSVSeparator,
                    decimalSeparator, reportFormat, hasAPIAccess, roles, payers, accounts,
                    collectingCompanies, eIDAccessDetails, userClassificationBySystem,
                    userClassificationByShell, payerCount, accountCount, cardCount, error,
                    requestId);
        }
    }
}
