/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for PaymentsSinceLastSOA type.
 */
public class PaymentsSinceLastSOA {
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Integer> summaryDocumentId;
    private OptionalNullable<String> summaryDocumentNumber;
    private OptionalNullable<String> summaryDocumentDate;
    private OptionalNullable<String> summaryDocumentPaymentDueDate;
    private OptionalNullable<Double> summaryDocumentTotalValue;
    private OptionalNullable<Double> summaryDocumentTotalVAT;
    private OptionalNullable<Double> summaryDocumentDDAmount;
    private OptionalNullable<String> paymentDate;
    private OptionalNullable<String> paymentReference;
    private OptionalNullable<String> paymentCurrencyCode;
    private OptionalNullable<String> paymentCurrencySymbol;
    private OptionalNullable<Double> amountPaid;
    private OptionalNullable<Double> balance;
    private OptionalNullable<String> truePayment;
    private OptionalNullable<Double> prepaidBalance;
    private OptionalNullable<String> localCurrencyCode;
    private OptionalNullable<String> localCurrencySymbol;
    private OptionalNullable<String> localCurrencyExchangeRate;

    /**
     * Default constructor.
     */
    public PaymentsSinceLastSOA() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  summaryDocumentPaymentDueDate  String value for summaryDocumentPaymentDueDate.
     * @param  summaryDocumentTotalValue  Double value for summaryDocumentTotalValue.
     * @param  summaryDocumentTotalVAT  Double value for summaryDocumentTotalVAT.
     * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
     * @param  paymentDate  String value for paymentDate.
     * @param  paymentReference  String value for paymentReference.
     * @param  paymentCurrencyCode  String value for paymentCurrencyCode.
     * @param  paymentCurrencySymbol  String value for paymentCurrencySymbol.
     * @param  amountPaid  Double value for amountPaid.
     * @param  balance  Double value for balance.
     * @param  truePayment  String value for truePayment.
     * @param  prepaidBalance  Double value for prepaidBalance.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  String value for localCurrencyExchangeRate.
     */
    public PaymentsSinceLastSOA(
            Integer accountId,
            String accountNumber,
            String accountShortName,
            Integer summaryDocumentId,
            String summaryDocumentNumber,
            String summaryDocumentDate,
            String summaryDocumentPaymentDueDate,
            Double summaryDocumentTotalValue,
            Double summaryDocumentTotalVAT,
            Double summaryDocumentDDAmount,
            String paymentDate,
            String paymentReference,
            String paymentCurrencyCode,
            String paymentCurrencySymbol,
            Double amountPaid,
            Double balance,
            String truePayment,
            Double prepaidBalance,
            String localCurrencyCode,
            String localCurrencySymbol,
            String localCurrencyExchangeRate) {
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
        this.summaryDocumentPaymentDueDate = OptionalNullable.of(summaryDocumentPaymentDueDate);
        this.summaryDocumentTotalValue = OptionalNullable.of(summaryDocumentTotalValue);
        this.summaryDocumentTotalVAT = OptionalNullable.of(summaryDocumentTotalVAT);
        this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
        this.paymentDate = OptionalNullable.of(paymentDate);
        this.paymentReference = OptionalNullable.of(paymentReference);
        this.paymentCurrencyCode = OptionalNullable.of(paymentCurrencyCode);
        this.paymentCurrencySymbol = OptionalNullable.of(paymentCurrencySymbol);
        this.amountPaid = OptionalNullable.of(amountPaid);
        this.balance = OptionalNullable.of(balance);
        this.truePayment = OptionalNullable.of(truePayment);
        this.prepaidBalance = OptionalNullable.of(prepaidBalance);
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
    }

    /**
     * Initialization constructor.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  summaryDocumentId  Integer value for summaryDocumentId.
     * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  summaryDocumentPaymentDueDate  String value for summaryDocumentPaymentDueDate.
     * @param  summaryDocumentTotalValue  Double value for summaryDocumentTotalValue.
     * @param  summaryDocumentTotalVAT  Double value for summaryDocumentTotalVAT.
     * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
     * @param  paymentDate  String value for paymentDate.
     * @param  paymentReference  String value for paymentReference.
     * @param  paymentCurrencyCode  String value for paymentCurrencyCode.
     * @param  paymentCurrencySymbol  String value for paymentCurrencySymbol.
     * @param  amountPaid  Double value for amountPaid.
     * @param  balance  Double value for balance.
     * @param  truePayment  String value for truePayment.
     * @param  prepaidBalance  Double value for prepaidBalance.
     * @param  localCurrencyCode  String value for localCurrencyCode.
     * @param  localCurrencySymbol  String value for localCurrencySymbol.
     * @param  localCurrencyExchangeRate  String value for localCurrencyExchangeRate.
     */

    protected PaymentsSinceLastSOA(OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountShortName,
            OptionalNullable<Integer> summaryDocumentId,
            OptionalNullable<String> summaryDocumentNumber,
            OptionalNullable<String> summaryDocumentDate,
            OptionalNullable<String> summaryDocumentPaymentDueDate,
            OptionalNullable<Double> summaryDocumentTotalValue,
            OptionalNullable<Double> summaryDocumentTotalVAT,
            OptionalNullable<Double> summaryDocumentDDAmount, OptionalNullable<String> paymentDate,
            OptionalNullable<String> paymentReference, OptionalNullable<String> paymentCurrencyCode,
            OptionalNullable<String> paymentCurrencySymbol, OptionalNullable<Double> amountPaid,
            OptionalNullable<Double> balance, OptionalNullable<String> truePayment,
            OptionalNullable<Double> prepaidBalance, OptionalNullable<String> localCurrencyCode,
            OptionalNullable<String> localCurrencySymbol,
            OptionalNullable<String> localCurrencyExchangeRate) {
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.summaryDocumentId = summaryDocumentId;
        this.summaryDocumentNumber = summaryDocumentNumber;
        this.summaryDocumentDate = summaryDocumentDate;
        this.summaryDocumentPaymentDueDate = summaryDocumentPaymentDueDate;
        this.summaryDocumentTotalValue = summaryDocumentTotalValue;
        this.summaryDocumentTotalVAT = summaryDocumentTotalVAT;
        this.summaryDocumentDDAmount = summaryDocumentDDAmount;
        this.paymentDate = paymentDate;
        this.paymentReference = paymentReference;
        this.paymentCurrencyCode = paymentCurrencyCode;
        this.paymentCurrencySymbol = paymentCurrencySymbol;
        this.amountPaid = amountPaid;
        this.balance = balance;
        this.truePayment = truePayment;
        this.prepaidBalance = prepaidBalance;
        this.localCurrencyCode = localCurrencyCode;
        this.localCurrencySymbol = localCurrencySymbol;
        this.localCurrencyExchangeRate = localCurrencyExchangeRate;
    }

    /**
     * Internal Getter for AccountId.
     * Account Identifier for which payment is made. Example: 12345
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Identifier for which payment is made. Example: 12345
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Identifier for which payment is made. Example: 12345
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Identifier for which payment is made. Example: 12345
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account number for which payment is made. Example: GB000000123
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account number for which payment is made. Example: GB000000123
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account number for which payment is made. Example: GB000000123
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account number for which payment is made. Example: GB000000123
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name Example: GB Earth Movers-SN
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name Example: GB Earth Movers-SN
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name Example: GB Earth Movers-SN
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name Example: GB Earth Movers-SN
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for SummaryDocumentId.
     * Summary billing document reference id. Example: 2
     * @return Returns the Internal Integer
     */
    @JsonGetter("SummaryDocumentId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSummaryDocumentId() {
        return this.summaryDocumentId;
    }

    /**
     * Getter for SummaryDocumentId.
     * Summary billing document reference id. Example: 2
     * @return Returns the Integer
     */
    public Integer getSummaryDocumentId() {
        return OptionalNullable.getFrom(summaryDocumentId);
    }

    /**
     * Setter for SummaryDocumentId.
     * Summary billing document reference id. Example: 2
     * @param summaryDocumentId Value for Integer
     */
    @JsonSetter("SummaryDocumentId")
    public void setSummaryDocumentId(Integer summaryDocumentId) {
        this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
    }

    /**
     * UnSetter for SummaryDocumentId.
     * Summary billing document reference id. Example: 2
     */
    public void unsetSummaryDocumentId() {
        summaryDocumentId = null;
    }

    /**
     * Internal Getter for SummaryDocumentNumber.
     * Summary billing document reference number.
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentNumber() {
        return this.summaryDocumentNumber;
    }

    /**
     * Getter for SummaryDocumentNumber.
     * Summary billing document reference number.
     * @return Returns the String
     */
    public String getSummaryDocumentNumber() {
        return OptionalNullable.getFrom(summaryDocumentNumber);
    }

    /**
     * Setter for SummaryDocumentNumber.
     * Summary billing document reference number.
     * @param summaryDocumentNumber Value for String
     */
    @JsonSetter("SummaryDocumentNumber")
    public void setSummaryDocumentNumber(String summaryDocumentNumber) {
        this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
    }

    /**
     * UnSetter for SummaryDocumentNumber.
     * Summary billing document reference number.
     */
    public void unsetSummaryDocumentNumber() {
        summaryDocumentNumber = null;
    }

    /**
     * Internal Getter for SummaryDocumentDate.
     * Summary billing document date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentDate() {
        return this.summaryDocumentDate;
    }

    /**
     * Getter for SummaryDocumentDate.
     * Summary billing document date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getSummaryDocumentDate() {
        return OptionalNullable.getFrom(summaryDocumentDate);
    }

    /**
     * Setter for SummaryDocumentDate.
     * Summary billing document date. Format: YYYYMMDD
     * @param summaryDocumentDate Value for String
     */
    @JsonSetter("SummaryDocumentDate")
    public void setSummaryDocumentDate(String summaryDocumentDate) {
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
    }

    /**
     * UnSetter for SummaryDocumentDate.
     * Summary billing document date. Format: YYYYMMDD
     */
    public void unsetSummaryDocumentDate() {
        summaryDocumentDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentPaymentDueDate.
     * Payment due date of the Summary billing document. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentPaymentDueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentPaymentDueDate() {
        return this.summaryDocumentPaymentDueDate;
    }

    /**
     * Getter for SummaryDocumentPaymentDueDate.
     * Payment due date of the Summary billing document. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getSummaryDocumentPaymentDueDate() {
        return OptionalNullable.getFrom(summaryDocumentPaymentDueDate);
    }

    /**
     * Setter for SummaryDocumentPaymentDueDate.
     * Payment due date of the Summary billing document. Format: YYYYMMDD
     * @param summaryDocumentPaymentDueDate Value for String
     */
    @JsonSetter("SummaryDocumentPaymentDueDate")
    public void setSummaryDocumentPaymentDueDate(String summaryDocumentPaymentDueDate) {
        this.summaryDocumentPaymentDueDate = OptionalNullable.of(summaryDocumentPaymentDueDate);
    }

    /**
     * UnSetter for SummaryDocumentPaymentDueDate.
     * Payment due date of the Summary billing document. Format: YYYYMMDD
     */
    public void unsetSummaryDocumentPaymentDueDate() {
        summaryDocumentPaymentDueDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentTotalValue.
     * Total value in the Summary billing document.
     * @return Returns the Internal Double
     */
    @JsonGetter("SummaryDocumentTotalValue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSummaryDocumentTotalValue() {
        return this.summaryDocumentTotalValue;
    }

    /**
     * Getter for SummaryDocumentTotalValue.
     * Total value in the Summary billing document.
     * @return Returns the Double
     */
    public Double getSummaryDocumentTotalValue() {
        return OptionalNullable.getFrom(summaryDocumentTotalValue);
    }

    /**
     * Setter for SummaryDocumentTotalValue.
     * Total value in the Summary billing document.
     * @param summaryDocumentTotalValue Value for Double
     */
    @JsonSetter("SummaryDocumentTotalValue")
    public void setSummaryDocumentTotalValue(Double summaryDocumentTotalValue) {
        this.summaryDocumentTotalValue = OptionalNullable.of(summaryDocumentTotalValue);
    }

    /**
     * UnSetter for SummaryDocumentTotalValue.
     * Total value in the Summary billing document.
     */
    public void unsetSummaryDocumentTotalValue() {
        summaryDocumentTotalValue = null;
    }

    /**
     * Internal Getter for SummaryDocumentTotalVAT.
     * Total VAT in the Summary billing document.
     * @return Returns the Internal Double
     */
    @JsonGetter("SummaryDocumentTotalVAT")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSummaryDocumentTotalVAT() {
        return this.summaryDocumentTotalVAT;
    }

    /**
     * Getter for SummaryDocumentTotalVAT.
     * Total VAT in the Summary billing document.
     * @return Returns the Double
     */
    public Double getSummaryDocumentTotalVAT() {
        return OptionalNullable.getFrom(summaryDocumentTotalVAT);
    }

    /**
     * Setter for SummaryDocumentTotalVAT.
     * Total VAT in the Summary billing document.
     * @param summaryDocumentTotalVAT Value for Double
     */
    @JsonSetter("SummaryDocumentTotalVAT")
    public void setSummaryDocumentTotalVAT(Double summaryDocumentTotalVAT) {
        this.summaryDocumentTotalVAT = OptionalNullable.of(summaryDocumentTotalVAT);
    }

    /**
     * UnSetter for SummaryDocumentTotalVAT.
     * Total VAT in the Summary billing document.
     */
    public void unsetSummaryDocumentTotalVAT() {
        summaryDocumentTotalVAT = null;
    }

    /**
     * Internal Getter for SummaryDocumentDDAmount.
     * Total DD amount in the Summary billing document.
     * @return Returns the Internal Double
     */
    @JsonGetter("SummaryDocumentDDAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSummaryDocumentDDAmount() {
        return this.summaryDocumentDDAmount;
    }

    /**
     * Getter for SummaryDocumentDDAmount.
     * Total DD amount in the Summary billing document.
     * @return Returns the Double
     */
    public Double getSummaryDocumentDDAmount() {
        return OptionalNullable.getFrom(summaryDocumentDDAmount);
    }

    /**
     * Setter for SummaryDocumentDDAmount.
     * Total DD amount in the Summary billing document.
     * @param summaryDocumentDDAmount Value for Double
     */
    @JsonSetter("SummaryDocumentDDAmount")
    public void setSummaryDocumentDDAmount(Double summaryDocumentDDAmount) {
        this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
    }

    /**
     * UnSetter for SummaryDocumentDDAmount.
     * Total DD amount in the Summary billing document.
     */
    public void unsetSummaryDocumentDDAmount() {
        summaryDocumentDDAmount = null;
    }

    /**
     * Internal Getter for PaymentDate.
     * Date of payment. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentDate() {
        return this.paymentDate;
    }

    /**
     * Getter for PaymentDate.
     * Date of payment. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getPaymentDate() {
        return OptionalNullable.getFrom(paymentDate);
    }

    /**
     * Setter for PaymentDate.
     * Date of payment. Format: YYYYMMDD
     * @param paymentDate Value for String
     */
    @JsonSetter("PaymentDate")
    public void setPaymentDate(String paymentDate) {
        this.paymentDate = OptionalNullable.of(paymentDate);
    }

    /**
     * UnSetter for PaymentDate.
     * Date of payment. Format: YYYYMMDD
     */
    public void unsetPaymentDate() {
        paymentDate = null;
    }

    /**
     * Internal Getter for PaymentReference.
     * Reference text of the payment.
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentReference() {
        return this.paymentReference;
    }

    /**
     * Getter for PaymentReference.
     * Reference text of the payment.
     * @return Returns the String
     */
    public String getPaymentReference() {
        return OptionalNullable.getFrom(paymentReference);
    }

    /**
     * Setter for PaymentReference.
     * Reference text of the payment.
     * @param paymentReference Value for String
     */
    @JsonSetter("PaymentReference")
    public void setPaymentReference(String paymentReference) {
        this.paymentReference = OptionalNullable.of(paymentReference);
    }

    /**
     * UnSetter for PaymentReference.
     * Reference text of the payment.
     */
    public void unsetPaymentReference() {
        paymentReference = null;
    }

    /**
     * Internal Getter for PaymentCurrencyCode.
     * ISO code of payment currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentCurrencyCode() {
        return this.paymentCurrencyCode;
    }

    /**
     * Getter for PaymentCurrencyCode.
     * ISO code of payment currency. Example: EUR
     * @return Returns the String
     */
    public String getPaymentCurrencyCode() {
        return OptionalNullable.getFrom(paymentCurrencyCode);
    }

    /**
     * Setter for PaymentCurrencyCode.
     * ISO code of payment currency. Example: EUR
     * @param paymentCurrencyCode Value for String
     */
    @JsonSetter("PaymentCurrencyCode")
    public void setPaymentCurrencyCode(String paymentCurrencyCode) {
        this.paymentCurrencyCode = OptionalNullable.of(paymentCurrencyCode);
    }

    /**
     * UnSetter for PaymentCurrencyCode.
     * ISO code of payment currency. Example: EUR
     */
    public void unsetPaymentCurrencyCode() {
        paymentCurrencyCode = null;
    }

    /**
     * Internal Getter for PaymentCurrencySymbol.
     * Symbol of payment currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentCurrencySymbol() {
        return this.paymentCurrencySymbol;
    }

    /**
     * Getter for PaymentCurrencySymbol.
     * Symbol of payment currency. Example: €
     * @return Returns the String
     */
    public String getPaymentCurrencySymbol() {
        return OptionalNullable.getFrom(paymentCurrencySymbol);
    }

    /**
     * Setter for PaymentCurrencySymbol.
     * Symbol of payment currency. Example: €
     * @param paymentCurrencySymbol Value for String
     */
    @JsonSetter("PaymentCurrencySymbol")
    public void setPaymentCurrencySymbol(String paymentCurrencySymbol) {
        this.paymentCurrencySymbol = OptionalNullable.of(paymentCurrencySymbol);
    }

    /**
     * UnSetter for PaymentCurrencySymbol.
     * Symbol of payment currency. Example: €
     */
    public void unsetPaymentCurrencySymbol() {
        paymentCurrencySymbol = null;
    }

    /**
     * Internal Getter for AmountPaid.
     * Amount paid.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountPaid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountPaid() {
        return this.amountPaid;
    }

    /**
     * Getter for AmountPaid.
     * Amount paid.
     * @return Returns the Double
     */
    public Double getAmountPaid() {
        return OptionalNullable.getFrom(amountPaid);
    }

    /**
     * Setter for AmountPaid.
     * Amount paid.
     * @param amountPaid Value for Double
     */
    @JsonSetter("AmountPaid")
    public void setAmountPaid(Double amountPaid) {
        this.amountPaid = OptionalNullable.of(amountPaid);
    }

    /**
     * UnSetter for AmountPaid.
     * Amount paid.
     */
    public void unsetAmountPaid() {
        amountPaid = null;
    }

    /**
     * Internal Getter for Balance.
     * Balance amount to be settled for the Summary document.
     * @return Returns the Internal Double
     */
    @JsonGetter("Balance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetBalance() {
        return this.balance;
    }

    /**
     * Getter for Balance.
     * Balance amount to be settled for the Summary document.
     * @return Returns the Double
     */
    public Double getBalance() {
        return OptionalNullable.getFrom(balance);
    }

    /**
     * Setter for Balance.
     * Balance amount to be settled for the Summary document.
     * @param balance Value for Double
     */
    @JsonSetter("Balance")
    public void setBalance(Double balance) {
        this.balance = OptionalNullable.of(balance);
    }

    /**
     * UnSetter for Balance.
     * Balance amount to be settled for the Summary document.
     */
    public void unsetBalance() {
        balance = null;
    }

    /**
     * Internal Getter for TruePayment.
     * True Payment.
     * @return Returns the Internal String
     */
    @JsonGetter("TruePayment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTruePayment() {
        return this.truePayment;
    }

    /**
     * Getter for TruePayment.
     * True Payment.
     * @return Returns the String
     */
    public String getTruePayment() {
        return OptionalNullable.getFrom(truePayment);
    }

    /**
     * Setter for TruePayment.
     * True Payment.
     * @param truePayment Value for String
     */
    @JsonSetter("TruePayment")
    public void setTruePayment(String truePayment) {
        this.truePayment = OptionalNullable.of(truePayment);
    }

    /**
     * UnSetter for TruePayment.
     * True Payment.
     */
    public void unsetTruePayment() {
        truePayment = null;
    }

    /**
     * Internal Getter for PrepaidBalance.
     * Balance in the pre-paid amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("PrepaidBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetPrepaidBalance() {
        return this.prepaidBalance;
    }

    /**
     * Getter for PrepaidBalance.
     * Balance in the pre-paid amount.
     * @return Returns the Double
     */
    public Double getPrepaidBalance() {
        return OptionalNullable.getFrom(prepaidBalance);
    }

    /**
     * Setter for PrepaidBalance.
     * Balance in the pre-paid amount.
     * @param prepaidBalance Value for Double
     */
    @JsonSetter("PrepaidBalance")
    public void setPrepaidBalance(Double prepaidBalance) {
        this.prepaidBalance = OptionalNullable.of(prepaidBalance);
    }

    /**
     * UnSetter for PrepaidBalance.
     * Balance in the pre-paid amount.
     */
    public void unsetPrepaidBalance() {
        prepaidBalance = null;
    }

    /**
     * Internal Getter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyCode() {
        return this.localCurrencyCode;
    }

    /**
     * Getter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @return Returns the String
     */
    public String getLocalCurrencyCode() {
        return OptionalNullable.getFrom(localCurrencyCode);
    }

    /**
     * Setter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     * @param localCurrencyCode Value for String
     */
    @JsonSetter("LocalCurrencyCode")
    public void setLocalCurrencyCode(String localCurrencyCode) {
        this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
    }

    /**
     * UnSetter for LocalCurrencyCode.
     * Currency ISO code of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencyCode, only in the case of serviced OUs. Example: EUR
     */
    public void unsetLocalCurrencyCode() {
        localCurrencyCode = null;
    }

    /**
     * Internal Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencySymbol() {
        return this.localCurrencySymbol;
    }

    /**
     * Getter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @return Returns the String
     */
    public String getLocalCurrencySymbol() {
        return OptionalNullable.getFrom(localCurrencySymbol);
    }

    /**
     * Setter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     * @param localCurrencySymbol Value for String
     */
    @JsonSetter("LocalCurrencySymbol")
    public void setLocalCurrencySymbol(String localCurrencySymbol) {
        this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
    }

    /**
     * UnSetter for LocalCurrencySymbol.
     * Currency Symbol of the local country. It is derived based on CountryCode from microservice
     * configuration. This field is expected to have different value than the previously mentioned
     * field CurrencySymbol, only in the case of serviced OUs. Example: €
     */
    public void unsetLocalCurrencySymbol() {
        localCurrencySymbol = null;
    }

    /**
     * Internal Getter for LocalCurrencyExchangeRate.
     * Exchange rate from Payment currency to local currency.
     * @return Returns the Internal String
     */
    @JsonGetter("LocalCurrencyExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocalCurrencyExchangeRate() {
        return this.localCurrencyExchangeRate;
    }

    /**
     * Getter for LocalCurrencyExchangeRate.
     * Exchange rate from Payment currency to local currency.
     * @return Returns the String
     */
    public String getLocalCurrencyExchangeRate() {
        return OptionalNullable.getFrom(localCurrencyExchangeRate);
    }

    /**
     * Setter for LocalCurrencyExchangeRate.
     * Exchange rate from Payment currency to local currency.
     * @param localCurrencyExchangeRate Value for String
     */
    @JsonSetter("LocalCurrencyExchangeRate")
    public void setLocalCurrencyExchangeRate(String localCurrencyExchangeRate) {
        this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
    }

    /**
     * UnSetter for LocalCurrencyExchangeRate.
     * Exchange rate from Payment currency to local currency.
     */
    public void unsetLocalCurrencyExchangeRate() {
        localCurrencyExchangeRate = null;
    }

    /**
     * Converts this PaymentsSinceLastSOA into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PaymentsSinceLastSOA [" + "accountId=" + accountId + ", accountNumber="
                + accountNumber + ", accountShortName=" + accountShortName + ", summaryDocumentId="
                + summaryDocumentId + ", summaryDocumentNumber=" + summaryDocumentNumber
                + ", summaryDocumentDate=" + summaryDocumentDate
                + ", summaryDocumentPaymentDueDate=" + summaryDocumentPaymentDueDate
                + ", summaryDocumentTotalValue=" + summaryDocumentTotalValue
                + ", summaryDocumentTotalVAT=" + summaryDocumentTotalVAT
                + ", summaryDocumentDDAmount=" + summaryDocumentDDAmount + ", paymentDate="
                + paymentDate + ", paymentReference=" + paymentReference + ", paymentCurrencyCode="
                + paymentCurrencyCode + ", paymentCurrencySymbol=" + paymentCurrencySymbol
                + ", amountPaid=" + amountPaid + ", balance=" + balance + ", truePayment="
                + truePayment + ", prepaidBalance=" + prepaidBalance + ", localCurrencyCode="
                + localCurrencyCode + ", localCurrencySymbol=" + localCurrencySymbol
                + ", localCurrencyExchangeRate=" + localCurrencyExchangeRate + "]";
    }

    /**
     * Builds a new {@link PaymentsSinceLastSOA.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PaymentsSinceLastSOA.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.summaryDocumentId = internalGetSummaryDocumentId();
        builder.summaryDocumentNumber = internalGetSummaryDocumentNumber();
        builder.summaryDocumentDate = internalGetSummaryDocumentDate();
        builder.summaryDocumentPaymentDueDate = internalGetSummaryDocumentPaymentDueDate();
        builder.summaryDocumentTotalValue = internalGetSummaryDocumentTotalValue();
        builder.summaryDocumentTotalVAT = internalGetSummaryDocumentTotalVAT();
        builder.summaryDocumentDDAmount = internalGetSummaryDocumentDDAmount();
        builder.paymentDate = internalGetPaymentDate();
        builder.paymentReference = internalGetPaymentReference();
        builder.paymentCurrencyCode = internalGetPaymentCurrencyCode();
        builder.paymentCurrencySymbol = internalGetPaymentCurrencySymbol();
        builder.amountPaid = internalGetAmountPaid();
        builder.balance = internalGetBalance();
        builder.truePayment = internalGetTruePayment();
        builder.prepaidBalance = internalGetPrepaidBalance();
        builder.localCurrencyCode = internalGetLocalCurrencyCode();
        builder.localCurrencySymbol = internalGetLocalCurrencySymbol();
        builder.localCurrencyExchangeRate = internalGetLocalCurrencyExchangeRate();
        return builder;
    }

    /**
     * Class to build instances of {@link PaymentsSinceLastSOA}.
     */
    public static class Builder {
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Integer> summaryDocumentId;
        private OptionalNullable<String> summaryDocumentNumber;
        private OptionalNullable<String> summaryDocumentDate;
        private OptionalNullable<String> summaryDocumentPaymentDueDate;
        private OptionalNullable<Double> summaryDocumentTotalValue;
        private OptionalNullable<Double> summaryDocumentTotalVAT;
        private OptionalNullable<Double> summaryDocumentDDAmount;
        private OptionalNullable<String> paymentDate;
        private OptionalNullable<String> paymentReference;
        private OptionalNullable<String> paymentCurrencyCode;
        private OptionalNullable<String> paymentCurrencySymbol;
        private OptionalNullable<Double> amountPaid;
        private OptionalNullable<Double> balance;
        private OptionalNullable<String> truePayment;
        private OptionalNullable<Double> prepaidBalance;
        private OptionalNullable<String> localCurrencyCode;
        private OptionalNullable<String> localCurrencySymbol;
        private OptionalNullable<String> localCurrencyExchangeRate;



        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for summaryDocumentId.
         * @param  summaryDocumentId  Integer value for summaryDocumentId.
         * @return Builder
         */
        public Builder summaryDocumentId(Integer summaryDocumentId) {
            this.summaryDocumentId = OptionalNullable.of(summaryDocumentId);
            return this;
        }

        /**
         * UnSetter for summaryDocumentId.
         * @return Builder
         */
        public Builder unsetSummaryDocumentId() {
            summaryDocumentId = null;
            return this;
        }

        /**
         * Setter for summaryDocumentNumber.
         * @param  summaryDocumentNumber  String value for summaryDocumentNumber.
         * @return Builder
         */
        public Builder summaryDocumentNumber(String summaryDocumentNumber) {
            this.summaryDocumentNumber = OptionalNullable.of(summaryDocumentNumber);
            return this;
        }

        /**
         * UnSetter for summaryDocumentNumber.
         * @return Builder
         */
        public Builder unsetSummaryDocumentNumber() {
            summaryDocumentNumber = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDate.
         * @param  summaryDocumentDate  String value for summaryDocumentDate.
         * @return Builder
         */
        public Builder summaryDocumentDate(String summaryDocumentDate) {
            this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDate.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDate() {
            summaryDocumentDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentPaymentDueDate.
         * @param  summaryDocumentPaymentDueDate  String value for summaryDocumentPaymentDueDate.
         * @return Builder
         */
        public Builder summaryDocumentPaymentDueDate(String summaryDocumentPaymentDueDate) {
            this.summaryDocumentPaymentDueDate = OptionalNullable.of(summaryDocumentPaymentDueDate);
            return this;
        }

        /**
         * UnSetter for summaryDocumentPaymentDueDate.
         * @return Builder
         */
        public Builder unsetSummaryDocumentPaymentDueDate() {
            summaryDocumentPaymentDueDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentTotalValue.
         * @param  summaryDocumentTotalValue  Double value for summaryDocumentTotalValue.
         * @return Builder
         */
        public Builder summaryDocumentTotalValue(Double summaryDocumentTotalValue) {
            this.summaryDocumentTotalValue = OptionalNullable.of(summaryDocumentTotalValue);
            return this;
        }

        /**
         * UnSetter for summaryDocumentTotalValue.
         * @return Builder
         */
        public Builder unsetSummaryDocumentTotalValue() {
            summaryDocumentTotalValue = null;
            return this;
        }

        /**
         * Setter for summaryDocumentTotalVAT.
         * @param  summaryDocumentTotalVAT  Double value for summaryDocumentTotalVAT.
         * @return Builder
         */
        public Builder summaryDocumentTotalVAT(Double summaryDocumentTotalVAT) {
            this.summaryDocumentTotalVAT = OptionalNullable.of(summaryDocumentTotalVAT);
            return this;
        }

        /**
         * UnSetter for summaryDocumentTotalVAT.
         * @return Builder
         */
        public Builder unsetSummaryDocumentTotalVAT() {
            summaryDocumentTotalVAT = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDDAmount.
         * @param  summaryDocumentDDAmount  Double value for summaryDocumentDDAmount.
         * @return Builder
         */
        public Builder summaryDocumentDDAmount(Double summaryDocumentDDAmount) {
            this.summaryDocumentDDAmount = OptionalNullable.of(summaryDocumentDDAmount);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDDAmount.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDDAmount() {
            summaryDocumentDDAmount = null;
            return this;
        }

        /**
         * Setter for paymentDate.
         * @param  paymentDate  String value for paymentDate.
         * @return Builder
         */
        public Builder paymentDate(String paymentDate) {
            this.paymentDate = OptionalNullable.of(paymentDate);
            return this;
        }

        /**
         * UnSetter for paymentDate.
         * @return Builder
         */
        public Builder unsetPaymentDate() {
            paymentDate = null;
            return this;
        }

        /**
         * Setter for paymentReference.
         * @param  paymentReference  String value for paymentReference.
         * @return Builder
         */
        public Builder paymentReference(String paymentReference) {
            this.paymentReference = OptionalNullable.of(paymentReference);
            return this;
        }

        /**
         * UnSetter for paymentReference.
         * @return Builder
         */
        public Builder unsetPaymentReference() {
            paymentReference = null;
            return this;
        }

        /**
         * Setter for paymentCurrencyCode.
         * @param  paymentCurrencyCode  String value for paymentCurrencyCode.
         * @return Builder
         */
        public Builder paymentCurrencyCode(String paymentCurrencyCode) {
            this.paymentCurrencyCode = OptionalNullable.of(paymentCurrencyCode);
            return this;
        }

        /**
         * UnSetter for paymentCurrencyCode.
         * @return Builder
         */
        public Builder unsetPaymentCurrencyCode() {
            paymentCurrencyCode = null;
            return this;
        }

        /**
         * Setter for paymentCurrencySymbol.
         * @param  paymentCurrencySymbol  String value for paymentCurrencySymbol.
         * @return Builder
         */
        public Builder paymentCurrencySymbol(String paymentCurrencySymbol) {
            this.paymentCurrencySymbol = OptionalNullable.of(paymentCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for paymentCurrencySymbol.
         * @return Builder
         */
        public Builder unsetPaymentCurrencySymbol() {
            paymentCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for amountPaid.
         * @param  amountPaid  Double value for amountPaid.
         * @return Builder
         */
        public Builder amountPaid(Double amountPaid) {
            this.amountPaid = OptionalNullable.of(amountPaid);
            return this;
        }

        /**
         * UnSetter for amountPaid.
         * @return Builder
         */
        public Builder unsetAmountPaid() {
            amountPaid = null;
            return this;
        }

        /**
         * Setter for balance.
         * @param  balance  Double value for balance.
         * @return Builder
         */
        public Builder balance(Double balance) {
            this.balance = OptionalNullable.of(balance);
            return this;
        }

        /**
         * UnSetter for balance.
         * @return Builder
         */
        public Builder unsetBalance() {
            balance = null;
            return this;
        }

        /**
         * Setter for truePayment.
         * @param  truePayment  String value for truePayment.
         * @return Builder
         */
        public Builder truePayment(String truePayment) {
            this.truePayment = OptionalNullable.of(truePayment);
            return this;
        }

        /**
         * UnSetter for truePayment.
         * @return Builder
         */
        public Builder unsetTruePayment() {
            truePayment = null;
            return this;
        }

        /**
         * Setter for prepaidBalance.
         * @param  prepaidBalance  Double value for prepaidBalance.
         * @return Builder
         */
        public Builder prepaidBalance(Double prepaidBalance) {
            this.prepaidBalance = OptionalNullable.of(prepaidBalance);
            return this;
        }

        /**
         * UnSetter for prepaidBalance.
         * @return Builder
         */
        public Builder unsetPrepaidBalance() {
            prepaidBalance = null;
            return this;
        }

        /**
         * Setter for localCurrencyCode.
         * @param  localCurrencyCode  String value for localCurrencyCode.
         * @return Builder
         */
        public Builder localCurrencyCode(String localCurrencyCode) {
            this.localCurrencyCode = OptionalNullable.of(localCurrencyCode);
            return this;
        }

        /**
         * UnSetter for localCurrencyCode.
         * @return Builder
         */
        public Builder unsetLocalCurrencyCode() {
            localCurrencyCode = null;
            return this;
        }

        /**
         * Setter for localCurrencySymbol.
         * @param  localCurrencySymbol  String value for localCurrencySymbol.
         * @return Builder
         */
        public Builder localCurrencySymbol(String localCurrencySymbol) {
            this.localCurrencySymbol = OptionalNullable.of(localCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for localCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLocalCurrencySymbol() {
            localCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for localCurrencyExchangeRate.
         * @param  localCurrencyExchangeRate  String value for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder localCurrencyExchangeRate(String localCurrencyExchangeRate) {
            this.localCurrencyExchangeRate = OptionalNullable.of(localCurrencyExchangeRate);
            return this;
        }

        /**
         * UnSetter for localCurrencyExchangeRate.
         * @return Builder
         */
        public Builder unsetLocalCurrencyExchangeRate() {
            localCurrencyExchangeRate = null;
            return this;
        }

        /**
         * Builds a new {@link PaymentsSinceLastSOA} object using the set fields.
         * @return {@link PaymentsSinceLastSOA}
         */
        public PaymentsSinceLastSOA build() {
            return new PaymentsSinceLastSOA(accountId, accountNumber, accountShortName,
                    summaryDocumentId, summaryDocumentNumber, summaryDocumentDate,
                    summaryDocumentPaymentDueDate, summaryDocumentTotalValue,
                    summaryDocumentTotalVAT, summaryDocumentDDAmount, paymentDate, paymentReference,
                    paymentCurrencyCode, paymentCurrencySymbol, amountPaid, balance, truePayment,
                    prepaidBalance, localCurrencyCode, localCurrencySymbol,
                    localCurrencyExchangeRate);
        }
    }
}
