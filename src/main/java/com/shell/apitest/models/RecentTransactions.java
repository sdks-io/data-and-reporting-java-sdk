/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shell.apitest.DateTimeHelper;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDate;

/**
 * This is a model class for RecentTransactions type.
 */
public class RecentTransactions {
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> cardIssueNumber;
    private OptionalNullable<String> collectingCompanyCurrencyCode;
    private OptionalNullable<String> custDataCustomerEntered;
    private OptionalNullable<String> custDataDriverId;
    private OptionalNullable<String> custDataFleetDescription;
    private OptionalNullable<String> fleetIdInput;
    private OptionalNullable<Double> amount;
    private OptionalNullable<String> euroshellSiteNumber;
    private OptionalNullable<String> incomingProductCode;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<Integer> siteCode;
    private OptionalNullable<String> hostingCollectingCompanyName;
    private OptionalNullable<String> hostingCollectingCompanyNumber;
    private OptionalNullable<String> iccdataTranTypeCode;
    private OptionalNullable<String> transactionType;
    private OptionalNullable<String> latitude;
    private OptionalNullable<String> longitude;
    private OptionalNullable<String> merchantCategory;
    private OptionalNullable<String> merchantCategoryDescription;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<String> merchantId;
    private OptionalNullable<String> siteName;
    private OptionalNullable<String> network;
    private OptionalNullable<String> delcoCode;
    private OptionalNullable<String> odometerInput;
    private OptionalNullable<String> odometerReadingKm;
    private OptionalNullable<String> odometerReadingMiles;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> pINIndicator;
    private OptionalNullable<String> pOIReceiptNumber;
    private OptionalNullable<String> productsCodeAdditional;
    private OptionalNullable<String> productsTaxCode;
    private OptionalNullable<Double> fuelVolume;
    private OptionalNullable<String> sfgwCardDateOfExpiry;
    private OptionalNullable<String> siteCurrencyISOCode;
    private OptionalNullable<String> cardId;
    private OptionalNullable<LocalDate> transactionDate;
    private OptionalNullable<String> transactionDateTime;
    private OptionalNullable<String> transactionId;
    private OptionalNullable<String> transactionStatus;
    private OptionalNullable<String> unitOfMeasure;
    private OptionalNullable<String> vehicleRegistrationNumber;
    private OptionalNullable<String> networkDelcoName;
    private OptionalNullable<String> productGroupName;
    private OptionalNullable<String> fuelProduct;
    private OptionalNullable<String> accountCustomerName;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> transactionTime;
    private OptionalNullable<String> transactionCurrency;
    private OptionalNullable<Double> unitPrice;
    private OptionalNullable<String> authorisedFlag;
    private OptionalNullable<String> transactionTimeGMT;
    private OptionalNullable<String> reasonCode;
    private OptionalNullable<String> issuerActionCode;
    private OptionalNullable<String> issuerActionCodeDescription;
    private OptionalNullable<String> declinedReason;
    private OptionalNullable<String> cardStatusReasonDescription;
    private OptionalNullable<String> transactionCountry;
    private OptionalNullable<String> issuingCollectingCompanyName;
    private OptionalNullable<String> cardIssuerName;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> bearerDescription;
    private OptionalNullable<String> cardCategoryDescription;
    private OptionalNullable<String> cardTypeDescription;
    private OptionalNullable<String> cardTokenTypeDescription;
    private OptionalNullable<String> embossType;
    private OptionalNullable<String> eVPrintedNumber;
    private OptionalNullable<Boolean> isRFID;

    /**
     * Default constructor.
     */
    public RecentTransactions() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardIssueNumber  String value for cardIssueNumber.
     * @param  collectingCompanyCurrencyCode  String value for collectingCompanyCurrencyCode.
     * @param  custDataCustomerEntered  String value for custDataCustomerEntered.
     * @param  custDataDriverId  String value for custDataDriverId.
     * @param  custDataFleetDescription  String value for custDataFleetDescription.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  amount  Double value for amount.
     * @param  euroshellSiteNumber  String value for euroshellSiteNumber.
     * @param  incomingProductCode  String value for incomingProductCode.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  siteCode  Integer value for siteCode.
     * @param  hostingCollectingCompanyName  String value for hostingCollectingCompanyName.
     * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
     * @param  iccdataTranTypeCode  String value for iccdataTranTypeCode.
     * @param  transactionType  String value for transactionType.
     * @param  latitude  String value for latitude.
     * @param  longitude  String value for longitude.
     * @param  merchantCategory  String value for merchantCategory.
     * @param  merchantCategoryDescription  String value for merchantCategoryDescription.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  merchantId  String value for merchantId.
     * @param  siteName  String value for siteName.
     * @param  network  String value for network.
     * @param  delcoCode  String value for delcoCode.
     * @param  odometerInput  String value for odometerInput.
     * @param  odometerReadingKm  String value for odometerReadingKm.
     * @param  odometerReadingMiles  String value for odometerReadingMiles.
     * @param  cardPAN  String value for cardPAN.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  pOIReceiptNumber  String value for pOIReceiptNumber.
     * @param  productsCodeAdditional  String value for productsCodeAdditional.
     * @param  productsTaxCode  String value for productsTaxCode.
     * @param  fuelVolume  Double value for fuelVolume.
     * @param  sfgwCardDateOfExpiry  String value for sfgwCardDateOfExpiry.
     * @param  siteCurrencyISOCode  String value for siteCurrencyISOCode.
     * @param  cardId  String value for cardId.
     * @param  transactionDate  LocalDate value for transactionDate.
     * @param  transactionDateTime  String value for transactionDateTime.
     * @param  transactionId  String value for transactionId.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  unitOfMeasure  String value for unitOfMeasure.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  networkDelcoName  String value for networkDelcoName.
     * @param  productGroupName  String value for productGroupName.
     * @param  fuelProduct  String value for fuelProduct.
     * @param  accountCustomerName  String value for accountCustomerName.
     * @param  payerName  String value for payerName.
     * @param  transactionTime  String value for transactionTime.
     * @param  transactionCurrency  String value for transactionCurrency.
     * @param  unitPrice  Double value for unitPrice.
     * @param  authorisedFlag  String value for authorisedFlag.
     * @param  transactionTimeGMT  String value for transactionTimeGMT.
     * @param  reasonCode  String value for reasonCode.
     * @param  issuerActionCode  String value for issuerActionCode.
     * @param  issuerActionCodeDescription  String value for issuerActionCodeDescription.
     * @param  declinedReason  String value for declinedReason.
     * @param  cardStatusReasonDescription  String value for cardStatusReasonDescription.
     * @param  transactionCountry  String value for transactionCountry.
     * @param  issuingCollectingCompanyName  String value for issuingCollectingCompanyName.
     * @param  cardIssuerName  String value for cardIssuerName.
     * @param  driverName  String value for driverName.
     * @param  bearerDescription  String value for bearerDescription.
     * @param  cardCategoryDescription  String value for cardCategoryDescription.
     * @param  cardTypeDescription  String value for cardTypeDescription.
     * @param  cardTokenTypeDescription  String value for cardTokenTypeDescription.
     * @param  embossType  String value for embossType.
     * @param  eVPrintedNumber  String value for eVPrintedNumber.
     * @param  isRFID  Boolean value for isRFID.
     */
    public RecentTransactions(
            Integer colCoCode,
            String payerNumber,
            String accountNumber,
            String cardIssueNumber,
            String collectingCompanyCurrencyCode,
            String custDataCustomerEntered,
            String custDataDriverId,
            String custDataFleetDescription,
            String fleetIdInput,
            Double amount,
            String euroshellSiteNumber,
            String incomingProductCode,
            String productCode,
            String productName,
            Integer siteCode,
            String hostingCollectingCompanyName,
            String hostingCollectingCompanyNumber,
            String iccdataTranTypeCode,
            String transactionType,
            String latitude,
            String longitude,
            String merchantCategory,
            String merchantCategoryDescription,
            String purchasedInCountry,
            String merchantId,
            String siteName,
            String network,
            String delcoCode,
            String odometerInput,
            String odometerReadingKm,
            String odometerReadingMiles,
            String cardPAN,
            String pINIndicator,
            String pOIReceiptNumber,
            String productsCodeAdditional,
            String productsTaxCode,
            Double fuelVolume,
            String sfgwCardDateOfExpiry,
            String siteCurrencyISOCode,
            String cardId,
            LocalDate transactionDate,
            String transactionDateTime,
            String transactionId,
            String transactionStatus,
            String unitOfMeasure,
            String vehicleRegistrationNumber,
            String networkDelcoName,
            String productGroupName,
            String fuelProduct,
            String accountCustomerName,
            String payerName,
            String transactionTime,
            String transactionCurrency,
            Double unitPrice,
            String authorisedFlag,
            String transactionTimeGMT,
            String reasonCode,
            String issuerActionCode,
            String issuerActionCodeDescription,
            String declinedReason,
            String cardStatusReasonDescription,
            String transactionCountry,
            String issuingCollectingCompanyName,
            String cardIssuerName,
            String driverName,
            String bearerDescription,
            String cardCategoryDescription,
            String cardTypeDescription,
            String cardTokenTypeDescription,
            String embossType,
            String eVPrintedNumber,
            Boolean isRFID) {
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.cardIssueNumber = OptionalNullable.of(cardIssueNumber);
        this.collectingCompanyCurrencyCode = OptionalNullable.of(collectingCompanyCurrencyCode);
        this.custDataCustomerEntered = OptionalNullable.of(custDataCustomerEntered);
        this.custDataDriverId = OptionalNullable.of(custDataDriverId);
        this.custDataFleetDescription = OptionalNullable.of(custDataFleetDescription);
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
        this.amount = OptionalNullable.of(amount);
        this.euroshellSiteNumber = OptionalNullable.of(euroshellSiteNumber);
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.siteCode = OptionalNullable.of(siteCode);
        this.hostingCollectingCompanyName = OptionalNullable.of(hostingCollectingCompanyName);
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
        this.iccdataTranTypeCode = OptionalNullable.of(iccdataTranTypeCode);
        this.transactionType = OptionalNullable.of(transactionType);
        this.latitude = OptionalNullable.of(latitude);
        this.longitude = OptionalNullable.of(longitude);
        this.merchantCategory = OptionalNullable.of(merchantCategory);
        this.merchantCategoryDescription = OptionalNullable.of(merchantCategoryDescription);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.merchantId = OptionalNullable.of(merchantId);
        this.siteName = OptionalNullable.of(siteName);
        this.network = OptionalNullable.of(network);
        this.delcoCode = OptionalNullable.of(delcoCode);
        this.odometerInput = OptionalNullable.of(odometerInput);
        this.odometerReadingKm = OptionalNullable.of(odometerReadingKm);
        this.odometerReadingMiles = OptionalNullable.of(odometerReadingMiles);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.pINIndicator = OptionalNullable.of(pINIndicator);
        this.pOIReceiptNumber = OptionalNullable.of(pOIReceiptNumber);
        this.productsCodeAdditional = OptionalNullable.of(productsCodeAdditional);
        this.productsTaxCode = OptionalNullable.of(productsTaxCode);
        this.fuelVolume = OptionalNullable.of(fuelVolume);
        this.sfgwCardDateOfExpiry = OptionalNullable.of(sfgwCardDateOfExpiry);
        this.siteCurrencyISOCode = OptionalNullable.of(siteCurrencyISOCode);
        this.cardId = OptionalNullable.of(cardId);
        this.transactionDate = OptionalNullable.of(transactionDate);
        this.transactionDateTime = OptionalNullable.of(transactionDateTime);
        this.transactionId = OptionalNullable.of(transactionId);
        this.transactionStatus = OptionalNullable.of(transactionStatus);
        this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
        this.networkDelcoName = OptionalNullable.of(networkDelcoName);
        this.productGroupName = OptionalNullable.of(productGroupName);
        this.fuelProduct = OptionalNullable.of(fuelProduct);
        this.accountCustomerName = OptionalNullable.of(accountCustomerName);
        this.payerName = OptionalNullable.of(payerName);
        this.transactionTime = OptionalNullable.of(transactionTime);
        this.transactionCurrency = OptionalNullable.of(transactionCurrency);
        this.unitPrice = OptionalNullable.of(unitPrice);
        this.authorisedFlag = OptionalNullable.of(authorisedFlag);
        this.transactionTimeGMT = OptionalNullable.of(transactionTimeGMT);
        this.reasonCode = OptionalNullable.of(reasonCode);
        this.issuerActionCode = OptionalNullable.of(issuerActionCode);
        this.issuerActionCodeDescription = OptionalNullable.of(issuerActionCodeDescription);
        this.declinedReason = OptionalNullable.of(declinedReason);
        this.cardStatusReasonDescription = OptionalNullable.of(cardStatusReasonDescription);
        this.transactionCountry = OptionalNullable.of(transactionCountry);
        this.issuingCollectingCompanyName = OptionalNullable.of(issuingCollectingCompanyName);
        this.cardIssuerName = OptionalNullable.of(cardIssuerName);
        this.driverName = OptionalNullable.of(driverName);
        this.bearerDescription = OptionalNullable.of(bearerDescription);
        this.cardCategoryDescription = OptionalNullable.of(cardCategoryDescription);
        this.cardTypeDescription = OptionalNullable.of(cardTypeDescription);
        this.cardTokenTypeDescription = OptionalNullable.of(cardTokenTypeDescription);
        this.embossType = OptionalNullable.of(embossType);
        this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
        this.isRFID = OptionalNullable.of(isRFID);
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountNumber  String value for accountNumber.
     * @param  cardIssueNumber  String value for cardIssueNumber.
     * @param  collectingCompanyCurrencyCode  String value for collectingCompanyCurrencyCode.
     * @param  custDataCustomerEntered  String value for custDataCustomerEntered.
     * @param  custDataDriverId  String value for custDataDriverId.
     * @param  custDataFleetDescription  String value for custDataFleetDescription.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  amount  Double value for amount.
     * @param  euroshellSiteNumber  String value for euroshellSiteNumber.
     * @param  incomingProductCode  String value for incomingProductCode.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  siteCode  Integer value for siteCode.
     * @param  hostingCollectingCompanyName  String value for hostingCollectingCompanyName.
     * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
     * @param  iccdataTranTypeCode  String value for iccdataTranTypeCode.
     * @param  transactionType  String value for transactionType.
     * @param  latitude  String value for latitude.
     * @param  longitude  String value for longitude.
     * @param  merchantCategory  String value for merchantCategory.
     * @param  merchantCategoryDescription  String value for merchantCategoryDescription.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  merchantId  String value for merchantId.
     * @param  siteName  String value for siteName.
     * @param  network  String value for network.
     * @param  delcoCode  String value for delcoCode.
     * @param  odometerInput  String value for odometerInput.
     * @param  odometerReadingKm  String value for odometerReadingKm.
     * @param  odometerReadingMiles  String value for odometerReadingMiles.
     * @param  cardPAN  String value for cardPAN.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  pOIReceiptNumber  String value for pOIReceiptNumber.
     * @param  productsCodeAdditional  String value for productsCodeAdditional.
     * @param  productsTaxCode  String value for productsTaxCode.
     * @param  fuelVolume  Double value for fuelVolume.
     * @param  sfgwCardDateOfExpiry  String value for sfgwCardDateOfExpiry.
     * @param  siteCurrencyISOCode  String value for siteCurrencyISOCode.
     * @param  cardId  String value for cardId.
     * @param  transactionDate  LocalDate value for transactionDate.
     * @param  transactionDateTime  String value for transactionDateTime.
     * @param  transactionId  String value for transactionId.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  unitOfMeasure  String value for unitOfMeasure.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  networkDelcoName  String value for networkDelcoName.
     * @param  productGroupName  String value for productGroupName.
     * @param  fuelProduct  String value for fuelProduct.
     * @param  accountCustomerName  String value for accountCustomerName.
     * @param  payerName  String value for payerName.
     * @param  transactionTime  String value for transactionTime.
     * @param  transactionCurrency  String value for transactionCurrency.
     * @param  unitPrice  Double value for unitPrice.
     * @param  authorisedFlag  String value for authorisedFlag.
     * @param  transactionTimeGMT  String value for transactionTimeGMT.
     * @param  reasonCode  String value for reasonCode.
     * @param  issuerActionCode  String value for issuerActionCode.
     * @param  issuerActionCodeDescription  String value for issuerActionCodeDescription.
     * @param  declinedReason  String value for declinedReason.
     * @param  cardStatusReasonDescription  String value for cardStatusReasonDescription.
     * @param  transactionCountry  String value for transactionCountry.
     * @param  issuingCollectingCompanyName  String value for issuingCollectingCompanyName.
     * @param  cardIssuerName  String value for cardIssuerName.
     * @param  driverName  String value for driverName.
     * @param  bearerDescription  String value for bearerDescription.
     * @param  cardCategoryDescription  String value for cardCategoryDescription.
     * @param  cardTypeDescription  String value for cardTypeDescription.
     * @param  cardTokenTypeDescription  String value for cardTokenTypeDescription.
     * @param  embossType  String value for embossType.
     * @param  eVPrintedNumber  String value for eVPrintedNumber.
     * @param  isRFID  Boolean value for isRFID.
     */

    protected RecentTransactions(OptionalNullable<Integer> colCoCode,
            OptionalNullable<String> payerNumber, OptionalNullable<String> accountNumber,
            OptionalNullable<String> cardIssueNumber,
            OptionalNullable<String> collectingCompanyCurrencyCode,
            OptionalNullable<String> custDataCustomerEntered,
            OptionalNullable<String> custDataDriverId,
            OptionalNullable<String> custDataFleetDescription,
            OptionalNullable<String> fleetIdInput, OptionalNullable<Double> amount,
            OptionalNullable<String> euroshellSiteNumber,
            OptionalNullable<String> incomingProductCode, OptionalNullable<String> productCode,
            OptionalNullable<String> productName, OptionalNullable<Integer> siteCode,
            OptionalNullable<String> hostingCollectingCompanyName,
            OptionalNullable<String> hostingCollectingCompanyNumber,
            OptionalNullable<String> iccdataTranTypeCode, OptionalNullable<String> transactionType,
            OptionalNullable<String> latitude, OptionalNullable<String> longitude,
            OptionalNullable<String> merchantCategory,
            OptionalNullable<String> merchantCategoryDescription,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<String> merchantId,
            OptionalNullable<String> siteName, OptionalNullable<String> network,
            OptionalNullable<String> delcoCode, OptionalNullable<String> odometerInput,
            OptionalNullable<String> odometerReadingKm,
            OptionalNullable<String> odometerReadingMiles, OptionalNullable<String> cardPAN,
            OptionalNullable<String> pINIndicator, OptionalNullable<String> pOIReceiptNumber,
            OptionalNullable<String> productsCodeAdditional,
            OptionalNullable<String> productsTaxCode, OptionalNullable<Double> fuelVolume,
            OptionalNullable<String> sfgwCardDateOfExpiry,
            OptionalNullable<String> siteCurrencyISOCode, OptionalNullable<String> cardId,
            OptionalNullable<LocalDate> transactionDate,
            OptionalNullable<String> transactionDateTime, OptionalNullable<String> transactionId,
            OptionalNullable<String> transactionStatus, OptionalNullable<String> unitOfMeasure,
            OptionalNullable<String> vehicleRegistrationNumber,
            OptionalNullable<String> networkDelcoName, OptionalNullable<String> productGroupName,
            OptionalNullable<String> fuelProduct, OptionalNullable<String> accountCustomerName,
            OptionalNullable<String> payerName, OptionalNullable<String> transactionTime,
            OptionalNullable<String> transactionCurrency, OptionalNullable<Double> unitPrice,
            OptionalNullable<String> authorisedFlag, OptionalNullable<String> transactionTimeGMT,
            OptionalNullable<String> reasonCode, OptionalNullable<String> issuerActionCode,
            OptionalNullable<String> issuerActionCodeDescription,
            OptionalNullable<String> declinedReason,
            OptionalNullable<String> cardStatusReasonDescription,
            OptionalNullable<String> transactionCountry,
            OptionalNullable<String> issuingCollectingCompanyName,
            OptionalNullable<String> cardIssuerName, OptionalNullable<String> driverName,
            OptionalNullable<String> bearerDescription,
            OptionalNullable<String> cardCategoryDescription,
            OptionalNullable<String> cardTypeDescription,
            OptionalNullable<String> cardTokenTypeDescription, OptionalNullable<String> embossType,
            OptionalNullable<String> eVPrintedNumber, OptionalNullable<Boolean> isRFID) {
        this.colCoCode = colCoCode;
        this.payerNumber = payerNumber;
        this.accountNumber = accountNumber;
        this.cardIssueNumber = cardIssueNumber;
        this.collectingCompanyCurrencyCode = collectingCompanyCurrencyCode;
        this.custDataCustomerEntered = custDataCustomerEntered;
        this.custDataDriverId = custDataDriverId;
        this.custDataFleetDescription = custDataFleetDescription;
        this.fleetIdInput = fleetIdInput;
        this.amount = amount;
        this.euroshellSiteNumber = euroshellSiteNumber;
        this.incomingProductCode = incomingProductCode;
        this.productCode = productCode;
        this.productName = productName;
        this.siteCode = siteCode;
        this.hostingCollectingCompanyName = hostingCollectingCompanyName;
        this.hostingCollectingCompanyNumber = hostingCollectingCompanyNumber;
        this.iccdataTranTypeCode = iccdataTranTypeCode;
        this.transactionType = transactionType;
        this.latitude = latitude;
        this.longitude = longitude;
        this.merchantCategory = merchantCategory;
        this.merchantCategoryDescription = merchantCategoryDescription;
        this.purchasedInCountry = purchasedInCountry;
        this.merchantId = merchantId;
        this.siteName = siteName;
        this.network = network;
        this.delcoCode = delcoCode;
        this.odometerInput = odometerInput;
        this.odometerReadingKm = odometerReadingKm;
        this.odometerReadingMiles = odometerReadingMiles;
        this.cardPAN = cardPAN;
        this.pINIndicator = pINIndicator;
        this.pOIReceiptNumber = pOIReceiptNumber;
        this.productsCodeAdditional = productsCodeAdditional;
        this.productsTaxCode = productsTaxCode;
        this.fuelVolume = fuelVolume;
        this.sfgwCardDateOfExpiry = sfgwCardDateOfExpiry;
        this.siteCurrencyISOCode = siteCurrencyISOCode;
        this.cardId = cardId;
        this.transactionDate = transactionDate;
        this.transactionDateTime = transactionDateTime;
        this.transactionId = transactionId;
        this.transactionStatus = transactionStatus;
        this.unitOfMeasure = unitOfMeasure;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.networkDelcoName = networkDelcoName;
        this.productGroupName = productGroupName;
        this.fuelProduct = fuelProduct;
        this.accountCustomerName = accountCustomerName;
        this.payerName = payerName;
        this.transactionTime = transactionTime;
        this.transactionCurrency = transactionCurrency;
        this.unitPrice = unitPrice;
        this.authorisedFlag = authorisedFlag;
        this.transactionTimeGMT = transactionTimeGMT;
        this.reasonCode = reasonCode;
        this.issuerActionCode = issuerActionCode;
        this.issuerActionCodeDescription = issuerActionCodeDescription;
        this.declinedReason = declinedReason;
        this.cardStatusReasonDescription = cardStatusReasonDescription;
        this.transactionCountry = transactionCountry;
        this.issuingCollectingCompanyName = issuingCollectingCompanyName;
        this.cardIssuerName = cardIssuerName;
        this.driverName = driverName;
        this.bearerDescription = bearerDescription;
        this.cardCategoryDescription = cardCategoryDescription;
        this.cardTypeDescription = cardTypeDescription;
        this.cardTokenTypeDescription = cardTokenTypeDescription;
        this.embossType = embossType;
        this.eVPrintedNumber = eVPrintedNumber;
        this.isRFID = isRFID;
    }

    /**
     * Internal Getter for ColCoCode.
     * ColCoCode
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * ColCoCode
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * ColCoCode
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * ColCoCode
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * PayerNumber
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * PayerNumber
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * PayerNumber
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * PayerNumber
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for CardIssueNumber.
     * Card Issue Number
     * @return Returns the Internal String
     */
    @JsonGetter("CardIssueNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardIssueNumber() {
        return this.cardIssueNumber;
    }

    /**
     * Getter for CardIssueNumber.
     * Card Issue Number
     * @return Returns the String
     */
    public String getCardIssueNumber() {
        return OptionalNullable.getFrom(cardIssueNumber);
    }

    /**
     * Setter for CardIssueNumber.
     * Card Issue Number
     * @param cardIssueNumber Value for String
     */
    @JsonSetter("CardIssueNumber")
    public void setCardIssueNumber(String cardIssueNumber) {
        this.cardIssueNumber = OptionalNullable.of(cardIssueNumber);
    }

    /**
     * UnSetter for CardIssueNumber.
     * Card Issue Number
     */
    public void unsetCardIssueNumber() {
        cardIssueNumber = null;
    }

    /**
     * Internal Getter for CollectingCompanyCurrencyCode.
     * Collecting Company Currency IsoCode
     * @return Returns the Internal String
     */
    @JsonGetter("CollectingCompanyCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCollectingCompanyCurrencyCode() {
        return this.collectingCompanyCurrencyCode;
    }

    /**
     * Getter for CollectingCompanyCurrencyCode.
     * Collecting Company Currency IsoCode
     * @return Returns the String
     */
    public String getCollectingCompanyCurrencyCode() {
        return OptionalNullable.getFrom(collectingCompanyCurrencyCode);
    }

    /**
     * Setter for CollectingCompanyCurrencyCode.
     * Collecting Company Currency IsoCode
     * @param collectingCompanyCurrencyCode Value for String
     */
    @JsonSetter("CollectingCompanyCurrencyCode")
    public void setCollectingCompanyCurrencyCode(String collectingCompanyCurrencyCode) {
        this.collectingCompanyCurrencyCode = OptionalNullable.of(collectingCompanyCurrencyCode);
    }

    /**
     * UnSetter for CollectingCompanyCurrencyCode.
     * Collecting Company Currency IsoCode
     */
    public void unsetCollectingCompanyCurrencyCode() {
        collectingCompanyCurrencyCode = null;
    }

    /**
     * Internal Getter for CustDataCustomerEntered.
     * Customer entered data for reference.
     * @return Returns the Internal String
     */
    @JsonGetter("CustDataCustomerEntered")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustDataCustomerEntered() {
        return this.custDataCustomerEntered;
    }

    /**
     * Getter for CustDataCustomerEntered.
     * Customer entered data for reference.
     * @return Returns the String
     */
    public String getCustDataCustomerEntered() {
        return OptionalNullable.getFrom(custDataCustomerEntered);
    }

    /**
     * Setter for CustDataCustomerEntered.
     * Customer entered data for reference.
     * @param custDataCustomerEntered Value for String
     */
    @JsonSetter("CustDataCustomerEntered")
    public void setCustDataCustomerEntered(String custDataCustomerEntered) {
        this.custDataCustomerEntered = OptionalNullable.of(custDataCustomerEntered);
    }

    /**
     * UnSetter for CustDataCustomerEntered.
     * Customer entered data for reference.
     */
    public void unsetCustDataCustomerEntered() {
        custDataCustomerEntered = null;
    }

    /**
     * Internal Getter for CustDataDriverId.
     * Customer Data DriverId
     * @return Returns the Internal String
     */
    @JsonGetter("CustDataDriverId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustDataDriverId() {
        return this.custDataDriverId;
    }

    /**
     * Getter for CustDataDriverId.
     * Customer Data DriverId
     * @return Returns the String
     */
    public String getCustDataDriverId() {
        return OptionalNullable.getFrom(custDataDriverId);
    }

    /**
     * Setter for CustDataDriverId.
     * Customer Data DriverId
     * @param custDataDriverId Value for String
     */
    @JsonSetter("CustDataDriverId")
    public void setCustDataDriverId(String custDataDriverId) {
        this.custDataDriverId = OptionalNullable.of(custDataDriverId);
    }

    /**
     * UnSetter for CustDataDriverId.
     * Customer Data DriverId
     */
    public void unsetCustDataDriverId() {
        custDataDriverId = null;
    }

    /**
     * Internal Getter for CustDataFleetDescription.
     * Cust Data Fleet Description
     * @return Returns the Internal String
     */
    @JsonGetter("CustDataFleetDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustDataFleetDescription() {
        return this.custDataFleetDescription;
    }

    /**
     * Getter for CustDataFleetDescription.
     * Cust Data Fleet Description
     * @return Returns the String
     */
    public String getCustDataFleetDescription() {
        return OptionalNullable.getFrom(custDataFleetDescription);
    }

    /**
     * Setter for CustDataFleetDescription.
     * Cust Data Fleet Description
     * @param custDataFleetDescription Value for String
     */
    @JsonSetter("CustDataFleetDescription")
    public void setCustDataFleetDescription(String custDataFleetDescription) {
        this.custDataFleetDescription = OptionalNullable.of(custDataFleetDescription);
    }

    /**
     * UnSetter for CustDataFleetDescription.
     * Cust Data Fleet Description
     */
    public void unsetCustDataFleetDescription() {
        custDataFleetDescription = null;
    }

    /**
     * Internal Getter for FleetIdInput.
     * Fleet Id Input
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIdInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIdInput() {
        return this.fleetIdInput;
    }

    /**
     * Getter for FleetIdInput.
     * Fleet Id Input
     * @return Returns the String
     */
    public String getFleetIdInput() {
        return OptionalNullable.getFrom(fleetIdInput);
    }

    /**
     * Setter for FleetIdInput.
     * Fleet Id Input
     * @param fleetIdInput Value for String
     */
    @JsonSetter("FleetIdInput")
    public void setFleetIdInput(String fleetIdInput) {
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
    }

    /**
     * UnSetter for FleetIdInput.
     * Fleet Id Input
     */
    public void unsetFleetIdInput() {
        fleetIdInput = null;
    }

    /**
     * Internal Getter for Amount.
     * Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("Amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmount() {
        return this.amount;
    }

    /**
     * Getter for Amount.
     * Amount
     * @return Returns the Double
     */
    public Double getAmount() {
        return OptionalNullable.getFrom(amount);
    }

    /**
     * Setter for Amount.
     * Amount
     * @param amount Value for Double
     */
    @JsonSetter("Amount")
    public void setAmount(Double amount) {
        this.amount = OptionalNullable.of(amount);
    }

    /**
     * UnSetter for Amount.
     * Amount
     */
    public void unsetAmount() {
        amount = null;
    }

    /**
     * Internal Getter for EuroshellSiteNumber.
     * EuroshellSiteNumber
     * @return Returns the Internal String
     */
    @JsonGetter("EuroshellSiteNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEuroshellSiteNumber() {
        return this.euroshellSiteNumber;
    }

    /**
     * Getter for EuroshellSiteNumber.
     * EuroshellSiteNumber
     * @return Returns the String
     */
    public String getEuroshellSiteNumber() {
        return OptionalNullable.getFrom(euroshellSiteNumber);
    }

    /**
     * Setter for EuroshellSiteNumber.
     * EuroshellSiteNumber
     * @param euroshellSiteNumber Value for String
     */
    @JsonSetter("EuroshellSiteNumber")
    public void setEuroshellSiteNumber(String euroshellSiteNumber) {
        this.euroshellSiteNumber = OptionalNullable.of(euroshellSiteNumber);
    }

    /**
     * UnSetter for EuroshellSiteNumber.
     * EuroshellSiteNumber
     */
    public void unsetEuroshellSiteNumber() {
        euroshellSiteNumber = null;
    }

    /**
     * Internal Getter for IncomingProductCode.
     * IncomingProductCode
     * @return Returns the Internal String
     */
    @JsonGetter("IncomingProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIncomingProductCode() {
        return this.incomingProductCode;
    }

    /**
     * Getter for IncomingProductCode.
     * IncomingProductCode
     * @return Returns the String
     */
    public String getIncomingProductCode() {
        return OptionalNullable.getFrom(incomingProductCode);
    }

    /**
     * Setter for IncomingProductCode.
     * IncomingProductCode
     * @param incomingProductCode Value for String
     */
    @JsonSetter("IncomingProductCode")
    public void setIncomingProductCode(String incomingProductCode) {
        this.incomingProductCode = OptionalNullable.of(incomingProductCode);
    }

    /**
     * UnSetter for IncomingProductCode.
     * IncomingProductCode
     */
    public void unsetIncomingProductCode() {
        incomingProductCode = null;
    }

    /**
     * Internal Getter for ProductCode.
     * ProductCode
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * ProductCode
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * ProductCode
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * ProductCode
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * ProductName
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * ProductName
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * ProductName
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * ProductName
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for SiteCode.
     * SiteCode
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * SiteCode
     * @return Returns the Integer
     */
    public Integer getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * SiteCode
     * @param siteCode Value for Integer
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(Integer siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * SiteCode
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for HostingCollectingCompanyName.
     * HostingCollectingCompanyName
     * @return Returns the Internal String
     */
    @JsonGetter("HostingCollectingCompanyName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHostingCollectingCompanyName() {
        return this.hostingCollectingCompanyName;
    }

    /**
     * Getter for HostingCollectingCompanyName.
     * HostingCollectingCompanyName
     * @return Returns the String
     */
    public String getHostingCollectingCompanyName() {
        return OptionalNullable.getFrom(hostingCollectingCompanyName);
    }

    /**
     * Setter for HostingCollectingCompanyName.
     * HostingCollectingCompanyName
     * @param hostingCollectingCompanyName Value for String
     */
    @JsonSetter("HostingCollectingCompanyName")
    public void setHostingCollectingCompanyName(String hostingCollectingCompanyName) {
        this.hostingCollectingCompanyName = OptionalNullable.of(hostingCollectingCompanyName);
    }

    /**
     * UnSetter for HostingCollectingCompanyName.
     * HostingCollectingCompanyName
     */
    public void unsetHostingCollectingCompanyName() {
        hostingCollectingCompanyName = null;
    }

    /**
     * Internal Getter for HostingCollectingCompanyNumber.
     * HostingCollectingCompanyNumber
     * @return Returns the Internal String
     */
    @JsonGetter("HostingCollectingCompanyNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetHostingCollectingCompanyNumber() {
        return this.hostingCollectingCompanyNumber;
    }

    /**
     * Getter for HostingCollectingCompanyNumber.
     * HostingCollectingCompanyNumber
     * @return Returns the String
     */
    public String getHostingCollectingCompanyNumber() {
        return OptionalNullable.getFrom(hostingCollectingCompanyNumber);
    }

    /**
     * Setter for HostingCollectingCompanyNumber.
     * HostingCollectingCompanyNumber
     * @param hostingCollectingCompanyNumber Value for String
     */
    @JsonSetter("HostingCollectingCompanyNumber")
    public void setHostingCollectingCompanyNumber(String hostingCollectingCompanyNumber) {
        this.hostingCollectingCompanyNumber = OptionalNullable.of(hostingCollectingCompanyNumber);
    }

    /**
     * UnSetter for HostingCollectingCompanyNumber.
     * HostingCollectingCompanyNumber
     */
    public void unsetHostingCollectingCompanyNumber() {
        hostingCollectingCompanyNumber = null;
    }

    /**
     * Internal Getter for IccdataTranTypeCode.
     * Transaction type code
     * @return Returns the Internal String
     */
    @JsonGetter("IccdataTranTypeCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIccdataTranTypeCode() {
        return this.iccdataTranTypeCode;
    }

    /**
     * Getter for IccdataTranTypeCode.
     * Transaction type code
     * @return Returns the String
     */
    public String getIccdataTranTypeCode() {
        return OptionalNullable.getFrom(iccdataTranTypeCode);
    }

    /**
     * Setter for IccdataTranTypeCode.
     * Transaction type code
     * @param iccdataTranTypeCode Value for String
     */
    @JsonSetter("IccdataTranTypeCode")
    public void setIccdataTranTypeCode(String iccdataTranTypeCode) {
        this.iccdataTranTypeCode = OptionalNullable.of(iccdataTranTypeCode);
    }

    /**
     * UnSetter for IccdataTranTypeCode.
     * Transaction type code
     */
    public void unsetIccdataTranTypeCode() {
        iccdataTranTypeCode = null;
    }

    /**
     * Internal Getter for TransactionType.
     * Transaction type description.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionType() {
        return this.transactionType;
    }

    /**
     * Getter for TransactionType.
     * Transaction type description.
     * @return Returns the String
     */
    public String getTransactionType() {
        return OptionalNullable.getFrom(transactionType);
    }

    /**
     * Setter for TransactionType.
     * Transaction type description.
     * @param transactionType Value for String
     */
    @JsonSetter("TransactionType")
    public void setTransactionType(String transactionType) {
        this.transactionType = OptionalNullable.of(transactionType);
    }

    /**
     * UnSetter for TransactionType.
     * Transaction type description.
     */
    public void unsetTransactionType() {
        transactionType = null;
    }

    /**
     * Internal Getter for Latitude.
     * Latitude of the Coordinate 3.11573
     * @return Returns the Internal String
     */
    @JsonGetter("Latitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLatitude() {
        return this.latitude;
    }

    /**
     * Getter for Latitude.
     * Latitude of the Coordinate 3.11573
     * @return Returns the String
     */
    public String getLatitude() {
        return OptionalNullable.getFrom(latitude);
    }

    /**
     * Setter for Latitude.
     * Latitude of the Coordinate 3.11573
     * @param latitude Value for String
     */
    @JsonSetter("Latitude")
    public void setLatitude(String latitude) {
        this.latitude = OptionalNullable.of(latitude);
    }

    /**
     * UnSetter for Latitude.
     * Latitude of the Coordinate 3.11573
     */
    public void unsetLatitude() {
        latitude = null;
    }

    /**
     * Internal Getter for Longitude.
     * Longitude of the Coordinate
     * @return Returns the Internal String
     */
    @JsonGetter("Longitude")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLongitude() {
        return this.longitude;
    }

    /**
     * Getter for Longitude.
     * Longitude of the Coordinate
     * @return Returns the String
     */
    public String getLongitude() {
        return OptionalNullable.getFrom(longitude);
    }

    /**
     * Setter for Longitude.
     * Longitude of the Coordinate
     * @param longitude Value for String
     */
    @JsonSetter("Longitude")
    public void setLongitude(String longitude) {
        this.longitude = OptionalNullable.of(longitude);
    }

    /**
     * UnSetter for Longitude.
     * Longitude of the Coordinate
     */
    public void unsetLongitude() {
        longitude = null;
    }

    /**
     * Internal Getter for MerchantCategory.
     * Merchant category
     * @return Returns the Internal String
     */
    @JsonGetter("MerchantCategory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMerchantCategory() {
        return this.merchantCategory;
    }

    /**
     * Getter for MerchantCategory.
     * Merchant category
     * @return Returns the String
     */
    public String getMerchantCategory() {
        return OptionalNullable.getFrom(merchantCategory);
    }

    /**
     * Setter for MerchantCategory.
     * Merchant category
     * @param merchantCategory Value for String
     */
    @JsonSetter("MerchantCategory")
    public void setMerchantCategory(String merchantCategory) {
        this.merchantCategory = OptionalNullable.of(merchantCategory);
    }

    /**
     * UnSetter for MerchantCategory.
     * Merchant category
     */
    public void unsetMerchantCategory() {
        merchantCategory = null;
    }

    /**
     * Internal Getter for MerchantCategoryDescription.
     * Merchant category description
     * @return Returns the Internal String
     */
    @JsonGetter("MerchantCategoryDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMerchantCategoryDescription() {
        return this.merchantCategoryDescription;
    }

    /**
     * Getter for MerchantCategoryDescription.
     * Merchant category description
     * @return Returns the String
     */
    public String getMerchantCategoryDescription() {
        return OptionalNullable.getFrom(merchantCategoryDescription);
    }

    /**
     * Setter for MerchantCategoryDescription.
     * Merchant category description
     * @param merchantCategoryDescription Value for String
     */
    @JsonSetter("MerchantCategoryDescription")
    public void setMerchantCategoryDescription(String merchantCategoryDescription) {
        this.merchantCategoryDescription = OptionalNullable.of(merchantCategoryDescription);
    }

    /**
     * UnSetter for MerchantCategoryDescription.
     * Merchant category description
     */
    public void unsetMerchantCategoryDescription() {
        merchantCategoryDescription = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Purchased in country
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Purchased in country
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Purchased in country
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Purchased in country
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for MerchantId.
     * Merchant Id
     * @return Returns the Internal String
     */
    @JsonGetter("MerchantId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMerchantId() {
        return this.merchantId;
    }

    /**
     * Getter for MerchantId.
     * Merchant Id
     * @return Returns the String
     */
    public String getMerchantId() {
        return OptionalNullable.getFrom(merchantId);
    }

    /**
     * Setter for MerchantId.
     * Merchant Id
     * @param merchantId Value for String
     */
    @JsonSetter("MerchantId")
    public void setMerchantId(String merchantId) {
        this.merchantId = OptionalNullable.of(merchantId);
    }

    /**
     * UnSetter for MerchantId.
     * Merchant Id
     */
    public void unsetMerchantId() {
        merchantId = null;
    }

    /**
     * Internal Getter for SiteName.
     * Site name
     * @return Returns the Internal String
     */
    @JsonGetter("SiteName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteName() {
        return this.siteName;
    }

    /**
     * Getter for SiteName.
     * Site name
     * @return Returns the String
     */
    public String getSiteName() {
        return OptionalNullable.getFrom(siteName);
    }

    /**
     * Setter for SiteName.
     * Site name
     * @param siteName Value for String
     */
    @JsonSetter("SiteName")
    public void setSiteName(String siteName) {
        this.siteName = OptionalNullable.of(siteName);
    }

    /**
     * UnSetter for SiteName.
     * Site name
     */
    public void unsetSiteName() {
        siteName = null;
    }

    /**
     * Internal Getter for Network.
     * Network
     * @return Returns the Internal String
     */
    @JsonGetter("Network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetwork() {
        return this.network;
    }

    /**
     * Getter for Network.
     * Network
     * @return Returns the String
     */
    public String getNetwork() {
        return OptionalNullable.getFrom(network);
    }

    /**
     * Setter for Network.
     * Network
     * @param network Value for String
     */
    @JsonSetter("Network")
    public void setNetwork(String network) {
        this.network = OptionalNullable.of(network);
    }

    /**
     * UnSetter for Network.
     * Network
     */
    public void unsetNetwork() {
        network = null;
    }

    /**
     * Internal Getter for DelcoCode.
     * Three character DelcoCode
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoCode() {
        return this.delcoCode;
    }

    /**
     * Getter for DelcoCode.
     * Three character DelcoCode
     * @return Returns the String
     */
    public String getDelcoCode() {
        return OptionalNullable.getFrom(delcoCode);
    }

    /**
     * Setter for DelcoCode.
     * Three character DelcoCode
     * @param delcoCode Value for String
     */
    @JsonSetter("DelcoCode")
    public void setDelcoCode(String delcoCode) {
        this.delcoCode = OptionalNullable.of(delcoCode);
    }

    /**
     * UnSetter for DelcoCode.
     * Three character DelcoCode
     */
    public void unsetDelcoCode() {
        delcoCode = null;
    }

    /**
     * Internal Getter for OdometerInput.
     * Odometer input
     * @return Returns the Internal String
     */
    @JsonGetter("OdometerInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOdometerInput() {
        return this.odometerInput;
    }

    /**
     * Getter for OdometerInput.
     * Odometer input
     * @return Returns the String
     */
    public String getOdometerInput() {
        return OptionalNullable.getFrom(odometerInput);
    }

    /**
     * Setter for OdometerInput.
     * Odometer input
     * @param odometerInput Value for String
     */
    @JsonSetter("OdometerInput")
    public void setOdometerInput(String odometerInput) {
        this.odometerInput = OptionalNullable.of(odometerInput);
    }

    /**
     * UnSetter for OdometerInput.
     * Odometer input
     */
    public void unsetOdometerInput() {
        odometerInput = null;
    }

    /**
     * Internal Getter for OdometerReadingKm.
     * Odometer reading in Kms
     * @return Returns the Internal String
     */
    @JsonGetter("OdometerReadingKm")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOdometerReadingKm() {
        return this.odometerReadingKm;
    }

    /**
     * Getter for OdometerReadingKm.
     * Odometer reading in Kms
     * @return Returns the String
     */
    public String getOdometerReadingKm() {
        return OptionalNullable.getFrom(odometerReadingKm);
    }

    /**
     * Setter for OdometerReadingKm.
     * Odometer reading in Kms
     * @param odometerReadingKm Value for String
     */
    @JsonSetter("OdometerReadingKm")
    public void setOdometerReadingKm(String odometerReadingKm) {
        this.odometerReadingKm = OptionalNullable.of(odometerReadingKm);
    }

    /**
     * UnSetter for OdometerReadingKm.
     * Odometer reading in Kms
     */
    public void unsetOdometerReadingKm() {
        odometerReadingKm = null;
    }

    /**
     * Internal Getter for OdometerReadingMiles.
     * Odometer reading in miles
     * @return Returns the Internal String
     */
    @JsonGetter("OdometerReadingMiles")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetOdometerReadingMiles() {
        return this.odometerReadingMiles;
    }

    /**
     * Getter for OdometerReadingMiles.
     * Odometer reading in miles
     * @return Returns the String
     */
    public String getOdometerReadingMiles() {
        return OptionalNullable.getFrom(odometerReadingMiles);
    }

    /**
     * Setter for OdometerReadingMiles.
     * Odometer reading in miles
     * @param odometerReadingMiles Value for String
     */
    @JsonSetter("OdometerReadingMiles")
    public void setOdometerReadingMiles(String odometerReadingMiles) {
        this.odometerReadingMiles = OptionalNullable.of(odometerReadingMiles);
    }

    /**
     * UnSetter for OdometerReadingMiles.
     * Odometer reading in miles
     */
    public void unsetOdometerReadingMiles() {
        odometerReadingMiles = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Masked Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Masked Card PAN
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Masked Card PAN
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Masked Card PAN
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for PINIndicator.
     * PIN indicator
     * @return Returns the Internal String
     */
    @JsonGetter("PINIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPINIndicator() {
        return this.pINIndicator;
    }

    /**
     * Getter for PINIndicator.
     * PIN indicator
     * @return Returns the String
     */
    public String getPINIndicator() {
        return OptionalNullable.getFrom(pINIndicator);
    }

    /**
     * Setter for PINIndicator.
     * PIN indicator
     * @param pINIndicator Value for String
     */
    @JsonSetter("PINIndicator")
    public void setPINIndicator(String pINIndicator) {
        this.pINIndicator = OptionalNullable.of(pINIndicator);
    }

    /**
     * UnSetter for PINIndicator.
     * PIN indicator
     */
    public void unsetPINIndicator() {
        pINIndicator = null;
    }

    /**
     * Internal Getter for POIReceiptNumber.
     * POIReceiptNumber
     * @return Returns the Internal String
     */
    @JsonGetter("POIReceiptNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPOIReceiptNumber() {
        return this.pOIReceiptNumber;
    }

    /**
     * Getter for POIReceiptNumber.
     * POIReceiptNumber
     * @return Returns the String
     */
    public String getPOIReceiptNumber() {
        return OptionalNullable.getFrom(pOIReceiptNumber);
    }

    /**
     * Setter for POIReceiptNumber.
     * POIReceiptNumber
     * @param pOIReceiptNumber Value for String
     */
    @JsonSetter("POIReceiptNumber")
    public void setPOIReceiptNumber(String pOIReceiptNumber) {
        this.pOIReceiptNumber = OptionalNullable.of(pOIReceiptNumber);
    }

    /**
     * UnSetter for POIReceiptNumber.
     * POIReceiptNumber
     */
    public void unsetPOIReceiptNumber() {
        pOIReceiptNumber = null;
    }

    /**
     * Internal Getter for ProductsCodeAdditional.
     * Additinal Products Code
     * @return Returns the Internal String
     */
    @JsonGetter("ProductsCodeAdditional")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductsCodeAdditional() {
        return this.productsCodeAdditional;
    }

    /**
     * Getter for ProductsCodeAdditional.
     * Additinal Products Code
     * @return Returns the String
     */
    public String getProductsCodeAdditional() {
        return OptionalNullable.getFrom(productsCodeAdditional);
    }

    /**
     * Setter for ProductsCodeAdditional.
     * Additinal Products Code
     * @param productsCodeAdditional Value for String
     */
    @JsonSetter("ProductsCodeAdditional")
    public void setProductsCodeAdditional(String productsCodeAdditional) {
        this.productsCodeAdditional = OptionalNullable.of(productsCodeAdditional);
    }

    /**
     * UnSetter for ProductsCodeAdditional.
     * Additinal Products Code
     */
    public void unsetProductsCodeAdditional() {
        productsCodeAdditional = null;
    }

    /**
     * Internal Getter for ProductsTaxCode.
     * Products tax code
     * @return Returns the Internal String
     */
    @JsonGetter("ProductsTaxCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductsTaxCode() {
        return this.productsTaxCode;
    }

    /**
     * Getter for ProductsTaxCode.
     * Products tax code
     * @return Returns the String
     */
    public String getProductsTaxCode() {
        return OptionalNullable.getFrom(productsTaxCode);
    }

    /**
     * Setter for ProductsTaxCode.
     * Products tax code
     * @param productsTaxCode Value for String
     */
    @JsonSetter("ProductsTaxCode")
    public void setProductsTaxCode(String productsTaxCode) {
        this.productsTaxCode = OptionalNullable.of(productsTaxCode);
    }

    /**
     * UnSetter for ProductsTaxCode.
     * Products tax code
     */
    public void unsetProductsTaxCode() {
        productsTaxCode = null;
    }

    /**
     * Internal Getter for FuelVolume.
     * Fuel volume
     * @return Returns the Internal Double
     */
    @JsonGetter("FuelVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFuelVolume() {
        return this.fuelVolume;
    }

    /**
     * Getter for FuelVolume.
     * Fuel volume
     * @return Returns the Double
     */
    public Double getFuelVolume() {
        return OptionalNullable.getFrom(fuelVolume);
    }

    /**
     * Setter for FuelVolume.
     * Fuel volume
     * @param fuelVolume Value for Double
     */
    @JsonSetter("FuelVolume")
    public void setFuelVolume(Double fuelVolume) {
        this.fuelVolume = OptionalNullable.of(fuelVolume);
    }

    /**
     * UnSetter for FuelVolume.
     * Fuel volume
     */
    public void unsetFuelVolume() {
        fuelVolume = null;
    }

    /**
     * Internal Getter for SfgwCardDateOfExpiry.
     * SfgwCard expiry date
     * @return Returns the Internal String
     */
    @JsonGetter("SfgwCardDateOfExpiry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSfgwCardDateOfExpiry() {
        return this.sfgwCardDateOfExpiry;
    }

    /**
     * Getter for SfgwCardDateOfExpiry.
     * SfgwCard expiry date
     * @return Returns the String
     */
    public String getSfgwCardDateOfExpiry() {
        return OptionalNullable.getFrom(sfgwCardDateOfExpiry);
    }

    /**
     * Setter for SfgwCardDateOfExpiry.
     * SfgwCard expiry date
     * @param sfgwCardDateOfExpiry Value for String
     */
    @JsonSetter("SfgwCardDateOfExpiry")
    public void setSfgwCardDateOfExpiry(String sfgwCardDateOfExpiry) {
        this.sfgwCardDateOfExpiry = OptionalNullable.of(sfgwCardDateOfExpiry);
    }

    /**
     * UnSetter for SfgwCardDateOfExpiry.
     * SfgwCard expiry date
     */
    public void unsetSfgwCardDateOfExpiry() {
        sfgwCardDateOfExpiry = null;
    }

    /**
     * Internal Getter for SiteCurrencyISOCode.
     * Three character Site currency ISO code
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCurrencyISOCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCurrencyISOCode() {
        return this.siteCurrencyISOCode;
    }

    /**
     * Getter for SiteCurrencyISOCode.
     * Three character Site currency ISO code
     * @return Returns the String
     */
    public String getSiteCurrencyISOCode() {
        return OptionalNullable.getFrom(siteCurrencyISOCode);
    }

    /**
     * Setter for SiteCurrencyISOCode.
     * Three character Site currency ISO code
     * @param siteCurrencyISOCode Value for String
     */
    @JsonSetter("SiteCurrencyISOCode")
    public void setSiteCurrencyISOCode(String siteCurrencyISOCode) {
        this.siteCurrencyISOCode = OptionalNullable.of(siteCurrencyISOCode);
    }

    /**
     * UnSetter for SiteCurrencyISOCode.
     * Three character Site currency ISO code
     */
    public void unsetSiteCurrencyISOCode() {
        siteCurrencyISOCode = null;
    }

    /**
     * Internal Getter for CardId.
     * Card ID
     * @return Returns the Internal String
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Card ID
     * @return Returns the String
     */
    public String getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Card ID
     * @param cardId Value for String
     */
    @JsonSetter("CardId")
    public void setCardId(String cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Card ID
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for TransactionDate.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the Internal LocalDate
     */
    @JsonGetter("TransactionDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.SimpleDateSerializer.class)
    protected OptionalNullable<LocalDate> internalGetTransactionDate() {
        return this.transactionDate;
    }

    /**
     * Getter for TransactionDate.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the LocalDate
     */
    public LocalDate getTransactionDate() {
        return OptionalNullable.getFrom(transactionDate);
    }

    /**
     * Setter for TransactionDate.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @param transactionDate Value for LocalDate
     */
    @JsonSetter("TransactionDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setTransactionDate(LocalDate transactionDate) {
        this.transactionDate = OptionalNullable.of(transactionDate);
    }

    /**
     * UnSetter for TransactionDate.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public void unsetTransactionDate() {
        transactionDate = null;
    }

    /**
     * Internal Getter for TransactionDateTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionDateTime() {
        return this.transactionDateTime;
    }

    /**
     * Getter for TransactionDateTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the String
     */
    public String getTransactionDateTime() {
        return OptionalNullable.getFrom(transactionDateTime);
    }

    /**
     * Setter for TransactionDateTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @param transactionDateTime Value for String
     */
    @JsonSetter("TransactionDateTime")
    public void setTransactionDateTime(String transactionDateTime) {
        this.transactionDateTime = OptionalNullable.of(transactionDateTime);
    }

    /**
     * UnSetter for TransactionDateTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public void unsetTransactionDateTime() {
        transactionDateTime = null;
    }

    /**
     * Internal Getter for TransactionId.
     * TransactionId
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * TransactionId
     * @return Returns the String
     */
    public String getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * TransactionId
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     * TransactionId
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Internal Getter for TransactionStatus.
     * Type of the connector in the EVSE unit.
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionStatus() {
        return this.transactionStatus;
    }

    /**
     * Getter for TransactionStatus.
     * Type of the connector in the EVSE unit.
     * @return Returns the String
     */
    public String getTransactionStatus() {
        return OptionalNullable.getFrom(transactionStatus);
    }

    /**
     * Setter for TransactionStatus.
     * Type of the connector in the EVSE unit.
     * @param transactionStatus Value for String
     */
    @JsonSetter("TransactionStatus")
    public void setTransactionStatus(String transactionStatus) {
        this.transactionStatus = OptionalNullable.of(transactionStatus);
    }

    /**
     * UnSetter for TransactionStatus.
     * Type of the connector in the EVSE unit.
     */
    public void unsetTransactionStatus() {
        transactionStatus = null;
    }

    /**
     * Internal Getter for UnitOfMeasure.
     * Unit of measure
     * @return Returns the Internal String
     */
    @JsonGetter("UnitOfMeasure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUnitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Getter for UnitOfMeasure.
     * Unit of measure
     * @return Returns the String
     */
    public String getUnitOfMeasure() {
        return OptionalNullable.getFrom(unitOfMeasure);
    }

    /**
     * Setter for UnitOfMeasure.
     * Unit of measure
     * @param unitOfMeasure Value for String
     */
    @JsonSetter("UnitOfMeasure")
    public void setUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
    }

    /**
     * UnSetter for UnitOfMeasure.
     * Unit of measure
     */
    public void unsetUnitOfMeasure() {
        unitOfMeasure = null;
    }

    /**
     * Internal Getter for VehicleRegistrationNumber.
     * VehicleRegistrationNumber
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistrationNumber() {
        return this.vehicleRegistrationNumber;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * VehicleRegistrationNumber
     * @return Returns the String
     */
    public String getVehicleRegistrationNumber() {
        return OptionalNullable.getFrom(vehicleRegistrationNumber);
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * VehicleRegistrationNumber
     * @param vehicleRegistrationNumber Value for String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(String vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
    }

    /**
     * UnSetter for VehicleRegistrationNumber.
     * VehicleRegistrationNumber
     */
    public void unsetVehicleRegistrationNumber() {
        vehicleRegistrationNumber = null;
    }

    /**
     * Internal Getter for NetworkDelcoName.
     * Network Delco name
     * @return Returns the Internal String
     */
    @JsonGetter("NetworkDelcoName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetworkDelcoName() {
        return this.networkDelcoName;
    }

    /**
     * Getter for NetworkDelcoName.
     * Network Delco name
     * @return Returns the String
     */
    public String getNetworkDelcoName() {
        return OptionalNullable.getFrom(networkDelcoName);
    }

    /**
     * Setter for NetworkDelcoName.
     * Network Delco name
     * @param networkDelcoName Value for String
     */
    @JsonSetter("NetworkDelcoName")
    public void setNetworkDelcoName(String networkDelcoName) {
        this.networkDelcoName = OptionalNullable.of(networkDelcoName);
    }

    /**
     * UnSetter for NetworkDelcoName.
     * Network Delco name
     */
    public void unsetNetworkDelcoName() {
        networkDelcoName = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * ProductGroupName
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * ProductGroupName
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * ProductGroupName
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * ProductGroupName
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Internal Getter for FuelProduct.
     * FuelProduct
     * @return Returns the Internal String
     */
    @JsonGetter("FuelProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFuelProduct() {
        return this.fuelProduct;
    }

    /**
     * Getter for FuelProduct.
     * FuelProduct
     * @return Returns the String
     */
    public String getFuelProduct() {
        return OptionalNullable.getFrom(fuelProduct);
    }

    /**
     * Setter for FuelProduct.
     * FuelProduct
     * @param fuelProduct Value for String
     */
    @JsonSetter("FuelProduct")
    public void setFuelProduct(String fuelProduct) {
        this.fuelProduct = OptionalNullable.of(fuelProduct);
    }

    /**
     * UnSetter for FuelProduct.
     * FuelProduct
     */
    public void unsetFuelProduct() {
        fuelProduct = null;
    }

    /**
     * Internal Getter for AccountCustomerName.
     * AccountCustomerName
     * @return Returns the Internal String
     */
    @JsonGetter("AccountCustomerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountCustomerName() {
        return this.accountCustomerName;
    }

    /**
     * Getter for AccountCustomerName.
     * AccountCustomerName
     * @return Returns the String
     */
    public String getAccountCustomerName() {
        return OptionalNullable.getFrom(accountCustomerName);
    }

    /**
     * Setter for AccountCustomerName.
     * AccountCustomerName
     * @param accountCustomerName Value for String
     */
    @JsonSetter("AccountCustomerName")
    public void setAccountCustomerName(String accountCustomerName) {
        this.accountCustomerName = OptionalNullable.of(accountCustomerName);
    }

    /**
     * UnSetter for AccountCustomerName.
     * AccountCustomerName
     */
    public void unsetAccountCustomerName() {
        accountCustomerName = null;
    }

    /**
     * Internal Getter for PayerName.
     * PayerName
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * PayerName
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * PayerName
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * PayerName
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for TransactionTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionTime() {
        return this.transactionTime;
    }

    /**
     * Getter for TransactionTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @return Returns the String
     */
    public String getTransactionTime() {
        return OptionalNullable.getFrom(transactionTime);
    }

    /**
     * Setter for TransactionTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     * @param transactionTime Value for String
     */
    @JsonSetter("TransactionTime")
    public void setTransactionTime(String transactionTime) {
        this.transactionTime = OptionalNullable.of(transactionTime);
    }

    /**
     * UnSetter for TransactionTime.
     * ISO8601-compliant UTC datetime of the last update of the EVSE
     */
    public void unsetTransactionTime() {
        transactionTime = null;
    }

    /**
     * Internal Getter for TransactionCurrency.
     * TransactionCurrencySymbol
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrency() {
        return this.transactionCurrency;
    }

    /**
     * Getter for TransactionCurrency.
     * TransactionCurrencySymbol
     * @return Returns the String
     */
    public String getTransactionCurrency() {
        return OptionalNullable.getFrom(transactionCurrency);
    }

    /**
     * Setter for TransactionCurrency.
     * TransactionCurrencySymbol
     * @param transactionCurrency Value for String
     */
    @JsonSetter("TransactionCurrency")
    public void setTransactionCurrency(String transactionCurrency) {
        this.transactionCurrency = OptionalNullable.of(transactionCurrency);
    }

    /**
     * UnSetter for TransactionCurrency.
     * TransactionCurrencySymbol
     */
    public void unsetTransactionCurrency() {
        transactionCurrency = null;
    }

    /**
     * Internal Getter for UnitPrice.
     * UnitPrice
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitPrice")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitPrice() {
        return this.unitPrice;
    }

    /**
     * Getter for UnitPrice.
     * UnitPrice
     * @return Returns the Double
     */
    public Double getUnitPrice() {
        return OptionalNullable.getFrom(unitPrice);
    }

    /**
     * Setter for UnitPrice.
     * UnitPrice
     * @param unitPrice Value for Double
     */
    @JsonSetter("UnitPrice")
    public void setUnitPrice(Double unitPrice) {
        this.unitPrice = OptionalNullable.of(unitPrice);
    }

    /**
     * UnSetter for UnitPrice.
     * UnitPrice
     */
    public void unsetUnitPrice() {
        unitPrice = null;
    }

    /**
     * Internal Getter for AuthorisedFlag.
     * AuthorisedFlag
     * @return Returns the Internal String
     */
    @JsonGetter("AuthorisedFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAuthorisedFlag() {
        return this.authorisedFlag;
    }

    /**
     * Getter for AuthorisedFlag.
     * AuthorisedFlag
     * @return Returns the String
     */
    public String getAuthorisedFlag() {
        return OptionalNullable.getFrom(authorisedFlag);
    }

    /**
     * Setter for AuthorisedFlag.
     * AuthorisedFlag
     * @param authorisedFlag Value for String
     */
    @JsonSetter("AuthorisedFlag")
    public void setAuthorisedFlag(String authorisedFlag) {
        this.authorisedFlag = OptionalNullable.of(authorisedFlag);
    }

    /**
     * UnSetter for AuthorisedFlag.
     * AuthorisedFlag
     */
    public void unsetAuthorisedFlag() {
        authorisedFlag = null;
    }

    /**
     * Internal Getter for TransactionTimeGMT.
     * TransactionTimeGMT update of the EVSE
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionTimeGMT")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionTimeGMT() {
        return this.transactionTimeGMT;
    }

    /**
     * Getter for TransactionTimeGMT.
     * TransactionTimeGMT update of the EVSE
     * @return Returns the String
     */
    public String getTransactionTimeGMT() {
        return OptionalNullable.getFrom(transactionTimeGMT);
    }

    /**
     * Setter for TransactionTimeGMT.
     * TransactionTimeGMT update of the EVSE
     * @param transactionTimeGMT Value for String
     */
    @JsonSetter("TransactionTimeGMT")
    public void setTransactionTimeGMT(String transactionTimeGMT) {
        this.transactionTimeGMT = OptionalNullable.of(transactionTimeGMT);
    }

    /**
     * UnSetter for TransactionTimeGMT.
     * TransactionTimeGMT update of the EVSE
     */
    public void unsetTransactionTimeGMT() {
        transactionTimeGMT = null;
    }

    /**
     * Internal Getter for ReasonCode.
     * ReasonCode
     * @return Returns the Internal String
     */
    @JsonGetter("ReasonCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReasonCode() {
        return this.reasonCode;
    }

    /**
     * Getter for ReasonCode.
     * ReasonCode
     * @return Returns the String
     */
    public String getReasonCode() {
        return OptionalNullable.getFrom(reasonCode);
    }

    /**
     * Setter for ReasonCode.
     * ReasonCode
     * @param reasonCode Value for String
     */
    @JsonSetter("ReasonCode")
    public void setReasonCode(String reasonCode) {
        this.reasonCode = OptionalNullable.of(reasonCode);
    }

    /**
     * UnSetter for ReasonCode.
     * ReasonCode
     */
    public void unsetReasonCode() {
        reasonCode = null;
    }

    /**
     * Internal Getter for IssuerActionCode.
     * IssuerActionCode
     * @return Returns the Internal String
     */
    @JsonGetter("IssuerActionCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuerActionCode() {
        return this.issuerActionCode;
    }

    /**
     * Getter for IssuerActionCode.
     * IssuerActionCode
     * @return Returns the String
     */
    public String getIssuerActionCode() {
        return OptionalNullable.getFrom(issuerActionCode);
    }

    /**
     * Setter for IssuerActionCode.
     * IssuerActionCode
     * @param issuerActionCode Value for String
     */
    @JsonSetter("IssuerActionCode")
    public void setIssuerActionCode(String issuerActionCode) {
        this.issuerActionCode = OptionalNullable.of(issuerActionCode);
    }

    /**
     * UnSetter for IssuerActionCode.
     * IssuerActionCode
     */
    public void unsetIssuerActionCode() {
        issuerActionCode = null;
    }

    /**
     * Internal Getter for IssuerActionCodeDescription.
     * IssuerActionCodeDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("IssuerActionCodeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuerActionCodeDescription() {
        return this.issuerActionCodeDescription;
    }

    /**
     * Getter for IssuerActionCodeDescription.
     * IssuerActionCodeDescription.
     * @return Returns the String
     */
    public String getIssuerActionCodeDescription() {
        return OptionalNullable.getFrom(issuerActionCodeDescription);
    }

    /**
     * Setter for IssuerActionCodeDescription.
     * IssuerActionCodeDescription.
     * @param issuerActionCodeDescription Value for String
     */
    @JsonSetter("IssuerActionCodeDescription")
    public void setIssuerActionCodeDescription(String issuerActionCodeDescription) {
        this.issuerActionCodeDescription = OptionalNullable.of(issuerActionCodeDescription);
    }

    /**
     * UnSetter for IssuerActionCodeDescription.
     * IssuerActionCodeDescription.
     */
    public void unsetIssuerActionCodeDescription() {
        issuerActionCodeDescription = null;
    }

    /**
     * Internal Getter for DeclinedReason.
     * DeclinedReason.
     * @return Returns the Internal String
     */
    @JsonGetter("DeclinedReason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDeclinedReason() {
        return this.declinedReason;
    }

    /**
     * Getter for DeclinedReason.
     * DeclinedReason.
     * @return Returns the String
     */
    public String getDeclinedReason() {
        return OptionalNullable.getFrom(declinedReason);
    }

    /**
     * Setter for DeclinedReason.
     * DeclinedReason.
     * @param declinedReason Value for String
     */
    @JsonSetter("DeclinedReason")
    public void setDeclinedReason(String declinedReason) {
        this.declinedReason = OptionalNullable.of(declinedReason);
    }

    /**
     * UnSetter for DeclinedReason.
     * DeclinedReason.
     */
    public void unsetDeclinedReason() {
        declinedReason = null;
    }

    /**
     * Internal Getter for CardStatusReasonDescription.
     * CardStatusReasonDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("CardStatusReasonDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardStatusReasonDescription() {
        return this.cardStatusReasonDescription;
    }

    /**
     * Getter for CardStatusReasonDescription.
     * CardStatusReasonDescription.
     * @return Returns the String
     */
    public String getCardStatusReasonDescription() {
        return OptionalNullable.getFrom(cardStatusReasonDescription);
    }

    /**
     * Setter for CardStatusReasonDescription.
     * CardStatusReasonDescription.
     * @param cardStatusReasonDescription Value for String
     */
    @JsonSetter("CardStatusReasonDescription")
    public void setCardStatusReasonDescription(String cardStatusReasonDescription) {
        this.cardStatusReasonDescription = OptionalNullable.of(cardStatusReasonDescription);
    }

    /**
     * UnSetter for CardStatusReasonDescription.
     * CardStatusReasonDescription.
     */
    public void unsetCardStatusReasonDescription() {
        cardStatusReasonDescription = null;
    }

    /**
     * Internal Getter for TransactionCountry.
     * TransactionCountry
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCountry() {
        return this.transactionCountry;
    }

    /**
     * Getter for TransactionCountry.
     * TransactionCountry
     * @return Returns the String
     */
    public String getTransactionCountry() {
        return OptionalNullable.getFrom(transactionCountry);
    }

    /**
     * Setter for TransactionCountry.
     * TransactionCountry
     * @param transactionCountry Value for String
     */
    @JsonSetter("TransactionCountry")
    public void setTransactionCountry(String transactionCountry) {
        this.transactionCountry = OptionalNullable.of(transactionCountry);
    }

    /**
     * UnSetter for TransactionCountry.
     * TransactionCountry
     */
    public void unsetTransactionCountry() {
        transactionCountry = null;
    }

    /**
     * Internal Getter for IssuingCollectingCompanyName.
     * IssuingCollectingCompanyName.
     * @return Returns the Internal String
     */
    @JsonGetter("IssuingCollectingCompanyName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuingCollectingCompanyName() {
        return this.issuingCollectingCompanyName;
    }

    /**
     * Getter for IssuingCollectingCompanyName.
     * IssuingCollectingCompanyName.
     * @return Returns the String
     */
    public String getIssuingCollectingCompanyName() {
        return OptionalNullable.getFrom(issuingCollectingCompanyName);
    }

    /**
     * Setter for IssuingCollectingCompanyName.
     * IssuingCollectingCompanyName.
     * @param issuingCollectingCompanyName Value for String
     */
    @JsonSetter("IssuingCollectingCompanyName")
    public void setIssuingCollectingCompanyName(String issuingCollectingCompanyName) {
        this.issuingCollectingCompanyName = OptionalNullable.of(issuingCollectingCompanyName);
    }

    /**
     * UnSetter for IssuingCollectingCompanyName.
     * IssuingCollectingCompanyName.
     */
    public void unsetIssuingCollectingCompanyName() {
        issuingCollectingCompanyName = null;
    }

    /**
     * Internal Getter for CardIssuerName.
     * CardIssuerName.
     * @return Returns the Internal String
     */
    @JsonGetter("CardIssuerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardIssuerName() {
        return this.cardIssuerName;
    }

    /**
     * Getter for CardIssuerName.
     * CardIssuerName.
     * @return Returns the String
     */
    public String getCardIssuerName() {
        return OptionalNullable.getFrom(cardIssuerName);
    }

    /**
     * Setter for CardIssuerName.
     * CardIssuerName.
     * @param cardIssuerName Value for String
     */
    @JsonSetter("CardIssuerName")
    public void setCardIssuerName(String cardIssuerName) {
        this.cardIssuerName = OptionalNullable.of(cardIssuerName);
    }

    /**
     * UnSetter for CardIssuerName.
     * CardIssuerName.
     */
    public void unsetCardIssuerName() {
        cardIssuerName = null;
    }

    /**
     * Internal Getter for DriverName.
     * DriverName.
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * DriverName.
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * DriverName.
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * DriverName.
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for BearerDescription.
     * BearerDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("BearerDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBearerDescription() {
        return this.bearerDescription;
    }

    /**
     * Getter for BearerDescription.
     * BearerDescription.
     * @return Returns the String
     */
    public String getBearerDescription() {
        return OptionalNullable.getFrom(bearerDescription);
    }

    /**
     * Setter for BearerDescription.
     * BearerDescription.
     * @param bearerDescription Value for String
     */
    @JsonSetter("BearerDescription")
    public void setBearerDescription(String bearerDescription) {
        this.bearerDescription = OptionalNullable.of(bearerDescription);
    }

    /**
     * UnSetter for BearerDescription.
     * BearerDescription.
     */
    public void unsetBearerDescription() {
        bearerDescription = null;
    }

    /**
     * Internal Getter for CardCategoryDescription.
     * CardCategoryDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("CardCategoryDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardCategoryDescription() {
        return this.cardCategoryDescription;
    }

    /**
     * Getter for CardCategoryDescription.
     * CardCategoryDescription.
     * @return Returns the String
     */
    public String getCardCategoryDescription() {
        return OptionalNullable.getFrom(cardCategoryDescription);
    }

    /**
     * Setter for CardCategoryDescription.
     * CardCategoryDescription.
     * @param cardCategoryDescription Value for String
     */
    @JsonSetter("CardCategoryDescription")
    public void setCardCategoryDescription(String cardCategoryDescription) {
        this.cardCategoryDescription = OptionalNullable.of(cardCategoryDescription);
    }

    /**
     * UnSetter for CardCategoryDescription.
     * CardCategoryDescription.
     */
    public void unsetCardCategoryDescription() {
        cardCategoryDescription = null;
    }

    /**
     * Internal Getter for CardTypeDescription.
     * CardTypeDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("CardTypeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTypeDescription() {
        return this.cardTypeDescription;
    }

    /**
     * Getter for CardTypeDescription.
     * CardTypeDescription.
     * @return Returns the String
     */
    public String getCardTypeDescription() {
        return OptionalNullable.getFrom(cardTypeDescription);
    }

    /**
     * Setter for CardTypeDescription.
     * CardTypeDescription.
     * @param cardTypeDescription Value for String
     */
    @JsonSetter("CardTypeDescription")
    public void setCardTypeDescription(String cardTypeDescription) {
        this.cardTypeDescription = OptionalNullable.of(cardTypeDescription);
    }

    /**
     * UnSetter for CardTypeDescription.
     * CardTypeDescription.
     */
    public void unsetCardTypeDescription() {
        cardTypeDescription = null;
    }

    /**
     * Internal Getter for CardTokenTypeDescription.
     * CardTokenTypeDescription.
     * @return Returns the Internal String
     */
    @JsonGetter("CardTokenTypeDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardTokenTypeDescription() {
        return this.cardTokenTypeDescription;
    }

    /**
     * Getter for CardTokenTypeDescription.
     * CardTokenTypeDescription.
     * @return Returns the String
     */
    public String getCardTokenTypeDescription() {
        return OptionalNullable.getFrom(cardTokenTypeDescription);
    }

    /**
     * Setter for CardTokenTypeDescription.
     * CardTokenTypeDescription.
     * @param cardTokenTypeDescription Value for String
     */
    @JsonSetter("CardTokenTypeDescription")
    public void setCardTokenTypeDescription(String cardTokenTypeDescription) {
        this.cardTokenTypeDescription = OptionalNullable.of(cardTokenTypeDescription);
    }

    /**
     * UnSetter for CardTokenTypeDescription.
     * CardTokenTypeDescription.
     */
    public void unsetCardTokenTypeDescription() {
        cardTokenTypeDescription = null;
    }

    /**
     * Internal Getter for EmbossType.
     * EmbossType.
     * @return Returns the Internal String
     */
    @JsonGetter("EmbossType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmbossType() {
        return this.embossType;
    }

    /**
     * Getter for EmbossType.
     * EmbossType.
     * @return Returns the String
     */
    public String getEmbossType() {
        return OptionalNullable.getFrom(embossType);
    }

    /**
     * Setter for EmbossType.
     * EmbossType.
     * @param embossType Value for String
     */
    @JsonSetter("EmbossType")
    public void setEmbossType(String embossType) {
        this.embossType = OptionalNullable.of(embossType);
    }

    /**
     * UnSetter for EmbossType.
     * EmbossType.
     */
    public void unsetEmbossType() {
        embossType = null;
    }

    /**
     * Internal Getter for EVPrintedNumber.
     * The EVPrintedNumber which can be found on the Shell EV Card
     * @return Returns the Internal String
     */
    @JsonGetter("EVPrintedNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEVPrintedNumber() {
        return this.eVPrintedNumber;
    }

    /**
     * Getter for EVPrintedNumber.
     * The EVPrintedNumber which can be found on the Shell EV Card
     * @return Returns the String
     */
    public String getEVPrintedNumber() {
        return OptionalNullable.getFrom(eVPrintedNumber);
    }

    /**
     * Setter for EVPrintedNumber.
     * The EVPrintedNumber which can be found on the Shell EV Card
     * @param eVPrintedNumber Value for String
     */
    @JsonSetter("EVPrintedNumber")
    public void setEVPrintedNumber(String eVPrintedNumber) {
        this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
    }

    /**
     * UnSetter for EVPrintedNumber.
     * The EVPrintedNumber which can be found on the Shell EV Card
     */
    public void unsetEVPrintedNumber() {
        eVPrintedNumber = null;
    }

    /**
     * Internal Getter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsRFID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsRFID() {
        return this.isRFID;
    }

    /**
     * Getter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     * @return Returns the Boolean
     */
    public Boolean getIsRFID() {
        return OptionalNullable.getFrom(isRFID);
    }

    /**
     * Setter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     * @param isRFID Value for Boolean
     */
    @JsonSetter("IsRFID")
    public void setIsRFID(Boolean isRFID) {
        this.isRFID = OptionalNullable.of(isRFID);
    }

    /**
     * UnSetter for IsRFID.
     * Whether the card type is enabled for RFID (Radio Frequency Identification)
     */
    public void unsetIsRFID() {
        isRFID = null;
    }

    /**
     * Converts this RecentTransactions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RecentTransactions [" + "colCoCode=" + colCoCode + ", payerNumber=" + payerNumber
                + ", accountNumber=" + accountNumber + ", cardIssueNumber=" + cardIssueNumber
                + ", collectingCompanyCurrencyCode=" + collectingCompanyCurrencyCode
                + ", custDataCustomerEntered=" + custDataCustomerEntered + ", custDataDriverId="
                + custDataDriverId + ", custDataFleetDescription=" + custDataFleetDescription
                + ", fleetIdInput=" + fleetIdInput + ", amount=" + amount + ", euroshellSiteNumber="
                + euroshellSiteNumber + ", incomingProductCode=" + incomingProductCode
                + ", productCode=" + productCode + ", productName=" + productName + ", siteCode="
                + siteCode + ", hostingCollectingCompanyName=" + hostingCollectingCompanyName
                + ", hostingCollectingCompanyNumber=" + hostingCollectingCompanyNumber
                + ", iccdataTranTypeCode=" + iccdataTranTypeCode + ", transactionType="
                + transactionType + ", latitude=" + latitude + ", longitude=" + longitude
                + ", merchantCategory=" + merchantCategory + ", merchantCategoryDescription="
                + merchantCategoryDescription + ", purchasedInCountry=" + purchasedInCountry
                + ", merchantId=" + merchantId + ", siteName=" + siteName + ", network=" + network
                + ", delcoCode=" + delcoCode + ", odometerInput=" + odometerInput
                + ", odometerReadingKm=" + odometerReadingKm + ", odometerReadingMiles="
                + odometerReadingMiles + ", cardPAN=" + cardPAN + ", pINIndicator=" + pINIndicator
                + ", pOIReceiptNumber=" + pOIReceiptNumber + ", productsCodeAdditional="
                + productsCodeAdditional + ", productsTaxCode=" + productsTaxCode + ", fuelVolume="
                + fuelVolume + ", sfgwCardDateOfExpiry=" + sfgwCardDateOfExpiry
                + ", siteCurrencyISOCode=" + siteCurrencyISOCode + ", cardId=" + cardId
                + ", transactionDate=" + transactionDate + ", transactionDateTime="
                + transactionDateTime + ", transactionId=" + transactionId + ", transactionStatus="
                + transactionStatus + ", unitOfMeasure=" + unitOfMeasure
                + ", vehicleRegistrationNumber=" + vehicleRegistrationNumber + ", networkDelcoName="
                + networkDelcoName + ", productGroupName=" + productGroupName + ", fuelProduct="
                + fuelProduct + ", accountCustomerName=" + accountCustomerName + ", payerName="
                + payerName + ", transactionTime=" + transactionTime + ", transactionCurrency="
                + transactionCurrency + ", unitPrice=" + unitPrice + ", authorisedFlag="
                + authorisedFlag + ", transactionTimeGMT=" + transactionTimeGMT + ", reasonCode="
                + reasonCode + ", issuerActionCode=" + issuerActionCode
                + ", issuerActionCodeDescription=" + issuerActionCodeDescription
                + ", declinedReason=" + declinedReason + ", cardStatusReasonDescription="
                + cardStatusReasonDescription + ", transactionCountry=" + transactionCountry
                + ", issuingCollectingCompanyName=" + issuingCollectingCompanyName
                + ", cardIssuerName=" + cardIssuerName + ", driverName=" + driverName
                + ", bearerDescription=" + bearerDescription + ", cardCategoryDescription="
                + cardCategoryDescription + ", cardTypeDescription=" + cardTypeDescription
                + ", cardTokenTypeDescription=" + cardTokenTypeDescription + ", embossType="
                + embossType + ", eVPrintedNumber=" + eVPrintedNumber + ", isRFID=" + isRFID + "]";
    }

    /**
     * Builds a new {@link RecentTransactions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RecentTransactions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.colCoCode = internalGetColCoCode();
        builder.payerNumber = internalGetPayerNumber();
        builder.accountNumber = internalGetAccountNumber();
        builder.cardIssueNumber = internalGetCardIssueNumber();
        builder.collectingCompanyCurrencyCode = internalGetCollectingCompanyCurrencyCode();
        builder.custDataCustomerEntered = internalGetCustDataCustomerEntered();
        builder.custDataDriverId = internalGetCustDataDriverId();
        builder.custDataFleetDescription = internalGetCustDataFleetDescription();
        builder.fleetIdInput = internalGetFleetIdInput();
        builder.amount = internalGetAmount();
        builder.euroshellSiteNumber = internalGetEuroshellSiteNumber();
        builder.incomingProductCode = internalGetIncomingProductCode();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.siteCode = internalGetSiteCode();
        builder.hostingCollectingCompanyName = internalGetHostingCollectingCompanyName();
        builder.hostingCollectingCompanyNumber = internalGetHostingCollectingCompanyNumber();
        builder.iccdataTranTypeCode = internalGetIccdataTranTypeCode();
        builder.transactionType = internalGetTransactionType();
        builder.latitude = internalGetLatitude();
        builder.longitude = internalGetLongitude();
        builder.merchantCategory = internalGetMerchantCategory();
        builder.merchantCategoryDescription = internalGetMerchantCategoryDescription();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.merchantId = internalGetMerchantId();
        builder.siteName = internalGetSiteName();
        builder.network = internalGetNetwork();
        builder.delcoCode = internalGetDelcoCode();
        builder.odometerInput = internalGetOdometerInput();
        builder.odometerReadingKm = internalGetOdometerReadingKm();
        builder.odometerReadingMiles = internalGetOdometerReadingMiles();
        builder.cardPAN = internalGetCardPAN();
        builder.pINIndicator = internalGetPINIndicator();
        builder.pOIReceiptNumber = internalGetPOIReceiptNumber();
        builder.productsCodeAdditional = internalGetProductsCodeAdditional();
        builder.productsTaxCode = internalGetProductsTaxCode();
        builder.fuelVolume = internalGetFuelVolume();
        builder.sfgwCardDateOfExpiry = internalGetSfgwCardDateOfExpiry();
        builder.siteCurrencyISOCode = internalGetSiteCurrencyISOCode();
        builder.cardId = internalGetCardId();
        builder.transactionDate = internalGetTransactionDate();
        builder.transactionDateTime = internalGetTransactionDateTime();
        builder.transactionId = internalGetTransactionId();
        builder.transactionStatus = internalGetTransactionStatus();
        builder.unitOfMeasure = internalGetUnitOfMeasure();
        builder.vehicleRegistrationNumber = internalGetVehicleRegistrationNumber();
        builder.networkDelcoName = internalGetNetworkDelcoName();
        builder.productGroupName = internalGetProductGroupName();
        builder.fuelProduct = internalGetFuelProduct();
        builder.accountCustomerName = internalGetAccountCustomerName();
        builder.payerName = internalGetPayerName();
        builder.transactionTime = internalGetTransactionTime();
        builder.transactionCurrency = internalGetTransactionCurrency();
        builder.unitPrice = internalGetUnitPrice();
        builder.authorisedFlag = internalGetAuthorisedFlag();
        builder.transactionTimeGMT = internalGetTransactionTimeGMT();
        builder.reasonCode = internalGetReasonCode();
        builder.issuerActionCode = internalGetIssuerActionCode();
        builder.issuerActionCodeDescription = internalGetIssuerActionCodeDescription();
        builder.declinedReason = internalGetDeclinedReason();
        builder.cardStatusReasonDescription = internalGetCardStatusReasonDescription();
        builder.transactionCountry = internalGetTransactionCountry();
        builder.issuingCollectingCompanyName = internalGetIssuingCollectingCompanyName();
        builder.cardIssuerName = internalGetCardIssuerName();
        builder.driverName = internalGetDriverName();
        builder.bearerDescription = internalGetBearerDescription();
        builder.cardCategoryDescription = internalGetCardCategoryDescription();
        builder.cardTypeDescription = internalGetCardTypeDescription();
        builder.cardTokenTypeDescription = internalGetCardTokenTypeDescription();
        builder.embossType = internalGetEmbossType();
        builder.eVPrintedNumber = internalGetEVPrintedNumber();
        builder.isRFID = internalGetIsRFID();
        return builder;
    }

    /**
     * Class to build instances of {@link RecentTransactions}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> cardIssueNumber;
        private OptionalNullable<String> collectingCompanyCurrencyCode;
        private OptionalNullable<String> custDataCustomerEntered;
        private OptionalNullable<String> custDataDriverId;
        private OptionalNullable<String> custDataFleetDescription;
        private OptionalNullable<String> fleetIdInput;
        private OptionalNullable<Double> amount;
        private OptionalNullable<String> euroshellSiteNumber;
        private OptionalNullable<String> incomingProductCode;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<Integer> siteCode;
        private OptionalNullable<String> hostingCollectingCompanyName;
        private OptionalNullable<String> hostingCollectingCompanyNumber;
        private OptionalNullable<String> iccdataTranTypeCode;
        private OptionalNullable<String> transactionType;
        private OptionalNullable<String> latitude;
        private OptionalNullable<String> longitude;
        private OptionalNullable<String> merchantCategory;
        private OptionalNullable<String> merchantCategoryDescription;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<String> merchantId;
        private OptionalNullable<String> siteName;
        private OptionalNullable<String> network;
        private OptionalNullable<String> delcoCode;
        private OptionalNullable<String> odometerInput;
        private OptionalNullable<String> odometerReadingKm;
        private OptionalNullable<String> odometerReadingMiles;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> pINIndicator;
        private OptionalNullable<String> pOIReceiptNumber;
        private OptionalNullable<String> productsCodeAdditional;
        private OptionalNullable<String> productsTaxCode;
        private OptionalNullable<Double> fuelVolume;
        private OptionalNullable<String> sfgwCardDateOfExpiry;
        private OptionalNullable<String> siteCurrencyISOCode;
        private OptionalNullable<String> cardId;
        private OptionalNullable<LocalDate> transactionDate;
        private OptionalNullable<String> transactionDateTime;
        private OptionalNullable<String> transactionId;
        private OptionalNullable<String> transactionStatus;
        private OptionalNullable<String> unitOfMeasure;
        private OptionalNullable<String> vehicleRegistrationNumber;
        private OptionalNullable<String> networkDelcoName;
        private OptionalNullable<String> productGroupName;
        private OptionalNullable<String> fuelProduct;
        private OptionalNullable<String> accountCustomerName;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> transactionTime;
        private OptionalNullable<String> transactionCurrency;
        private OptionalNullable<Double> unitPrice;
        private OptionalNullable<String> authorisedFlag;
        private OptionalNullable<String> transactionTimeGMT;
        private OptionalNullable<String> reasonCode;
        private OptionalNullable<String> issuerActionCode;
        private OptionalNullable<String> issuerActionCodeDescription;
        private OptionalNullable<String> declinedReason;
        private OptionalNullable<String> cardStatusReasonDescription;
        private OptionalNullable<String> transactionCountry;
        private OptionalNullable<String> issuingCollectingCompanyName;
        private OptionalNullable<String> cardIssuerName;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> bearerDescription;
        private OptionalNullable<String> cardCategoryDescription;
        private OptionalNullable<String> cardTypeDescription;
        private OptionalNullable<String> cardTokenTypeDescription;
        private OptionalNullable<String> embossType;
        private OptionalNullable<String> eVPrintedNumber;
        private OptionalNullable<Boolean> isRFID;



        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for cardIssueNumber.
         * @param  cardIssueNumber  String value for cardIssueNumber.
         * @return Builder
         */
        public Builder cardIssueNumber(String cardIssueNumber) {
            this.cardIssueNumber = OptionalNullable.of(cardIssueNumber);
            return this;
        }

        /**
         * UnSetter for cardIssueNumber.
         * @return Builder
         */
        public Builder unsetCardIssueNumber() {
            cardIssueNumber = null;
            return this;
        }

        /**
         * Setter for collectingCompanyCurrencyCode.
         * @param  collectingCompanyCurrencyCode  String value for collectingCompanyCurrencyCode.
         * @return Builder
         */
        public Builder collectingCompanyCurrencyCode(String collectingCompanyCurrencyCode) {
            this.collectingCompanyCurrencyCode = OptionalNullable.of(collectingCompanyCurrencyCode);
            return this;
        }

        /**
         * UnSetter for collectingCompanyCurrencyCode.
         * @return Builder
         */
        public Builder unsetCollectingCompanyCurrencyCode() {
            collectingCompanyCurrencyCode = null;
            return this;
        }

        /**
         * Setter for custDataCustomerEntered.
         * @param  custDataCustomerEntered  String value for custDataCustomerEntered.
         * @return Builder
         */
        public Builder custDataCustomerEntered(String custDataCustomerEntered) {
            this.custDataCustomerEntered = OptionalNullable.of(custDataCustomerEntered);
            return this;
        }

        /**
         * UnSetter for custDataCustomerEntered.
         * @return Builder
         */
        public Builder unsetCustDataCustomerEntered() {
            custDataCustomerEntered = null;
            return this;
        }

        /**
         * Setter for custDataDriverId.
         * @param  custDataDriverId  String value for custDataDriverId.
         * @return Builder
         */
        public Builder custDataDriverId(String custDataDriverId) {
            this.custDataDriverId = OptionalNullable.of(custDataDriverId);
            return this;
        }

        /**
         * UnSetter for custDataDriverId.
         * @return Builder
         */
        public Builder unsetCustDataDriverId() {
            custDataDriverId = null;
            return this;
        }

        /**
         * Setter for custDataFleetDescription.
         * @param  custDataFleetDescription  String value for custDataFleetDescription.
         * @return Builder
         */
        public Builder custDataFleetDescription(String custDataFleetDescription) {
            this.custDataFleetDescription = OptionalNullable.of(custDataFleetDescription);
            return this;
        }

        /**
         * UnSetter for custDataFleetDescription.
         * @return Builder
         */
        public Builder unsetCustDataFleetDescription() {
            custDataFleetDescription = null;
            return this;
        }

        /**
         * Setter for fleetIdInput.
         * @param  fleetIdInput  String value for fleetIdInput.
         * @return Builder
         */
        public Builder fleetIdInput(String fleetIdInput) {
            this.fleetIdInput = OptionalNullable.of(fleetIdInput);
            return this;
        }

        /**
         * UnSetter for fleetIdInput.
         * @return Builder
         */
        public Builder unsetFleetIdInput() {
            fleetIdInput = null;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  Double value for amount.
         * @return Builder
         */
        public Builder amount(Double amount) {
            this.amount = OptionalNullable.of(amount);
            return this;
        }

        /**
         * UnSetter for amount.
         * @return Builder
         */
        public Builder unsetAmount() {
            amount = null;
            return this;
        }

        /**
         * Setter for euroshellSiteNumber.
         * @param  euroshellSiteNumber  String value for euroshellSiteNumber.
         * @return Builder
         */
        public Builder euroshellSiteNumber(String euroshellSiteNumber) {
            this.euroshellSiteNumber = OptionalNullable.of(euroshellSiteNumber);
            return this;
        }

        /**
         * UnSetter for euroshellSiteNumber.
         * @return Builder
         */
        public Builder unsetEuroshellSiteNumber() {
            euroshellSiteNumber = null;
            return this;
        }

        /**
         * Setter for incomingProductCode.
         * @param  incomingProductCode  String value for incomingProductCode.
         * @return Builder
         */
        public Builder incomingProductCode(String incomingProductCode) {
            this.incomingProductCode = OptionalNullable.of(incomingProductCode);
            return this;
        }

        /**
         * UnSetter for incomingProductCode.
         * @return Builder
         */
        public Builder unsetIncomingProductCode() {
            incomingProductCode = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  Integer value for siteCode.
         * @return Builder
         */
        public Builder siteCode(Integer siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for hostingCollectingCompanyName.
         * @param  hostingCollectingCompanyName  String value for hostingCollectingCompanyName.
         * @return Builder
         */
        public Builder hostingCollectingCompanyName(String hostingCollectingCompanyName) {
            this.hostingCollectingCompanyName = OptionalNullable.of(hostingCollectingCompanyName);
            return this;
        }

        /**
         * UnSetter for hostingCollectingCompanyName.
         * @return Builder
         */
        public Builder unsetHostingCollectingCompanyName() {
            hostingCollectingCompanyName = null;
            return this;
        }

        /**
         * Setter for hostingCollectingCompanyNumber.
         * @param  hostingCollectingCompanyNumber  String value for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder hostingCollectingCompanyNumber(String hostingCollectingCompanyNumber) {
            this.hostingCollectingCompanyNumber =
                    OptionalNullable.of(hostingCollectingCompanyNumber);
            return this;
        }

        /**
         * UnSetter for hostingCollectingCompanyNumber.
         * @return Builder
         */
        public Builder unsetHostingCollectingCompanyNumber() {
            hostingCollectingCompanyNumber = null;
            return this;
        }

        /**
         * Setter for iccdataTranTypeCode.
         * @param  iccdataTranTypeCode  String value for iccdataTranTypeCode.
         * @return Builder
         */
        public Builder iccdataTranTypeCode(String iccdataTranTypeCode) {
            this.iccdataTranTypeCode = OptionalNullable.of(iccdataTranTypeCode);
            return this;
        }

        /**
         * UnSetter for iccdataTranTypeCode.
         * @return Builder
         */
        public Builder unsetIccdataTranTypeCode() {
            iccdataTranTypeCode = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = OptionalNullable.of(transactionType);
            return this;
        }

        /**
         * UnSetter for transactionType.
         * @return Builder
         */
        public Builder unsetTransactionType() {
            transactionType = null;
            return this;
        }

        /**
         * Setter for latitude.
         * @param  latitude  String value for latitude.
         * @return Builder
         */
        public Builder latitude(String latitude) {
            this.latitude = OptionalNullable.of(latitude);
            return this;
        }

        /**
         * UnSetter for latitude.
         * @return Builder
         */
        public Builder unsetLatitude() {
            latitude = null;
            return this;
        }

        /**
         * Setter for longitude.
         * @param  longitude  String value for longitude.
         * @return Builder
         */
        public Builder longitude(String longitude) {
            this.longitude = OptionalNullable.of(longitude);
            return this;
        }

        /**
         * UnSetter for longitude.
         * @return Builder
         */
        public Builder unsetLongitude() {
            longitude = null;
            return this;
        }

        /**
         * Setter for merchantCategory.
         * @param  merchantCategory  String value for merchantCategory.
         * @return Builder
         */
        public Builder merchantCategory(String merchantCategory) {
            this.merchantCategory = OptionalNullable.of(merchantCategory);
            return this;
        }

        /**
         * UnSetter for merchantCategory.
         * @return Builder
         */
        public Builder unsetMerchantCategory() {
            merchantCategory = null;
            return this;
        }

        /**
         * Setter for merchantCategoryDescription.
         * @param  merchantCategoryDescription  String value for merchantCategoryDescription.
         * @return Builder
         */
        public Builder merchantCategoryDescription(String merchantCategoryDescription) {
            this.merchantCategoryDescription = OptionalNullable.of(merchantCategoryDescription);
            return this;
        }

        /**
         * UnSetter for merchantCategoryDescription.
         * @return Builder
         */
        public Builder unsetMerchantCategoryDescription() {
            merchantCategoryDescription = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for merchantId.
         * @param  merchantId  String value for merchantId.
         * @return Builder
         */
        public Builder merchantId(String merchantId) {
            this.merchantId = OptionalNullable.of(merchantId);
            return this;
        }

        /**
         * UnSetter for merchantId.
         * @return Builder
         */
        public Builder unsetMerchantId() {
            merchantId = null;
            return this;
        }

        /**
         * Setter for siteName.
         * @param  siteName  String value for siteName.
         * @return Builder
         */
        public Builder siteName(String siteName) {
            this.siteName = OptionalNullable.of(siteName);
            return this;
        }

        /**
         * UnSetter for siteName.
         * @return Builder
         */
        public Builder unsetSiteName() {
            siteName = null;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = OptionalNullable.of(network);
            return this;
        }

        /**
         * UnSetter for network.
         * @return Builder
         */
        public Builder unsetNetwork() {
            network = null;
            return this;
        }

        /**
         * Setter for delcoCode.
         * @param  delcoCode  String value for delcoCode.
         * @return Builder
         */
        public Builder delcoCode(String delcoCode) {
            this.delcoCode = OptionalNullable.of(delcoCode);
            return this;
        }

        /**
         * UnSetter for delcoCode.
         * @return Builder
         */
        public Builder unsetDelcoCode() {
            delcoCode = null;
            return this;
        }

        /**
         * Setter for odometerInput.
         * @param  odometerInput  String value for odometerInput.
         * @return Builder
         */
        public Builder odometerInput(String odometerInput) {
            this.odometerInput = OptionalNullable.of(odometerInput);
            return this;
        }

        /**
         * UnSetter for odometerInput.
         * @return Builder
         */
        public Builder unsetOdometerInput() {
            odometerInput = null;
            return this;
        }

        /**
         * Setter for odometerReadingKm.
         * @param  odometerReadingKm  String value for odometerReadingKm.
         * @return Builder
         */
        public Builder odometerReadingKm(String odometerReadingKm) {
            this.odometerReadingKm = OptionalNullable.of(odometerReadingKm);
            return this;
        }

        /**
         * UnSetter for odometerReadingKm.
         * @return Builder
         */
        public Builder unsetOdometerReadingKm() {
            odometerReadingKm = null;
            return this;
        }

        /**
         * Setter for odometerReadingMiles.
         * @param  odometerReadingMiles  String value for odometerReadingMiles.
         * @return Builder
         */
        public Builder odometerReadingMiles(String odometerReadingMiles) {
            this.odometerReadingMiles = OptionalNullable.of(odometerReadingMiles);
            return this;
        }

        /**
         * UnSetter for odometerReadingMiles.
         * @return Builder
         */
        public Builder unsetOdometerReadingMiles() {
            odometerReadingMiles = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for pINIndicator.
         * @param  pINIndicator  String value for pINIndicator.
         * @return Builder
         */
        public Builder pINIndicator(String pINIndicator) {
            this.pINIndicator = OptionalNullable.of(pINIndicator);
            return this;
        }

        /**
         * UnSetter for pINIndicator.
         * @return Builder
         */
        public Builder unsetPINIndicator() {
            pINIndicator = null;
            return this;
        }

        /**
         * Setter for pOIReceiptNumber.
         * @param  pOIReceiptNumber  String value for pOIReceiptNumber.
         * @return Builder
         */
        public Builder pOIReceiptNumber(String pOIReceiptNumber) {
            this.pOIReceiptNumber = OptionalNullable.of(pOIReceiptNumber);
            return this;
        }

        /**
         * UnSetter for pOIReceiptNumber.
         * @return Builder
         */
        public Builder unsetPOIReceiptNumber() {
            pOIReceiptNumber = null;
            return this;
        }

        /**
         * Setter for productsCodeAdditional.
         * @param  productsCodeAdditional  String value for productsCodeAdditional.
         * @return Builder
         */
        public Builder productsCodeAdditional(String productsCodeAdditional) {
            this.productsCodeAdditional = OptionalNullable.of(productsCodeAdditional);
            return this;
        }

        /**
         * UnSetter for productsCodeAdditional.
         * @return Builder
         */
        public Builder unsetProductsCodeAdditional() {
            productsCodeAdditional = null;
            return this;
        }

        /**
         * Setter for productsTaxCode.
         * @param  productsTaxCode  String value for productsTaxCode.
         * @return Builder
         */
        public Builder productsTaxCode(String productsTaxCode) {
            this.productsTaxCode = OptionalNullable.of(productsTaxCode);
            return this;
        }

        /**
         * UnSetter for productsTaxCode.
         * @return Builder
         */
        public Builder unsetProductsTaxCode() {
            productsTaxCode = null;
            return this;
        }

        /**
         * Setter for fuelVolume.
         * @param  fuelVolume  Double value for fuelVolume.
         * @return Builder
         */
        public Builder fuelVolume(Double fuelVolume) {
            this.fuelVolume = OptionalNullable.of(fuelVolume);
            return this;
        }

        /**
         * UnSetter for fuelVolume.
         * @return Builder
         */
        public Builder unsetFuelVolume() {
            fuelVolume = null;
            return this;
        }

        /**
         * Setter for sfgwCardDateOfExpiry.
         * @param  sfgwCardDateOfExpiry  String value for sfgwCardDateOfExpiry.
         * @return Builder
         */
        public Builder sfgwCardDateOfExpiry(String sfgwCardDateOfExpiry) {
            this.sfgwCardDateOfExpiry = OptionalNullable.of(sfgwCardDateOfExpiry);
            return this;
        }

        /**
         * UnSetter for sfgwCardDateOfExpiry.
         * @return Builder
         */
        public Builder unsetSfgwCardDateOfExpiry() {
            sfgwCardDateOfExpiry = null;
            return this;
        }

        /**
         * Setter for siteCurrencyISOCode.
         * @param  siteCurrencyISOCode  String value for siteCurrencyISOCode.
         * @return Builder
         */
        public Builder siteCurrencyISOCode(String siteCurrencyISOCode) {
            this.siteCurrencyISOCode = OptionalNullable.of(siteCurrencyISOCode);
            return this;
        }

        /**
         * UnSetter for siteCurrencyISOCode.
         * @return Builder
         */
        public Builder unsetSiteCurrencyISOCode() {
            siteCurrencyISOCode = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  String value for cardId.
         * @return Builder
         */
        public Builder cardId(String cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for transactionDate.
         * @param  transactionDate  LocalDate value for transactionDate.
         * @return Builder
         */
        public Builder transactionDate(LocalDate transactionDate) {
            this.transactionDate = OptionalNullable.of(transactionDate);
            return this;
        }

        /**
         * UnSetter for transactionDate.
         * @return Builder
         */
        public Builder unsetTransactionDate() {
            transactionDate = null;
            return this;
        }

        /**
         * Setter for transactionDateTime.
         * @param  transactionDateTime  String value for transactionDateTime.
         * @return Builder
         */
        public Builder transactionDateTime(String transactionDateTime) {
            this.transactionDateTime = OptionalNullable.of(transactionDateTime);
            return this;
        }

        /**
         * UnSetter for transactionDateTime.
         * @return Builder
         */
        public Builder unsetTransactionDateTime() {
            transactionDateTime = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Setter for transactionStatus.
         * @param  transactionStatus  String value for transactionStatus.
         * @return Builder
         */
        public Builder transactionStatus(String transactionStatus) {
            this.transactionStatus = OptionalNullable.of(transactionStatus);
            return this;
        }

        /**
         * UnSetter for transactionStatus.
         * @return Builder
         */
        public Builder unsetTransactionStatus() {
            transactionStatus = null;
            return this;
        }

        /**
         * Setter for unitOfMeasure.
         * @param  unitOfMeasure  String value for unitOfMeasure.
         * @return Builder
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            this.unitOfMeasure = OptionalNullable.of(unitOfMeasure);
            return this;
        }

        /**
         * UnSetter for unitOfMeasure.
         * @return Builder
         */
        public Builder unsetUnitOfMeasure() {
            unitOfMeasure = null;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(String vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
            return this;
        }

        /**
         * UnSetter for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder unsetVehicleRegistrationNumber() {
            vehicleRegistrationNumber = null;
            return this;
        }

        /**
         * Setter for networkDelcoName.
         * @param  networkDelcoName  String value for networkDelcoName.
         * @return Builder
         */
        public Builder networkDelcoName(String networkDelcoName) {
            this.networkDelcoName = OptionalNullable.of(networkDelcoName);
            return this;
        }

        /**
         * UnSetter for networkDelcoName.
         * @return Builder
         */
        public Builder unsetNetworkDelcoName() {
            networkDelcoName = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Setter for fuelProduct.
         * @param  fuelProduct  String value for fuelProduct.
         * @return Builder
         */
        public Builder fuelProduct(String fuelProduct) {
            this.fuelProduct = OptionalNullable.of(fuelProduct);
            return this;
        }

        /**
         * UnSetter for fuelProduct.
         * @return Builder
         */
        public Builder unsetFuelProduct() {
            fuelProduct = null;
            return this;
        }

        /**
         * Setter for accountCustomerName.
         * @param  accountCustomerName  String value for accountCustomerName.
         * @return Builder
         */
        public Builder accountCustomerName(String accountCustomerName) {
            this.accountCustomerName = OptionalNullable.of(accountCustomerName);
            return this;
        }

        /**
         * UnSetter for accountCustomerName.
         * @return Builder
         */
        public Builder unsetAccountCustomerName() {
            accountCustomerName = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for transactionTime.
         * @param  transactionTime  String value for transactionTime.
         * @return Builder
         */
        public Builder transactionTime(String transactionTime) {
            this.transactionTime = OptionalNullable.of(transactionTime);
            return this;
        }

        /**
         * UnSetter for transactionTime.
         * @return Builder
         */
        public Builder unsetTransactionTime() {
            transactionTime = null;
            return this;
        }

        /**
         * Setter for transactionCurrency.
         * @param  transactionCurrency  String value for transactionCurrency.
         * @return Builder
         */
        public Builder transactionCurrency(String transactionCurrency) {
            this.transactionCurrency = OptionalNullable.of(transactionCurrency);
            return this;
        }

        /**
         * UnSetter for transactionCurrency.
         * @return Builder
         */
        public Builder unsetTransactionCurrency() {
            transactionCurrency = null;
            return this;
        }

        /**
         * Setter for unitPrice.
         * @param  unitPrice  Double value for unitPrice.
         * @return Builder
         */
        public Builder unitPrice(Double unitPrice) {
            this.unitPrice = OptionalNullable.of(unitPrice);
            return this;
        }

        /**
         * UnSetter for unitPrice.
         * @return Builder
         */
        public Builder unsetUnitPrice() {
            unitPrice = null;
            return this;
        }

        /**
         * Setter for authorisedFlag.
         * @param  authorisedFlag  String value for authorisedFlag.
         * @return Builder
         */
        public Builder authorisedFlag(String authorisedFlag) {
            this.authorisedFlag = OptionalNullable.of(authorisedFlag);
            return this;
        }

        /**
         * UnSetter for authorisedFlag.
         * @return Builder
         */
        public Builder unsetAuthorisedFlag() {
            authorisedFlag = null;
            return this;
        }

        /**
         * Setter for transactionTimeGMT.
         * @param  transactionTimeGMT  String value for transactionTimeGMT.
         * @return Builder
         */
        public Builder transactionTimeGMT(String transactionTimeGMT) {
            this.transactionTimeGMT = OptionalNullable.of(transactionTimeGMT);
            return this;
        }

        /**
         * UnSetter for transactionTimeGMT.
         * @return Builder
         */
        public Builder unsetTransactionTimeGMT() {
            transactionTimeGMT = null;
            return this;
        }

        /**
         * Setter for reasonCode.
         * @param  reasonCode  String value for reasonCode.
         * @return Builder
         */
        public Builder reasonCode(String reasonCode) {
            this.reasonCode = OptionalNullable.of(reasonCode);
            return this;
        }

        /**
         * UnSetter for reasonCode.
         * @return Builder
         */
        public Builder unsetReasonCode() {
            reasonCode = null;
            return this;
        }

        /**
         * Setter for issuerActionCode.
         * @param  issuerActionCode  String value for issuerActionCode.
         * @return Builder
         */
        public Builder issuerActionCode(String issuerActionCode) {
            this.issuerActionCode = OptionalNullable.of(issuerActionCode);
            return this;
        }

        /**
         * UnSetter for issuerActionCode.
         * @return Builder
         */
        public Builder unsetIssuerActionCode() {
            issuerActionCode = null;
            return this;
        }

        /**
         * Setter for issuerActionCodeDescription.
         * @param  issuerActionCodeDescription  String value for issuerActionCodeDescription.
         * @return Builder
         */
        public Builder issuerActionCodeDescription(String issuerActionCodeDescription) {
            this.issuerActionCodeDescription = OptionalNullable.of(issuerActionCodeDescription);
            return this;
        }

        /**
         * UnSetter for issuerActionCodeDescription.
         * @return Builder
         */
        public Builder unsetIssuerActionCodeDescription() {
            issuerActionCodeDescription = null;
            return this;
        }

        /**
         * Setter for declinedReason.
         * @param  declinedReason  String value for declinedReason.
         * @return Builder
         */
        public Builder declinedReason(String declinedReason) {
            this.declinedReason = OptionalNullable.of(declinedReason);
            return this;
        }

        /**
         * UnSetter for declinedReason.
         * @return Builder
         */
        public Builder unsetDeclinedReason() {
            declinedReason = null;
            return this;
        }

        /**
         * Setter for cardStatusReasonDescription.
         * @param  cardStatusReasonDescription  String value for cardStatusReasonDescription.
         * @return Builder
         */
        public Builder cardStatusReasonDescription(String cardStatusReasonDescription) {
            this.cardStatusReasonDescription = OptionalNullable.of(cardStatusReasonDescription);
            return this;
        }

        /**
         * UnSetter for cardStatusReasonDescription.
         * @return Builder
         */
        public Builder unsetCardStatusReasonDescription() {
            cardStatusReasonDescription = null;
            return this;
        }

        /**
         * Setter for transactionCountry.
         * @param  transactionCountry  String value for transactionCountry.
         * @return Builder
         */
        public Builder transactionCountry(String transactionCountry) {
            this.transactionCountry = OptionalNullable.of(transactionCountry);
            return this;
        }

        /**
         * UnSetter for transactionCountry.
         * @return Builder
         */
        public Builder unsetTransactionCountry() {
            transactionCountry = null;
            return this;
        }

        /**
         * Setter for issuingCollectingCompanyName.
         * @param  issuingCollectingCompanyName  String value for issuingCollectingCompanyName.
         * @return Builder
         */
        public Builder issuingCollectingCompanyName(String issuingCollectingCompanyName) {
            this.issuingCollectingCompanyName = OptionalNullable.of(issuingCollectingCompanyName);
            return this;
        }

        /**
         * UnSetter for issuingCollectingCompanyName.
         * @return Builder
         */
        public Builder unsetIssuingCollectingCompanyName() {
            issuingCollectingCompanyName = null;
            return this;
        }

        /**
         * Setter for cardIssuerName.
         * @param  cardIssuerName  String value for cardIssuerName.
         * @return Builder
         */
        public Builder cardIssuerName(String cardIssuerName) {
            this.cardIssuerName = OptionalNullable.of(cardIssuerName);
            return this;
        }

        /**
         * UnSetter for cardIssuerName.
         * @return Builder
         */
        public Builder unsetCardIssuerName() {
            cardIssuerName = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for bearerDescription.
         * @param  bearerDescription  String value for bearerDescription.
         * @return Builder
         */
        public Builder bearerDescription(String bearerDescription) {
            this.bearerDescription = OptionalNullable.of(bearerDescription);
            return this;
        }

        /**
         * UnSetter for bearerDescription.
         * @return Builder
         */
        public Builder unsetBearerDescription() {
            bearerDescription = null;
            return this;
        }

        /**
         * Setter for cardCategoryDescription.
         * @param  cardCategoryDescription  String value for cardCategoryDescription.
         * @return Builder
         */
        public Builder cardCategoryDescription(String cardCategoryDescription) {
            this.cardCategoryDescription = OptionalNullable.of(cardCategoryDescription);
            return this;
        }

        /**
         * UnSetter for cardCategoryDescription.
         * @return Builder
         */
        public Builder unsetCardCategoryDescription() {
            cardCategoryDescription = null;
            return this;
        }

        /**
         * Setter for cardTypeDescription.
         * @param  cardTypeDescription  String value for cardTypeDescription.
         * @return Builder
         */
        public Builder cardTypeDescription(String cardTypeDescription) {
            this.cardTypeDescription = OptionalNullable.of(cardTypeDescription);
            return this;
        }

        /**
         * UnSetter for cardTypeDescription.
         * @return Builder
         */
        public Builder unsetCardTypeDescription() {
            cardTypeDescription = null;
            return this;
        }

        /**
         * Setter for cardTokenTypeDescription.
         * @param  cardTokenTypeDescription  String value for cardTokenTypeDescription.
         * @return Builder
         */
        public Builder cardTokenTypeDescription(String cardTokenTypeDescription) {
            this.cardTokenTypeDescription = OptionalNullable.of(cardTokenTypeDescription);
            return this;
        }

        /**
         * UnSetter for cardTokenTypeDescription.
         * @return Builder
         */
        public Builder unsetCardTokenTypeDescription() {
            cardTokenTypeDescription = null;
            return this;
        }

        /**
         * Setter for embossType.
         * @param  embossType  String value for embossType.
         * @return Builder
         */
        public Builder embossType(String embossType) {
            this.embossType = OptionalNullable.of(embossType);
            return this;
        }

        /**
         * UnSetter for embossType.
         * @return Builder
         */
        public Builder unsetEmbossType() {
            embossType = null;
            return this;
        }

        /**
         * Setter for eVPrintedNumber.
         * @param  eVPrintedNumber  String value for eVPrintedNumber.
         * @return Builder
         */
        public Builder eVPrintedNumber(String eVPrintedNumber) {
            this.eVPrintedNumber = OptionalNullable.of(eVPrintedNumber);
            return this;
        }

        /**
         * UnSetter for eVPrintedNumber.
         * @return Builder
         */
        public Builder unsetEVPrintedNumber() {
            eVPrintedNumber = null;
            return this;
        }

        /**
         * Setter for isRFID.
         * @param  isRFID  Boolean value for isRFID.
         * @return Builder
         */
        public Builder isRFID(Boolean isRFID) {
            this.isRFID = OptionalNullable.of(isRFID);
            return this;
        }

        /**
         * UnSetter for isRFID.
         * @return Builder
         */
        public Builder unsetIsRFID() {
            isRFID = null;
            return this;
        }

        /**
         * Builds a new {@link RecentTransactions} object using the set fields.
         * @return {@link RecentTransactions}
         */
        public RecentTransactions build() {
            return new RecentTransactions(colCoCode, payerNumber, accountNumber, cardIssueNumber,
                    collectingCompanyCurrencyCode, custDataCustomerEntered, custDataDriverId,
                    custDataFleetDescription, fleetIdInput, amount, euroshellSiteNumber,
                    incomingProductCode, productCode, productName, siteCode,
                    hostingCollectingCompanyName, hostingCollectingCompanyNumber,
                    iccdataTranTypeCode, transactionType, latitude, longitude, merchantCategory,
                    merchantCategoryDescription, purchasedInCountry, merchantId, siteName, network,
                    delcoCode, odometerInput, odometerReadingKm, odometerReadingMiles, cardPAN,
                    pINIndicator, pOIReceiptNumber, productsCodeAdditional, productsTaxCode,
                    fuelVolume, sfgwCardDateOfExpiry, siteCurrencyISOCode, cardId, transactionDate,
                    transactionDateTime, transactionId, transactionStatus, unitOfMeasure,
                    vehicleRegistrationNumber, networkDelcoName, productGroupName, fuelProduct,
                    accountCustomerName, payerName, transactionTime, transactionCurrency, unitPrice,
                    authorisedFlag, transactionTimeGMT, reasonCode, issuerActionCode,
                    issuerActionCodeDescription, declinedReason, cardStatusReasonDescription,
                    transactionCountry, issuingCollectingCompanyName, cardIssuerName, driverName,
                    bearerDescription, cardCategoryDescription, cardTypeDescription,
                    cardTokenTypeDescription, embossType, eVPrintedNumber, isRFID);
        }
    }
}
