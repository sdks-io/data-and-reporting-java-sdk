/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for MonthlyInvoiceTrend type.
 */
public class MonthlyInvoiceTrend {
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Integer> month;
    private OptionalNullable<Double> totalNetAmount;
    private OptionalNullable<Double> totalVATAmount;
    private OptionalNullable<Integer> year;

    /**
     * Default constructor.
     */
    public MonthlyInvoiceTrend() {
    }

    /**
     * Initialization constructor.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  month  Integer value for month.
     * @param  totalNetAmount  Double value for totalNetAmount.
     * @param  totalVATAmount  Double value for totalVATAmount.
     * @param  year  Integer value for year.
     */
    public MonthlyInvoiceTrend(
            String currencyCode,
            String currencySymbol,
            Integer month,
            Double totalNetAmount,
            Double totalVATAmount,
            Integer year) {
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.month = OptionalNullable.of(month);
        this.totalNetAmount = OptionalNullable.of(totalNetAmount);
        this.totalVATAmount = OptionalNullable.of(totalVATAmount);
        this.year = OptionalNullable.of(year);
    }

    /**
     * Initialization constructor.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  month  Integer value for month.
     * @param  totalNetAmount  Double value for totalNetAmount.
     * @param  totalVATAmount  Double value for totalVATAmount.
     * @param  year  Integer value for year.
     */

    protected MonthlyInvoiceTrend(OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<Integer> month,
            OptionalNullable<Double> totalNetAmount, OptionalNullable<Double> totalVATAmount,
            OptionalNullable<Integer> year) {
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.month = month;
        this.totalNetAmount = totalNetAmount;
        this.totalVATAmount = totalVATAmount;
        this.year = year;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO code of invoice currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO code of invoice currency. Example: EUR
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO code of invoice currency. Example: EUR
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO code of invoice currency. Example: EUR
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Symbol of invoice currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Symbol of invoice currency. Example: €
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Symbol of invoice currency. Example: €
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Symbol of invoice currency. Example: €
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for Month.
     * Month.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Month")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetMonth() {
        return this.month;
    }

    /**
     * Getter for Month.
     * Month.
     * @return Returns the Integer
     */
    public Integer getMonth() {
        return OptionalNullable.getFrom(month);
    }

    /**
     * Setter for Month.
     * Month.
     * @param month Value for Integer
     */
    @JsonSetter("Month")
    public void setMonth(Integer month) {
        this.month = OptionalNullable.of(month);
    }

    /**
     * UnSetter for Month.
     * Month.
     */
    public void unsetMonth() {
        month = null;
    }

    /**
     * Internal Getter for TotalNetAmount.
     * Total net amount invoiced in this month.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalNetAmount() {
        return this.totalNetAmount;
    }

    /**
     * Getter for TotalNetAmount.
     * Total net amount invoiced in this month.
     * @return Returns the Double
     */
    public Double getTotalNetAmount() {
        return OptionalNullable.getFrom(totalNetAmount);
    }

    /**
     * Setter for TotalNetAmount.
     * Total net amount invoiced in this month.
     * @param totalNetAmount Value for Double
     */
    @JsonSetter("TotalNetAmount")
    public void setTotalNetAmount(Double totalNetAmount) {
        this.totalNetAmount = OptionalNullable.of(totalNetAmount);
    }

    /**
     * UnSetter for TotalNetAmount.
     * Total net amount invoiced in this month.
     */
    public void unsetTotalNetAmount() {
        totalNetAmount = null;
    }

    /**
     * Internal Getter for TotalVATAmount.
     * Total VAT amount invoiced in this month.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVATAmount() {
        return this.totalVATAmount;
    }

    /**
     * Getter for TotalVATAmount.
     * Total VAT amount invoiced in this month.
     * @return Returns the Double
     */
    public Double getTotalVATAmount() {
        return OptionalNullable.getFrom(totalVATAmount);
    }

    /**
     * Setter for TotalVATAmount.
     * Total VAT amount invoiced in this month.
     * @param totalVATAmount Value for Double
     */
    @JsonSetter("TotalVATAmount")
    public void setTotalVATAmount(Double totalVATAmount) {
        this.totalVATAmount = OptionalNullable.of(totalVATAmount);
    }

    /**
     * UnSetter for TotalVATAmount.
     * Total VAT amount invoiced in this month.
     */
    public void unsetTotalVATAmount() {
        totalVATAmount = null;
    }

    /**
     * Internal Getter for Year.
     * Year.
     * @return Returns the Internal Integer
     */
    @JsonGetter("Year")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetYear() {
        return this.year;
    }

    /**
     * Getter for Year.
     * Year.
     * @return Returns the Integer
     */
    public Integer getYear() {
        return OptionalNullable.getFrom(year);
    }

    /**
     * Setter for Year.
     * Year.
     * @param year Value for Integer
     */
    @JsonSetter("Year")
    public void setYear(Integer year) {
        this.year = OptionalNullable.of(year);
    }

    /**
     * UnSetter for Year.
     * Year.
     */
    public void unsetYear() {
        year = null;
    }

    /**
     * Converts this MonthlyInvoiceTrend into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MonthlyInvoiceTrend [" + "currencyCode=" + currencyCode + ", currencySymbol="
                + currencySymbol + ", month=" + month + ", totalNetAmount=" + totalNetAmount
                + ", totalVATAmount=" + totalVATAmount + ", year=" + year + "]";
    }

    /**
     * Builds a new {@link MonthlyInvoiceTrend.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MonthlyInvoiceTrend.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.month = internalGetMonth();
        builder.totalNetAmount = internalGetTotalNetAmount();
        builder.totalVATAmount = internalGetTotalVATAmount();
        builder.year = internalGetYear();
        return builder;
    }

    /**
     * Class to build instances of {@link MonthlyInvoiceTrend}.
     */
    public static class Builder {
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Integer> month;
        private OptionalNullable<Double> totalNetAmount;
        private OptionalNullable<Double> totalVATAmount;
        private OptionalNullable<Integer> year;



        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for month.
         * @param  month  Integer value for month.
         * @return Builder
         */
        public Builder month(Integer month) {
            this.month = OptionalNullable.of(month);
            return this;
        }

        /**
         * UnSetter for month.
         * @return Builder
         */
        public Builder unsetMonth() {
            month = null;
            return this;
        }

        /**
         * Setter for totalNetAmount.
         * @param  totalNetAmount  Double value for totalNetAmount.
         * @return Builder
         */
        public Builder totalNetAmount(Double totalNetAmount) {
            this.totalNetAmount = OptionalNullable.of(totalNetAmount);
            return this;
        }

        /**
         * UnSetter for totalNetAmount.
         * @return Builder
         */
        public Builder unsetTotalNetAmount() {
            totalNetAmount = null;
            return this;
        }

        /**
         * Setter for totalVATAmount.
         * @param  totalVATAmount  Double value for totalVATAmount.
         * @return Builder
         */
        public Builder totalVATAmount(Double totalVATAmount) {
            this.totalVATAmount = OptionalNullable.of(totalVATAmount);
            return this;
        }

        /**
         * UnSetter for totalVATAmount.
         * @return Builder
         */
        public Builder unsetTotalVATAmount() {
            totalVATAmount = null;
            return this;
        }

        /**
         * Setter for year.
         * @param  year  Integer value for year.
         * @return Builder
         */
        public Builder year(Integer year) {
            this.year = OptionalNullable.of(year);
            return this;
        }

        /**
         * UnSetter for year.
         * @return Builder
         */
        public Builder unsetYear() {
            year = null;
            return this;
        }

        /**
         * Builds a new {@link MonthlyInvoiceTrend} object using the set fields.
         * @return {@link MonthlyInvoiceTrend}
         */
        public MonthlyInvoiceTrend build() {
            return new MonthlyInvoiceTrend(currencyCode, currencySymbol, month, totalNetAmount,
                    totalVATAmount, year);
        }
    }
}
