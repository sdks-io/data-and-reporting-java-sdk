/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for PricedTransactionResponseV2 type.
 */
public class PricedTransactionResponseV2 {
    private String requestId;
    private String status;
    private List<PricedResponseData> data;
    private Integer page;
    private Integer pageSize;
    private Integer totalPages;

    /**
     * Default constructor.
     */
    public PricedTransactionResponseV2() {
    }

    /**
     * Initialization constructor.
     * @param  requestId  String value for requestId.
     * @param  status  String value for status.
     * @param  data  List of PricedResponseData value for data.
     * @param  page  Integer value for page.
     * @param  pageSize  Integer value for pageSize.
     * @param  totalPages  Integer value for totalPages.
     */
    public PricedTransactionResponseV2(
            String requestId,
            String status,
            List<PricedResponseData> data,
            Integer page,
            Integer pageSize,
            Integer totalPages) {
        this.requestId = requestId;
        this.status = status;
        this.data = data;
        this.page = page;
        this.pageSize = pageSize;
        this.totalPages = totalPages;
    }

    /**
     * Getter for RequestId.
     * Mandatory UUID (according to RFC 4122 standards) for requests and responses. This will be
     * played back in the response from the req
     * @return Returns the String
     */
    @JsonGetter("RequestId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRequestId() {
        return requestId;
    }

    /**
     * Setter for RequestId.
     * Mandatory UUID (according to RFC 4122 standards) for requests and responses. This will be
     * played back in the response from the req
     * @param requestId Value for String
     */
    @JsonSetter("RequestId")
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Getter for Status.
     * Indicates overall status of the request
     * @return Returns the String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * Indicates overall status of the request
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Data.
     * @return Returns the List of PricedResponseData
     */
    @JsonGetter("Data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<PricedResponseData> getData() {
        return data;
    }

    /**
     * Setter for Data.
     * @param data Value for List of PricedResponseData
     */
    @JsonSetter("Data")
    public void setData(List<PricedResponseData> data) {
        this.data = data;
    }

    /**
     * Getter for Page.
     * Current page
     * @return Returns the Integer
     */
    @JsonGetter("Page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPage() {
        return page;
    }

    /**
     * Setter for Page.
     * Current page
     * @param page Value for Integer
     */
    @JsonSetter("Page")
    public void setPage(Integer page) {
        this.page = page;
    }

    /**
     * Getter for PageSize.
     * Number of records returned in the response
     * @return Returns the Integer
     */
    @JsonGetter("PageSize")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * Setter for PageSize.
     * Number of records returned in the response
     * @param pageSize Value for Integer
     */
    @JsonSetter("PageSize")
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * Getter for TotalPages.
     * Total number of pages available for the requested data
     * @return Returns the Integer
     */
    @JsonGetter("TotalPages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTotalPages() {
        return totalPages;
    }

    /**
     * Setter for TotalPages.
     * Total number of pages available for the requested data
     * @param totalPages Value for Integer
     */
    @JsonSetter("TotalPages")
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }

    /**
     * Converts this PricedTransactionResponseV2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PricedTransactionResponseV2 [" + "requestId=" + requestId + ", status=" + status
                + ", data=" + data + ", page=" + page + ", pageSize=" + pageSize + ", totalPages="
                + totalPages + "]";
    }

    /**
     * Builds a new {@link PricedTransactionResponseV2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PricedTransactionResponseV2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .requestId(getRequestId())
                .status(getStatus())
                .data(getData())
                .page(getPage())
                .pageSize(getPageSize())
                .totalPages(getTotalPages());
        return builder;
    }

    /**
     * Class to build instances of {@link PricedTransactionResponseV2}.
     */
    public static class Builder {
        private String requestId;
        private String status;
        private List<PricedResponseData> data;
        private Integer page;
        private Integer pageSize;
        private Integer totalPages;



        /**
         * Setter for requestId.
         * @param  requestId  String value for requestId.
         * @return Builder
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for data.
         * @param  data  List of PricedResponseData value for data.
         * @return Builder
         */
        public Builder data(List<PricedResponseData> data) {
            this.data = data;
            return this;
        }

        /**
         * Setter for page.
         * @param  page  Integer value for page.
         * @return Builder
         */
        public Builder page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Setter for pageSize.
         * @param  pageSize  Integer value for pageSize.
         * @return Builder
         */
        public Builder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Setter for totalPages.
         * @param  totalPages  Integer value for totalPages.
         * @return Builder
         */
        public Builder totalPages(Integer totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        /**
         * Builds a new {@link PricedTransactionResponseV2} object using the set fields.
         * @return {@link PricedTransactionResponseV2}
         */
        public PricedTransactionResponseV2 build() {
            return new PricedTransactionResponseV2(requestId, status, data, page, pageSize,
                    totalPages);
        }
    }
}
