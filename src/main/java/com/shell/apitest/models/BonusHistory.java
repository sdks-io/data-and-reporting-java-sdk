/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for BonusHistory type.
 */
public class BonusHistory {
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerShortName;
    private OptionalNullable<String> payerFullName;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<String> accountFullName;
    private OptionalNullable<Integer> invoiceAccountId;
    private OptionalNullable<String> invoiceAccountNumber;
    private OptionalNullable<String> invoiceAccountShortName;
    private OptionalNullable<String> invoiceAccountFullName;
    private OptionalNullable<String> feeRuleId;
    private OptionalNullable<String> feeRuleDescription;
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<String> bonusPaidTo;
    private OptionalNullable<Integer> feeItemId;
    private OptionalNullable<String> feeRuleBasis;
    private OptionalNullable<String> feeItemCurrencyCode;
    private OptionalNullable<String> feeItemCurrencySymbol;
    private OptionalNullable<Double> proratedVolume;
    private OptionalNullable<Double> totalVolume;
    private OptionalNullable<String> feeProduct;
    private OptionalNullable<Double> invoiceGrossAmount;
    private OptionalNullable<Double> invoiceNetAmount;
    private OptionalNullable<Double> invoiceVATAmount;
    private OptionalNullable<Boolean> isFeeCancelled;
    private OptionalNullable<Double> feeItemTierProratedVolume;
    private OptionalNullable<Double> feeItemTierTotalVolume;
    private OptionalNullable<Integer> tierMinimum;
    private OptionalNullable<Double> tierRate;

    /**
     * Default constructor.
     */
    public BonusHistory() {
    }

    /**
     * Initialization constructor.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerShortName  String value for payerShortName.
     * @param  payerFullName  String value for payerFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  accountFullName  String value for accountFullName.
     * @param  invoiceAccountId  Integer value for invoiceAccountId.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  invoiceAccountFullName  String value for invoiceAccountFullName.
     * @param  feeRuleId  String value for feeRuleId.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  bonusPaidTo  String value for bonusPaidTo.
     * @param  feeItemId  Integer value for feeItemId.
     * @param  feeRuleBasis  String value for feeRuleBasis.
     * @param  feeItemCurrencyCode  String value for feeItemCurrencyCode.
     * @param  feeItemCurrencySymbol  String value for feeItemCurrencySymbol.
     * @param  proratedVolume  Double value for proratedVolume.
     * @param  totalVolume  Double value for totalVolume.
     * @param  feeProduct  String value for feeProduct.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  invoiceVATAmount  Double value for invoiceVATAmount.
     * @param  isFeeCancelled  Boolean value for isFeeCancelled.
     * @param  feeItemTierProratedVolume  Double value for feeItemTierProratedVolume.
     * @param  feeItemTierTotalVolume  Double value for feeItemTierTotalVolume.
     * @param  tierMinimum  Integer value for tierMinimum.
     * @param  tierRate  Double value for tierRate.
     */
    public BonusHistory(
            Integer payerId,
            String payerNumber,
            String payerShortName,
            String payerFullName,
            Integer accountId,
            String accountNumber,
            String accountShortName,
            String accountFullName,
            Integer invoiceAccountId,
            String invoiceAccountNumber,
            String invoiceAccountShortName,
            String invoiceAccountFullName,
            String feeRuleId,
            String feeRuleDescription,
            String fromDate,
            String toDate,
            String bonusPaidTo,
            Integer feeItemId,
            String feeRuleBasis,
            String feeItemCurrencyCode,
            String feeItemCurrencySymbol,
            Double proratedVolume,
            Double totalVolume,
            String feeProduct,
            Double invoiceGrossAmount,
            Double invoiceNetAmount,
            Double invoiceVATAmount,
            Boolean isFeeCancelled,
            Double feeItemTierProratedVolume,
            Double feeItemTierTotalVolume,
            Integer tierMinimum,
            Double tierRate) {
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerShortName = OptionalNullable.of(payerShortName);
        this.payerFullName = OptionalNullable.of(payerFullName);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.accountFullName = OptionalNullable.of(accountFullName);
        this.invoiceAccountId = OptionalNullable.of(invoiceAccountId);
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
        this.invoiceAccountFullName = OptionalNullable.of(invoiceAccountFullName);
        this.feeRuleId = OptionalNullable.of(feeRuleId);
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
        this.feeItemId = OptionalNullable.of(feeItemId);
        this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
        this.feeItemCurrencyCode = OptionalNullable.of(feeItemCurrencyCode);
        this.feeItemCurrencySymbol = OptionalNullable.of(feeItemCurrencySymbol);
        this.proratedVolume = OptionalNullable.of(proratedVolume);
        this.totalVolume = OptionalNullable.of(totalVolume);
        this.feeProduct = OptionalNullable.of(feeProduct);
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
        this.invoiceVATAmount = OptionalNullable.of(invoiceVATAmount);
        this.isFeeCancelled = OptionalNullable.of(isFeeCancelled);
        this.feeItemTierProratedVolume = OptionalNullable.of(feeItemTierProratedVolume);
        this.feeItemTierTotalVolume = OptionalNullable.of(feeItemTierTotalVolume);
        this.tierMinimum = OptionalNullable.of(tierMinimum);
        this.tierRate = OptionalNullable.of(tierRate);
    }

    /**
     * Initialization constructor.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerShortName  String value for payerShortName.
     * @param  payerFullName  String value for payerFullName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountShortName  String value for accountShortName.
     * @param  accountFullName  String value for accountFullName.
     * @param  invoiceAccountId  Integer value for invoiceAccountId.
     * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
     * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
     * @param  invoiceAccountFullName  String value for invoiceAccountFullName.
     * @param  feeRuleId  String value for feeRuleId.
     * @param  feeRuleDescription  String value for feeRuleDescription.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  bonusPaidTo  String value for bonusPaidTo.
     * @param  feeItemId  Integer value for feeItemId.
     * @param  feeRuleBasis  String value for feeRuleBasis.
     * @param  feeItemCurrencyCode  String value for feeItemCurrencyCode.
     * @param  feeItemCurrencySymbol  String value for feeItemCurrencySymbol.
     * @param  proratedVolume  Double value for proratedVolume.
     * @param  totalVolume  Double value for totalVolume.
     * @param  feeProduct  String value for feeProduct.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  invoiceVATAmount  Double value for invoiceVATAmount.
     * @param  isFeeCancelled  Boolean value for isFeeCancelled.
     * @param  feeItemTierProratedVolume  Double value for feeItemTierProratedVolume.
     * @param  feeItemTierTotalVolume  Double value for feeItemTierTotalVolume.
     * @param  tierMinimum  Integer value for tierMinimum.
     * @param  tierRate  Double value for tierRate.
     */

    protected BonusHistory(OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<String> payerShortName, OptionalNullable<String> payerFullName,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<String> accountShortName, OptionalNullable<String> accountFullName,
            OptionalNullable<Integer> invoiceAccountId,
            OptionalNullable<String> invoiceAccountNumber,
            OptionalNullable<String> invoiceAccountShortName,
            OptionalNullable<String> invoiceAccountFullName, OptionalNullable<String> feeRuleId,
            OptionalNullable<String> feeRuleDescription, OptionalNullable<String> fromDate,
            OptionalNullable<String> toDate, OptionalNullable<String> bonusPaidTo,
            OptionalNullable<Integer> feeItemId, OptionalNullable<String> feeRuleBasis,
            OptionalNullable<String> feeItemCurrencyCode,
            OptionalNullable<String> feeItemCurrencySymbol, OptionalNullable<Double> proratedVolume,
            OptionalNullable<Double> totalVolume, OptionalNullable<String> feeProduct,
            OptionalNullable<Double> invoiceGrossAmount, OptionalNullable<Double> invoiceNetAmount,
            OptionalNullable<Double> invoiceVATAmount, OptionalNullable<Boolean> isFeeCancelled,
            OptionalNullable<Double> feeItemTierProratedVolume,
            OptionalNullable<Double> feeItemTierTotalVolume, OptionalNullable<Integer> tierMinimum,
            OptionalNullable<Double> tierRate) {
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.payerShortName = payerShortName;
        this.payerFullName = payerFullName;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountShortName = accountShortName;
        this.accountFullName = accountFullName;
        this.invoiceAccountId = invoiceAccountId;
        this.invoiceAccountNumber = invoiceAccountNumber;
        this.invoiceAccountShortName = invoiceAccountShortName;
        this.invoiceAccountFullName = invoiceAccountFullName;
        this.feeRuleId = feeRuleId;
        this.feeRuleDescription = feeRuleDescription;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.bonusPaidTo = bonusPaidTo;
        this.feeItemId = feeItemId;
        this.feeRuleBasis = feeRuleBasis;
        this.feeItemCurrencyCode = feeItemCurrencyCode;
        this.feeItemCurrencySymbol = feeItemCurrencySymbol;
        this.proratedVolume = proratedVolume;
        this.totalVolume = totalVolume;
        this.feeProduct = feeProduct;
        this.invoiceGrossAmount = invoiceGrossAmount;
        this.invoiceNetAmount = invoiceNetAmount;
        this.invoiceVATAmount = invoiceVATAmount;
        this.isFeeCancelled = isFeeCancelled;
        this.feeItemTierProratedVolume = feeItemTierProratedVolume;
        this.feeItemTierTotalVolume = feeItemTierTotalVolume;
        this.tierMinimum = tierMinimum;
        this.tierRate = tierRate;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerShortName.
     * Payer short name.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerShortName() {
        return this.payerShortName;
    }

    /**
     * Getter for PayerShortName.
     * Payer short name.
     * @return Returns the String
     */
    public String getPayerShortName() {
        return OptionalNullable.getFrom(payerShortName);
    }

    /**
     * Setter for PayerShortName.
     * Payer short name.
     * @param payerShortName Value for String
     */
    @JsonSetter("PayerShortName")
    public void setPayerShortName(String payerShortName) {
        this.payerShortName = OptionalNullable.of(payerShortName);
    }

    /**
     * UnSetter for PayerShortName.
     * Payer short name.
     */
    public void unsetPayerShortName() {
        payerShortName = null;
    }

    /**
     * Internal Getter for PayerFullName.
     * Payer full name.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerFullName() {
        return this.payerFullName;
    }

    /**
     * Getter for PayerFullName.
     * Payer full name.
     * @return Returns the String
     */
    public String getPayerFullName() {
        return OptionalNullable.getFrom(payerFullName);
    }

    /**
     * Setter for PayerFullName.
     * Payer full name.
     * @param payerFullName Value for String
     */
    @JsonSetter("PayerFullName")
    public void setPayerFullName(String payerFullName) {
        this.payerFullName = OptionalNullable.of(payerFullName);
    }

    /**
     * UnSetter for PayerFullName.
     * Payer full name.
     */
    public void unsetPayerFullName() {
        payerFullName = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the selected payer.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the selected payer.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the selected payer.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the selected payer.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account short name.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account short name.
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account short name.
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account short name.
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for AccountFullName.
     * Account full name.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountFullName() {
        return this.accountFullName;
    }

    /**
     * Getter for AccountFullName.
     * Account full name.
     * @return Returns the String
     */
    public String getAccountFullName() {
        return OptionalNullable.getFrom(accountFullName);
    }

    /**
     * Setter for AccountFullName.
     * Account full name.
     * @param accountFullName Value for String
     */
    @JsonSetter("AccountFullName")
    public void setAccountFullName(String accountFullName) {
        this.accountFullName = OptionalNullable.of(accountFullName);
    }

    /**
     * UnSetter for AccountFullName.
     * Account full name.
     */
    public void unsetAccountFullName() {
        accountFullName = null;
    }

    /**
     * Internal Getter for InvoiceAccountId.
     * Invoice Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("InvoiceAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetInvoiceAccountId() {
        return this.invoiceAccountId;
    }

    /**
     * Getter for InvoiceAccountId.
     * Invoice Account Id
     * @return Returns the Integer
     */
    public Integer getInvoiceAccountId() {
        return OptionalNullable.getFrom(invoiceAccountId);
    }

    /**
     * Setter for InvoiceAccountId.
     * Invoice Account Id
     * @param invoiceAccountId Value for Integer
     */
    @JsonSetter("InvoiceAccountId")
    public void setInvoiceAccountId(Integer invoiceAccountId) {
        this.invoiceAccountId = OptionalNullable.of(invoiceAccountId);
    }

    /**
     * UnSetter for InvoiceAccountId.
     * Invoice Account Id
     */
    public void unsetInvoiceAccountId() {
        invoiceAccountId = null;
    }

    /**
     * Internal Getter for InvoiceAccountNumber.
     * Invoice Account Number of the selected payer.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountNumber() {
        return this.invoiceAccountNumber;
    }

    /**
     * Getter for InvoiceAccountNumber.
     * Invoice Account Number of the selected payer.
     * @return Returns the String
     */
    public String getInvoiceAccountNumber() {
        return OptionalNullable.getFrom(invoiceAccountNumber);
    }

    /**
     * Setter for InvoiceAccountNumber.
     * Invoice Account Number of the selected payer.
     * @param invoiceAccountNumber Value for String
     */
    @JsonSetter("InvoiceAccountNumber")
    public void setInvoiceAccountNumber(String invoiceAccountNumber) {
        this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
    }

    /**
     * UnSetter for InvoiceAccountNumber.
     * Invoice Account Number of the selected payer.
     */
    public void unsetInvoiceAccountNumber() {
        invoiceAccountNumber = null;
    }

    /**
     * Internal Getter for InvoiceAccountShortName.
     * Invoice Account short name.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountShortName() {
        return this.invoiceAccountShortName;
    }

    /**
     * Getter for InvoiceAccountShortName.
     * Invoice Account short name.
     * @return Returns the String
     */
    public String getInvoiceAccountShortName() {
        return OptionalNullable.getFrom(invoiceAccountShortName);
    }

    /**
     * Setter for InvoiceAccountShortName.
     * Invoice Account short name.
     * @param invoiceAccountShortName Value for String
     */
    @JsonSetter("InvoiceAccountShortName")
    public void setInvoiceAccountShortName(String invoiceAccountShortName) {
        this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
    }

    /**
     * UnSetter for InvoiceAccountShortName.
     * Invoice Account short name.
     */
    public void unsetInvoiceAccountShortName() {
        invoiceAccountShortName = null;
    }

    /**
     * Internal Getter for InvoiceAccountFullName.
     * Invoice Account full name.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceAccountFullName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceAccountFullName() {
        return this.invoiceAccountFullName;
    }

    /**
     * Getter for InvoiceAccountFullName.
     * Invoice Account full name.
     * @return Returns the String
     */
    public String getInvoiceAccountFullName() {
        return OptionalNullable.getFrom(invoiceAccountFullName);
    }

    /**
     * Setter for InvoiceAccountFullName.
     * Invoice Account full name.
     * @param invoiceAccountFullName Value for String
     */
    @JsonSetter("InvoiceAccountFullName")
    public void setInvoiceAccountFullName(String invoiceAccountFullName) {
        this.invoiceAccountFullName = OptionalNullable.of(invoiceAccountFullName);
    }

    /**
     * UnSetter for InvoiceAccountFullName.
     * Invoice Account full name.
     */
    public void unsetInvoiceAccountFullName() {
        invoiceAccountFullName = null;
    }

    /**
     * Internal Getter for FeeRuleId.
     * Bonus or association bonus configuration identifier
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleId() {
        return this.feeRuleId;
    }

    /**
     * Getter for FeeRuleId.
     * Bonus or association bonus configuration identifier
     * @return Returns the String
     */
    public String getFeeRuleId() {
        return OptionalNullable.getFrom(feeRuleId);
    }

    /**
     * Setter for FeeRuleId.
     * Bonus or association bonus configuration identifier
     * @param feeRuleId Value for String
     */
    @JsonSetter("FeeRuleId")
    public void setFeeRuleId(String feeRuleId) {
        this.feeRuleId = OptionalNullable.of(feeRuleId);
    }

    /**
     * UnSetter for FeeRuleId.
     * Bonus or association bonus configuration identifier
     */
    public void unsetFeeRuleId() {
        feeRuleId = null;
    }

    /**
     * Internal Getter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleDescription() {
        return this.feeRuleDescription;
    }

    /**
     * Getter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     * @return Returns the String
     */
    public String getFeeRuleDescription() {
        return OptionalNullable.getFrom(feeRuleDescription);
    }

    /**
     * Setter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     * @param feeRuleDescription Value for String
     */
    @JsonSetter("FeeRuleDescription")
    public void setFeeRuleDescription(String feeRuleDescription) {
        this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
    }

    /**
     * UnSetter for FeeRuleDescription.
     * Bonus or association bonus configuration description that is associated to the bonus fee item
     */
    public void unsetFeeRuleDescription() {
        feeRuleDescription = null;
    }

    /**
     * Internal Getter for FromDate.
     * Bonus was calculated from this date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * Bonus was calculated from this date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * Bonus was calculated from this date. Format: YYYYMMDD
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * Bonus was calculated from this date. Format: YYYYMMDD
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Bonus was calculated till this date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Bonus was calculated till this date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Bonus was calculated till this date. Format: YYYYMMDD
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Bonus was calculated till this date. Format: YYYYMMDD
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for BonusPaidTo.
     * Specifies how the bonus was paid back. Format: ID-Description Example: 1-Pay to Payer 2-Pay
     * to invoice levels before the payer 3-Pay to specific customer 4-Pay to Association Customer
     * 5-Pay to Associated Customers
     * @return Returns the Internal String
     */
    @JsonGetter("BonusPaidTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBonusPaidTo() {
        return this.bonusPaidTo;
    }

    /**
     * Getter for BonusPaidTo.
     * Specifies how the bonus was paid back. Format: ID-Description Example: 1-Pay to Payer 2-Pay
     * to invoice levels before the payer 3-Pay to specific customer 4-Pay to Association Customer
     * 5-Pay to Associated Customers
     * @return Returns the String
     */
    public String getBonusPaidTo() {
        return OptionalNullable.getFrom(bonusPaidTo);
    }

    /**
     * Setter for BonusPaidTo.
     * Specifies how the bonus was paid back. Format: ID-Description Example: 1-Pay to Payer 2-Pay
     * to invoice levels before the payer 3-Pay to specific customer 4-Pay to Association Customer
     * 5-Pay to Associated Customers
     * @param bonusPaidTo Value for String
     */
    @JsonSetter("BonusPaidTo")
    public void setBonusPaidTo(String bonusPaidTo) {
        this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
    }

    /**
     * UnSetter for BonusPaidTo.
     * Specifies how the bonus was paid back. Format: ID-Description Example: 1-Pay to Payer 2-Pay
     * to invoice levels before the payer 3-Pay to specific customer 4-Pay to Association Customer
     * 5-Pay to Associated Customers
     */
    public void unsetBonusPaidTo() {
        bonusPaidTo = null;
    }

    /**
     * Internal Getter for FeeItemId.
     * Bonus fee item identifier.
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeeItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeeItemId() {
        return this.feeItemId;
    }

    /**
     * Getter for FeeItemId.
     * Bonus fee item identifier.
     * @return Returns the Integer
     */
    public Integer getFeeItemId() {
        return OptionalNullable.getFrom(feeItemId);
    }

    /**
     * Setter for FeeItemId.
     * Bonus fee item identifier.
     * @param feeItemId Value for Integer
     */
    @JsonSetter("FeeItemId")
    public void setFeeItemId(Integer feeItemId) {
        this.feeItemId = OptionalNullable.of(feeItemId);
    }

    /**
     * UnSetter for FeeItemId.
     * Bonus fee item identifier.
     */
    public void unsetFeeItemId() {
        feeItemId = null;
    }

    /**
     * Internal Getter for FeeRuleBasis.
     * Fee Rule Basis of the bonus fee item. Format: ID-Description Example: 1-Currency Per Unit
     * 2-Percentage of Uplift 3-Lump Sum
     * @return Returns the Internal String
     */
    @JsonGetter("FeeRuleBasis")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeRuleBasis() {
        return this.feeRuleBasis;
    }

    /**
     * Getter for FeeRuleBasis.
     * Fee Rule Basis of the bonus fee item. Format: ID-Description Example: 1-Currency Per Unit
     * 2-Percentage of Uplift 3-Lump Sum
     * @return Returns the String
     */
    public String getFeeRuleBasis() {
        return OptionalNullable.getFrom(feeRuleBasis);
    }

    /**
     * Setter for FeeRuleBasis.
     * Fee Rule Basis of the bonus fee item. Format: ID-Description Example: 1-Currency Per Unit
     * 2-Percentage of Uplift 3-Lump Sum
     * @param feeRuleBasis Value for String
     */
    @JsonSetter("FeeRuleBasis")
    public void setFeeRuleBasis(String feeRuleBasis) {
        this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
    }

    /**
     * UnSetter for FeeRuleBasis.
     * Fee Rule Basis of the bonus fee item. Format: ID-Description Example: 1-Currency Per Unit
     * 2-Percentage of Uplift 3-Lump Sum
     */
    public void unsetFeeRuleBasis() {
        feeRuleBasis = null;
    }

    /**
     * Internal Getter for FeeItemCurrencyCode.
     * ISO currency code of the currency in which Bonus is paid. Example: GBP
     * @return Returns the Internal String
     */
    @JsonGetter("FeeItemCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeItemCurrencyCode() {
        return this.feeItemCurrencyCode;
    }

    /**
     * Getter for FeeItemCurrencyCode.
     * ISO currency code of the currency in which Bonus is paid. Example: GBP
     * @return Returns the String
     */
    public String getFeeItemCurrencyCode() {
        return OptionalNullable.getFrom(feeItemCurrencyCode);
    }

    /**
     * Setter for FeeItemCurrencyCode.
     * ISO currency code of the currency in which Bonus is paid. Example: GBP
     * @param feeItemCurrencyCode Value for String
     */
    @JsonSetter("FeeItemCurrencyCode")
    public void setFeeItemCurrencyCode(String feeItemCurrencyCode) {
        this.feeItemCurrencyCode = OptionalNullable.of(feeItemCurrencyCode);
    }

    /**
     * UnSetter for FeeItemCurrencyCode.
     * ISO currency code of the currency in which Bonus is paid. Example: GBP
     */
    public void unsetFeeItemCurrencyCode() {
        feeItemCurrencyCode = null;
    }

    /**
     * Internal Getter for FeeItemCurrencySymbol.
     * Currency symbol of the currency in which Bonus is paid.
     * @return Returns the Internal String
     */
    @JsonGetter("FeeItemCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeItemCurrencySymbol() {
        return this.feeItemCurrencySymbol;
    }

    /**
     * Getter for FeeItemCurrencySymbol.
     * Currency symbol of the currency in which Bonus is paid.
     * @return Returns the String
     */
    public String getFeeItemCurrencySymbol() {
        return OptionalNullable.getFrom(feeItemCurrencySymbol);
    }

    /**
     * Setter for FeeItemCurrencySymbol.
     * Currency symbol of the currency in which Bonus is paid.
     * @param feeItemCurrencySymbol Value for String
     */
    @JsonSetter("FeeItemCurrencySymbol")
    public void setFeeItemCurrencySymbol(String feeItemCurrencySymbol) {
        this.feeItemCurrencySymbol = OptionalNullable.of(feeItemCurrencySymbol);
    }

    /**
     * UnSetter for FeeItemCurrencySymbol.
     * Currency symbol of the currency in which Bonus is paid.
     */
    public void unsetFeeItemCurrencySymbol() {
        feeItemCurrencySymbol = null;
    }

    /**
     * Internal Getter for ProratedVolume.
     * Prorated volume considered under the account as configured for the bonus association.
     * @return Returns the Internal Double
     */
    @JsonGetter("ProratedVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetProratedVolume() {
        return this.proratedVolume;
    }

    /**
     * Getter for ProratedVolume.
     * Prorated volume considered under the account as configured for the bonus association.
     * @return Returns the Double
     */
    public Double getProratedVolume() {
        return OptionalNullable.getFrom(proratedVolume);
    }

    /**
     * Setter for ProratedVolume.
     * Prorated volume considered under the account as configured for the bonus association.
     * @param proratedVolume Value for Double
     */
    @JsonSetter("ProratedVolume")
    public void setProratedVolume(Double proratedVolume) {
        this.proratedVolume = OptionalNullable.of(proratedVolume);
    }

    /**
     * UnSetter for ProratedVolume.
     * Prorated volume considered under the account as configured for the bonus association.
     */
    public void unsetProratedVolume() {
        proratedVolume = null;
    }

    /**
     * Internal Getter for TotalVolume.
     * Total volume considered for calculating the bonus.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVolume() {
        return this.totalVolume;
    }

    /**
     * Getter for TotalVolume.
     * Total volume considered for calculating the bonus.
     * @return Returns the Double
     */
    public Double getTotalVolume() {
        return OptionalNullable.getFrom(totalVolume);
    }

    /**
     * Setter for TotalVolume.
     * Total volume considered for calculating the bonus.
     * @param totalVolume Value for Double
     */
    @JsonSetter("TotalVolume")
    public void setTotalVolume(Double totalVolume) {
        this.totalVolume = OptionalNullable.of(totalVolume);
    }

    /**
     * UnSetter for TotalVolume.
     * Total volume considered for calculating the bonus.
     */
    public void unsetTotalVolume() {
        totalVolume = null;
    }

    /**
     * Internal Getter for FeeProduct.
     * Product as shown in the invoice for the bonus paid. Format: ID-Description Example:
     * 1562-Bonus diesel Shell Netherlands on agreed site(s)
     * @return Returns the Internal String
     */
    @JsonGetter("FeeProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeeProduct() {
        return this.feeProduct;
    }

    /**
     * Getter for FeeProduct.
     * Product as shown in the invoice for the bonus paid. Format: ID-Description Example:
     * 1562-Bonus diesel Shell Netherlands on agreed site(s)
     * @return Returns the String
     */
    public String getFeeProduct() {
        return OptionalNullable.getFrom(feeProduct);
    }

    /**
     * Setter for FeeProduct.
     * Product as shown in the invoice for the bonus paid. Format: ID-Description Example:
     * 1562-Bonus diesel Shell Netherlands on agreed site(s)
     * @param feeProduct Value for String
     */
    @JsonSetter("FeeProduct")
    public void setFeeProduct(String feeProduct) {
        this.feeProduct = OptionalNullable.of(feeProduct);
    }

    /**
     * UnSetter for FeeProduct.
     * Product as shown in the invoice for the bonus paid. Format: ID-Description Example:
     * 1562-Bonus diesel Shell Netherlands on agreed site(s)
     */
    public void unsetFeeProduct() {
        feeProduct = null;
    }

    /**
     * Internal Getter for InvoiceGrossAmount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceGrossAmount() {
        return this.invoiceGrossAmount;
    }

    /**
     * Getter for InvoiceGrossAmount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     * @return Returns the Double
     */
    public Double getInvoiceGrossAmount() {
        return OptionalNullable.getFrom(invoiceGrossAmount);
    }

    /**
     * Setter for InvoiceGrossAmount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     * @param invoiceGrossAmount Value for Double
     */
    @JsonSetter("InvoiceGrossAmount")
    public void setInvoiceGrossAmount(Double invoiceGrossAmount) {
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
    }

    /**
     * UnSetter for InvoiceGrossAmount.
     * Gross Amount – Bonus Paid including VAT as shown on the Invoice
     */
    public void unsetInvoiceGrossAmount() {
        invoiceGrossAmount = null;
    }

    /**
     * Internal Getter for InvoiceNetAmount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceNetAmount() {
        return this.invoiceNetAmount;
    }

    /**
     * Getter for InvoiceNetAmount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     * @return Returns the Double
     */
    public Double getInvoiceNetAmount() {
        return OptionalNullable.getFrom(invoiceNetAmount);
    }

    /**
     * Setter for InvoiceNetAmount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     * @param invoiceNetAmount Value for Double
     */
    @JsonSetter("InvoiceNetAmount")
    public void setInvoiceNetAmount(Double invoiceNetAmount) {
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
    }

    /**
     * UnSetter for InvoiceNetAmount.
     * Net Amount – Bonus Paid excluding VAT as shown on the Invoice
     */
    public void unsetInvoiceNetAmount() {
        invoiceNetAmount = null;
    }

    /**
     * Internal Getter for InvoiceVATAmount.
     * VAT calculated for the bonus paid as shown on the Invoice
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceVATAmount() {
        return this.invoiceVATAmount;
    }

    /**
     * Getter for InvoiceVATAmount.
     * VAT calculated for the bonus paid as shown on the Invoice
     * @return Returns the Double
     */
    public Double getInvoiceVATAmount() {
        return OptionalNullable.getFrom(invoiceVATAmount);
    }

    /**
     * Setter for InvoiceVATAmount.
     * VAT calculated for the bonus paid as shown on the Invoice
     * @param invoiceVATAmount Value for Double
     */
    @JsonSetter("InvoiceVATAmount")
    public void setInvoiceVATAmount(Double invoiceVATAmount) {
        this.invoiceVATAmount = OptionalNullable.of(invoiceVATAmount);
    }

    /**
     * UnSetter for InvoiceVATAmount.
     * VAT calculated for the bonus paid as shown on the Invoice
     */
    public void unsetInvoiceVATAmount() {
        invoiceVATAmount = null;
    }

    /**
     * Internal Getter for IsFeeCancelled.
     * True/False True if bonus is generated but cancelled. When true, consider this as not paid.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsFeeCancelled")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsFeeCancelled() {
        return this.isFeeCancelled;
    }

    /**
     * Getter for IsFeeCancelled.
     * True/False True if bonus is generated but cancelled. When true, consider this as not paid.
     * @return Returns the Boolean
     */
    public Boolean getIsFeeCancelled() {
        return OptionalNullable.getFrom(isFeeCancelled);
    }

    /**
     * Setter for IsFeeCancelled.
     * True/False True if bonus is generated but cancelled. When true, consider this as not paid.
     * @param isFeeCancelled Value for Boolean
     */
    @JsonSetter("IsFeeCancelled")
    public void setIsFeeCancelled(Boolean isFeeCancelled) {
        this.isFeeCancelled = OptionalNullable.of(isFeeCancelled);
    }

    /**
     * UnSetter for IsFeeCancelled.
     * True/False True if bonus is generated but cancelled. When true, consider this as not paid.
     */
    public void unsetIsFeeCancelled() {
        isFeeCancelled = null;
    }

    /**
     * Internal Getter for FeeItemTierProratedVolume.
     * Prorated volume in the bonus fee item tier.
     * @return Returns the Internal Double
     */
    @JsonGetter("FeeItemTierProratedVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFeeItemTierProratedVolume() {
        return this.feeItemTierProratedVolume;
    }

    /**
     * Getter for FeeItemTierProratedVolume.
     * Prorated volume in the bonus fee item tier.
     * @return Returns the Double
     */
    public Double getFeeItemTierProratedVolume() {
        return OptionalNullable.getFrom(feeItemTierProratedVolume);
    }

    /**
     * Setter for FeeItemTierProratedVolume.
     * Prorated volume in the bonus fee item tier.
     * @param feeItemTierProratedVolume Value for Double
     */
    @JsonSetter("FeeItemTierProratedVolume")
    public void setFeeItemTierProratedVolume(Double feeItemTierProratedVolume) {
        this.feeItemTierProratedVolume = OptionalNullable.of(feeItemTierProratedVolume);
    }

    /**
     * UnSetter for FeeItemTierProratedVolume.
     * Prorated volume in the bonus fee item tier.
     */
    public void unsetFeeItemTierProratedVolume() {
        feeItemTierProratedVolume = null;
    }

    /**
     * Internal Getter for FeeItemTierTotalVolume.
     * Total volume in the bonus fee item tier.
     * @return Returns the Internal Double
     */
    @JsonGetter("FeeItemTierTotalVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFeeItemTierTotalVolume() {
        return this.feeItemTierTotalVolume;
    }

    /**
     * Getter for FeeItemTierTotalVolume.
     * Total volume in the bonus fee item tier.
     * @return Returns the Double
     */
    public Double getFeeItemTierTotalVolume() {
        return OptionalNullable.getFrom(feeItemTierTotalVolume);
    }

    /**
     * Setter for FeeItemTierTotalVolume.
     * Total volume in the bonus fee item tier.
     * @param feeItemTierTotalVolume Value for Double
     */
    @JsonSetter("FeeItemTierTotalVolume")
    public void setFeeItemTierTotalVolume(Double feeItemTierTotalVolume) {
        this.feeItemTierTotalVolume = OptionalNullable.of(feeItemTierTotalVolume);
    }

    /**
     * UnSetter for FeeItemTierTotalVolume.
     * Total volume in the bonus fee item tier.
     */
    public void unsetFeeItemTierTotalVolume() {
        feeItemTierTotalVolume = null;
    }

    /**
     * Internal Getter for TierMinimum.
     * Tier minimum value considered for calculation
     * @return Returns the Internal Integer
     */
    @JsonGetter("TierMinimum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTierMinimum() {
        return this.tierMinimum;
    }

    /**
     * Getter for TierMinimum.
     * Tier minimum value considered for calculation
     * @return Returns the Integer
     */
    public Integer getTierMinimum() {
        return OptionalNullable.getFrom(tierMinimum);
    }

    /**
     * Setter for TierMinimum.
     * Tier minimum value considered for calculation
     * @param tierMinimum Value for Integer
     */
    @JsonSetter("TierMinimum")
    public void setTierMinimum(Integer tierMinimum) {
        this.tierMinimum = OptionalNullable.of(tierMinimum);
    }

    /**
     * UnSetter for TierMinimum.
     * Tier minimum value considered for calculation
     */
    public void unsetTierMinimum() {
        tierMinimum = null;
    }

    /**
     * Internal Getter for TierRate.
     * Tier rate considered for calculation
     * @return Returns the Internal Double
     */
    @JsonGetter("TierRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTierRate() {
        return this.tierRate;
    }

    /**
     * Getter for TierRate.
     * Tier rate considered for calculation
     * @return Returns the Double
     */
    public Double getTierRate() {
        return OptionalNullable.getFrom(tierRate);
    }

    /**
     * Setter for TierRate.
     * Tier rate considered for calculation
     * @param tierRate Value for Double
     */
    @JsonSetter("TierRate")
    public void setTierRate(Double tierRate) {
        this.tierRate = OptionalNullable.of(tierRate);
    }

    /**
     * UnSetter for TierRate.
     * Tier rate considered for calculation
     */
    public void unsetTierRate() {
        tierRate = null;
    }

    /**
     * Converts this BonusHistory into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BonusHistory [" + "payerId=" + payerId + ", payerNumber=" + payerNumber
                + ", payerShortName=" + payerShortName + ", payerFullName=" + payerFullName
                + ", accountId=" + accountId + ", accountNumber=" + accountNumber
                + ", accountShortName=" + accountShortName + ", accountFullName=" + accountFullName
                + ", invoiceAccountId=" + invoiceAccountId + ", invoiceAccountNumber="
                + invoiceAccountNumber + ", invoiceAccountShortName=" + invoiceAccountShortName
                + ", invoiceAccountFullName=" + invoiceAccountFullName + ", feeRuleId=" + feeRuleId
                + ", feeRuleDescription=" + feeRuleDescription + ", fromDate=" + fromDate
                + ", toDate=" + toDate + ", bonusPaidTo=" + bonusPaidTo + ", feeItemId=" + feeItemId
                + ", feeRuleBasis=" + feeRuleBasis + ", feeItemCurrencyCode=" + feeItemCurrencyCode
                + ", feeItemCurrencySymbol=" + feeItemCurrencySymbol + ", proratedVolume="
                + proratedVolume + ", totalVolume=" + totalVolume + ", feeProduct=" + feeProduct
                + ", invoiceGrossAmount=" + invoiceGrossAmount + ", invoiceNetAmount="
                + invoiceNetAmount + ", invoiceVATAmount=" + invoiceVATAmount + ", isFeeCancelled="
                + isFeeCancelled + ", feeItemTierProratedVolume=" + feeItemTierProratedVolume
                + ", feeItemTierTotalVolume=" + feeItemTierTotalVolume + ", tierMinimum="
                + tierMinimum + ", tierRate=" + tierRate + "]";
    }

    /**
     * Builds a new {@link BonusHistory.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BonusHistory.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerShortName = internalGetPayerShortName();
        builder.payerFullName = internalGetPayerFullName();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountShortName = internalGetAccountShortName();
        builder.accountFullName = internalGetAccountFullName();
        builder.invoiceAccountId = internalGetInvoiceAccountId();
        builder.invoiceAccountNumber = internalGetInvoiceAccountNumber();
        builder.invoiceAccountShortName = internalGetInvoiceAccountShortName();
        builder.invoiceAccountFullName = internalGetInvoiceAccountFullName();
        builder.feeRuleId = internalGetFeeRuleId();
        builder.feeRuleDescription = internalGetFeeRuleDescription();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.bonusPaidTo = internalGetBonusPaidTo();
        builder.feeItemId = internalGetFeeItemId();
        builder.feeRuleBasis = internalGetFeeRuleBasis();
        builder.feeItemCurrencyCode = internalGetFeeItemCurrencyCode();
        builder.feeItemCurrencySymbol = internalGetFeeItemCurrencySymbol();
        builder.proratedVolume = internalGetProratedVolume();
        builder.totalVolume = internalGetTotalVolume();
        builder.feeProduct = internalGetFeeProduct();
        builder.invoiceGrossAmount = internalGetInvoiceGrossAmount();
        builder.invoiceNetAmount = internalGetInvoiceNetAmount();
        builder.invoiceVATAmount = internalGetInvoiceVATAmount();
        builder.isFeeCancelled = internalGetIsFeeCancelled();
        builder.feeItemTierProratedVolume = internalGetFeeItemTierProratedVolume();
        builder.feeItemTierTotalVolume = internalGetFeeItemTierTotalVolume();
        builder.tierMinimum = internalGetTierMinimum();
        builder.tierRate = internalGetTierRate();
        return builder;
    }

    /**
     * Class to build instances of {@link BonusHistory}.
     */
    public static class Builder {
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerShortName;
        private OptionalNullable<String> payerFullName;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<String> accountFullName;
        private OptionalNullable<Integer> invoiceAccountId;
        private OptionalNullable<String> invoiceAccountNumber;
        private OptionalNullable<String> invoiceAccountShortName;
        private OptionalNullable<String> invoiceAccountFullName;
        private OptionalNullable<String> feeRuleId;
        private OptionalNullable<String> feeRuleDescription;
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<String> bonusPaidTo;
        private OptionalNullable<Integer> feeItemId;
        private OptionalNullable<String> feeRuleBasis;
        private OptionalNullable<String> feeItemCurrencyCode;
        private OptionalNullable<String> feeItemCurrencySymbol;
        private OptionalNullable<Double> proratedVolume;
        private OptionalNullable<Double> totalVolume;
        private OptionalNullable<String> feeProduct;
        private OptionalNullable<Double> invoiceGrossAmount;
        private OptionalNullable<Double> invoiceNetAmount;
        private OptionalNullable<Double> invoiceVATAmount;
        private OptionalNullable<Boolean> isFeeCancelled;
        private OptionalNullable<Double> feeItemTierProratedVolume;
        private OptionalNullable<Double> feeItemTierTotalVolume;
        private OptionalNullable<Integer> tierMinimum;
        private OptionalNullable<Double> tierRate;



        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerShortName.
         * @param  payerShortName  String value for payerShortName.
         * @return Builder
         */
        public Builder payerShortName(String payerShortName) {
            this.payerShortName = OptionalNullable.of(payerShortName);
            return this;
        }

        /**
         * UnSetter for payerShortName.
         * @return Builder
         */
        public Builder unsetPayerShortName() {
            payerShortName = null;
            return this;
        }

        /**
         * Setter for payerFullName.
         * @param  payerFullName  String value for payerFullName.
         * @return Builder
         */
        public Builder payerFullName(String payerFullName) {
            this.payerFullName = OptionalNullable.of(payerFullName);
            return this;
        }

        /**
         * UnSetter for payerFullName.
         * @return Builder
         */
        public Builder unsetPayerFullName() {
            payerFullName = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for accountFullName.
         * @param  accountFullName  String value for accountFullName.
         * @return Builder
         */
        public Builder accountFullName(String accountFullName) {
            this.accountFullName = OptionalNullable.of(accountFullName);
            return this;
        }

        /**
         * UnSetter for accountFullName.
         * @return Builder
         */
        public Builder unsetAccountFullName() {
            accountFullName = null;
            return this;
        }

        /**
         * Setter for invoiceAccountId.
         * @param  invoiceAccountId  Integer value for invoiceAccountId.
         * @return Builder
         */
        public Builder invoiceAccountId(Integer invoiceAccountId) {
            this.invoiceAccountId = OptionalNullable.of(invoiceAccountId);
            return this;
        }

        /**
         * UnSetter for invoiceAccountId.
         * @return Builder
         */
        public Builder unsetInvoiceAccountId() {
            invoiceAccountId = null;
            return this;
        }

        /**
         * Setter for invoiceAccountNumber.
         * @param  invoiceAccountNumber  String value for invoiceAccountNumber.
         * @return Builder
         */
        public Builder invoiceAccountNumber(String invoiceAccountNumber) {
            this.invoiceAccountNumber = OptionalNullable.of(invoiceAccountNumber);
            return this;
        }

        /**
         * UnSetter for invoiceAccountNumber.
         * @return Builder
         */
        public Builder unsetInvoiceAccountNumber() {
            invoiceAccountNumber = null;
            return this;
        }

        /**
         * Setter for invoiceAccountShortName.
         * @param  invoiceAccountShortName  String value for invoiceAccountShortName.
         * @return Builder
         */
        public Builder invoiceAccountShortName(String invoiceAccountShortName) {
            this.invoiceAccountShortName = OptionalNullable.of(invoiceAccountShortName);
            return this;
        }

        /**
         * UnSetter for invoiceAccountShortName.
         * @return Builder
         */
        public Builder unsetInvoiceAccountShortName() {
            invoiceAccountShortName = null;
            return this;
        }

        /**
         * Setter for invoiceAccountFullName.
         * @param  invoiceAccountFullName  String value for invoiceAccountFullName.
         * @return Builder
         */
        public Builder invoiceAccountFullName(String invoiceAccountFullName) {
            this.invoiceAccountFullName = OptionalNullable.of(invoiceAccountFullName);
            return this;
        }

        /**
         * UnSetter for invoiceAccountFullName.
         * @return Builder
         */
        public Builder unsetInvoiceAccountFullName() {
            invoiceAccountFullName = null;
            return this;
        }

        /**
         * Setter for feeRuleId.
         * @param  feeRuleId  String value for feeRuleId.
         * @return Builder
         */
        public Builder feeRuleId(String feeRuleId) {
            this.feeRuleId = OptionalNullable.of(feeRuleId);
            return this;
        }

        /**
         * UnSetter for feeRuleId.
         * @return Builder
         */
        public Builder unsetFeeRuleId() {
            feeRuleId = null;
            return this;
        }

        /**
         * Setter for feeRuleDescription.
         * @param  feeRuleDescription  String value for feeRuleDescription.
         * @return Builder
         */
        public Builder feeRuleDescription(String feeRuleDescription) {
            this.feeRuleDescription = OptionalNullable.of(feeRuleDescription);
            return this;
        }

        /**
         * UnSetter for feeRuleDescription.
         * @return Builder
         */
        public Builder unsetFeeRuleDescription() {
            feeRuleDescription = null;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for bonusPaidTo.
         * @param  bonusPaidTo  String value for bonusPaidTo.
         * @return Builder
         */
        public Builder bonusPaidTo(String bonusPaidTo) {
            this.bonusPaidTo = OptionalNullable.of(bonusPaidTo);
            return this;
        }

        /**
         * UnSetter for bonusPaidTo.
         * @return Builder
         */
        public Builder unsetBonusPaidTo() {
            bonusPaidTo = null;
            return this;
        }

        /**
         * Setter for feeItemId.
         * @param  feeItemId  Integer value for feeItemId.
         * @return Builder
         */
        public Builder feeItemId(Integer feeItemId) {
            this.feeItemId = OptionalNullable.of(feeItemId);
            return this;
        }

        /**
         * UnSetter for feeItemId.
         * @return Builder
         */
        public Builder unsetFeeItemId() {
            feeItemId = null;
            return this;
        }

        /**
         * Setter for feeRuleBasis.
         * @param  feeRuleBasis  String value for feeRuleBasis.
         * @return Builder
         */
        public Builder feeRuleBasis(String feeRuleBasis) {
            this.feeRuleBasis = OptionalNullable.of(feeRuleBasis);
            return this;
        }

        /**
         * UnSetter for feeRuleBasis.
         * @return Builder
         */
        public Builder unsetFeeRuleBasis() {
            feeRuleBasis = null;
            return this;
        }

        /**
         * Setter for feeItemCurrencyCode.
         * @param  feeItemCurrencyCode  String value for feeItemCurrencyCode.
         * @return Builder
         */
        public Builder feeItemCurrencyCode(String feeItemCurrencyCode) {
            this.feeItemCurrencyCode = OptionalNullable.of(feeItemCurrencyCode);
            return this;
        }

        /**
         * UnSetter for feeItemCurrencyCode.
         * @return Builder
         */
        public Builder unsetFeeItemCurrencyCode() {
            feeItemCurrencyCode = null;
            return this;
        }

        /**
         * Setter for feeItemCurrencySymbol.
         * @param  feeItemCurrencySymbol  String value for feeItemCurrencySymbol.
         * @return Builder
         */
        public Builder feeItemCurrencySymbol(String feeItemCurrencySymbol) {
            this.feeItemCurrencySymbol = OptionalNullable.of(feeItemCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for feeItemCurrencySymbol.
         * @return Builder
         */
        public Builder unsetFeeItemCurrencySymbol() {
            feeItemCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for proratedVolume.
         * @param  proratedVolume  Double value for proratedVolume.
         * @return Builder
         */
        public Builder proratedVolume(Double proratedVolume) {
            this.proratedVolume = OptionalNullable.of(proratedVolume);
            return this;
        }

        /**
         * UnSetter for proratedVolume.
         * @return Builder
         */
        public Builder unsetProratedVolume() {
            proratedVolume = null;
            return this;
        }

        /**
         * Setter for totalVolume.
         * @param  totalVolume  Double value for totalVolume.
         * @return Builder
         */
        public Builder totalVolume(Double totalVolume) {
            this.totalVolume = OptionalNullable.of(totalVolume);
            return this;
        }

        /**
         * UnSetter for totalVolume.
         * @return Builder
         */
        public Builder unsetTotalVolume() {
            totalVolume = null;
            return this;
        }

        /**
         * Setter for feeProduct.
         * @param  feeProduct  String value for feeProduct.
         * @return Builder
         */
        public Builder feeProduct(String feeProduct) {
            this.feeProduct = OptionalNullable.of(feeProduct);
            return this;
        }

        /**
         * UnSetter for feeProduct.
         * @return Builder
         */
        public Builder unsetFeeProduct() {
            feeProduct = null;
            return this;
        }

        /**
         * Setter for invoiceGrossAmount.
         * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
         * @return Builder
         */
        public Builder invoiceGrossAmount(Double invoiceGrossAmount) {
            this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
            return this;
        }

        /**
         * UnSetter for invoiceGrossAmount.
         * @return Builder
         */
        public Builder unsetInvoiceGrossAmount() {
            invoiceGrossAmount = null;
            return this;
        }

        /**
         * Setter for invoiceNetAmount.
         * @param  invoiceNetAmount  Double value for invoiceNetAmount.
         * @return Builder
         */
        public Builder invoiceNetAmount(Double invoiceNetAmount) {
            this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
            return this;
        }

        /**
         * UnSetter for invoiceNetAmount.
         * @return Builder
         */
        public Builder unsetInvoiceNetAmount() {
            invoiceNetAmount = null;
            return this;
        }

        /**
         * Setter for invoiceVATAmount.
         * @param  invoiceVATAmount  Double value for invoiceVATAmount.
         * @return Builder
         */
        public Builder invoiceVATAmount(Double invoiceVATAmount) {
            this.invoiceVATAmount = OptionalNullable.of(invoiceVATAmount);
            return this;
        }

        /**
         * UnSetter for invoiceVATAmount.
         * @return Builder
         */
        public Builder unsetInvoiceVATAmount() {
            invoiceVATAmount = null;
            return this;
        }

        /**
         * Setter for isFeeCancelled.
         * @param  isFeeCancelled  Boolean value for isFeeCancelled.
         * @return Builder
         */
        public Builder isFeeCancelled(Boolean isFeeCancelled) {
            this.isFeeCancelled = OptionalNullable.of(isFeeCancelled);
            return this;
        }

        /**
         * UnSetter for isFeeCancelled.
         * @return Builder
         */
        public Builder unsetIsFeeCancelled() {
            isFeeCancelled = null;
            return this;
        }

        /**
         * Setter for feeItemTierProratedVolume.
         * @param  feeItemTierProratedVolume  Double value for feeItemTierProratedVolume.
         * @return Builder
         */
        public Builder feeItemTierProratedVolume(Double feeItemTierProratedVolume) {
            this.feeItemTierProratedVolume = OptionalNullable.of(feeItemTierProratedVolume);
            return this;
        }

        /**
         * UnSetter for feeItemTierProratedVolume.
         * @return Builder
         */
        public Builder unsetFeeItemTierProratedVolume() {
            feeItemTierProratedVolume = null;
            return this;
        }

        /**
         * Setter for feeItemTierTotalVolume.
         * @param  feeItemTierTotalVolume  Double value for feeItemTierTotalVolume.
         * @return Builder
         */
        public Builder feeItemTierTotalVolume(Double feeItemTierTotalVolume) {
            this.feeItemTierTotalVolume = OptionalNullable.of(feeItemTierTotalVolume);
            return this;
        }

        /**
         * UnSetter for feeItemTierTotalVolume.
         * @return Builder
         */
        public Builder unsetFeeItemTierTotalVolume() {
            feeItemTierTotalVolume = null;
            return this;
        }

        /**
         * Setter for tierMinimum.
         * @param  tierMinimum  Integer value for tierMinimum.
         * @return Builder
         */
        public Builder tierMinimum(Integer tierMinimum) {
            this.tierMinimum = OptionalNullable.of(tierMinimum);
            return this;
        }

        /**
         * UnSetter for tierMinimum.
         * @return Builder
         */
        public Builder unsetTierMinimum() {
            tierMinimum = null;
            return this;
        }

        /**
         * Setter for tierRate.
         * @param  tierRate  Double value for tierRate.
         * @return Builder
         */
        public Builder tierRate(Double tierRate) {
            this.tierRate = OptionalNullable.of(tierRate);
            return this;
        }

        /**
         * UnSetter for tierRate.
         * @return Builder
         */
        public Builder unsetTierRate() {
            tierRate = null;
            return this;
        }

        /**
         * Builds a new {@link BonusHistory} object using the set fields.
         * @return {@link BonusHistory}
         */
        public BonusHistory build() {
            return new BonusHistory(payerId, payerNumber, payerShortName, payerFullName, accountId,
                    accountNumber, accountShortName, accountFullName, invoiceAccountId,
                    invoiceAccountNumber, invoiceAccountShortName, invoiceAccountFullName,
                    feeRuleId, feeRuleDescription, fromDate, toDate, bonusPaidTo, feeItemId,
                    feeRuleBasis, feeItemCurrencyCode, feeItemCurrencySymbol, proratedVolume,
                    totalVolume, feeProduct, invoiceGrossAmount, invoiceNetAmount, invoiceVATAmount,
                    isFeeCancelled, feeItemTierProratedVolume, feeItemTierTotalVolume, tierMinimum,
                    tierRate);
        }
    }
}
