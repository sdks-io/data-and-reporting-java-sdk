/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for Address type.
 */
public class Address {
    private OptionalNullable<Integer> addressId;
    private OptionalNullable<String> addressLine1;
    private OptionalNullable<String> addressLine2;
    private OptionalNullable<String> addressLine3;
    private OptionalNullable<String> zipCode;
    private OptionalNullable<String> city;
    private OptionalNullable<Integer> regionId;
    private OptionalNullable<String> countryISOCode;
    private OptionalNullable<String> country;
    private OptionalNullable<String> telephone;
    private OptionalNullable<String> emailAddress;
    private OptionalNullable<String> fax;

    /**
     * Default constructor.
     */
    public Address() {
    }

    /**
     * Initialization constructor.
     * @param  addressId  Integer value for addressId.
     * @param  addressLine1  String value for addressLine1.
     * @param  addressLine2  String value for addressLine2.
     * @param  addressLine3  String value for addressLine3.
     * @param  zipCode  String value for zipCode.
     * @param  city  String value for city.
     * @param  regionId  Integer value for regionId.
     * @param  countryISOCode  String value for countryISOCode.
     * @param  country  String value for country.
     * @param  telephone  String value for telephone.
     * @param  emailAddress  String value for emailAddress.
     * @param  fax  String value for fax.
     */
    public Address(
            Integer addressId,
            String addressLine1,
            String addressLine2,
            String addressLine3,
            String zipCode,
            String city,
            Integer regionId,
            String countryISOCode,
            String country,
            String telephone,
            String emailAddress,
            String fax) {
        this.addressId = OptionalNullable.of(addressId);
        this.addressLine1 = OptionalNullable.of(addressLine1);
        this.addressLine2 = OptionalNullable.of(addressLine2);
        this.addressLine3 = OptionalNullable.of(addressLine3);
        this.zipCode = OptionalNullable.of(zipCode);
        this.city = OptionalNullable.of(city);
        this.regionId = OptionalNullable.of(regionId);
        this.countryISOCode = OptionalNullable.of(countryISOCode);
        this.country = OptionalNullable.of(country);
        this.telephone = OptionalNullable.of(telephone);
        this.emailAddress = OptionalNullable.of(emailAddress);
        this.fax = OptionalNullable.of(fax);
    }

    /**
     * Initialization constructor.
     * @param  addressId  Integer value for addressId.
     * @param  addressLine1  String value for addressLine1.
     * @param  addressLine2  String value for addressLine2.
     * @param  addressLine3  String value for addressLine3.
     * @param  zipCode  String value for zipCode.
     * @param  city  String value for city.
     * @param  regionId  Integer value for regionId.
     * @param  countryISOCode  String value for countryISOCode.
     * @param  country  String value for country.
     * @param  telephone  String value for telephone.
     * @param  emailAddress  String value for emailAddress.
     * @param  fax  String value for fax.
     */

    protected Address(OptionalNullable<Integer> addressId, OptionalNullable<String> addressLine1,
            OptionalNullable<String> addressLine2, OptionalNullable<String> addressLine3,
            OptionalNullable<String> zipCode, OptionalNullable<String> city,
            OptionalNullable<Integer> regionId, OptionalNullable<String> countryISOCode,
            OptionalNullable<String> country, OptionalNullable<String> telephone,
            OptionalNullable<String> emailAddress, OptionalNullable<String> fax) {
        this.addressId = addressId;
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.addressLine3 = addressLine3;
        this.zipCode = zipCode;
        this.city = city;
        this.regionId = regionId;
        this.countryISOCode = countryISOCode;
        this.country = country;
        this.telephone = telephone;
        this.emailAddress = emailAddress;
        this.fax = fax;
    }

    /**
     * Internal Getter for AddressId.
     * Address Id in cards platform.
     * @return Returns the Internal Integer
     */
    @JsonGetter("AddressId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAddressId() {
        return this.addressId;
    }

    /**
     * Getter for AddressId.
     * Address Id in cards platform.
     * @return Returns the Integer
     */
    public Integer getAddressId() {
        return OptionalNullable.getFrom(addressId);
    }

    /**
     * Setter for AddressId.
     * Address Id in cards platform.
     * @param addressId Value for Integer
     */
    @JsonSetter("AddressId")
    public void setAddressId(Integer addressId) {
        this.addressId = OptionalNullable.of(addressId);
    }

    /**
     * UnSetter for AddressId.
     * Address Id in cards platform.
     */
    public void unsetAddressId() {
        addressId = null;
    }

    /**
     * Internal Getter for AddressLine1.
     * Address line1
     * @return Returns the Internal String
     */
    @JsonGetter("AddressLine1")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressLine1() {
        return this.addressLine1;
    }

    /**
     * Getter for AddressLine1.
     * Address line1
     * @return Returns the String
     */
    public String getAddressLine1() {
        return OptionalNullable.getFrom(addressLine1);
    }

    /**
     * Setter for AddressLine1.
     * Address line1
     * @param addressLine1 Value for String
     */
    @JsonSetter("AddressLine1")
    public void setAddressLine1(String addressLine1) {
        this.addressLine1 = OptionalNullable.of(addressLine1);
    }

    /**
     * UnSetter for AddressLine1.
     * Address line1
     */
    public void unsetAddressLine1() {
        addressLine1 = null;
    }

    /**
     * Internal Getter for AddressLine2.
     * Address line2
     * @return Returns the Internal String
     */
    @JsonGetter("AddressLine2")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressLine2() {
        return this.addressLine2;
    }

    /**
     * Getter for AddressLine2.
     * Address line2
     * @return Returns the String
     */
    public String getAddressLine2() {
        return OptionalNullable.getFrom(addressLine2);
    }

    /**
     * Setter for AddressLine2.
     * Address line2
     * @param addressLine2 Value for String
     */
    @JsonSetter("AddressLine2")
    public void setAddressLine2(String addressLine2) {
        this.addressLine2 = OptionalNullable.of(addressLine2);
    }

    /**
     * UnSetter for AddressLine2.
     * Address line2
     */
    public void unsetAddressLine2() {
        addressLine2 = null;
    }

    /**
     * Internal Getter for AddressLine3.
     * AddressLine3
     * @return Returns the Internal String
     */
    @JsonGetter("AddressLine3")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAddressLine3() {
        return this.addressLine3;
    }

    /**
     * Getter for AddressLine3.
     * AddressLine3
     * @return Returns the String
     */
    public String getAddressLine3() {
        return OptionalNullable.getFrom(addressLine3);
    }

    /**
     * Setter for AddressLine3.
     * AddressLine3
     * @param addressLine3 Value for String
     */
    @JsonSetter("AddressLine3")
    public void setAddressLine3(String addressLine3) {
        this.addressLine3 = OptionalNullable.of(addressLine3);
    }

    /**
     * UnSetter for AddressLine3.
     * AddressLine3
     */
    public void unsetAddressLine3() {
        addressLine3 = null;
    }

    /**
     * Internal Getter for ZipCode.
     * ZipCode
     * @return Returns the Internal String
     */
    @JsonGetter("ZipCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetZipCode() {
        return this.zipCode;
    }

    /**
     * Getter for ZipCode.
     * ZipCode
     * @return Returns the String
     */
    public String getZipCode() {
        return OptionalNullable.getFrom(zipCode);
    }

    /**
     * Setter for ZipCode.
     * ZipCode
     * @param zipCode Value for String
     */
    @JsonSetter("ZipCode")
    public void setZipCode(String zipCode) {
        this.zipCode = OptionalNullable.of(zipCode);
    }

    /**
     * UnSetter for ZipCode.
     * ZipCode
     */
    public void unsetZipCode() {
        zipCode = null;
    }

    /**
     * Internal Getter for City.
     * City
     * @return Returns the Internal String
     */
    @JsonGetter("City")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCity() {
        return this.city;
    }

    /**
     * Getter for City.
     * City
     * @return Returns the String
     */
    public String getCity() {
        return OptionalNullable.getFrom(city);
    }

    /**
     * Setter for City.
     * City
     * @param city Value for String
     */
    @JsonSetter("City")
    public void setCity(String city) {
        this.city = OptionalNullable.of(city);
    }

    /**
     * UnSetter for City.
     * City
     */
    public void unsetCity() {
        city = null;
    }

    /**
     * Internal Getter for RegionId.
     * Region Id of the address.
     * @return Returns the Internal Integer
     */
    @JsonGetter("RegionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetRegionId() {
        return this.regionId;
    }

    /**
     * Getter for RegionId.
     * Region Id of the address.
     * @return Returns the Integer
     */
    public Integer getRegionId() {
        return OptionalNullable.getFrom(regionId);
    }

    /**
     * Setter for RegionId.
     * Region Id of the address.
     * @param regionId Value for Integer
     */
    @JsonSetter("RegionId")
    public void setRegionId(Integer regionId) {
        this.regionId = OptionalNullable.of(regionId);
    }

    /**
     * UnSetter for RegionId.
     * Region Id of the address.
     */
    public void unsetRegionId() {
        regionId = null;
    }

    /**
     * Internal Getter for CountryISOCode.
     * Country ISO code of the address
     * @return Returns the Internal String
     */
    @JsonGetter("CountryISOCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCountryISOCode() {
        return this.countryISOCode;
    }

    /**
     * Getter for CountryISOCode.
     * Country ISO code of the address
     * @return Returns the String
     */
    public String getCountryISOCode() {
        return OptionalNullable.getFrom(countryISOCode);
    }

    /**
     * Setter for CountryISOCode.
     * Country ISO code of the address
     * @param countryISOCode Value for String
     */
    @JsonSetter("CountryISOCode")
    public void setCountryISOCode(String countryISOCode) {
        this.countryISOCode = OptionalNullable.of(countryISOCode);
    }

    /**
     * UnSetter for CountryISOCode.
     * Country ISO code of the address
     */
    public void unsetCountryISOCode() {
        countryISOCode = null;
    }

    /**
     * Internal Getter for Country.
     * Country for the address
     * @return Returns the Internal String
     */
    @JsonGetter("Country")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCountry() {
        return this.country;
    }

    /**
     * Getter for Country.
     * Country for the address
     * @return Returns the String
     */
    public String getCountry() {
        return OptionalNullable.getFrom(country);
    }

    /**
     * Setter for Country.
     * Country for the address
     * @param country Value for String
     */
    @JsonSetter("Country")
    public void setCountry(String country) {
        this.country = OptionalNullable.of(country);
    }

    /**
     * UnSetter for Country.
     * Country for the address
     */
    public void unsetCountry() {
        country = null;
    }

    /**
     * Internal Getter for Telephone.
     * Telephone number of the address contact
     * @return Returns the Internal String
     */
    @JsonGetter("Telephone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTelephone() {
        return this.telephone;
    }

    /**
     * Getter for Telephone.
     * Telephone number of the address contact
     * @return Returns the String
     */
    public String getTelephone() {
        return OptionalNullable.getFrom(telephone);
    }

    /**
     * Setter for Telephone.
     * Telephone number of the address contact
     * @param telephone Value for String
     */
    @JsonSetter("Telephone")
    public void setTelephone(String telephone) {
        this.telephone = OptionalNullable.of(telephone);
    }

    /**
     * UnSetter for Telephone.
     * Telephone number of the address contact
     */
    public void unsetTelephone() {
        telephone = null;
    }

    /**
     * Internal Getter for EmailAddress.
     * Email address of the address contact
     * @return Returns the Internal String
     */
    @JsonGetter("EmailAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEmailAddress() {
        return this.emailAddress;
    }

    /**
     * Getter for EmailAddress.
     * Email address of the address contact
     * @return Returns the String
     */
    public String getEmailAddress() {
        return OptionalNullable.getFrom(emailAddress);
    }

    /**
     * Setter for EmailAddress.
     * Email address of the address contact
     * @param emailAddress Value for String
     */
    @JsonSetter("EmailAddress")
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = OptionalNullable.of(emailAddress);
    }

    /**
     * UnSetter for EmailAddress.
     * Email address of the address contact
     */
    public void unsetEmailAddress() {
        emailAddress = null;
    }

    /**
     * Internal Getter for Fax.
     * Fax number of the address contact
     * @return Returns the Internal String
     */
    @JsonGetter("Fax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFax() {
        return this.fax;
    }

    /**
     * Getter for Fax.
     * Fax number of the address contact
     * @return Returns the String
     */
    public String getFax() {
        return OptionalNullable.getFrom(fax);
    }

    /**
     * Setter for Fax.
     * Fax number of the address contact
     * @param fax Value for String
     */
    @JsonSetter("Fax")
    public void setFax(String fax) {
        this.fax = OptionalNullable.of(fax);
    }

    /**
     * UnSetter for Fax.
     * Fax number of the address contact
     */
    public void unsetFax() {
        fax = null;
    }

    /**
     * Converts this Address into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Address [" + "addressId=" + addressId + ", addressLine1=" + addressLine1
                + ", addressLine2=" + addressLine2 + ", addressLine3=" + addressLine3 + ", zipCode="
                + zipCode + ", city=" + city + ", regionId=" + regionId + ", countryISOCode="
                + countryISOCode + ", country=" + country + ", telephone=" + telephone
                + ", emailAddress=" + emailAddress + ", fax=" + fax + "]";
    }

    /**
     * Builds a new {@link Address.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Address.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.addressId = internalGetAddressId();
        builder.addressLine1 = internalGetAddressLine1();
        builder.addressLine2 = internalGetAddressLine2();
        builder.addressLine3 = internalGetAddressLine3();
        builder.zipCode = internalGetZipCode();
        builder.city = internalGetCity();
        builder.regionId = internalGetRegionId();
        builder.countryISOCode = internalGetCountryISOCode();
        builder.country = internalGetCountry();
        builder.telephone = internalGetTelephone();
        builder.emailAddress = internalGetEmailAddress();
        builder.fax = internalGetFax();
        return builder;
    }

    /**
     * Class to build instances of {@link Address}.
     */
    public static class Builder {
        private OptionalNullable<Integer> addressId;
        private OptionalNullable<String> addressLine1;
        private OptionalNullable<String> addressLine2;
        private OptionalNullable<String> addressLine3;
        private OptionalNullable<String> zipCode;
        private OptionalNullable<String> city;
        private OptionalNullable<Integer> regionId;
        private OptionalNullable<String> countryISOCode;
        private OptionalNullable<String> country;
        private OptionalNullable<String> telephone;
        private OptionalNullable<String> emailAddress;
        private OptionalNullable<String> fax;



        /**
         * Setter for addressId.
         * @param  addressId  Integer value for addressId.
         * @return Builder
         */
        public Builder addressId(Integer addressId) {
            this.addressId = OptionalNullable.of(addressId);
            return this;
        }

        /**
         * UnSetter for addressId.
         * @return Builder
         */
        public Builder unsetAddressId() {
            addressId = null;
            return this;
        }

        /**
         * Setter for addressLine1.
         * @param  addressLine1  String value for addressLine1.
         * @return Builder
         */
        public Builder addressLine1(String addressLine1) {
            this.addressLine1 = OptionalNullable.of(addressLine1);
            return this;
        }

        /**
         * UnSetter for addressLine1.
         * @return Builder
         */
        public Builder unsetAddressLine1() {
            addressLine1 = null;
            return this;
        }

        /**
         * Setter for addressLine2.
         * @param  addressLine2  String value for addressLine2.
         * @return Builder
         */
        public Builder addressLine2(String addressLine2) {
            this.addressLine2 = OptionalNullable.of(addressLine2);
            return this;
        }

        /**
         * UnSetter for addressLine2.
         * @return Builder
         */
        public Builder unsetAddressLine2() {
            addressLine2 = null;
            return this;
        }

        /**
         * Setter for addressLine3.
         * @param  addressLine3  String value for addressLine3.
         * @return Builder
         */
        public Builder addressLine3(String addressLine3) {
            this.addressLine3 = OptionalNullable.of(addressLine3);
            return this;
        }

        /**
         * UnSetter for addressLine3.
         * @return Builder
         */
        public Builder unsetAddressLine3() {
            addressLine3 = null;
            return this;
        }

        /**
         * Setter for zipCode.
         * @param  zipCode  String value for zipCode.
         * @return Builder
         */
        public Builder zipCode(String zipCode) {
            this.zipCode = OptionalNullable.of(zipCode);
            return this;
        }

        /**
         * UnSetter for zipCode.
         * @return Builder
         */
        public Builder unsetZipCode() {
            zipCode = null;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = OptionalNullable.of(city);
            return this;
        }

        /**
         * UnSetter for city.
         * @return Builder
         */
        public Builder unsetCity() {
            city = null;
            return this;
        }

        /**
         * Setter for regionId.
         * @param  regionId  Integer value for regionId.
         * @return Builder
         */
        public Builder regionId(Integer regionId) {
            this.regionId = OptionalNullable.of(regionId);
            return this;
        }

        /**
         * UnSetter for regionId.
         * @return Builder
         */
        public Builder unsetRegionId() {
            regionId = null;
            return this;
        }

        /**
         * Setter for countryISOCode.
         * @param  countryISOCode  String value for countryISOCode.
         * @return Builder
         */
        public Builder countryISOCode(String countryISOCode) {
            this.countryISOCode = OptionalNullable.of(countryISOCode);
            return this;
        }

        /**
         * UnSetter for countryISOCode.
         * @return Builder
         */
        public Builder unsetCountryISOCode() {
            countryISOCode = null;
            return this;
        }

        /**
         * Setter for country.
         * @param  country  String value for country.
         * @return Builder
         */
        public Builder country(String country) {
            this.country = OptionalNullable.of(country);
            return this;
        }

        /**
         * UnSetter for country.
         * @return Builder
         */
        public Builder unsetCountry() {
            country = null;
            return this;
        }

        /**
         * Setter for telephone.
         * @param  telephone  String value for telephone.
         * @return Builder
         */
        public Builder telephone(String telephone) {
            this.telephone = OptionalNullable.of(telephone);
            return this;
        }

        /**
         * UnSetter for telephone.
         * @return Builder
         */
        public Builder unsetTelephone() {
            telephone = null;
            return this;
        }

        /**
         * Setter for emailAddress.
         * @param  emailAddress  String value for emailAddress.
         * @return Builder
         */
        public Builder emailAddress(String emailAddress) {
            this.emailAddress = OptionalNullable.of(emailAddress);
            return this;
        }

        /**
         * UnSetter for emailAddress.
         * @return Builder
         */
        public Builder unsetEmailAddress() {
            emailAddress = null;
            return this;
        }

        /**
         * Setter for fax.
         * @param  fax  String value for fax.
         * @return Builder
         */
        public Builder fax(String fax) {
            this.fax = OptionalNullable.of(fax);
            return this;
        }

        /**
         * UnSetter for fax.
         * @return Builder
         */
        public Builder unsetFax() {
            fax = null;
            return this;
        }

        /**
         * Builds a new {@link Address} object using the set fields.
         * @return {@link Address}
         */
        public Address build() {
            return new Address(addressId, addressLine1, addressLine2, addressLine3, zipCode, city,
                    regionId, countryISOCode, country, telephone, emailAddress, fax);
        }
    }
}
