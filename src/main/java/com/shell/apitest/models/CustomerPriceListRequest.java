/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for CustomerPriceListRequest type.
 */
public class CustomerPriceListRequest {
    private OptionalNullable<Integer> colCoId;
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<Integer> customerSpecificList;
    private OptionalNullable<Integer> priceListType;
    private OptionalNullable<Integer> delCoId;
    private String fromDate;
    private String toDate;
    private OptionalNullable<Boolean> includePumpPriceDiscounts;

    /**
     * Default constructor.
     */
    public CustomerPriceListRequest() {
    }

    /**
     * Initialization constructor.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  customerSpecificList  Integer value for customerSpecificList.
     * @param  priceListType  Integer value for priceListType.
     * @param  delCoId  Integer value for delCoId.
     * @param  includePumpPriceDiscounts  Boolean value for includePumpPriceDiscounts.
     */
    public CustomerPriceListRequest(
            String fromDate,
            String toDate,
            Integer colCoId,
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            Integer accountId,
            String accountNumber,
            Integer customerSpecificList,
            Integer priceListType,
            Integer delCoId,
            Boolean includePumpPriceDiscounts) {
        this.colCoId = OptionalNullable.of(colCoId);
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.customerSpecificList = OptionalNullable.of(customerSpecificList);
        this.priceListType = OptionalNullable.of(priceListType);
        this.delCoId = OptionalNullable.of(delCoId);
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.includePumpPriceDiscounts = OptionalNullable.of(includePumpPriceDiscounts);
    }

    /**
     * Initialization constructor.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  colCoId  Integer value for colCoId.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  customerSpecificList  Integer value for customerSpecificList.
     * @param  priceListType  Integer value for priceListType.
     * @param  delCoId  Integer value for delCoId.
     * @param  includePumpPriceDiscounts  Boolean value for includePumpPriceDiscounts.
     */

    protected CustomerPriceListRequest(String fromDate, String toDate,
            OptionalNullable<Integer> colCoId, OptionalNullable<Integer> colCoCode,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<Integer> accountId, OptionalNullable<String> accountNumber,
            OptionalNullable<Integer> customerSpecificList, OptionalNullable<Integer> priceListType,
            OptionalNullable<Integer> delCoId,
            OptionalNullable<Boolean> includePumpPriceDiscounts) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.customerSpecificList = customerSpecificList;
        this.priceListType = priceListType;
        this.delCoId = delCoId;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.includePumpPriceDiscounts = includePumpPriceDiscounts;
    }

    /**
     * Internal Getter for ColCoId.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Internal Getter for ColCoCode.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id of the customer. Optional
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id of the customer. Optional
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id of the customer. Optional
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id of the customer. Optional
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number of the customer. Optional
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number of the customer. Optional
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number of the customer. Optional
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number of the customer. Optional
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for CustomerSpecificList.
     * Whether customer specific price lists and customer specific discount values set on pump
     * prices are to be returned or not.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CustomerSpecificList")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCustomerSpecificList() {
        return this.customerSpecificList;
    }

    /**
     * Getter for CustomerSpecificList.
     * Whether customer specific price lists and customer specific discount values set on pump
     * prices are to be returned or not.
     * @return Returns the Integer
     */
    public Integer getCustomerSpecificList() {
        return OptionalNullable.getFrom(customerSpecificList);
    }

    /**
     * Setter for CustomerSpecificList.
     * Whether customer specific price lists and customer specific discount values set on pump
     * prices are to be returned or not.
     * @param customerSpecificList Value for Integer
     */
    @JsonSetter("CustomerSpecificList")
    public void setCustomerSpecificList(Integer customerSpecificList) {
        this.customerSpecificList = OptionalNullable.of(customerSpecificList);
    }

    /**
     * UnSetter for CustomerSpecificList.
     * Whether customer specific price lists and customer specific discount values set on pump
     * prices are to be returned or not.
     */
    public void unsetCustomerSpecificList() {
        customerSpecificList = null;
    }

    /**
     * Internal Getter for PriceListType.
     * Specifies the type of price lists to be included in the response. Optional – default value is
     * zero. Allowed values: 0 – All 1 – National Only 2 – International Only
     * @return Returns the Internal Integer
     */
    @JsonGetter("PriceListType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPriceListType() {
        return this.priceListType;
    }

    /**
     * Getter for PriceListType.
     * Specifies the type of price lists to be included in the response. Optional – default value is
     * zero. Allowed values: 0 – All 1 – National Only 2 – International Only
     * @return Returns the Integer
     */
    public Integer getPriceListType() {
        return OptionalNullable.getFrom(priceListType);
    }

    /**
     * Setter for PriceListType.
     * Specifies the type of price lists to be included in the response. Optional – default value is
     * zero. Allowed values: 0 – All 1 – National Only 2 – International Only
     * @param priceListType Value for Integer
     */
    @JsonSetter("PriceListType")
    public void setPriceListType(Integer priceListType) {
        this.priceListType = OptionalNullable.of(priceListType);
    }

    /**
     * UnSetter for PriceListType.
     * Specifies the type of price lists to be included in the response. Optional – default value is
     * zero. Allowed values: 0 – All 1 – National Only 2 – International Only
     */
    public void unsetPriceListType() {
        priceListType = null;
    }

    /**
     * Internal Getter for DelCoId.
     * Delivering Company ID Optional.
     * @return Returns the Internal Integer
     */
    @JsonGetter("DelCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetDelCoId() {
        return this.delCoId;
    }

    /**
     * Getter for DelCoId.
     * Delivering Company ID Optional.
     * @return Returns the Integer
     */
    public Integer getDelCoId() {
        return OptionalNullable.getFrom(delCoId);
    }

    /**
     * Setter for DelCoId.
     * Delivering Company ID Optional.
     * @param delCoId Value for Integer
     */
    @JsonSetter("DelCoId")
    public void setDelCoId(Integer delCoId) {
        this.delCoId = OptionalNullable.of(delCoId);
    }

    /**
     * UnSetter for DelCoId.
     * Delivering Company ID Optional.
     */
    public void unsetDelCoId() {
        delCoId = null;
    }

    /**
     * Getter for FromDate.
     * Start date to fetch the price lists, discount values on pump prices and VAT rates. Mandatory
     * Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("FromDate")
    public String getFromDate() {
        return fromDate;
    }

    /**
     * Setter for FromDate.
     * Start date to fetch the price lists, discount values on pump prices and VAT rates. Mandatory
     * Format: yyyyMMdd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = fromDate;
    }

    /**
     * Getter for ToDate.
     * End date to fetch the price lists, discount values on pump prices and VAT rates. Mandatory
     * and greater than or equal to FromDate. Maximum of 30 (configurable) day’s duration is allowed
     * between ‘From’ and ‘To’ dates. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("ToDate")
    public String getToDate() {
        return toDate;
    }

    /**
     * Setter for ToDate.
     * End date to fetch the price lists, discount values on pump prices and VAT rates. Mandatory
     * and greater than or equal to FromDate. Maximum of 30 (configurable) day’s duration is allowed
     * between ‘From’ and ‘To’ dates. Format: yyyyMMdd
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = toDate;
    }

    /**
     * Internal Getter for IncludePumpPriceDiscounts.
     * True / False. A flag to request the discount information set on pump prices for the customer
     * to be included in the response. Optional Default value: False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludePumpPriceDiscounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludePumpPriceDiscounts() {
        return this.includePumpPriceDiscounts;
    }

    /**
     * Getter for IncludePumpPriceDiscounts.
     * True / False. A flag to request the discount information set on pump prices for the customer
     * to be included in the response. Optional Default value: False
     * @return Returns the Boolean
     */
    public Boolean getIncludePumpPriceDiscounts() {
        return OptionalNullable.getFrom(includePumpPriceDiscounts);
    }

    /**
     * Setter for IncludePumpPriceDiscounts.
     * True / False. A flag to request the discount information set on pump prices for the customer
     * to be included in the response. Optional Default value: False
     * @param includePumpPriceDiscounts Value for Boolean
     */
    @JsonSetter("IncludePumpPriceDiscounts")
    public void setIncludePumpPriceDiscounts(Boolean includePumpPriceDiscounts) {
        this.includePumpPriceDiscounts = OptionalNullable.of(includePumpPriceDiscounts);
    }

    /**
     * UnSetter for IncludePumpPriceDiscounts.
     * True / False. A flag to request the discount information set on pump prices for the customer
     * to be included in the response. Optional Default value: False
     */
    public void unsetIncludePumpPriceDiscounts() {
        includePumpPriceDiscounts = null;
    }

    /**
     * Converts this CustomerPriceListRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CustomerPriceListRequest [" + "fromDate=" + fromDate + ", toDate=" + toDate
                + ", colCoId=" + colCoId + ", colCoCode=" + colCoCode + ", payerId=" + payerId
                + ", payerNumber=" + payerNumber + ", accountId=" + accountId + ", accountNumber="
                + accountNumber + ", customerSpecificList=" + customerSpecificList
                + ", priceListType=" + priceListType + ", delCoId=" + delCoId
                + ", includePumpPriceDiscounts=" + includePumpPriceDiscounts + "]";
    }

    /**
     * Builds a new {@link CustomerPriceListRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CustomerPriceListRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(fromDate, toDate);
        builder.colCoId = internalGetColCoId();
        builder.colCoCode = internalGetColCoCode();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.customerSpecificList = internalGetCustomerSpecificList();
        builder.priceListType = internalGetPriceListType();
        builder.delCoId = internalGetDelCoId();
        builder.includePumpPriceDiscounts = internalGetIncludePumpPriceDiscounts();
        return builder;
    }

    /**
     * Class to build instances of {@link CustomerPriceListRequest}.
     */
    public static class Builder {
        private String fromDate;
        private String toDate;
        private OptionalNullable<Integer> colCoId;
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<Integer> customerSpecificList;
        private OptionalNullable<Integer> priceListType;
        private OptionalNullable<Integer> delCoId;
        private OptionalNullable<Boolean> includePumpPriceDiscounts;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  fromDate  String value for fromDate.
         * @param  toDate  String value for toDate.
         */
        public Builder(String fromDate, String toDate) {
            this.fromDate = fromDate;
            this.toDate = toDate;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = fromDate;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = toDate;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for customerSpecificList.
         * @param  customerSpecificList  Integer value for customerSpecificList.
         * @return Builder
         */
        public Builder customerSpecificList(Integer customerSpecificList) {
            this.customerSpecificList = OptionalNullable.of(customerSpecificList);
            return this;
        }

        /**
         * UnSetter for customerSpecificList.
         * @return Builder
         */
        public Builder unsetCustomerSpecificList() {
            customerSpecificList = null;
            return this;
        }

        /**
         * Setter for priceListType.
         * @param  priceListType  Integer value for priceListType.
         * @return Builder
         */
        public Builder priceListType(Integer priceListType) {
            this.priceListType = OptionalNullable.of(priceListType);
            return this;
        }

        /**
         * UnSetter for priceListType.
         * @return Builder
         */
        public Builder unsetPriceListType() {
            priceListType = null;
            return this;
        }

        /**
         * Setter for delCoId.
         * @param  delCoId  Integer value for delCoId.
         * @return Builder
         */
        public Builder delCoId(Integer delCoId) {
            this.delCoId = OptionalNullable.of(delCoId);
            return this;
        }

        /**
         * UnSetter for delCoId.
         * @return Builder
         */
        public Builder unsetDelCoId() {
            delCoId = null;
            return this;
        }

        /**
         * Setter for includePumpPriceDiscounts.
         * @param  includePumpPriceDiscounts  Boolean value for includePumpPriceDiscounts.
         * @return Builder
         */
        public Builder includePumpPriceDiscounts(Boolean includePumpPriceDiscounts) {
            this.includePumpPriceDiscounts = OptionalNullable.of(includePumpPriceDiscounts);
            return this;
        }

        /**
         * UnSetter for includePumpPriceDiscounts.
         * @return Builder
         */
        public Builder unsetIncludePumpPriceDiscounts() {
            includePumpPriceDiscounts = null;
            return this;
        }

        /**
         * Builds a new {@link CustomerPriceListRequest} object using the set fields.
         * @return {@link CustomerPriceListRequest}
         */
        public CustomerPriceListRequest build() {
            return new CustomerPriceListRequest(fromDate, toDate, colCoId, colCoCode, payerId,
                    payerNumber, accountId, accountNumber, customerSpecificList, priceListType,
                    delCoId, includePumpPriceDiscounts);
        }
    }
}
