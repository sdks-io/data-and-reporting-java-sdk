/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for PricingHistory type.
 */
public class PricingHistory {
    private OptionalNullable<String> fromDate;
    private OptionalNullable<String> toDate;
    private OptionalNullable<Integer> feesRuleID;
    private OptionalNullable<String> feesRuleDescription;
    private OptionalNullable<Double> totalVolume;

    /**
     * Default constructor.
     */
    public PricingHistory() {
    }

    /**
     * Initialization constructor.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  feesRuleID  Integer value for feesRuleID.
     * @param  feesRuleDescription  String value for feesRuleDescription.
     * @param  totalVolume  Double value for totalVolume.
     */
    public PricingHistory(
            String fromDate,
            String toDate,
            Integer feesRuleID,
            String feesRuleDescription,
            Double totalVolume) {
        this.fromDate = OptionalNullable.of(fromDate);
        this.toDate = OptionalNullable.of(toDate);
        this.feesRuleID = OptionalNullable.of(feesRuleID);
        this.feesRuleDescription = OptionalNullable.of(feesRuleDescription);
        this.totalVolume = OptionalNullable.of(totalVolume);
    }

    /**
     * Initialization constructor.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  feesRuleID  Integer value for feesRuleID.
     * @param  feesRuleDescription  String value for feesRuleDescription.
     * @param  totalVolume  Double value for totalVolume.
     */

    protected PricingHistory(OptionalNullable<String> fromDate, OptionalNullable<String> toDate,
            OptionalNullable<Integer> feesRuleID, OptionalNullable<String> feesRuleDescription,
            OptionalNullable<Double> totalVolume) {
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.feesRuleID = feesRuleID;
        this.feesRuleDescription = feesRuleDescription;
        this.totalVolume = totalVolume;
    }

    /**
     * Internal Getter for FromDate.
     * Pricing History Period Start date and should be the first date of the month. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDate() {
        return this.fromDate;
    }

    /**
     * Getter for FromDate.
     * Pricing History Period Start date and should be the first date of the month. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getFromDate() {
        return OptionalNullable.getFrom(fromDate);
    }

    /**
     * Setter for FromDate.
     * Pricing History Period Start date and should be the first date of the month. Format: YYYYMMDD
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = OptionalNullable.of(fromDate);
    }

    /**
     * UnSetter for FromDate.
     * Pricing History Period Start date and should be the first date of the month. Format: YYYYMMDD
     */
    public void unsetFromDate() {
        fromDate = null;
    }

    /**
     * Internal Getter for ToDate.
     * Pricing History Period end date and should be the last date of the period month. Format:
     * YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDate() {
        return this.toDate;
    }

    /**
     * Getter for ToDate.
     * Pricing History Period end date and should be the last date of the period month. Format:
     * YYYYMMDD
     * @return Returns the String
     */
    public String getToDate() {
        return OptionalNullable.getFrom(toDate);
    }

    /**
     * Setter for ToDate.
     * Pricing History Period end date and should be the last date of the period month. Format:
     * YYYYMMDD
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = OptionalNullable.of(toDate);
    }

    /**
     * UnSetter for ToDate.
     * Pricing History Period end date and should be the last date of the period month. Format:
     * YYYYMMDD
     */
    public void unsetToDate() {
        toDate = null;
    }

    /**
     * Internal Getter for FeesRuleID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated
     * payer. Example: 8101
     * @return Returns the Internal Integer
     */
    @JsonGetter("FeesRuleID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetFeesRuleID() {
        return this.feesRuleID;
    }

    /**
     * Getter for FeesRuleID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated
     * payer. Example: 8101
     * @return Returns the Integer
     */
    public Integer getFeesRuleID() {
        return OptionalNullable.getFrom(feesRuleID);
    }

    /**
     * Setter for FeesRuleID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated
     * payer. Example: 8101
     * @param feesRuleID Value for Integer
     */
    @JsonSetter("FeesRuleID")
    public void setFeesRuleID(Integer feesRuleID) {
        this.feesRuleID = OptionalNullable.of(feesRuleID);
    }

    /**
     * UnSetter for FeesRuleID.
     * Pricing History Period Fees Rule ID that is associated to the period of that associated
     * payer. Example: 8101
     */
    public void unsetFeesRuleID() {
        feesRuleID = null;
    }

    /**
     * Internal Getter for FeesRuleDescription.
     * Pricing History Period Fees Rule Description that is associated to the period of that
     * associated payer.
     * @return Returns the Internal String
     */
    @JsonGetter("FeesRuleDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFeesRuleDescription() {
        return this.feesRuleDescription;
    }

    /**
     * Getter for FeesRuleDescription.
     * Pricing History Period Fees Rule Description that is associated to the period of that
     * associated payer.
     * @return Returns the String
     */
    public String getFeesRuleDescription() {
        return OptionalNullable.getFrom(feesRuleDescription);
    }

    /**
     * Setter for FeesRuleDescription.
     * Pricing History Period Fees Rule Description that is associated to the period of that
     * associated payer.
     * @param feesRuleDescription Value for String
     */
    @JsonSetter("FeesRuleDescription")
    public void setFeesRuleDescription(String feesRuleDescription) {
        this.feesRuleDescription = OptionalNullable.of(feesRuleDescription);
    }

    /**
     * UnSetter for FeesRuleDescription.
     * Pricing History Period Fees Rule Description that is associated to the period of that
     * associated payer.
     */
    public void unsetFeesRuleDescription() {
        feesRuleDescription = null;
    }

    /**
     * Internal Getter for TotalVolume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVolume() {
        return this.totalVolume;
    }

    /**
     * Getter for TotalVolume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     * @return Returns the Double
     */
    public Double getTotalVolume() {
        return OptionalNullable.getFrom(totalVolume);
    }

    /**
     * Setter for TotalVolume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     * @param totalVolume Value for Double
     */
    @JsonSetter("TotalVolume")
    public void setTotalVolume(Double totalVolume) {
        this.totalVolume = OptionalNullable.of(totalVolume);
    }

    /**
     * UnSetter for TotalVolume.
     * Total Quantity for the Pricing History Period that is associated to that payer.
     */
    public void unsetTotalVolume() {
        totalVolume = null;
    }

    /**
     * Converts this PricingHistory into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PricingHistory [" + "fromDate=" + fromDate + ", toDate=" + toDate + ", feesRuleID="
                + feesRuleID + ", feesRuleDescription=" + feesRuleDescription + ", totalVolume="
                + totalVolume + "]";
    }

    /**
     * Builds a new {@link PricingHistory.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PricingHistory.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.fromDate = internalGetFromDate();
        builder.toDate = internalGetToDate();
        builder.feesRuleID = internalGetFeesRuleID();
        builder.feesRuleDescription = internalGetFeesRuleDescription();
        builder.totalVolume = internalGetTotalVolume();
        return builder;
    }

    /**
     * Class to build instances of {@link PricingHistory}.
     */
    public static class Builder {
        private OptionalNullable<String> fromDate;
        private OptionalNullable<String> toDate;
        private OptionalNullable<Integer> feesRuleID;
        private OptionalNullable<String> feesRuleDescription;
        private OptionalNullable<Double> totalVolume;



        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = OptionalNullable.of(fromDate);
            return this;
        }

        /**
         * UnSetter for fromDate.
         * @return Builder
         */
        public Builder unsetFromDate() {
            fromDate = null;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = OptionalNullable.of(toDate);
            return this;
        }

        /**
         * UnSetter for toDate.
         * @return Builder
         */
        public Builder unsetToDate() {
            toDate = null;
            return this;
        }

        /**
         * Setter for feesRuleID.
         * @param  feesRuleID  Integer value for feesRuleID.
         * @return Builder
         */
        public Builder feesRuleID(Integer feesRuleID) {
            this.feesRuleID = OptionalNullable.of(feesRuleID);
            return this;
        }

        /**
         * UnSetter for feesRuleID.
         * @return Builder
         */
        public Builder unsetFeesRuleID() {
            feesRuleID = null;
            return this;
        }

        /**
         * Setter for feesRuleDescription.
         * @param  feesRuleDescription  String value for feesRuleDescription.
         * @return Builder
         */
        public Builder feesRuleDescription(String feesRuleDescription) {
            this.feesRuleDescription = OptionalNullable.of(feesRuleDescription);
            return this;
        }

        /**
         * UnSetter for feesRuleDescription.
         * @return Builder
         */
        public Builder unsetFeesRuleDescription() {
            feesRuleDescription = null;
            return this;
        }

        /**
         * Setter for totalVolume.
         * @param  totalVolume  Double value for totalVolume.
         * @return Builder
         */
        public Builder totalVolume(Double totalVolume) {
            this.totalVolume = OptionalNullable.of(totalVolume);
            return this;
        }

        /**
         * UnSetter for totalVolume.
         * @return Builder
         */
        public Builder unsetTotalVolume() {
            totalVolume = null;
            return this;
        }

        /**
         * Builds a new {@link PricingHistory} object using the set fields.
         * @return {@link PricingHistory}
         */
        public PricingHistory build() {
            return new PricingHistory(fromDate, toDate, feesRuleID, feesRuleDescription,
                    totalVolume);
        }
    }
}
