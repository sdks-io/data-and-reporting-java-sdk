/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for MultiPricedTransactionRequest type.
 */
public class MultiPricedTransactionRequest {
    private Integer colCoId;
    private int colCoCode;
    private List<MultiPricedTransactionRequestAccountsItems> accounts;
    private String invoiceStatus;
    private String purchasedInCountry;
    private String fromDate;
    private String toDate;
    private Integer period;
    private String postingDateFrom;
    private String postingDateTo;
    private String invoiceDate;
    private String invoiceNumber;
    private Boolean validInvoiceDateOnly;
    private String invoiceFromDate;
    private String invoiceToDate;
    private Boolean fuelOnly;
    private Boolean includeFees;
    private String sortOrder;
    private Integer currentPage;
    private Integer pageSize;

    /**
     * Default constructor.
     */
    public MultiPricedTransactionRequest() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  int value for colCoCode.
     * @param  accounts  List of MultiPricedTransactionRequestAccountsItems value for accounts.
     * @param  colCoId  Integer value for colCoId.
     * @param  invoiceStatus  String value for invoiceStatus.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  fromDate  String value for fromDate.
     * @param  toDate  String value for toDate.
     * @param  period  Integer value for period.
     * @param  postingDateFrom  String value for postingDateFrom.
     * @param  postingDateTo  String value for postingDateTo.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
     * @param  invoiceFromDate  String value for invoiceFromDate.
     * @param  invoiceToDate  String value for invoiceToDate.
     * @param  fuelOnly  Boolean value for fuelOnly.
     * @param  includeFees  Boolean value for includeFees.
     * @param  sortOrder  String value for sortOrder.
     * @param  currentPage  Integer value for currentPage.
     * @param  pageSize  Integer value for pageSize.
     */
    public MultiPricedTransactionRequest(
            int colCoCode,
            List<MultiPricedTransactionRequestAccountsItems> accounts,
            Integer colCoId,
            String invoiceStatus,
            String purchasedInCountry,
            String fromDate,
            String toDate,
            Integer period,
            String postingDateFrom,
            String postingDateTo,
            String invoiceDate,
            String invoiceNumber,
            Boolean validInvoiceDateOnly,
            String invoiceFromDate,
            String invoiceToDate,
            Boolean fuelOnly,
            Boolean includeFees,
            String sortOrder,
            Integer currentPage,
            Integer pageSize) {
        this.colCoId = colCoId;
        this.colCoCode = colCoCode;
        this.accounts = accounts;
        this.invoiceStatus = invoiceStatus;
        this.purchasedInCountry = purchasedInCountry;
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.period = period;
        this.postingDateFrom = postingDateFrom;
        this.postingDateTo = postingDateTo;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.validInvoiceDateOnly = validInvoiceDateOnly;
        this.invoiceFromDate = invoiceFromDate;
        this.invoiceToDate = invoiceToDate;
        this.fuelOnly = fuelOnly;
        this.includeFees = includeFees;
        this.sortOrder = sortOrder;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @return Returns the Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getColCoId() {
        return colCoId;
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional if ColCoCode is passed else Mandatory.
     * Example: 1 for Philippines 5 for UK
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = colCoId;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @return Returns the int
     */
    @JsonGetter("ColCoCode")
    public int getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code of the selected payer. Mandatory for serviced OUs such as Romania,
     * Latvia, Lithuania, Estonia, Ukraine etc. It is optional for other countries if ColCoID is
     * provided. Example: 86 for Philippines 5 for UK
     * @param colCoCode Value for int
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(int colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for Accounts.
     * List of Payers/Accounts entity. Mandatory. •	Max number of payers allowed in the input is 10,
     * if it exceeds in the input it will throw an error. •	This value is configurable. Initial
     * configuration will be 100 and will change to 10 once SFH changes are integrated. Note: 1.	At
     * least one payer should be present. Accounts information are optional.
     * @return Returns the List of MultiPricedTransactionRequestAccountsItems
     */
    @JsonGetter("Accounts")
    public List<MultiPricedTransactionRequestAccountsItems> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * List of Payers/Accounts entity. Mandatory. •	Max number of payers allowed in the input is 10,
     * if it exceeds in the input it will throw an error. •	This value is configurable. Initial
     * configuration will be 100 and will change to 10 once SFH changes are integrated. Note: 1.	At
     * least one payer should be present. Accounts information are optional.
     * @param accounts Value for List of MultiPricedTransactionRequestAccountsItems
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<MultiPricedTransactionRequestAccountsItems> accounts) {
        this.accounts = accounts;
    }

    /**
     * Getter for InvoiceStatus.
     * Invoice status of the transactions Mandatory Possible options: I - Invoiced U – Un-Invoiced A
     * – All Max Length: 1
     * @return Returns the String
     */
    @JsonGetter("InvoiceStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceStatus() {
        return invoiceStatus;
    }

    /**
     * Setter for InvoiceStatus.
     * Invoice status of the transactions Mandatory Possible options: I - Invoiced U – Un-Invoiced A
     * – All Max Length: 1
     * @param invoiceStatus Value for String
     */
    @JsonSetter("InvoiceStatus")
    public void setInvoiceStatus(String invoiceStatus) {
        this.invoiceStatus = invoiceStatus;
    }

    /**
     * Getter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Optional Note: If IncludeFees is true then this filter will be
     * ignored
     * @return Returns the String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPurchasedInCountry() {
        return purchasedInCountry;
    }

    /**
     * Setter for PurchasedInCountry.
     * ISO Country Code (ex: UK, FR) Optional Note: If IncludeFees is true then this filter will be
     * ignored
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = purchasedInCountry;
    }

    /**
     * Getter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("FromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFromDate() {
        return fromDate;
    }

    /**
     * Setter for FromDate.
     * Transactions from Date/Time. Optional – When provided, it should be with in last 24 months.
     * Format: yyyyMMdd
     * @param fromDate Value for String
     */
    @JsonSetter("FromDate")
    public void setFromDate(String fromDate) {
        this.fromDate = fromDate;
    }

    /**
     * Getter for ToDate.
     * Transactions to Date/Time. 1) When the value is blank and FromDate is provided on the input,
     * all transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("ToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getToDate() {
        return toDate;
    }

    /**
     * Setter for ToDate.
     * Transactions to Date/Time. 1) When the value is blank and FromDate is provided on the input,
     * all transactions took place 210(Configurable) days after the given FromDate is returned. 2)
     * Difference between FromDate and ToDate cannot be more than 210 (Configurable) days. Format:
     * yyyyMMdd
     * @param toDate Value for String
     */
    @JsonSetter("ToDate")
    public void setToDate(String toDate) {
        this.toDate = toDate;
    }

    /**
     * Getter for Period.
     * Transactions Period. Possible values are: 1.	Last 7 Days 2.	Last 30 Days 3.	Last 90 Days
     * @return Returns the Integer
     */
    @JsonGetter("Period")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPeriod() {
        return period;
    }

    /**
     * Setter for Period.
     * Transactions Period. Possible values are: 1.	Last 7 Days 2.	Last 30 Days 3.	Last 90 Days
     * @param period Value for Integer
     */
    @JsonSetter("Period")
    public void setPeriod(Integer period) {
        this.period = period;
    }

    /**
     * Getter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    @JsonGetter("PostingDateFrom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPostingDateFrom() {
        return postingDateFrom;
    }

    /**
     * Setter for PostingDateFrom.
     * Transaction Posting Date/time in the Cards Platform - From Date/time. Note: 1) When the value
     * of both PostingDateFrom and PostingDateTo are present in the request then the value of
     * PostingDateFrom must be less than PostingDateTo. 2) If IncludeFees is true then this filter
     * will be ignored Format: yyyyMMdd HH:mm:ss
     * @param postingDateFrom Value for String
     */
    @JsonSetter("PostingDateFrom")
    public void setPostingDateFrom(String postingDateFrom) {
        this.postingDateFrom = postingDateFrom;
    }

    /**
     * Getter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    @JsonGetter("PostingDateTo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPostingDateTo() {
        return postingDateTo;
    }

    /**
     * Setter for PostingDateTo.
     * Transaction Posting Date/time in the Cards Platform – To Date/time. Note: 1) If IncludeFees
     * is true then this filter will be ignored. 2) When the value of both PostingDateFrom and
     * PostingDateTo are present in the request then the value of PostingDateFrom must be less than
     * PostingDateTo. Format: yyyyMMdd HH:mm:ss
     * @param postingDateTo Value for String
     */
    @JsonSetter("PostingDateTo")
    public void setPostingDateTo(String postingDateTo) {
        this.postingDateTo = postingDateTo;
    }

    /**
     * Getter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. 2) If IncludeFees is true then this filter will be ignored Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * Setter for InvoiceDate.
     * Invoice Date. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date. 2) If IncludeFees is true then this filter will be ignored Format: yyyyMMdd
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = invoiceDate;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @return Returns the String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice Number. Optional Note: 1) If value is not blank then the system will ignore the
     * InvoiceStatus parameter and it will return all the billed transactions for the given invoice
     * date.
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }

    /**
     * Getter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked. Note: If IncludeFees is ‘True’ then this filter will be
     * ignored
     * @return Returns the Boolean
     */
    @JsonGetter("ValidInvoiceDateOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getValidInvoiceDateOnly() {
        return validInvoiceDateOnly;
    }

    /**
     * Setter for ValidInvoiceDateOnly.
     * True/False Optional Default value: True. When passed as ‘True’ the transactions records with
     * report date not equal to 9999-12-30 will be returned. When passed as ‘False’ the above
     * condition will not be checked. Note: If IncludeFees is ‘True’ then this filter will be
     * ignored
     * @param validInvoiceDateOnly Value for Boolean
     */
    @JsonSetter("ValidInvoiceDateOnly")
    public void setValidInvoiceDateOnly(Boolean validInvoiceDateOnly) {
        this.validInvoiceDateOnly = validInvoiceDateOnly;
    }

    /**
     * Getter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) days duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceFromDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceFromDate() {
        return invoiceFromDate;
    }

    /**
     * Setter for InvoiceFromDate.
     * Start date for transaction search by invoice date. Optional Note: 1) Value should be with in
     * last 24 months (if provided). 2) Maximum of 90(Configurable) days duration allowed per
     * search. 3) When provided, InvoiceFromDate has to be less than or equal to InvoiceToDate.
     * Format: yyyyMMdd
     * @param invoiceFromDate Value for String
     */
    @JsonSetter("InvoiceFromDate")
    public void setInvoiceFromDate(String invoiceFromDate) {
        this.invoiceFromDate = invoiceFromDate;
    }

    /**
     * Getter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @return Returns the String
     */
    @JsonGetter("InvoiceToDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInvoiceToDate() {
        return invoiceToDate;
    }

    /**
     * Setter for InvoiceToDate.
     * End date for transaction search by invoice date. Optional Note: 1) When InvoiceFromDate is
     * provided and InvoiceToDate is null, then InvoiceToDate will be calculated as (InvoiceFromDate
     * + 90 days) or (CurrentDate) whichever is lesser. Format: yyyyMMdd
     * @param invoiceToDate Value for String
     */
    @JsonSetter("InvoiceToDate")
    public void setInvoiceToDate(String invoiceToDate) {
        this.invoiceToDate = invoiceToDate;
    }

    /**
     * Getter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked. Note: If
     * IncludeFees is ‘True’ then this filter will be ignored
     * @return Returns the Boolean
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFuelOnly() {
        return fuelOnly;
    }

    /**
     * Setter for FuelOnly.
     * True/False Optional Default value: False. When passed as ‘True’ Only returned records with
     * Fuel transactions. When passed as ‘False’ the above condition will not be checked. Note: If
     * IncludeFees is ‘True’ then this filter will be ignored
     * @param fuelOnly Value for Boolean
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(Boolean fuelOnly) {
        this.fuelOnly = fuelOnly;
    }

    /**
     * Getter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore complex filters,
     * all sales items along with fees included on the same response
     * @return Returns the Boolean
     */
    @JsonGetter("IncludeFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIncludeFees() {
        return includeFees;
    }

    /**
     * Setter for IncludeFees.
     * True/False Optional Default value: False When passed as ‘True’ then ignore complex filters,
     * all sales items along with fees included on the same response
     * @param includeFees Value for Boolean
     */
    @JsonSetter("IncludeFees")
    public void setIncludeFees(Boolean includeFees) {
        this.includeFees = includeFees;
    }

    /**
     * Getter for SortOrder.
     * Allowed Sorting Options: 1.	TransactionDateAscending 2.	TransactionDateDescending
     * 3.	GrossAmountDescending 4.	GrossAmountAscending 5.	NetAmountAscending
     * 6.	NetAmountDescensding Example value to be passed: 1,3 Note: If IncludeFees is ‘True’ then
     * sorting is not allowed. This parameter will be ignored.
     * @return Returns the String
     */
    @JsonGetter("SortOrder")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSortOrder() {
        return sortOrder;
    }

    /**
     * Setter for SortOrder.
     * Allowed Sorting Options: 1.	TransactionDateAscending 2.	TransactionDateDescending
     * 3.	GrossAmountDescending 4.	GrossAmountAscending 5.	NetAmountAscending
     * 6.	NetAmountDescensding Example value to be passed: 1,3 Note: If IncludeFees is ‘True’ then
     * sorting is not allowed. This parameter will be ignored.
     * @param sortOrder Value for String
     */
    @JsonSetter("SortOrder")
    public void setSortOrder(String sortOrder) {
        this.sortOrder = sortOrder;
    }

    /**
     * Getter for CurrentPage.
     * Page Number (as shown to the users) Optional Default value 1 Note: If IncludeFees is ‘True’
     * then pagination is not allowed. This parameter will be ignored.
     * @return Returns the Integer
     */
    @JsonGetter("CurrentPage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCurrentPage() {
        return currentPage;
    }

    /**
     * Setter for CurrentPage.
     * Page Number (as shown to the users) Optional Default value 1 Note: If IncludeFees is ‘True’
     * then pagination is not allowed. This parameter will be ignored.
     * @param currentPage Value for Integer
     */
    @JsonSetter("CurrentPage")
    public void setCurrentPage(Integer currentPage) {
        this.currentPage = currentPage;
    }

    /**
     * Getter for PageSize.
     * Page Size – Number of records to show on a page Optional Default value 50 Note: If
     * IncludeFees is ‘True’ then pagination is not allowed. This parameter will be ignored.
     * @return Returns the Integer
     */
    @JsonGetter("PageSize")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPageSize() {
        return pageSize;
    }

    /**
     * Setter for PageSize.
     * Page Size – Number of records to show on a page Optional Default value 50 Note: If
     * IncludeFees is ‘True’ then pagination is not allowed. This parameter will be ignored.
     * @param pageSize Value for Integer
     */
    @JsonSetter("PageSize")
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * Converts this MultiPricedTransactionRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "MultiPricedTransactionRequest [" + "colCoCode=" + colCoCode + ", accounts="
                + accounts + ", colCoId=" + colCoId + ", invoiceStatus=" + invoiceStatus
                + ", purchasedInCountry=" + purchasedInCountry + ", fromDate=" + fromDate
                + ", toDate=" + toDate + ", period=" + period + ", postingDateFrom="
                + postingDateFrom + ", postingDateTo=" + postingDateTo + ", invoiceDate="
                + invoiceDate + ", invoiceNumber=" + invoiceNumber + ", validInvoiceDateOnly="
                + validInvoiceDateOnly + ", invoiceFromDate=" + invoiceFromDate + ", invoiceToDate="
                + invoiceToDate + ", fuelOnly=" + fuelOnly + ", includeFees=" + includeFees
                + ", sortOrder=" + sortOrder + ", currentPage=" + currentPage + ", pageSize="
                + pageSize + "]";
    }

    /**
     * Builds a new {@link MultiPricedTransactionRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link MultiPricedTransactionRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(colCoCode, accounts)
                .colCoId(getColCoId())
                .invoiceStatus(getInvoiceStatus())
                .purchasedInCountry(getPurchasedInCountry())
                .fromDate(getFromDate())
                .toDate(getToDate())
                .period(getPeriod())
                .postingDateFrom(getPostingDateFrom())
                .postingDateTo(getPostingDateTo())
                .invoiceDate(getInvoiceDate())
                .invoiceNumber(getInvoiceNumber())
                .validInvoiceDateOnly(getValidInvoiceDateOnly())
                .invoiceFromDate(getInvoiceFromDate())
                .invoiceToDate(getInvoiceToDate())
                .fuelOnly(getFuelOnly())
                .includeFees(getIncludeFees())
                .sortOrder(getSortOrder())
                .currentPage(getCurrentPage())
                .pageSize(getPageSize());
        return builder;
    }

    /**
     * Class to build instances of {@link MultiPricedTransactionRequest}.
     */
    public static class Builder {
        private int colCoCode;
        private List<MultiPricedTransactionRequestAccountsItems> accounts;
        private Integer colCoId;
        private String invoiceStatus;
        private String purchasedInCountry;
        private String fromDate;
        private String toDate;
        private Integer period;
        private String postingDateFrom;
        private String postingDateTo;
        private String invoiceDate;
        private String invoiceNumber;
        private Boolean validInvoiceDateOnly;
        private String invoiceFromDate;
        private String invoiceToDate;
        private Boolean fuelOnly;
        private Boolean includeFees;
        private String sortOrder;
        private Integer currentPage;
        private Integer pageSize;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  colCoCode  int value for colCoCode.
         * @param  accounts  List of MultiPricedTransactionRequestAccountsItems value for accounts.
         */
        public Builder(int colCoCode, List<MultiPricedTransactionRequestAccountsItems> accounts) {
            this.colCoCode = colCoCode;
            this.accounts = accounts;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  int value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(int colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of MultiPricedTransactionRequestAccountsItems value for accounts.
         * @return Builder
         */
        public Builder accounts(List<MultiPricedTransactionRequestAccountsItems> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = colCoId;
            return this;
        }

        /**
         * Setter for invoiceStatus.
         * @param  invoiceStatus  String value for invoiceStatus.
         * @return Builder
         */
        public Builder invoiceStatus(String invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = purchasedInCountry;
            return this;
        }

        /**
         * Setter for fromDate.
         * @param  fromDate  String value for fromDate.
         * @return Builder
         */
        public Builder fromDate(String fromDate) {
            this.fromDate = fromDate;
            return this;
        }

        /**
         * Setter for toDate.
         * @param  toDate  String value for toDate.
         * @return Builder
         */
        public Builder toDate(String toDate) {
            this.toDate = toDate;
            return this;
        }

        /**
         * Setter for period.
         * @param  period  Integer value for period.
         * @return Builder
         */
        public Builder period(Integer period) {
            this.period = period;
            return this;
        }

        /**
         * Setter for postingDateFrom.
         * @param  postingDateFrom  String value for postingDateFrom.
         * @return Builder
         */
        public Builder postingDateFrom(String postingDateFrom) {
            this.postingDateFrom = postingDateFrom;
            return this;
        }

        /**
         * Setter for postingDateTo.
         * @param  postingDateTo  String value for postingDateTo.
         * @return Builder
         */
        public Builder postingDateTo(String postingDateTo) {
            this.postingDateTo = postingDateTo;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * Setter for validInvoiceDateOnly.
         * @param  validInvoiceDateOnly  Boolean value for validInvoiceDateOnly.
         * @return Builder
         */
        public Builder validInvoiceDateOnly(Boolean validInvoiceDateOnly) {
            this.validInvoiceDateOnly = validInvoiceDateOnly;
            return this;
        }

        /**
         * Setter for invoiceFromDate.
         * @param  invoiceFromDate  String value for invoiceFromDate.
         * @return Builder
         */
        public Builder invoiceFromDate(String invoiceFromDate) {
            this.invoiceFromDate = invoiceFromDate;
            return this;
        }

        /**
         * Setter for invoiceToDate.
         * @param  invoiceToDate  String value for invoiceToDate.
         * @return Builder
         */
        public Builder invoiceToDate(String invoiceToDate) {
            this.invoiceToDate = invoiceToDate;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  Boolean value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(Boolean fuelOnly) {
            this.fuelOnly = fuelOnly;
            return this;
        }

        /**
         * Setter for includeFees.
         * @param  includeFees  Boolean value for includeFees.
         * @return Builder
         */
        public Builder includeFees(Boolean includeFees) {
            this.includeFees = includeFees;
            return this;
        }

        /**
         * Setter for sortOrder.
         * @param  sortOrder  String value for sortOrder.
         * @return Builder
         */
        public Builder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Setter for currentPage.
         * @param  currentPage  Integer value for currentPage.
         * @return Builder
         */
        public Builder currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Setter for pageSize.
         * @param  pageSize  Integer value for pageSize.
         * @return Builder
         */
        public Builder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Builds a new {@link MultiPricedTransactionRequest} object using the set fields.
         * @return {@link MultiPricedTransactionRequest}
         */
        public MultiPricedTransactionRequest build() {
            return new MultiPricedTransactionRequest(colCoCode, accounts, colCoId, invoiceStatus,
                    purchasedInCountry, fromDate, toDate, period, postingDateFrom, postingDateTo,
                    invoiceDate, invoiceNumber, validInvoiceDateOnly, invoiceFromDate,
                    invoiceToDate, fuelOnly, includeFees, sortOrder, currentPage, pageSize);
        }
    }
}
