/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for RecentTransactionsResponse type.
 */
public class RecentTransactionsResponse {
    private String requestId;
    private String status;
    private Integer page;
    private Integer rowCount;
    private Integer totalPages;
    private List<RecentTransactions> data;

    /**
     * Default constructor.
     */
    public RecentTransactionsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  requestId  String value for requestId.
     * @param  status  String value for status.
     * @param  page  Integer value for page.
     * @param  rowCount  Integer value for rowCount.
     * @param  totalPages  Integer value for totalPages.
     * @param  data  List of RecentTransactions value for data.
     */
    public RecentTransactionsResponse(
            String requestId,
            String status,
            Integer page,
            Integer rowCount,
            Integer totalPages,
            List<RecentTransactions> data) {
        this.requestId = requestId;
        this.status = status;
        this.page = page;
        this.rowCount = rowCount;
        this.totalPages = totalPages;
        this.data = data;
    }

    /**
     * Getter for RequestId.
     * RequestID is unique identifier value that is attached to requests and messages that allow
     * reference to a particular transaction or event chain.
     * @return Returns the String
     */
    @JsonGetter("RequestId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRequestId() {
        return requestId;
    }

    /**
     * Setter for RequestId.
     * RequestID is unique identifier value that is attached to requests and messages that allow
     * reference to a particular transaction or event chain.
     * @param requestId Value for String
     */
    @JsonSetter("RequestId")
    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    /**
     * Getter for Status.
     * status of the API call
     * @return Returns the String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * status of the API call
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for Page.
     * CurrentPage
     * @return Returns the Integer
     */
    @JsonGetter("Page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPage() {
        return page;
    }

    /**
     * Setter for Page.
     * CurrentPage
     * @param page Value for Integer
     */
    @JsonSetter("Page")
    public void setPage(Integer page) {
        this.page = page;
    }

    /**
     * Getter for RowCount.
     * RowCount
     * @return Returns the Integer
     */
    @JsonGetter("RowCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getRowCount() {
        return rowCount;
    }

    /**
     * Setter for RowCount.
     * RowCount
     * @param rowCount Value for Integer
     */
    @JsonSetter("RowCount")
    public void setRowCount(Integer rowCount) {
        this.rowCount = rowCount;
    }

    /**
     * Getter for TotalPages.
     * TotalPages
     * @return Returns the Integer
     */
    @JsonGetter("TotalPages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTotalPages() {
        return totalPages;
    }

    /**
     * Setter for TotalPages.
     * TotalPages
     * @param totalPages Value for Integer
     */
    @JsonSetter("TotalPages")
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }

    /**
     * Getter for Data.
     * API Response
     * @return Returns the List of RecentTransactions
     */
    @JsonGetter("Data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<RecentTransactions> getData() {
        return data;
    }

    /**
     * Setter for Data.
     * API Response
     * @param data Value for List of RecentTransactions
     */
    @JsonSetter("Data")
    public void setData(List<RecentTransactions> data) {
        this.data = data;
    }

    /**
     * Converts this RecentTransactionsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RecentTransactionsResponse [" + "requestId=" + requestId + ", status=" + status
                + ", page=" + page + ", rowCount=" + rowCount + ", totalPages=" + totalPages
                + ", data=" + data + "]";
    }

    /**
     * Builds a new {@link RecentTransactionsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RecentTransactionsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .requestId(getRequestId())
                .status(getStatus())
                .page(getPage())
                .rowCount(getRowCount())
                .totalPages(getTotalPages())
                .data(getData());
        return builder;
    }

    /**
     * Class to build instances of {@link RecentTransactionsResponse}.
     */
    public static class Builder {
        private String requestId;
        private String status;
        private Integer page;
        private Integer rowCount;
        private Integer totalPages;
        private List<RecentTransactions> data;



        /**
         * Setter for requestId.
         * @param  requestId  String value for requestId.
         * @return Builder
         */
        public Builder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for page.
         * @param  page  Integer value for page.
         * @return Builder
         */
        public Builder page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Setter for rowCount.
         * @param  rowCount  Integer value for rowCount.
         * @return Builder
         */
        public Builder rowCount(Integer rowCount) {
            this.rowCount = rowCount;
            return this;
        }

        /**
         * Setter for totalPages.
         * @param  totalPages  Integer value for totalPages.
         * @return Builder
         */
        public Builder totalPages(Integer totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        /**
         * Setter for data.
         * @param  data  List of RecentTransactions value for data.
         * @return Builder
         */
        public Builder data(List<RecentTransactions> data) {
            this.data = data;
            return this;
        }

        /**
         * Builds a new {@link RecentTransactionsResponse} object using the set fields.
         * @return {@link RecentTransactionsResponse}
         */
        public RecentTransactionsResponse build() {
            return new RecentTransactionsResponse(requestId, status, page, rowCount, totalPages,
                    data);
        }
    }
}
