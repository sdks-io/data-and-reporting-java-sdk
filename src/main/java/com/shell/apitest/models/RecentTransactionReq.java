/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for RecentTransactionReq type.
 */
public class RecentTransactionReq {
    private Integer colCoCode;
    private String payerNumber;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> fromDateTime;
    private OptionalNullable<String> toDateTime;
    private OptionalNullable<String> transactionStatus;
    private OptionalNullable<String> fuelOnly;
    private OptionalNullable<String> productGroupName;
    private OptionalNullable<String> vehicleRegistrationNumber;
    private OptionalNullable<Boolean> includeDeclines;
    private OptionalNullable<String> cardIssuerName;
    private String columnList;

    /**
     * Default constructor.
     */
    public RecentTransactionReq() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountNumber  String value for accountNumber.
     * @param  productCode  String value for productCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  cardPAN  String value for cardPAN.
     * @param  fromDateTime  String value for fromDateTime.
     * @param  toDateTime  String value for toDateTime.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  fuelOnly  String value for fuelOnly.
     * @param  productGroupName  String value for productGroupName.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  includeDeclines  Boolean value for includeDeclines.
     * @param  cardIssuerName  String value for cardIssuerName.
     * @param  columnList  String value for columnList.
     */
    public RecentTransactionReq(
            Integer colCoCode,
            String payerNumber,
            String accountNumber,
            String productCode,
            String purchasedInCountry,
            String cardPAN,
            String fromDateTime,
            String toDateTime,
            String transactionStatus,
            String fuelOnly,
            String productGroupName,
            String vehicleRegistrationNumber,
            Boolean includeDeclines,
            String cardIssuerName,
            String columnList) {
        this.colCoCode = colCoCode;
        this.payerNumber = payerNumber;
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.productCode = OptionalNullable.of(productCode);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.fromDateTime = OptionalNullable.of(fromDateTime);
        this.toDateTime = OptionalNullable.of(toDateTime);
        this.transactionStatus = OptionalNullable.of(transactionStatus);
        this.fuelOnly = OptionalNullable.of(fuelOnly);
        this.productGroupName = OptionalNullable.of(productGroupName);
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
        this.includeDeclines = OptionalNullable.of(includeDeclines);
        this.cardIssuerName = OptionalNullable.of(cardIssuerName);
        this.columnList = columnList;
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  accountNumber  String value for accountNumber.
     * @param  productCode  String value for productCode.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  cardPAN  String value for cardPAN.
     * @param  fromDateTime  String value for fromDateTime.
     * @param  toDateTime  String value for toDateTime.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  fuelOnly  String value for fuelOnly.
     * @param  productGroupName  String value for productGroupName.
     * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
     * @param  includeDeclines  Boolean value for includeDeclines.
     * @param  cardIssuerName  String value for cardIssuerName.
     * @param  columnList  String value for columnList.
     */

    protected RecentTransactionReq(Integer colCoCode, String payerNumber,
            OptionalNullable<String> accountNumber, OptionalNullable<String> productCode,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<String> cardPAN,
            OptionalNullable<String> fromDateTime, OptionalNullable<String> toDateTime,
            OptionalNullable<String> transactionStatus, OptionalNullable<String> fuelOnly,
            OptionalNullable<String> productGroupName,
            OptionalNullable<String> vehicleRegistrationNumber,
            OptionalNullable<Boolean> includeDeclines, OptionalNullable<String> cardIssuerName,
            String columnList) {
        this.colCoCode = colCoCode;
        this.payerNumber = payerNumber;
        this.accountNumber = accountNumber;
        this.productCode = productCode;
        this.purchasedInCountry = purchasedInCountry;
        this.cardPAN = cardPAN;
        this.fromDateTime = fromDateTime;
        this.toDateTime = toDateTime;
        this.transactionStatus = transactionStatus;
        this.fuelOnly = fuelOnly;
        this.productGroupName = productGroupName;
        this.vehicleRegistrationNumber = vehicleRegistrationNumber;
        this.includeDeclines = includeDeclines;
        this.cardIssuerName = cardIssuerName;
        this.columnList = columnList;
    }

    /**
     * Getter for ColCoCode.
     * Three character Collecting Company Code (Shell Code) of the selected payer
     * @return Returns the Integer
     */
    @JsonGetter("ColCoCode")
    public Integer getColCoCode() {
        return colCoCode;
    }

    /**
     * Setter for ColCoCode.
     * Three character Collecting Company Code (Shell Code) of the selected payer
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = colCoCode;
    }

    /**
     * Getter for PayerNumber.
     * Unique Identifier for the customer at payment point.
     * @return Returns the String
     */
    @JsonGetter("PayerNumber")
    public String getPayerNumber() {
        return payerNumber;
    }

    /**
     * Setter for PayerNumber.
     * Unique Identifier for the customer at payment point.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = payerNumber;
    }

    /**
     * Internal Getter for AccountNumber.
     * Customer account number.
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Customer account number.
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Customer account number.
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Customer account number.
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Global product code
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Global product code
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Global product code
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Global product code
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Delco country
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Delco country
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Delco country
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Delco country
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Card identifier number masked
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Card identifier number masked
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Card identifier number masked
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Card identifier number masked
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for FromDateTime.
     * Start date and time of transactions
     * @return Returns the Internal String
     */
    @JsonGetter("FromDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFromDateTime() {
        return this.fromDateTime;
    }

    /**
     * Getter for FromDateTime.
     * Start date and time of transactions
     * @return Returns the String
     */
    public String getFromDateTime() {
        return OptionalNullable.getFrom(fromDateTime);
    }

    /**
     * Setter for FromDateTime.
     * Start date and time of transactions
     * @param fromDateTime Value for String
     */
    @JsonSetter("FromDateTime")
    public void setFromDateTime(String fromDateTime) {
        this.fromDateTime = OptionalNullable.of(fromDateTime);
    }

    /**
     * UnSetter for FromDateTime.
     * Start date and time of transactions
     */
    public void unsetFromDateTime() {
        fromDateTime = null;
    }

    /**
     * Internal Getter for ToDateTime.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     * @return Returns the Internal String
     */
    @JsonGetter("ToDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetToDateTime() {
        return this.toDateTime;
    }

    /**
     * Getter for ToDateTime.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     * @return Returns the String
     */
    public String getToDateTime() {
        return OptionalNullable.getFrom(toDateTime);
    }

    /**
     * Setter for ToDateTime.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     * @param toDateTime Value for String
     */
    @JsonSetter("ToDateTime")
    public void setToDateTime(String toDateTime) {
        this.toDateTime = OptionalNullable.of(toDateTime);
    }

    /**
     * UnSetter for ToDateTime.
     * End date and time of transactions. Mandatory if FromDateTime is provided.
     */
    public void unsetToDateTime() {
        toDateTime = null;
    }

    /**
     * Internal Getter for TransactionStatus.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionStatus() {
        return this.transactionStatus;
    }

    /**
     * Getter for TransactionStatus.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     * @return Returns the String
     */
    public String getTransactionStatus() {
        return OptionalNullable.getFrom(transactionStatus);
    }

    /**
     * Setter for TransactionStatus.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     * @param transactionStatus Value for String
     */
    @JsonSetter("TransactionStatus")
    public void setTransactionStatus(String transactionStatus) {
        this.transactionStatus = OptionalNullable.of(transactionStatus);
    }

    /**
     * UnSetter for TransactionStatus.
     * Status of transaction. DO NOT pass the value if includeDeclines is passed
     */
    public void unsetTransactionStatus() {
        transactionStatus = null;
    }

    /**
     * Internal Getter for FuelOnly.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     * @return Returns the Internal String
     */
    @JsonGetter("FuelOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFuelOnly() {
        return this.fuelOnly;
    }

    /**
     * Getter for FuelOnly.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     * @return Returns the String
     */
    public String getFuelOnly() {
        return OptionalNullable.getFrom(fuelOnly);
    }

    /**
     * Setter for FuelOnly.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     * @param fuelOnly Value for String
     */
    @JsonSetter("FuelOnly")
    public void setFuelOnly(String fuelOnly) {
        this.fuelOnly = OptionalNullable.of(fuelOnly);
    }

    /**
     * UnSetter for FuelOnly.
     * When passed as ‘true’ Only returned records with Fuel transactions.(All Fuels).When passed as
     * ‘false’ the above condition will not be checked. (Both All Fuels and Non-Fuel)
     */
    public void unsetFuelOnly() {
        fuelOnly = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * Product group name
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * Product group name
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * Product group name
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * Product group name
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Internal Getter for VehicleRegistrationNumber.
     * Vehicle registration number embossed on the card
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistrationNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistrationNumber() {
        return this.vehicleRegistrationNumber;
    }

    /**
     * Getter for VehicleRegistrationNumber.
     * Vehicle registration number embossed on the card
     * @return Returns the String
     */
    public String getVehicleRegistrationNumber() {
        return OptionalNullable.getFrom(vehicleRegistrationNumber);
    }

    /**
     * Setter for VehicleRegistrationNumber.
     * Vehicle registration number embossed on the card
     * @param vehicleRegistrationNumber Value for String
     */
    @JsonSetter("VehicleRegistrationNumber")
    public void setVehicleRegistrationNumber(String vehicleRegistrationNumber) {
        this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
    }

    /**
     * UnSetter for VehicleRegistrationNumber.
     * Vehicle registration number embossed on the card
     */
    public void unsetVehicleRegistrationNumber() {
        vehicleRegistrationNumber = null;
    }

    /**
     * Internal Getter for IncludeDeclines.
     * Flag to enable to get declined records
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeDeclines")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeDeclines() {
        return this.includeDeclines;
    }

    /**
     * Getter for IncludeDeclines.
     * Flag to enable to get declined records
     * @return Returns the Boolean
     */
    public Boolean getIncludeDeclines() {
        return OptionalNullable.getFrom(includeDeclines);
    }

    /**
     * Setter for IncludeDeclines.
     * Flag to enable to get declined records
     * @param includeDeclines Value for Boolean
     */
    @JsonSetter("IncludeDeclines")
    public void setIncludeDeclines(Boolean includeDeclines) {
        this.includeDeclines = OptionalNullable.of(includeDeclines);
    }

    /**
     * UnSetter for IncludeDeclines.
     * Flag to enable to get declined records
     */
    public void unsetIncludeDeclines() {
        includeDeclines = null;
    }

    /**
     * Internal Getter for CardIssuerName.
     * Card issuer name
     * @return Returns the Internal String
     */
    @JsonGetter("CardIssuerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardIssuerName() {
        return this.cardIssuerName;
    }

    /**
     * Getter for CardIssuerName.
     * Card issuer name
     * @return Returns the String
     */
    public String getCardIssuerName() {
        return OptionalNullable.getFrom(cardIssuerName);
    }

    /**
     * Setter for CardIssuerName.
     * Card issuer name
     * @param cardIssuerName Value for String
     */
    @JsonSetter("CardIssuerName")
    public void setCardIssuerName(String cardIssuerName) {
        this.cardIssuerName = OptionalNullable.of(cardIssuerName);
    }

    /**
     * UnSetter for CardIssuerName.
     * Card issuer name
     */
    public void unsetCardIssuerName() {
        cardIssuerName = null;
    }

    /**
     * Getter for ColumnList.
     * Column list to be part of response, it can be 'All' to return all possible column. E.g. 'All'
     * To get specific columns pass multiple columns name separated by comma along with
     * 'PayerNumber'. E.g. "PayerNumber,ProductCode"
     * @return Returns the String
     */
    @JsonGetter("ColumnList")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getColumnList() {
        return columnList;
    }

    /**
     * Setter for ColumnList.
     * Column list to be part of response, it can be 'All' to return all possible column. E.g. 'All'
     * To get specific columns pass multiple columns name separated by comma along with
     * 'PayerNumber'. E.g. "PayerNumber,ProductCode"
     * @param columnList Value for String
     */
    @JsonSetter("ColumnList")
    public void setColumnList(String columnList) {
        this.columnList = columnList;
    }

    /**
     * Converts this RecentTransactionReq into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "RecentTransactionReq [" + "colCoCode=" + colCoCode + ", payerNumber=" + payerNumber
                + ", accountNumber=" + accountNumber + ", productCode=" + productCode
                + ", purchasedInCountry=" + purchasedInCountry + ", cardPAN=" + cardPAN
                + ", fromDateTime=" + fromDateTime + ", toDateTime=" + toDateTime
                + ", transactionStatus=" + transactionStatus + ", fuelOnly=" + fuelOnly
                + ", productGroupName=" + productGroupName + ", vehicleRegistrationNumber="
                + vehicleRegistrationNumber + ", includeDeclines=" + includeDeclines
                + ", cardIssuerName=" + cardIssuerName + ", columnList=" + columnList + "]";
    }

    /**
     * Builds a new {@link RecentTransactionReq.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link RecentTransactionReq.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(colCoCode, payerNumber)
                .columnList(getColumnList());
        builder.accountNumber = internalGetAccountNumber();
        builder.productCode = internalGetProductCode();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.cardPAN = internalGetCardPAN();
        builder.fromDateTime = internalGetFromDateTime();
        builder.toDateTime = internalGetToDateTime();
        builder.transactionStatus = internalGetTransactionStatus();
        builder.fuelOnly = internalGetFuelOnly();
        builder.productGroupName = internalGetProductGroupName();
        builder.vehicleRegistrationNumber = internalGetVehicleRegistrationNumber();
        builder.includeDeclines = internalGetIncludeDeclines();
        builder.cardIssuerName = internalGetCardIssuerName();
        return builder;
    }

    /**
     * Class to build instances of {@link RecentTransactionReq}.
     */
    public static class Builder {
        private Integer colCoCode;
        private String payerNumber;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> fromDateTime;
        private OptionalNullable<String> toDateTime;
        private OptionalNullable<String> transactionStatus;
        private OptionalNullable<String> fuelOnly;
        private OptionalNullable<String> productGroupName;
        private OptionalNullable<String> vehicleRegistrationNumber;
        private OptionalNullable<Boolean> includeDeclines;
        private OptionalNullable<String> cardIssuerName;
        private String columnList;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  colCoCode  Integer value for colCoCode.
         * @param  payerNumber  String value for payerNumber.
         */
        public Builder(Integer colCoCode, String payerNumber) {
            this.colCoCode = colCoCode;
            this.payerNumber = payerNumber;
        }

        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = colCoCode;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = payerNumber;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for fromDateTime.
         * @param  fromDateTime  String value for fromDateTime.
         * @return Builder
         */
        public Builder fromDateTime(String fromDateTime) {
            this.fromDateTime = OptionalNullable.of(fromDateTime);
            return this;
        }

        /**
         * UnSetter for fromDateTime.
         * @return Builder
         */
        public Builder unsetFromDateTime() {
            fromDateTime = null;
            return this;
        }

        /**
         * Setter for toDateTime.
         * @param  toDateTime  String value for toDateTime.
         * @return Builder
         */
        public Builder toDateTime(String toDateTime) {
            this.toDateTime = OptionalNullable.of(toDateTime);
            return this;
        }

        /**
         * UnSetter for toDateTime.
         * @return Builder
         */
        public Builder unsetToDateTime() {
            toDateTime = null;
            return this;
        }

        /**
         * Setter for transactionStatus.
         * @param  transactionStatus  String value for transactionStatus.
         * @return Builder
         */
        public Builder transactionStatus(String transactionStatus) {
            this.transactionStatus = OptionalNullable.of(transactionStatus);
            return this;
        }

        /**
         * UnSetter for transactionStatus.
         * @return Builder
         */
        public Builder unsetTransactionStatus() {
            transactionStatus = null;
            return this;
        }

        /**
         * Setter for fuelOnly.
         * @param  fuelOnly  String value for fuelOnly.
         * @return Builder
         */
        public Builder fuelOnly(String fuelOnly) {
            this.fuelOnly = OptionalNullable.of(fuelOnly);
            return this;
        }

        /**
         * UnSetter for fuelOnly.
         * @return Builder
         */
        public Builder unsetFuelOnly() {
            fuelOnly = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Setter for vehicleRegistrationNumber.
         * @param  vehicleRegistrationNumber  String value for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder vehicleRegistrationNumber(String vehicleRegistrationNumber) {
            this.vehicleRegistrationNumber = OptionalNullable.of(vehicleRegistrationNumber);
            return this;
        }

        /**
         * UnSetter for vehicleRegistrationNumber.
         * @return Builder
         */
        public Builder unsetVehicleRegistrationNumber() {
            vehicleRegistrationNumber = null;
            return this;
        }

        /**
         * Setter for includeDeclines.
         * @param  includeDeclines  Boolean value for includeDeclines.
         * @return Builder
         */
        public Builder includeDeclines(Boolean includeDeclines) {
            this.includeDeclines = OptionalNullable.of(includeDeclines);
            return this;
        }

        /**
         * UnSetter for includeDeclines.
         * @return Builder
         */
        public Builder unsetIncludeDeclines() {
            includeDeclines = null;
            return this;
        }

        /**
         * Setter for cardIssuerName.
         * @param  cardIssuerName  String value for cardIssuerName.
         * @return Builder
         */
        public Builder cardIssuerName(String cardIssuerName) {
            this.cardIssuerName = OptionalNullable.of(cardIssuerName);
            return this;
        }

        /**
         * UnSetter for cardIssuerName.
         * @return Builder
         */
        public Builder unsetCardIssuerName() {
            cardIssuerName = null;
            return this;
        }

        /**
         * Setter for columnList.
         * @param  columnList  String value for columnList.
         * @return Builder
         */
        public Builder columnList(String columnList) {
            this.columnList = columnList;
            return this;
        }

        /**
         * Builds a new {@link RecentTransactionReq} object using the set fields.
         * @return {@link RecentTransactionReq}
         */
        public RecentTransactionReq build() {
            return new RecentTransactionReq(colCoCode, payerNumber, accountNumber, productCode,
                    purchasedInCountry, cardPAN, fromDateTime, toDateTime, transactionStatus,
                    fuelOnly, productGroupName, vehicleRegistrationNumber, includeDeclines,
                    cardIssuerName, columnList);
        }
    }
}
