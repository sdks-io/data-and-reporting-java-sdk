/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for InvoicesSummaries type.
 */
public class InvoicesSummaries {
    private OptionalNullable<Double> amountDue;
    private OptionalNullable<Double> amountNotOverdue;
    private OptionalNullable<Double> amountOverdue;
    private OptionalNullable<Double> amountPaid;
    private OptionalNullable<String> billingCurrencyCode;
    private OptionalNullable<String> billingCurrencySymbol;
    private OptionalNullable<Double> outstandingBalance;
    private OptionalNullable<String> paymentDueDate;
    private OptionalNullable<String> summaryDocumentDate;
    private OptionalNullable<Integer> totalBillingDocuments;
    private OptionalNullable<Double> totalGrossAmountBillingCurrency;
    private OptionalNullable<Double> totalNetAmountBillingCurrency;
    private OptionalNullable<Integer> totalSummaryDocuments;
    private OptionalNullable<Double> totalVATAmountBillingCurrency;

    /**
     * Default constructor.
     */
    public InvoicesSummaries() {
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountPaid  Double value for amountPaid.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalGrossAmountBillingCurrency  Double value for totalGrossAmountBillingCurrency.
     * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
     * @param  totalSummaryDocuments  Integer value for totalSummaryDocuments.
     * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
     */
    public InvoicesSummaries(
            Double amountDue,
            Double amountNotOverdue,
            Double amountOverdue,
            Double amountPaid,
            String billingCurrencyCode,
            String billingCurrencySymbol,
            Double outstandingBalance,
            String paymentDueDate,
            String summaryDocumentDate,
            Integer totalBillingDocuments,
            Double totalGrossAmountBillingCurrency,
            Double totalNetAmountBillingCurrency,
            Integer totalSummaryDocuments,
            Double totalVATAmountBillingCurrency) {
        this.amountDue = OptionalNullable.of(amountDue);
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
        this.amountOverdue = OptionalNullable.of(amountOverdue);
        this.amountPaid = OptionalNullable.of(amountPaid);
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
        this.totalGrossAmountBillingCurrency = OptionalNullable.of(totalGrossAmountBillingCurrency);
        this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
        this.totalSummaryDocuments = OptionalNullable.of(totalSummaryDocuments);
        this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  amountPaid  Double value for amountPaid.
     * @param  billingCurrencyCode  String value for billingCurrencyCode.
     * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  summaryDocumentDate  String value for summaryDocumentDate.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalGrossAmountBillingCurrency  Double value for totalGrossAmountBillingCurrency.
     * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
     * @param  totalSummaryDocuments  Integer value for totalSummaryDocuments.
     * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
     */

    protected InvoicesSummaries(OptionalNullable<Double> amountDue,
            OptionalNullable<Double> amountNotOverdue, OptionalNullable<Double> amountOverdue,
            OptionalNullable<Double> amountPaid, OptionalNullable<String> billingCurrencyCode,
            OptionalNullable<String> billingCurrencySymbol,
            OptionalNullable<Double> outstandingBalance, OptionalNullable<String> paymentDueDate,
            OptionalNullable<String> summaryDocumentDate,
            OptionalNullable<Integer> totalBillingDocuments,
            OptionalNullable<Double> totalGrossAmountBillingCurrency,
            OptionalNullable<Double> totalNetAmountBillingCurrency,
            OptionalNullable<Integer> totalSummaryDocuments,
            OptionalNullable<Double> totalVATAmountBillingCurrency) {
        this.amountDue = amountDue;
        this.amountNotOverdue = amountNotOverdue;
        this.amountOverdue = amountOverdue;
        this.amountPaid = amountPaid;
        this.billingCurrencyCode = billingCurrencyCode;
        this.billingCurrencySymbol = billingCurrencySymbol;
        this.outstandingBalance = outstandingBalance;
        this.paymentDueDate = paymentDueDate;
        this.summaryDocumentDate = summaryDocumentDate;
        this.totalBillingDocuments = totalBillingDocuments;
        this.totalGrossAmountBillingCurrency = totalGrossAmountBillingCurrency;
        this.totalNetAmountBillingCurrency = totalNetAmountBillingCurrency;
        this.totalSummaryDocuments = totalSummaryDocuments;
        this.totalVATAmountBillingCurrency = totalVATAmountBillingCurrency;
    }

    /**
     * Internal Getter for AmountDue.
     * Amount due from last summary document date.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountDue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountDue() {
        return this.amountDue;
    }

    /**
     * Getter for AmountDue.
     * Amount due from last summary document date.
     * @return Returns the Double
     */
    public Double getAmountDue() {
        return OptionalNullable.getFrom(amountDue);
    }

    /**
     * Setter for AmountDue.
     * Amount due from last summary document date.
     * @param amountDue Value for Double
     */
    @JsonSetter("AmountDue")
    public void setAmountDue(Double amountDue) {
        this.amountDue = OptionalNullable.of(amountDue);
    }

    /**
     * UnSetter for AmountDue.
     * Amount due from last summary document date.
     */
    public void unsetAmountDue() {
        amountDue = null;
    }

    /**
     * Internal Getter for AmountNotOverdue.
     * Amount that are due from past summary documents.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountNotOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountNotOverdue() {
        return this.amountNotOverdue;
    }

    /**
     * Getter for AmountNotOverdue.
     * Amount that are due from past summary documents.
     * @return Returns the Double
     */
    public Double getAmountNotOverdue() {
        return OptionalNullable.getFrom(amountNotOverdue);
    }

    /**
     * Setter for AmountNotOverdue.
     * Amount that are due from past summary documents.
     * @param amountNotOverdue Value for Double
     */
    @JsonSetter("AmountNotOverdue")
    public void setAmountNotOverdue(Double amountNotOverdue) {
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
    }

    /**
     * UnSetter for AmountNotOverdue.
     * Amount that are due from past summary documents.
     */
    public void unsetAmountNotOverdue() {
        amountNotOverdue = null;
    }

    /**
     * Internal Getter for AmountOverdue.
     * Amount that are overdue from past summary documents.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdue() {
        return this.amountOverdue;
    }

    /**
     * Getter for AmountOverdue.
     * Amount that are overdue from past summary documents.
     * @return Returns the Double
     */
    public Double getAmountOverdue() {
        return OptionalNullable.getFrom(amountOverdue);
    }

    /**
     * Setter for AmountOverdue.
     * Amount that are overdue from past summary documents.
     * @param amountOverdue Value for Double
     */
    @JsonSetter("AmountOverdue")
    public void setAmountOverdue(Double amountOverdue) {
        this.amountOverdue = OptionalNullable.of(amountOverdue);
    }

    /**
     * UnSetter for AmountOverdue.
     * Amount that are overdue from past summary documents.
     */
    public void unsetAmountOverdue() {
        amountOverdue = null;
    }

    /**
     * Internal Getter for AmountPaid.
     * Total amount paid in billing currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountPaid")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountPaid() {
        return this.amountPaid;
    }

    /**
     * Getter for AmountPaid.
     * Total amount paid in billing currency.
     * @return Returns the Double
     */
    public Double getAmountPaid() {
        return OptionalNullable.getFrom(amountPaid);
    }

    /**
     * Setter for AmountPaid.
     * Total amount paid in billing currency.
     * @param amountPaid Value for Double
     */
    @JsonSetter("AmountPaid")
    public void setAmountPaid(Double amountPaid) {
        this.amountPaid = OptionalNullable.of(amountPaid);
    }

    /**
     * UnSetter for AmountPaid.
     * Total amount paid in billing currency.
     */
    public void unsetAmountPaid() {
        amountPaid = null;
    }

    /**
     * Internal Getter for BillingCurrencyCode.
     * Billing currency ISO code.
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencyCode() {
        return this.billingCurrencyCode;
    }

    /**
     * Getter for BillingCurrencyCode.
     * Billing currency ISO code.
     * @return Returns the String
     */
    public String getBillingCurrencyCode() {
        return OptionalNullable.getFrom(billingCurrencyCode);
    }

    /**
     * Setter for BillingCurrencyCode.
     * Billing currency ISO code.
     * @param billingCurrencyCode Value for String
     */
    @JsonSetter("BillingCurrencyCode")
    public void setBillingCurrencyCode(String billingCurrencyCode) {
        this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
    }

    /**
     * UnSetter for BillingCurrencyCode.
     * Billing currency ISO code.
     */
    public void unsetBillingCurrencyCode() {
        billingCurrencyCode = null;
    }

    /**
     * Internal Getter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("BillingCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBillingCurrencySymbol() {
        return this.billingCurrencySymbol;
    }

    /**
     * Getter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @return Returns the String
     */
    public String getBillingCurrencySymbol() {
        return OptionalNullable.getFrom(billingCurrencySymbol);
    }

    /**
     * Setter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     * @param billingCurrencySymbol Value for String
     */
    @JsonSetter("BillingCurrencySymbol")
    public void setBillingCurrencySymbol(String billingCurrencySymbol) {
        this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
    }

    /**
     * UnSetter for BillingCurrencySymbol.
     * Billing currency symbol. Example: €
     */
    public void unsetBillingCurrencySymbol() {
        billingCurrencySymbol = null;
    }

    /**
     * Internal Getter for OutstandingBalance.
     * Current outstanding balance amount
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingBalance() {
        return this.outstandingBalance;
    }

    /**
     * Getter for OutstandingBalance.
     * Current outstanding balance amount
     * @return Returns the Double
     */
    public Double getOutstandingBalance() {
        return OptionalNullable.getFrom(outstandingBalance);
    }

    /**
     * Setter for OutstandingBalance.
     * Current outstanding balance amount
     * @param outstandingBalance Value for Double
     */
    @JsonSetter("OutstandingBalance")
    public void setOutstandingBalance(Double outstandingBalance) {
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
    }

    /**
     * UnSetter for OutstandingBalance.
     * Current outstanding balance amount
     */
    public void unsetOutstandingBalance() {
        outstandingBalance = null;
    }

    /**
     * Internal Getter for PaymentDueDate.
     * Payment due date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentDueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentDueDate() {
        return this.paymentDueDate;
    }

    /**
     * Getter for PaymentDueDate.
     * Payment due date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getPaymentDueDate() {
        return OptionalNullable.getFrom(paymentDueDate);
    }

    /**
     * Setter for PaymentDueDate.
     * Payment due date. Format: YYYYMMDD
     * @param paymentDueDate Value for String
     */
    @JsonSetter("PaymentDueDate")
    public void setPaymentDueDate(String paymentDueDate) {
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
    }

    /**
     * UnSetter for PaymentDueDate.
     * Payment due date. Format: YYYYMMDD
     */
    public void unsetPaymentDueDate() {
        paymentDueDate = null;
    }

    /**
     * Internal Getter for SummaryDocumentDate.
     * Summary document date. Format: YYYYMMDD
     * @return Returns the Internal String
     */
    @JsonGetter("SummaryDocumentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSummaryDocumentDate() {
        return this.summaryDocumentDate;
    }

    /**
     * Getter for SummaryDocumentDate.
     * Summary document date. Format: YYYYMMDD
     * @return Returns the String
     */
    public String getSummaryDocumentDate() {
        return OptionalNullable.getFrom(summaryDocumentDate);
    }

    /**
     * Setter for SummaryDocumentDate.
     * Summary document date. Format: YYYYMMDD
     * @param summaryDocumentDate Value for String
     */
    @JsonSetter("SummaryDocumentDate")
    public void setSummaryDocumentDate(String summaryDocumentDate) {
        this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
    }

    /**
     * UnSetter for SummaryDocumentDate.
     * Summary document date. Format: YYYYMMDD
     */
    public void unsetSummaryDocumentDate() {
        summaryDocumentDate = null;
    }

    /**
     * Internal Getter for TotalBillingDocuments.
     * Total number of invoices generated on this date.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBillingDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBillingDocuments() {
        return this.totalBillingDocuments;
    }

    /**
     * Getter for TotalBillingDocuments.
     * Total number of invoices generated on this date.
     * @return Returns the Integer
     */
    public Integer getTotalBillingDocuments() {
        return OptionalNullable.getFrom(totalBillingDocuments);
    }

    /**
     * Setter for TotalBillingDocuments.
     * Total number of invoices generated on this date.
     * @param totalBillingDocuments Value for Integer
     */
    @JsonSetter("TotalBillingDocuments")
    public void setTotalBillingDocuments(Integer totalBillingDocuments) {
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
    }

    /**
     * UnSetter for TotalBillingDocuments.
     * Total number of invoices generated on this date.
     */
    public void unsetTotalBillingDocuments() {
        totalBillingDocuments = null;
    }

    /**
     * Internal Getter for TotalGrossAmountBillingCurrency.
     * Total gross amount in billing currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalGrossAmountBillingCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalGrossAmountBillingCurrency() {
        return this.totalGrossAmountBillingCurrency;
    }

    /**
     * Getter for TotalGrossAmountBillingCurrency.
     * Total gross amount in billing currency.
     * @return Returns the Double
     */
    public Double getTotalGrossAmountBillingCurrency() {
        return OptionalNullable.getFrom(totalGrossAmountBillingCurrency);
    }

    /**
     * Setter for TotalGrossAmountBillingCurrency.
     * Total gross amount in billing currency.
     * @param totalGrossAmountBillingCurrency Value for Double
     */
    @JsonSetter("TotalGrossAmountBillingCurrency")
    public void setTotalGrossAmountBillingCurrency(Double totalGrossAmountBillingCurrency) {
        this.totalGrossAmountBillingCurrency = OptionalNullable.of(totalGrossAmountBillingCurrency);
    }

    /**
     * UnSetter for TotalGrossAmountBillingCurrency.
     * Total gross amount in billing currency.
     */
    public void unsetTotalGrossAmountBillingCurrency() {
        totalGrossAmountBillingCurrency = null;
    }

    /**
     * Internal Getter for TotalNetAmountBillingCurrency.
     * Total net amount in billing currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalNetAmountBillingCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalNetAmountBillingCurrency() {
        return this.totalNetAmountBillingCurrency;
    }

    /**
     * Getter for TotalNetAmountBillingCurrency.
     * Total net amount in billing currency.
     * @return Returns the Double
     */
    public Double getTotalNetAmountBillingCurrency() {
        return OptionalNullable.getFrom(totalNetAmountBillingCurrency);
    }

    /**
     * Setter for TotalNetAmountBillingCurrency.
     * Total net amount in billing currency.
     * @param totalNetAmountBillingCurrency Value for Double
     */
    @JsonSetter("TotalNetAmountBillingCurrency")
    public void setTotalNetAmountBillingCurrency(Double totalNetAmountBillingCurrency) {
        this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
    }

    /**
     * UnSetter for TotalNetAmountBillingCurrency.
     * Total net amount in billing currency.
     */
    public void unsetTotalNetAmountBillingCurrency() {
        totalNetAmountBillingCurrency = null;
    }

    /**
     * Internal Getter for TotalSummaryDocuments.
     * Total number of summary documents generated on this date.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalSummaryDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalSummaryDocuments() {
        return this.totalSummaryDocuments;
    }

    /**
     * Getter for TotalSummaryDocuments.
     * Total number of summary documents generated on this date.
     * @return Returns the Integer
     */
    public Integer getTotalSummaryDocuments() {
        return OptionalNullable.getFrom(totalSummaryDocuments);
    }

    /**
     * Setter for TotalSummaryDocuments.
     * Total number of summary documents generated on this date.
     * @param totalSummaryDocuments Value for Integer
     */
    @JsonSetter("TotalSummaryDocuments")
    public void setTotalSummaryDocuments(Integer totalSummaryDocuments) {
        this.totalSummaryDocuments = OptionalNullable.of(totalSummaryDocuments);
    }

    /**
     * UnSetter for TotalSummaryDocuments.
     * Total number of summary documents generated on this date.
     */
    public void unsetTotalSummaryDocuments() {
        totalSummaryDocuments = null;
    }

    /**
     * Internal Getter for TotalVATAmountBillingCurrency.
     * Total VAT amount in billing currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVATAmountBillingCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVATAmountBillingCurrency() {
        return this.totalVATAmountBillingCurrency;
    }

    /**
     * Getter for TotalVATAmountBillingCurrency.
     * Total VAT amount in billing currency.
     * @return Returns the Double
     */
    public Double getTotalVATAmountBillingCurrency() {
        return OptionalNullable.getFrom(totalVATAmountBillingCurrency);
    }

    /**
     * Setter for TotalVATAmountBillingCurrency.
     * Total VAT amount in billing currency.
     * @param totalVATAmountBillingCurrency Value for Double
     */
    @JsonSetter("TotalVATAmountBillingCurrency")
    public void setTotalVATAmountBillingCurrency(Double totalVATAmountBillingCurrency) {
        this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
    }

    /**
     * UnSetter for TotalVATAmountBillingCurrency.
     * Total VAT amount in billing currency.
     */
    public void unsetTotalVATAmountBillingCurrency() {
        totalVATAmountBillingCurrency = null;
    }

    /**
     * Converts this InvoicesSummaries into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InvoicesSummaries [" + "amountDue=" + amountDue + ", amountNotOverdue="
                + amountNotOverdue + ", amountOverdue=" + amountOverdue + ", amountPaid="
                + amountPaid + ", billingCurrencyCode=" + billingCurrencyCode
                + ", billingCurrencySymbol=" + billingCurrencySymbol + ", outstandingBalance="
                + outstandingBalance + ", paymentDueDate=" + paymentDueDate
                + ", summaryDocumentDate=" + summaryDocumentDate + ", totalBillingDocuments="
                + totalBillingDocuments + ", totalGrossAmountBillingCurrency="
                + totalGrossAmountBillingCurrency + ", totalNetAmountBillingCurrency="
                + totalNetAmountBillingCurrency + ", totalSummaryDocuments=" + totalSummaryDocuments
                + ", totalVATAmountBillingCurrency=" + totalVATAmountBillingCurrency + "]";
    }

    /**
     * Builds a new {@link InvoicesSummaries.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InvoicesSummaries.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.amountDue = internalGetAmountDue();
        builder.amountNotOverdue = internalGetAmountNotOverdue();
        builder.amountOverdue = internalGetAmountOverdue();
        builder.amountPaid = internalGetAmountPaid();
        builder.billingCurrencyCode = internalGetBillingCurrencyCode();
        builder.billingCurrencySymbol = internalGetBillingCurrencySymbol();
        builder.outstandingBalance = internalGetOutstandingBalance();
        builder.paymentDueDate = internalGetPaymentDueDate();
        builder.summaryDocumentDate = internalGetSummaryDocumentDate();
        builder.totalBillingDocuments = internalGetTotalBillingDocuments();
        builder.totalGrossAmountBillingCurrency = internalGetTotalGrossAmountBillingCurrency();
        builder.totalNetAmountBillingCurrency = internalGetTotalNetAmountBillingCurrency();
        builder.totalSummaryDocuments = internalGetTotalSummaryDocuments();
        builder.totalVATAmountBillingCurrency = internalGetTotalVATAmountBillingCurrency();
        return builder;
    }

    /**
     * Class to build instances of {@link InvoicesSummaries}.
     */
    public static class Builder {
        private OptionalNullable<Double> amountDue;
        private OptionalNullable<Double> amountNotOverdue;
        private OptionalNullable<Double> amountOverdue;
        private OptionalNullable<Double> amountPaid;
        private OptionalNullable<String> billingCurrencyCode;
        private OptionalNullable<String> billingCurrencySymbol;
        private OptionalNullable<Double> outstandingBalance;
        private OptionalNullable<String> paymentDueDate;
        private OptionalNullable<String> summaryDocumentDate;
        private OptionalNullable<Integer> totalBillingDocuments;
        private OptionalNullable<Double> totalGrossAmountBillingCurrency;
        private OptionalNullable<Double> totalNetAmountBillingCurrency;
        private OptionalNullable<Integer> totalSummaryDocuments;
        private OptionalNullable<Double> totalVATAmountBillingCurrency;



        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = OptionalNullable.of(amountDue);
            return this;
        }

        /**
         * UnSetter for amountDue.
         * @return Builder
         */
        public Builder unsetAmountDue() {
            amountDue = null;
            return this;
        }

        /**
         * Setter for amountNotOverdue.
         * @param  amountNotOverdue  Double value for amountNotOverdue.
         * @return Builder
         */
        public Builder amountNotOverdue(Double amountNotOverdue) {
            this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
            return this;
        }

        /**
         * UnSetter for amountNotOverdue.
         * @return Builder
         */
        public Builder unsetAmountNotOverdue() {
            amountNotOverdue = null;
            return this;
        }

        /**
         * Setter for amountOverdue.
         * @param  amountOverdue  Double value for amountOverdue.
         * @return Builder
         */
        public Builder amountOverdue(Double amountOverdue) {
            this.amountOverdue = OptionalNullable.of(amountOverdue);
            return this;
        }

        /**
         * UnSetter for amountOverdue.
         * @return Builder
         */
        public Builder unsetAmountOverdue() {
            amountOverdue = null;
            return this;
        }

        /**
         * Setter for amountPaid.
         * @param  amountPaid  Double value for amountPaid.
         * @return Builder
         */
        public Builder amountPaid(Double amountPaid) {
            this.amountPaid = OptionalNullable.of(amountPaid);
            return this;
        }

        /**
         * UnSetter for amountPaid.
         * @return Builder
         */
        public Builder unsetAmountPaid() {
            amountPaid = null;
            return this;
        }

        /**
         * Setter for billingCurrencyCode.
         * @param  billingCurrencyCode  String value for billingCurrencyCode.
         * @return Builder
         */
        public Builder billingCurrencyCode(String billingCurrencyCode) {
            this.billingCurrencyCode = OptionalNullable.of(billingCurrencyCode);
            return this;
        }

        /**
         * UnSetter for billingCurrencyCode.
         * @return Builder
         */
        public Builder unsetBillingCurrencyCode() {
            billingCurrencyCode = null;
            return this;
        }

        /**
         * Setter for billingCurrencySymbol.
         * @param  billingCurrencySymbol  String value for billingCurrencySymbol.
         * @return Builder
         */
        public Builder billingCurrencySymbol(String billingCurrencySymbol) {
            this.billingCurrencySymbol = OptionalNullable.of(billingCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for billingCurrencySymbol.
         * @return Builder
         */
        public Builder unsetBillingCurrencySymbol() {
            billingCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for outstandingBalance.
         * @param  outstandingBalance  Double value for outstandingBalance.
         * @return Builder
         */
        public Builder outstandingBalance(Double outstandingBalance) {
            this.outstandingBalance = OptionalNullable.of(outstandingBalance);
            return this;
        }

        /**
         * UnSetter for outstandingBalance.
         * @return Builder
         */
        public Builder unsetOutstandingBalance() {
            outstandingBalance = null;
            return this;
        }

        /**
         * Setter for paymentDueDate.
         * @param  paymentDueDate  String value for paymentDueDate.
         * @return Builder
         */
        public Builder paymentDueDate(String paymentDueDate) {
            this.paymentDueDate = OptionalNullable.of(paymentDueDate);
            return this;
        }

        /**
         * UnSetter for paymentDueDate.
         * @return Builder
         */
        public Builder unsetPaymentDueDate() {
            paymentDueDate = null;
            return this;
        }

        /**
         * Setter for summaryDocumentDate.
         * @param  summaryDocumentDate  String value for summaryDocumentDate.
         * @return Builder
         */
        public Builder summaryDocumentDate(String summaryDocumentDate) {
            this.summaryDocumentDate = OptionalNullable.of(summaryDocumentDate);
            return this;
        }

        /**
         * UnSetter for summaryDocumentDate.
         * @return Builder
         */
        public Builder unsetSummaryDocumentDate() {
            summaryDocumentDate = null;
            return this;
        }

        /**
         * Setter for totalBillingDocuments.
         * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
         * @return Builder
         */
        public Builder totalBillingDocuments(Integer totalBillingDocuments) {
            this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
            return this;
        }

        /**
         * UnSetter for totalBillingDocuments.
         * @return Builder
         */
        public Builder unsetTotalBillingDocuments() {
            totalBillingDocuments = null;
            return this;
        }

        /**
         * Setter for totalGrossAmountBillingCurrency.
         * @param  totalGrossAmountBillingCurrency  Double value for
         *         totalGrossAmountBillingCurrency.
         * @return Builder
         */
        public Builder totalGrossAmountBillingCurrency(Double totalGrossAmountBillingCurrency) {
            this.totalGrossAmountBillingCurrency =
                    OptionalNullable.of(totalGrossAmountBillingCurrency);
            return this;
        }

        /**
         * UnSetter for totalGrossAmountBillingCurrency.
         * @return Builder
         */
        public Builder unsetTotalGrossAmountBillingCurrency() {
            totalGrossAmountBillingCurrency = null;
            return this;
        }

        /**
         * Setter for totalNetAmountBillingCurrency.
         * @param  totalNetAmountBillingCurrency  Double value for totalNetAmountBillingCurrency.
         * @return Builder
         */
        public Builder totalNetAmountBillingCurrency(Double totalNetAmountBillingCurrency) {
            this.totalNetAmountBillingCurrency = OptionalNullable.of(totalNetAmountBillingCurrency);
            return this;
        }

        /**
         * UnSetter for totalNetAmountBillingCurrency.
         * @return Builder
         */
        public Builder unsetTotalNetAmountBillingCurrency() {
            totalNetAmountBillingCurrency = null;
            return this;
        }

        /**
         * Setter for totalSummaryDocuments.
         * @param  totalSummaryDocuments  Integer value for totalSummaryDocuments.
         * @return Builder
         */
        public Builder totalSummaryDocuments(Integer totalSummaryDocuments) {
            this.totalSummaryDocuments = OptionalNullable.of(totalSummaryDocuments);
            return this;
        }

        /**
         * UnSetter for totalSummaryDocuments.
         * @return Builder
         */
        public Builder unsetTotalSummaryDocuments() {
            totalSummaryDocuments = null;
            return this;
        }

        /**
         * Setter for totalVATAmountBillingCurrency.
         * @param  totalVATAmountBillingCurrency  Double value for totalVATAmountBillingCurrency.
         * @return Builder
         */
        public Builder totalVATAmountBillingCurrency(Double totalVATAmountBillingCurrency) {
            this.totalVATAmountBillingCurrency = OptionalNullable.of(totalVATAmountBillingCurrency);
            return this;
        }

        /**
         * UnSetter for totalVATAmountBillingCurrency.
         * @return Builder
         */
        public Builder unsetTotalVATAmountBillingCurrency() {
            totalVATAmountBillingCurrency = null;
            return this;
        }

        /**
         * Builds a new {@link InvoicesSummaries} object using the set fields.
         * @return {@link InvoicesSummaries}
         */
        public InvoicesSummaries build() {
            return new InvoicesSummaries(amountDue, amountNotOverdue, amountOverdue, amountPaid,
                    billingCurrencyCode, billingCurrencySymbol, outstandingBalance, paymentDueDate,
                    summaryDocumentDate, totalBillingDocuments, totalGrossAmountBillingCurrency,
                    totalNetAmountBillingCurrency, totalSummaryDocuments,
                    totalVATAmountBillingCurrency);
        }
    }
}
