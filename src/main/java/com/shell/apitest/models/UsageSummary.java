/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for UsageSummary type.
 */
public class UsageSummary {
    private OptionalNullable<String> date;
    private OptionalNullable<Integer> productId;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<Boolean> isFuelProduct;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> siteGroupName;
    private OptionalNullable<Double> totalVolume;
    private OptionalNullable<Double> totalGross;
    private OptionalNullable<Double> totalNet;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Integer> productGroupID;
    private OptionalNullable<String> productGroupName;

    /**
     * Default constructor.
     */
    public UsageSummary() {
    }

    /**
     * Initialization constructor.
     * @param  date  String value for date.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  isFuelProduct  Boolean value for isFuelProduct.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  totalVolume  Double value for totalVolume.
     * @param  totalGross  Double value for totalGross.
     * @param  totalNet  Double value for totalNet.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  productGroupID  Integer value for productGroupID.
     * @param  productGroupName  String value for productGroupName.
     */
    public UsageSummary(
            String date,
            Integer productId,
            String productCode,
            String productName,
            Boolean isFuelProduct,
            Integer siteGroupId,
            String siteGroupName,
            Double totalVolume,
            Double totalGross,
            Double totalNet,
            String currencyCode,
            String currencySymbol,
            Integer productGroupID,
            String productGroupName) {
        this.date = OptionalNullable.of(date);
        this.productId = OptionalNullable.of(productId);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.isFuelProduct = OptionalNullable.of(isFuelProduct);
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.siteGroupName = OptionalNullable.of(siteGroupName);
        this.totalVolume = OptionalNullable.of(totalVolume);
        this.totalGross = OptionalNullable.of(totalGross);
        this.totalNet = OptionalNullable.of(totalNet);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.productGroupID = OptionalNullable.of(productGroupID);
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * Initialization constructor.
     * @param  date  String value for date.
     * @param  productId  Integer value for productId.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  isFuelProduct  Boolean value for isFuelProduct.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  totalVolume  Double value for totalVolume.
     * @param  totalGross  Double value for totalGross.
     * @param  totalNet  Double value for totalNet.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  productGroupID  Integer value for productGroupID.
     * @param  productGroupName  String value for productGroupName.
     */

    protected UsageSummary(OptionalNullable<String> date, OptionalNullable<Integer> productId,
            OptionalNullable<String> productCode, OptionalNullable<String> productName,
            OptionalNullable<Boolean> isFuelProduct, OptionalNullable<Integer> siteGroupId,
            OptionalNullable<String> siteGroupName, OptionalNullable<Double> totalVolume,
            OptionalNullable<Double> totalGross, OptionalNullable<Double> totalNet,
            OptionalNullable<String> currencyCode, OptionalNullable<String> currencySymbol,
            OptionalNullable<Integer> productGroupID, OptionalNullable<String> productGroupName) {
        this.date = date;
        this.productId = productId;
        this.productCode = productCode;
        this.productName = productName;
        this.isFuelProduct = isFuelProduct;
        this.siteGroupId = siteGroupId;
        this.siteGroupName = siteGroupName;
        this.totalVolume = totalVolume;
        this.totalGross = totalGross;
        this.totalNet = totalNet;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.productGroupID = productGroupID;
        this.productGroupName = productGroupName;
    }

    /**
     * Internal Getter for Date.
     * Transaction date. The records will be sorted by this field in ascending order. Format:
     * yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("Date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDate() {
        return this.date;
    }

    /**
     * Getter for Date.
     * Transaction date. The records will be sorted by this field in ascending order. Format:
     * yyyyMMdd
     * @return Returns the String
     */
    public String getDate() {
        return OptionalNullable.getFrom(date);
    }

    /**
     * Setter for Date.
     * Transaction date. The records will be sorted by this field in ascending order. Format:
     * yyyyMMdd
     * @param date Value for String
     */
    @JsonSetter("Date")
    public void setDate(String date) {
        this.date = OptionalNullable.of(date);
    }

    /**
     * UnSetter for Date.
     * Transaction date. The records will be sorted by this field in ascending order. Format:
     * yyyyMMdd
     */
    public void unsetDate() {
        date = null;
    }

    /**
     * Internal Getter for ProductId.
     * Product Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductId() {
        return this.productId;
    }

    /**
     * Getter for ProductId.
     * Product Id
     * @return Returns the Integer
     */
    public Integer getProductId() {
        return OptionalNullable.getFrom(productId);
    }

    /**
     * Setter for ProductId.
     * Product Id
     * @param productId Value for Integer
     */
    @JsonSetter("ProductId")
    public void setProductId(Integer productId) {
        this.productId = OptionalNullable.of(productId);
    }

    /**
     * UnSetter for ProductId.
     * Product Id
     */
    public void unsetProductId() {
        productId = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Client Product code
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Client Product code
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Client Product code
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Client Product code
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * Product name in English
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * Product name in English
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * Product name in English
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * Product name in English
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for IsFuelProduct.
     * Whether the product is fuel or non-fuel
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsFuelProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsFuelProduct() {
        return this.isFuelProduct;
    }

    /**
     * Getter for IsFuelProduct.
     * Whether the product is fuel or non-fuel
     * @return Returns the Boolean
     */
    public Boolean getIsFuelProduct() {
        return OptionalNullable.getFrom(isFuelProduct);
    }

    /**
     * Setter for IsFuelProduct.
     * Whether the product is fuel or non-fuel
     * @param isFuelProduct Value for Boolean
     */
    @JsonSetter("IsFuelProduct")
    public void setIsFuelProduct(Boolean isFuelProduct) {
        this.isFuelProduct = OptionalNullable.of(isFuelProduct);
    }

    /**
     * UnSetter for IsFuelProduct.
     * Whether the product is fuel or non-fuel
     */
    public void unsetIsFuelProduct() {
        isFuelProduct = null;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Site Group Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Site Group Id
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for SiteGroupName.
     * Site Group Name
     * @return Returns the Internal String
     */
    @JsonGetter("SiteGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteGroupName() {
        return this.siteGroupName;
    }

    /**
     * Getter for SiteGroupName.
     * Site Group Name
     * @return Returns the String
     */
    public String getSiteGroupName() {
        return OptionalNullable.getFrom(siteGroupName);
    }

    /**
     * Setter for SiteGroupName.
     * Site Group Name
     * @param siteGroupName Value for String
     */
    @JsonSetter("SiteGroupName")
    public void setSiteGroupName(String siteGroupName) {
        this.siteGroupName = OptionalNullable.of(siteGroupName);
    }

    /**
     * UnSetter for SiteGroupName.
     * Site Group Name
     */
    public void unsetSiteGroupName() {
        siteGroupName = null;
    }

    /**
     * Internal Getter for TotalVolume.
     * Total Volume
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalVolume() {
        return this.totalVolume;
    }

    /**
     * Getter for TotalVolume.
     * Total Volume
     * @return Returns the Double
     */
    public Double getTotalVolume() {
        return OptionalNullable.getFrom(totalVolume);
    }

    /**
     * Setter for TotalVolume.
     * Total Volume
     * @param totalVolume Value for Double
     */
    @JsonSetter("TotalVolume")
    public void setTotalVolume(Double totalVolume) {
        this.totalVolume = OptionalNullable.of(totalVolume);
    }

    /**
     * UnSetter for TotalVolume.
     * Total Volume
     */
    public void unsetTotalVolume() {
        totalVolume = null;
    }

    /**
     * Internal Getter for TotalGross.
     * Total Gross in Customer Currency
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalGross() {
        return this.totalGross;
    }

    /**
     * Getter for TotalGross.
     * Total Gross in Customer Currency
     * @return Returns the Double
     */
    public Double getTotalGross() {
        return OptionalNullable.getFrom(totalGross);
    }

    /**
     * Setter for TotalGross.
     * Total Gross in Customer Currency
     * @param totalGross Value for Double
     */
    @JsonSetter("TotalGross")
    public void setTotalGross(Double totalGross) {
        this.totalGross = OptionalNullable.of(totalGross);
    }

    /**
     * UnSetter for TotalGross.
     * Total Gross in Customer Currency
     */
    public void unsetTotalGross() {
        totalGross = null;
    }

    /**
     * Internal Getter for TotalNet.
     * Total Net in Customer Currency
     * @return Returns the Internal Double
     */
    @JsonGetter("TotalNet")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTotalNet() {
        return this.totalNet;
    }

    /**
     * Getter for TotalNet.
     * Total Net in Customer Currency
     * @return Returns the Double
     */
    public Double getTotalNet() {
        return OptionalNullable.getFrom(totalNet);
    }

    /**
     * Setter for TotalNet.
     * Total Net in Customer Currency
     * @param totalNet Value for Double
     */
    @JsonSetter("TotalNet")
    public void setTotalNet(Double totalNet) {
        this.totalNet = OptionalNullable.of(totalNet);
    }

    /**
     * UnSetter for TotalNet.
     * Total Net in Customer Currency
     */
    public void unsetTotalNet() {
        totalNet = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * Customer Currency Code
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * Customer Currency Code
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * Customer Currency Code
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * Customer Currency Code
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Customer Currency Symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Customer Currency Symbol
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Customer Currency Symbol
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Customer Currency Symbol
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for ProductGroupID.
     * Product group ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductGroupID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductGroupID() {
        return this.productGroupID;
    }

    /**
     * Getter for ProductGroupID.
     * Product group ID
     * @return Returns the Integer
     */
    public Integer getProductGroupID() {
        return OptionalNullable.getFrom(productGroupID);
    }

    /**
     * Setter for ProductGroupID.
     * Product group ID
     * @param productGroupID Value for Integer
     */
    @JsonSetter("ProductGroupID")
    public void setProductGroupID(Integer productGroupID) {
        this.productGroupID = OptionalNullable.of(productGroupID);
    }

    /**
     * UnSetter for ProductGroupID.
     * Product group ID
     */
    public void unsetProductGroupID() {
        productGroupID = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * Product group Name
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * Product group Name
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * Product group Name
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * Product group Name
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Converts this UsageSummary into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UsageSummary [" + "date=" + date + ", productId=" + productId + ", productCode="
                + productCode + ", productName=" + productName + ", isFuelProduct=" + isFuelProduct
                + ", siteGroupId=" + siteGroupId + ", siteGroupName=" + siteGroupName
                + ", totalVolume=" + totalVolume + ", totalGross=" + totalGross + ", totalNet="
                + totalNet + ", currencyCode=" + currencyCode + ", currencySymbol=" + currencySymbol
                + ", productGroupID=" + productGroupID + ", productGroupName=" + productGroupName
                + "]";
    }

    /**
     * Builds a new {@link UsageSummary.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UsageSummary.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.date = internalGetDate();
        builder.productId = internalGetProductId();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.isFuelProduct = internalGetIsFuelProduct();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.siteGroupName = internalGetSiteGroupName();
        builder.totalVolume = internalGetTotalVolume();
        builder.totalGross = internalGetTotalGross();
        builder.totalNet = internalGetTotalNet();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.productGroupID = internalGetProductGroupID();
        builder.productGroupName = internalGetProductGroupName();
        return builder;
    }

    /**
     * Class to build instances of {@link UsageSummary}.
     */
    public static class Builder {
        private OptionalNullable<String> date;
        private OptionalNullable<Integer> productId;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<Boolean> isFuelProduct;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> siteGroupName;
        private OptionalNullable<Double> totalVolume;
        private OptionalNullable<Double> totalGross;
        private OptionalNullable<Double> totalNet;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Integer> productGroupID;
        private OptionalNullable<String> productGroupName;



        /**
         * Setter for date.
         * @param  date  String value for date.
         * @return Builder
         */
        public Builder date(String date) {
            this.date = OptionalNullable.of(date);
            return this;
        }

        /**
         * UnSetter for date.
         * @return Builder
         */
        public Builder unsetDate() {
            date = null;
            return this;
        }

        /**
         * Setter for productId.
         * @param  productId  Integer value for productId.
         * @return Builder
         */
        public Builder productId(Integer productId) {
            this.productId = OptionalNullable.of(productId);
            return this;
        }

        /**
         * UnSetter for productId.
         * @return Builder
         */
        public Builder unsetProductId() {
            productId = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for isFuelProduct.
         * @param  isFuelProduct  Boolean value for isFuelProduct.
         * @return Builder
         */
        public Builder isFuelProduct(Boolean isFuelProduct) {
            this.isFuelProduct = OptionalNullable.of(isFuelProduct);
            return this;
        }

        /**
         * UnSetter for isFuelProduct.
         * @return Builder
         */
        public Builder unsetIsFuelProduct() {
            isFuelProduct = null;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for siteGroupName.
         * @param  siteGroupName  String value for siteGroupName.
         * @return Builder
         */
        public Builder siteGroupName(String siteGroupName) {
            this.siteGroupName = OptionalNullable.of(siteGroupName);
            return this;
        }

        /**
         * UnSetter for siteGroupName.
         * @return Builder
         */
        public Builder unsetSiteGroupName() {
            siteGroupName = null;
            return this;
        }

        /**
         * Setter for totalVolume.
         * @param  totalVolume  Double value for totalVolume.
         * @return Builder
         */
        public Builder totalVolume(Double totalVolume) {
            this.totalVolume = OptionalNullable.of(totalVolume);
            return this;
        }

        /**
         * UnSetter for totalVolume.
         * @return Builder
         */
        public Builder unsetTotalVolume() {
            totalVolume = null;
            return this;
        }

        /**
         * Setter for totalGross.
         * @param  totalGross  Double value for totalGross.
         * @return Builder
         */
        public Builder totalGross(Double totalGross) {
            this.totalGross = OptionalNullable.of(totalGross);
            return this;
        }

        /**
         * UnSetter for totalGross.
         * @return Builder
         */
        public Builder unsetTotalGross() {
            totalGross = null;
            return this;
        }

        /**
         * Setter for totalNet.
         * @param  totalNet  Double value for totalNet.
         * @return Builder
         */
        public Builder totalNet(Double totalNet) {
            this.totalNet = OptionalNullable.of(totalNet);
            return this;
        }

        /**
         * UnSetter for totalNet.
         * @return Builder
         */
        public Builder unsetTotalNet() {
            totalNet = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for productGroupID.
         * @param  productGroupID  Integer value for productGroupID.
         * @return Builder
         */
        public Builder productGroupID(Integer productGroupID) {
            this.productGroupID = OptionalNullable.of(productGroupID);
            return this;
        }

        /**
         * UnSetter for productGroupID.
         * @return Builder
         */
        public Builder unsetProductGroupID() {
            productGroupID = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Builds a new {@link UsageSummary} object using the set fields.
         * @return {@link UsageSummary}
         */
        public UsageSummary build() {
            return new UsageSummary(date, productId, productCode, productName, isFuelProduct,
                    siteGroupId, siteGroupName, totalVolume, totalGross, totalNet, currencyCode,
                    currencySymbol, productGroupID, productGroupName);
        }
    }
}
