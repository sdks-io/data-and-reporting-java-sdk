/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for SearchStatementOfAccount type.
 */
public class SearchStatementOfAccount {
    private OptionalNullable<Integer> statementOfAccountId;
    private OptionalNullable<String> soAReferenceNumber;
    private OptionalNullable<String> statementDate;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Double> amountDue;
    private OptionalNullable<Double> amountOverdue;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<String> dueDate;
    private OptionalNullable<String> invoicedOnBehalfOf;
    private OptionalNullable<String> status;
    private OptionalNullable<Double> grossAmountCustomerCurrency;
    private OptionalNullable<String> documentReferenceNumber;

    /**
     * Default constructor.
     */
    public SearchStatementOfAccount() {
    }

    /**
     * Initialization constructor.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  amountDue  Double value for amountDue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  dueDate  String value for dueDate.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  status  String value for status.
     * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
     * @param  documentReferenceNumber  String value for documentReferenceNumber.
     */
    public SearchStatementOfAccount(
            Integer statementOfAccountId,
            String soAReferenceNumber,
            String statementDate,
            Integer payerId,
            String payerNumber,
            Double amountDue,
            Double amountOverdue,
            String currencyCode,
            String currencySymbol,
            String dueDate,
            String invoicedOnBehalfOf,
            String status,
            Double grossAmountCustomerCurrency,
            String documentReferenceNumber) {
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
        this.statementDate = OptionalNullable.of(statementDate);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.amountDue = OptionalNullable.of(amountDue);
        this.amountOverdue = OptionalNullable.of(amountOverdue);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.dueDate = OptionalNullable.of(dueDate);
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
        this.status = OptionalNullable.of(status);
        this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
        this.documentReferenceNumber = OptionalNullable.of(documentReferenceNumber);
    }

    /**
     * Initialization constructor.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  amountDue  Double value for amountDue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  dueDate  String value for dueDate.
     * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
     * @param  status  String value for status.
     * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
     * @param  documentReferenceNumber  String value for documentReferenceNumber.
     */

    protected SearchStatementOfAccount(OptionalNullable<Integer> statementOfAccountId,
            OptionalNullable<String> soAReferenceNumber, OptionalNullable<String> statementDate,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<Double> amountDue, OptionalNullable<Double> amountOverdue,
            OptionalNullable<String> currencyCode, OptionalNullable<String> currencySymbol,
            OptionalNullable<String> dueDate, OptionalNullable<String> invoicedOnBehalfOf,
            OptionalNullable<String> status, OptionalNullable<Double> grossAmountCustomerCurrency,
            OptionalNullable<String> documentReferenceNumber) {
        this.statementOfAccountId = statementOfAccountId;
        this.soAReferenceNumber = soAReferenceNumber;
        this.statementDate = statementDate;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.amountDue = amountDue;
        this.amountOverdue = amountOverdue;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.dueDate = dueDate;
        this.invoicedOnBehalfOf = invoicedOnBehalfOf;
        this.status = status;
        this.grossAmountCustomerCurrency = grossAmountCustomerCurrency;
        this.documentReferenceNumber = documentReferenceNumber;
    }

    /**
     * Internal Getter for StatementOfAccountId.
     * Statement of account identifier
     * @return Returns the Internal Integer
     */
    @JsonGetter("StatementOfAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetStatementOfAccountId() {
        return this.statementOfAccountId;
    }

    /**
     * Getter for StatementOfAccountId.
     * Statement of account identifier
     * @return Returns the Integer
     */
    public Integer getStatementOfAccountId() {
        return OptionalNullable.getFrom(statementOfAccountId);
    }

    /**
     * Setter for StatementOfAccountId.
     * Statement of account identifier
     * @param statementOfAccountId Value for Integer
     */
    @JsonSetter("StatementOfAccountId")
    public void setStatementOfAccountId(Integer statementOfAccountId) {
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
    }

    /**
     * UnSetter for StatementOfAccountId.
     * Statement of account identifier
     */
    public void unsetStatementOfAccountId() {
        statementOfAccountId = null;
    }

    /**
     * Internal Getter for SoAReferenceNumber.
     * Statement of account reference
     * @return Returns the Internal String
     */
    @JsonGetter("SoAReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSoAReferenceNumber() {
        return this.soAReferenceNumber;
    }

    /**
     * Getter for SoAReferenceNumber.
     * Statement of account reference
     * @return Returns the String
     */
    public String getSoAReferenceNumber() {
        return OptionalNullable.getFrom(soAReferenceNumber);
    }

    /**
     * Setter for SoAReferenceNumber.
     * Statement of account reference
     * @param soAReferenceNumber Value for String
     */
    @JsonSetter("SoAReferenceNumber")
    public void setSoAReferenceNumber(String soAReferenceNumber) {
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
    }

    /**
     * UnSetter for SoAReferenceNumber.
     * Statement of account reference
     */
    public void unsetSoAReferenceNumber() {
        soAReferenceNumber = null;
    }

    /**
     * Internal Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("StatementDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDate() {
        return this.statementDate;
    }

    /**
     * Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getStatementDate() {
        return OptionalNullable.getFrom(statementDate);
    }

    /**
     * Setter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @param statementDate Value for String
     */
    @JsonSetter("StatementDate")
    public void setStatementDate(String statementDate) {
        this.statementDate = OptionalNullable.of(statementDate);
    }

    /**
     * UnSetter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     */
    public void unsetStatementDate() {
        statementDate = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payment customer id of the customer.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payment customer id of the customer.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for AmountDue.
     * Invoiced amount and due for payment
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountDue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountDue() {
        return this.amountDue;
    }

    /**
     * Getter for AmountDue.
     * Invoiced amount and due for payment
     * @return Returns the Double
     */
    public Double getAmountDue() {
        return OptionalNullable.getFrom(amountDue);
    }

    /**
     * Setter for AmountDue.
     * Invoiced amount and due for payment
     * @param amountDue Value for Double
     */
    @JsonSetter("AmountDue")
    public void setAmountDue(Double amountDue) {
        this.amountDue = OptionalNullable.of(amountDue);
    }

    /**
     * UnSetter for AmountDue.
     * Invoiced amount and due for payment
     */
    public void unsetAmountDue() {
        amountDue = null;
    }

    /**
     * Internal Getter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdue() {
        return this.amountOverdue;
    }

    /**
     * Getter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @return Returns the Double
     */
    public Double getAmountOverdue() {
        return OptionalNullable.getFrom(amountOverdue);
    }

    /**
     * Setter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @param amountOverdue Value for Double
     */
    @JsonSetter("AmountOverdue")
    public void setAmountOverdue(Double amountOverdue) {
        this.amountOverdue = OptionalNullable.of(amountOverdue);
    }

    /**
     * UnSetter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     */
    public void unsetAmountOverdue() {
        amountOverdue = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO code of SOA currency.
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO code of SOA currency.
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO code of SOA currency.
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO code of SOA currency.
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for DueDate.
     * Due date for payment. Format: yyyyMMdd Note: • Clients to convert this to appropriate
     * DateTime type. • SoA due date is considered as the latest due date of the invoices within the
     * SoA
     * @return Returns the Internal String
     */
    @JsonGetter("DueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDueDate() {
        return this.dueDate;
    }

    /**
     * Getter for DueDate.
     * Due date for payment. Format: yyyyMMdd Note: • Clients to convert this to appropriate
     * DateTime type. • SoA due date is considered as the latest due date of the invoices within the
     * SoA
     * @return Returns the String
     */
    public String getDueDate() {
        return OptionalNullable.getFrom(dueDate);
    }

    /**
     * Setter for DueDate.
     * Due date for payment. Format: yyyyMMdd Note: • Clients to convert this to appropriate
     * DateTime type. • SoA due date is considered as the latest due date of the invoices within the
     * SoA
     * @param dueDate Value for String
     */
    @JsonSetter("DueDate")
    public void setDueDate(String dueDate) {
        this.dueDate = OptionalNullable.of(dueDate);
    }

    /**
     * UnSetter for DueDate.
     * Due date for payment. Format: yyyyMMdd Note: • Clients to convert this to appropriate
     * DateTime type. • SoA due date is considered as the latest due date of the invoices within the
     * SoA
     */
    public void unsetDueDate() {
        dueDate = null;
    }

    /**
     * Internal Getter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. This is the value of the first invoice within
     * the SoA. It may not be same for all the invoices within the SoA.
     * @return Returns the Internal String
     */
    @JsonGetter("InvoicedOnBehalfOf")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoicedOnBehalfOf() {
        return this.invoicedOnBehalfOf;
    }

    /**
     * Getter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. This is the value of the first invoice within
     * the SoA. It may not be same for all the invoices within the SoA.
     * @return Returns the String
     */
    public String getInvoicedOnBehalfOf() {
        return OptionalNullable.getFrom(invoicedOnBehalfOf);
    }

    /**
     * Setter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. This is the value of the first invoice within
     * the SoA. It may not be same for all the invoices within the SoA.
     * @param invoicedOnBehalfOf Value for String
     */
    @JsonSetter("InvoicedOnBehalfOf")
    public void setInvoicedOnBehalfOf(String invoicedOnBehalfOf) {
        this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
    }

    /**
     * UnSetter for InvoicedOnBehalfOf.
     * ISO code of the country i.e., UK, DE, MY, etc. This is the value of the first invoice within
     * the SoA. It may not be same for all the invoices within the SoA.
     */
    public void unsetInvoicedOnBehalfOf() {
        invoicedOnBehalfOf = null;
    }

    /**
     * Internal Getter for Status.
     * Status of the document. Valid values – 1. Paid – Fully paid all Invoices with in the SOA. 2.
     * Overdue – At least one invoice payment due date is less than current date with in the SOA. 3.
     * Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     * @return Returns the Internal String
     */
    @JsonGetter("Status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatus() {
        return this.status;
    }

    /**
     * Getter for Status.
     * Status of the document. Valid values – 1. Paid – Fully paid all Invoices with in the SOA. 2.
     * Overdue – At least one invoice payment due date is less than current date with in the SOA. 3.
     * Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     * @return Returns the String
     */
    public String getStatus() {
        return OptionalNullable.getFrom(status);
    }

    /**
     * Setter for Status.
     * Status of the document. Valid values – 1. Paid – Fully paid all Invoices with in the SOA. 2.
     * Overdue – At least one invoice payment due date is less than current date with in the SOA. 3.
     * Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     * @param status Value for String
     */
    @JsonSetter("Status")
    public void setStatus(String status) {
        this.status = OptionalNullable.of(status);
    }

    /**
     * UnSetter for Status.
     * Status of the document. Valid values – 1. Paid – Fully paid all Invoices with in the SOA. 2.
     * Overdue – At least one invoice payment due date is less than current date with in the SOA. 3.
     * Due – At least one invoice is due for payment and is within the due date. There is no invoice
     * overdue for payment.
     */
    public void unsetStatus() {
        status = null;
    }

    /**
     * Internal Getter for GrossAmountCustomerCurrency.
     * Total gross amount in customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossAmountCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossAmountCustomerCurrency() {
        return this.grossAmountCustomerCurrency;
    }

    /**
     * Getter for GrossAmountCustomerCurrency.
     * Total gross amount in customer currency.
     * @return Returns the Double
     */
    public Double getGrossAmountCustomerCurrency() {
        return OptionalNullable.getFrom(grossAmountCustomerCurrency);
    }

    /**
     * Setter for GrossAmountCustomerCurrency.
     * Total gross amount in customer currency.
     * @param grossAmountCustomerCurrency Value for Double
     */
    @JsonSetter("GrossAmountCustomerCurrency")
    public void setGrossAmountCustomerCurrency(Double grossAmountCustomerCurrency) {
        this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
    }

    /**
     * UnSetter for GrossAmountCustomerCurrency.
     * Total gross amount in customer currency.
     */
    public void unsetGrossAmountCustomerCurrency() {
        grossAmountCustomerCurrency = null;
    }

    /**
     * Internal Getter for DocumentReferenceNumber.
     * Document reference number fetched
     * @return Returns the Internal String
     */
    @JsonGetter("DocumentReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDocumentReferenceNumber() {
        return this.documentReferenceNumber;
    }

    /**
     * Getter for DocumentReferenceNumber.
     * Document reference number fetched
     * @return Returns the String
     */
    public String getDocumentReferenceNumber() {
        return OptionalNullable.getFrom(documentReferenceNumber);
    }

    /**
     * Setter for DocumentReferenceNumber.
     * Document reference number fetched
     * @param documentReferenceNumber Value for String
     */
    @JsonSetter("DocumentReferenceNumber")
    public void setDocumentReferenceNumber(String documentReferenceNumber) {
        this.documentReferenceNumber = OptionalNullable.of(documentReferenceNumber);
    }

    /**
     * UnSetter for DocumentReferenceNumber.
     * Document reference number fetched
     */
    public void unsetDocumentReferenceNumber() {
        documentReferenceNumber = null;
    }

    /**
     * Converts this SearchStatementOfAccount into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SearchStatementOfAccount [" + "statementOfAccountId=" + statementOfAccountId
                + ", soAReferenceNumber=" + soAReferenceNumber + ", statementDate=" + statementDate
                + ", payerId=" + payerId + ", payerNumber=" + payerNumber + ", amountDue="
                + amountDue + ", amountOverdue=" + amountOverdue + ", currencyCode=" + currencyCode
                + ", currencySymbol=" + currencySymbol + ", dueDate=" + dueDate
                + ", invoicedOnBehalfOf=" + invoicedOnBehalfOf + ", status=" + status
                + ", grossAmountCustomerCurrency=" + grossAmountCustomerCurrency
                + ", documentReferenceNumber=" + documentReferenceNumber + "]";
    }

    /**
     * Builds a new {@link SearchStatementOfAccount.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SearchStatementOfAccount.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.statementOfAccountId = internalGetStatementOfAccountId();
        builder.soAReferenceNumber = internalGetSoAReferenceNumber();
        builder.statementDate = internalGetStatementDate();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.amountDue = internalGetAmountDue();
        builder.amountOverdue = internalGetAmountOverdue();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.dueDate = internalGetDueDate();
        builder.invoicedOnBehalfOf = internalGetInvoicedOnBehalfOf();
        builder.status = internalGetStatus();
        builder.grossAmountCustomerCurrency = internalGetGrossAmountCustomerCurrency();
        builder.documentReferenceNumber = internalGetDocumentReferenceNumber();
        return builder;
    }

    /**
     * Class to build instances of {@link SearchStatementOfAccount}.
     */
    public static class Builder {
        private OptionalNullable<Integer> statementOfAccountId;
        private OptionalNullable<String> soAReferenceNumber;
        private OptionalNullable<String> statementDate;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Double> amountDue;
        private OptionalNullable<Double> amountOverdue;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<String> dueDate;
        private OptionalNullable<String> invoicedOnBehalfOf;
        private OptionalNullable<String> status;
        private OptionalNullable<Double> grossAmountCustomerCurrency;
        private OptionalNullable<String> documentReferenceNumber;



        /**
         * Setter for statementOfAccountId.
         * @param  statementOfAccountId  Integer value for statementOfAccountId.
         * @return Builder
         */
        public Builder statementOfAccountId(Integer statementOfAccountId) {
            this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
            return this;
        }

        /**
         * UnSetter for statementOfAccountId.
         * @return Builder
         */
        public Builder unsetStatementOfAccountId() {
            statementOfAccountId = null;
            return this;
        }

        /**
         * Setter for soAReferenceNumber.
         * @param  soAReferenceNumber  String value for soAReferenceNumber.
         * @return Builder
         */
        public Builder soAReferenceNumber(String soAReferenceNumber) {
            this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
            return this;
        }

        /**
         * UnSetter for soAReferenceNumber.
         * @return Builder
         */
        public Builder unsetSoAReferenceNumber() {
            soAReferenceNumber = null;
            return this;
        }

        /**
         * Setter for statementDate.
         * @param  statementDate  String value for statementDate.
         * @return Builder
         */
        public Builder statementDate(String statementDate) {
            this.statementDate = OptionalNullable.of(statementDate);
            return this;
        }

        /**
         * UnSetter for statementDate.
         * @return Builder
         */
        public Builder unsetStatementDate() {
            statementDate = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = OptionalNullable.of(amountDue);
            return this;
        }

        /**
         * UnSetter for amountDue.
         * @return Builder
         */
        public Builder unsetAmountDue() {
            amountDue = null;
            return this;
        }

        /**
         * Setter for amountOverdue.
         * @param  amountOverdue  Double value for amountOverdue.
         * @return Builder
         */
        public Builder amountOverdue(Double amountOverdue) {
            this.amountOverdue = OptionalNullable.of(amountOverdue);
            return this;
        }

        /**
         * UnSetter for amountOverdue.
         * @return Builder
         */
        public Builder unsetAmountOverdue() {
            amountOverdue = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for dueDate.
         * @param  dueDate  String value for dueDate.
         * @return Builder
         */
        public Builder dueDate(String dueDate) {
            this.dueDate = OptionalNullable.of(dueDate);
            return this;
        }

        /**
         * UnSetter for dueDate.
         * @return Builder
         */
        public Builder unsetDueDate() {
            dueDate = null;
            return this;
        }

        /**
         * Setter for invoicedOnBehalfOf.
         * @param  invoicedOnBehalfOf  String value for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder invoicedOnBehalfOf(String invoicedOnBehalfOf) {
            this.invoicedOnBehalfOf = OptionalNullable.of(invoicedOnBehalfOf);
            return this;
        }

        /**
         * UnSetter for invoicedOnBehalfOf.
         * @return Builder
         */
        public Builder unsetInvoicedOnBehalfOf() {
            invoicedOnBehalfOf = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  String value for status.
         * @return Builder
         */
        public Builder status(String status) {
            this.status = OptionalNullable.of(status);
            return this;
        }

        /**
         * UnSetter for status.
         * @return Builder
         */
        public Builder unsetStatus() {
            status = null;
            return this;
        }

        /**
         * Setter for grossAmountCustomerCurrency.
         * @param  grossAmountCustomerCurrency  Double value for grossAmountCustomerCurrency.
         * @return Builder
         */
        public Builder grossAmountCustomerCurrency(Double grossAmountCustomerCurrency) {
            this.grossAmountCustomerCurrency = OptionalNullable.of(grossAmountCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for grossAmountCustomerCurrency.
         * @return Builder
         */
        public Builder unsetGrossAmountCustomerCurrency() {
            grossAmountCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for documentReferenceNumber.
         * @param  documentReferenceNumber  String value for documentReferenceNumber.
         * @return Builder
         */
        public Builder documentReferenceNumber(String documentReferenceNumber) {
            this.documentReferenceNumber = OptionalNullable.of(documentReferenceNumber);
            return this;
        }

        /**
         * UnSetter for documentReferenceNumber.
         * @return Builder
         */
        public Builder unsetDocumentReferenceNumber() {
            documentReferenceNumber = null;
            return this;
        }

        /**
         * Builds a new {@link SearchStatementOfAccount} object using the set fields.
         * @return {@link SearchStatementOfAccount}
         */
        public SearchStatementOfAccount build() {
            return new SearchStatementOfAccount(statementOfAccountId, soAReferenceNumber,
                    statementDate, payerId, payerNumber, amountDue, amountOverdue, currencyCode,
                    currencySymbol, dueDate, invoicedOnBehalfOf, status,
                    grossAmountCustomerCurrency, documentReferenceNumber);
        }
    }
}
