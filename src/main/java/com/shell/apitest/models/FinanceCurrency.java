/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for FinanceCurrency type.
 */
public class FinanceCurrency {
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<Double> invoiceExchangeRate;
    private OptionalNullable<Double> creditLimitExchangeRate;

    /**
     * Default constructor.
     */
    public FinanceCurrency() {
    }

    /**
     * Initialization constructor.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  invoiceExchangeRate  Double value for invoiceExchangeRate.
     * @param  creditLimitExchangeRate  Double value for creditLimitExchangeRate.
     */
    public FinanceCurrency(
            String currencyCode,
            String currencySymbol,
            Double invoiceExchangeRate,
            Double creditLimitExchangeRate) {
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.invoiceExchangeRate = OptionalNullable.of(invoiceExchangeRate);
        this.creditLimitExchangeRate = OptionalNullable.of(creditLimitExchangeRate);
    }

    /**
     * Initialization constructor.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  invoiceExchangeRate  Double value for invoiceExchangeRate.
     * @param  creditLimitExchangeRate  Double value for creditLimitExchangeRate.
     */

    protected FinanceCurrency(OptionalNullable<String> currencyCode,
            OptionalNullable<String> currencySymbol, OptionalNullable<Double> invoiceExchangeRate,
            OptionalNullable<Double> creditLimitExchangeRate) {
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.invoiceExchangeRate = invoiceExchangeRate;
        this.creditLimitExchangeRate = creditLimitExchangeRate;
    }

    /**
     * Internal Getter for CurrencyCode.
     * Currency ISO Code used for the Finance Widget.
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * Currency ISO Code used for the Finance Widget.
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * Currency ISO Code used for the Finance Widget.
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * Currency ISO Code used for the Finance Widget.
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Currency Symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Currency Symbol
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Currency Symbol
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Currency Symbol
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for InvoiceExchangeRate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency.
     * (If finance currency is same as invoice currency, then the value of this field will be “1” so
     * that the value does not change)
     * @return Returns the Internal Double
     */
    @JsonGetter("Invoice_ExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceExchangeRate() {
        return this.invoiceExchangeRate;
    }

    /**
     * Getter for InvoiceExchangeRate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency.
     * (If finance currency is same as invoice currency, then the value of this field will be “1” so
     * that the value does not change)
     * @return Returns the Double
     */
    public Double getInvoiceExchangeRate() {
        return OptionalNullable.getFrom(invoiceExchangeRate);
    }

    /**
     * Setter for InvoiceExchangeRate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency.
     * (If finance currency is same as invoice currency, then the value of this field will be “1” so
     * that the value does not change)
     * @param invoiceExchangeRate Value for Double
     */
    @JsonSetter("Invoice_ExchangeRate")
    public void setInvoiceExchangeRate(Double invoiceExchangeRate) {
        this.invoiceExchangeRate = OptionalNullable.of(invoiceExchangeRate);
    }

    /**
     * UnSetter for InvoiceExchangeRate.
     * Factor to be used for converting the amounts in invoice currency to finance widget currency.
     * (If finance currency is same as invoice currency, then the value of this field will be “1” so
     * that the value does not change)
     */
    public void unsetInvoiceExchangeRate() {
        invoiceExchangeRate = null;
    }

    /**
     * Internal Getter for CreditLimitExchangeRate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget
     * currency. (If finance currency is same as credit limit currency, then the value of this field
     * will be “1” so that the value does not change)
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimit_ExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimitExchangeRate() {
        return this.creditLimitExchangeRate;
    }

    /**
     * Getter for CreditLimitExchangeRate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget
     * currency. (If finance currency is same as credit limit currency, then the value of this field
     * will be “1” so that the value does not change)
     * @return Returns the Double
     */
    public Double getCreditLimitExchangeRate() {
        return OptionalNullable.getFrom(creditLimitExchangeRate);
    }

    /**
     * Setter for CreditLimitExchangeRate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget
     * currency. (If finance currency is same as credit limit currency, then the value of this field
     * will be “1” so that the value does not change)
     * @param creditLimitExchangeRate Value for Double
     */
    @JsonSetter("CreditLimit_ExchangeRate")
    public void setCreditLimitExchangeRate(Double creditLimitExchangeRate) {
        this.creditLimitExchangeRate = OptionalNullable.of(creditLimitExchangeRate);
    }

    /**
     * UnSetter for CreditLimitExchangeRate.
     * Factor to be used for converting the amounts in credit limit currency to finance widget
     * currency. (If finance currency is same as credit limit currency, then the value of this field
     * will be “1” so that the value does not change)
     */
    public void unsetCreditLimitExchangeRate() {
        creditLimitExchangeRate = null;
    }

    /**
     * Converts this FinanceCurrency into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FinanceCurrency [" + "currencyCode=" + currencyCode + ", currencySymbol="
                + currencySymbol + ", invoiceExchangeRate=" + invoiceExchangeRate
                + ", creditLimitExchangeRate=" + creditLimitExchangeRate + "]";
    }

    /**
     * Builds a new {@link FinanceCurrency.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link FinanceCurrency.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.invoiceExchangeRate = internalGetInvoiceExchangeRate();
        builder.creditLimitExchangeRate = internalGetCreditLimitExchangeRate();
        return builder;
    }

    /**
     * Class to build instances of {@link FinanceCurrency}.
     */
    public static class Builder {
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<Double> invoiceExchangeRate;
        private OptionalNullable<Double> creditLimitExchangeRate;



        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for invoiceExchangeRate.
         * @param  invoiceExchangeRate  Double value for invoiceExchangeRate.
         * @return Builder
         */
        public Builder invoiceExchangeRate(Double invoiceExchangeRate) {
            this.invoiceExchangeRate = OptionalNullable.of(invoiceExchangeRate);
            return this;
        }

        /**
         * UnSetter for invoiceExchangeRate.
         * @return Builder
         */
        public Builder unsetInvoiceExchangeRate() {
            invoiceExchangeRate = null;
            return this;
        }

        /**
         * Setter for creditLimitExchangeRate.
         * @param  creditLimitExchangeRate  Double value for creditLimitExchangeRate.
         * @return Builder
         */
        public Builder creditLimitExchangeRate(Double creditLimitExchangeRate) {
            this.creditLimitExchangeRate = OptionalNullable.of(creditLimitExchangeRate);
            return this;
        }

        /**
         * UnSetter for creditLimitExchangeRate.
         * @return Builder
         */
        public Builder unsetCreditLimitExchangeRate() {
            creditLimitExchangeRate = null;
            return this;
        }

        /**
         * Builds a new {@link FinanceCurrency} object using the set fields.
         * @return {@link FinanceCurrency}
         */
        public FinanceCurrency build() {
            return new FinanceCurrency(currencyCode, currencySymbol, invoiceExchangeRate,
                    creditLimitExchangeRate);
        }
    }
}
