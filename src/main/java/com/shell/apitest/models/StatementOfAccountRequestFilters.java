/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for StatementOfAccountRequestFilters type.
 */
public class StatementOfAccountRequestFilters {
    private OptionalNullable<Integer> colCoCode;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<Boolean> includeMonthlyInvoiceTrend;
    private OptionalNullable<Boolean> includePastStatementOfAccounts;
    private OptionalNullable<Boolean> dueOrOverDueSOADocumentsOnly;
    private OptionalNullable<Integer> numberOfSOADocuments;
    private OptionalNullable<Boolean> includeAccountInvoicesSummary;
    private OptionalNullable<Integer> colCoId;
    private List<Accounts> accounts;

    /**
     * Default constructor.
     */
    public StatementOfAccountRequestFilters() {
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  includeMonthlyInvoiceTrend  Boolean value for includeMonthlyInvoiceTrend.
     * @param  includePastStatementOfAccounts  Boolean value for includePastStatementOfAccounts.
     * @param  dueOrOverDueSOADocumentsOnly  Boolean value for dueOrOverDueSOADocumentsOnly.
     * @param  numberOfSOADocuments  Integer value for numberOfSOADocuments.
     * @param  includeAccountInvoicesSummary  Boolean value for includeAccountInvoicesSummary.
     * @param  colCoId  Integer value for colCoId.
     * @param  accounts  List of Accounts value for accounts.
     */
    public StatementOfAccountRequestFilters(
            Integer colCoCode,
            Integer payerId,
            String payerNumber,
            Boolean includeMonthlyInvoiceTrend,
            Boolean includePastStatementOfAccounts,
            Boolean dueOrOverDueSOADocumentsOnly,
            Integer numberOfSOADocuments,
            Boolean includeAccountInvoicesSummary,
            Integer colCoId,
            List<Accounts> accounts) {
        this.colCoCode = OptionalNullable.of(colCoCode);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.includeMonthlyInvoiceTrend = OptionalNullable.of(includeMonthlyInvoiceTrend);
        this.includePastStatementOfAccounts = OptionalNullable.of(includePastStatementOfAccounts);
        this.dueOrOverDueSOADocumentsOnly = OptionalNullable.of(dueOrOverDueSOADocumentsOnly);
        this.numberOfSOADocuments = OptionalNullable.of(numberOfSOADocuments);
        this.includeAccountInvoicesSummary = OptionalNullable.of(includeAccountInvoicesSummary);
        this.colCoId = OptionalNullable.of(colCoId);
        this.accounts = accounts;
    }

    /**
     * Initialization constructor.
     * @param  colCoCode  Integer value for colCoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  includeMonthlyInvoiceTrend  Boolean value for includeMonthlyInvoiceTrend.
     * @param  includePastStatementOfAccounts  Boolean value for includePastStatementOfAccounts.
     * @param  dueOrOverDueSOADocumentsOnly  Boolean value for dueOrOverDueSOADocumentsOnly.
     * @param  numberOfSOADocuments  Integer value for numberOfSOADocuments.
     * @param  includeAccountInvoicesSummary  Boolean value for includeAccountInvoicesSummary.
     * @param  colCoId  Integer value for colCoId.
     * @param  accounts  List of Accounts value for accounts.
     */

    protected StatementOfAccountRequestFilters(OptionalNullable<Integer> colCoCode,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<Boolean> includeMonthlyInvoiceTrend,
            OptionalNullable<Boolean> includePastStatementOfAccounts,
            OptionalNullable<Boolean> dueOrOverDueSOADocumentsOnly,
            OptionalNullable<Integer> numberOfSOADocuments,
            OptionalNullable<Boolean> includeAccountInvoicesSummary,
            OptionalNullable<Integer> colCoId, List<Accounts> accounts) {
        this.colCoCode = colCoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.includeMonthlyInvoiceTrend = includeMonthlyInvoiceTrend;
        this.includePastStatementOfAccounts = includePastStatementOfAccounts;
        this.dueOrOverDueSOADocumentsOnly = dueOrOverDueSOADocumentsOnly;
        this.numberOfSOADocuments = numberOfSOADocuments;
        this.includeAccountInvoicesSummary = includeAccountInvoicesSummary;
        this.colCoId = colCoId;
        this.accounts = accounts;
    }

    /**
     * Internal Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Optional If ColCo Id is passed
     * else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoCode() {
        return this.colCoCode;
    }

    /**
     * Getter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Optional If ColCo Id is passed
     * else Mandatory.
     * @return Returns the Integer
     */
    public Integer getColCoCode() {
        return OptionalNullable.getFrom(colCoCode);
    }

    /**
     * Setter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Optional If ColCo Id is passed
     * else Mandatory.
     * @param colCoCode Value for Integer
     */
    @JsonSetter("ColCoCode")
    public void setColCoCode(Integer colCoCode) {
        this.colCoCode = OptionalNullable.of(colCoCode);
    }

    /**
     * UnSetter for ColCoCode.
     * Collecting Company Code (Shell Code) of the selected payer. Optional If ColCo Id is passed
     * else Mandatory.
     */
    public void unsetColCoCode() {
        colCoCode = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id of the selected payer. Optional if PayerNumber is passed else Mandatory.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number of the selected payer. Optional if PayerId is passed else Mandatory.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for IncludeMonthlyInvoiceTrend.
     * True/False. Optional. Default is False. True if the past 13 monthly invoice trend to be
     * included as part of the response. Else false.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeMonthlyInvoiceTrend")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeMonthlyInvoiceTrend() {
        return this.includeMonthlyInvoiceTrend;
    }

    /**
     * Getter for IncludeMonthlyInvoiceTrend.
     * True/False. Optional. Default is False. True if the past 13 monthly invoice trend to be
     * included as part of the response. Else false.
     * @return Returns the Boolean
     */
    public Boolean getIncludeMonthlyInvoiceTrend() {
        return OptionalNullable.getFrom(includeMonthlyInvoiceTrend);
    }

    /**
     * Setter for IncludeMonthlyInvoiceTrend.
     * True/False. Optional. Default is False. True if the past 13 monthly invoice trend to be
     * included as part of the response. Else false.
     * @param includeMonthlyInvoiceTrend Value for Boolean
     */
    @JsonSetter("IncludeMonthlyInvoiceTrend")
    public void setIncludeMonthlyInvoiceTrend(Boolean includeMonthlyInvoiceTrend) {
        this.includeMonthlyInvoiceTrend = OptionalNullable.of(includeMonthlyInvoiceTrend);
    }

    /**
     * UnSetter for IncludeMonthlyInvoiceTrend.
     * True/False. Optional. Default is False. True if the past 13 monthly invoice trend to be
     * included as part of the response. Else false.
     */
    public void unsetIncludeMonthlyInvoiceTrend() {
        includeMonthlyInvoiceTrend = null;
    }

    /**
     * Internal Getter for IncludePastStatementOfAccounts.
     * True/False. Optional. Default is False. True if the past X SOA documents are to be included
     * as part of the response. Else false.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludePastStatementOfAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludePastStatementOfAccounts() {
        return this.includePastStatementOfAccounts;
    }

    /**
     * Getter for IncludePastStatementOfAccounts.
     * True/False. Optional. Default is False. True if the past X SOA documents are to be included
     * as part of the response. Else false.
     * @return Returns the Boolean
     */
    public Boolean getIncludePastStatementOfAccounts() {
        return OptionalNullable.getFrom(includePastStatementOfAccounts);
    }

    /**
     * Setter for IncludePastStatementOfAccounts.
     * True/False. Optional. Default is False. True if the past X SOA documents are to be included
     * as part of the response. Else false.
     * @param includePastStatementOfAccounts Value for Boolean
     */
    @JsonSetter("IncludePastStatementOfAccounts")
    public void setIncludePastStatementOfAccounts(Boolean includePastStatementOfAccounts) {
        this.includePastStatementOfAccounts = OptionalNullable.of(includePastStatementOfAccounts);
    }

    /**
     * UnSetter for IncludePastStatementOfAccounts.
     * True/False. Optional. Default is False. True if the past X SOA documents are to be included
     * as part of the response. Else false.
     */
    public void unsetIncludePastStatementOfAccounts() {
        includePastStatementOfAccounts = null;
    }

    /**
     * Internal Getter for DueOrOverDueSOADocumentsOnly.
     * True/False Optional Default is False. If true PastStatementOfAccounts entity on this API
     * output should contain the SOA documents that are due or overdue only.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("DueOrOverDueSOADocumentsOnly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetDueOrOverDueSOADocumentsOnly() {
        return this.dueOrOverDueSOADocumentsOnly;
    }

    /**
     * Getter for DueOrOverDueSOADocumentsOnly.
     * True/False Optional Default is False. If true PastStatementOfAccounts entity on this API
     * output should contain the SOA documents that are due or overdue only.
     * @return Returns the Boolean
     */
    public Boolean getDueOrOverDueSOADocumentsOnly() {
        return OptionalNullable.getFrom(dueOrOverDueSOADocumentsOnly);
    }

    /**
     * Setter for DueOrOverDueSOADocumentsOnly.
     * True/False Optional Default is False. If true PastStatementOfAccounts entity on this API
     * output should contain the SOA documents that are due or overdue only.
     * @param dueOrOverDueSOADocumentsOnly Value for Boolean
     */
    @JsonSetter("DueOrOverDueSOADocumentsOnly")
    public void setDueOrOverDueSOADocumentsOnly(Boolean dueOrOverDueSOADocumentsOnly) {
        this.dueOrOverDueSOADocumentsOnly = OptionalNullable.of(dueOrOverDueSOADocumentsOnly);
    }

    /**
     * UnSetter for DueOrOverDueSOADocumentsOnly.
     * True/False Optional Default is False. If true PastStatementOfAccounts entity on this API
     * output should contain the SOA documents that are due or overdue only.
     */
    public void unsetDueOrOverDueSOADocumentsOnly() {
        dueOrOverDueSOADocumentsOnly = null;
    }

    /**
     * Internal Getter for NumberOfSOADocuments.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to
     * True.
     * @return Returns the Internal Integer
     */
    @JsonGetter("NumberOfSOADocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetNumberOfSOADocuments() {
        return this.numberOfSOADocuments;
    }

    /**
     * Getter for NumberOfSOADocuments.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to
     * True.
     * @return Returns the Integer
     */
    public Integer getNumberOfSOADocuments() {
        return OptionalNullable.getFrom(numberOfSOADocuments);
    }

    /**
     * Setter for NumberOfSOADocuments.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to
     * True.
     * @param numberOfSOADocuments Value for Integer
     */
    @JsonSetter("NumberOfSOADocuments")
    public void setNumberOfSOADocuments(Integer numberOfSOADocuments) {
        this.numberOfSOADocuments = OptionalNullable.of(numberOfSOADocuments);
    }

    /**
     * UnSetter for NumberOfSOADocuments.
     * This parameter is only applicable when “IncludePastStatementOfAccounts” parameter is set to
     * True.
     */
    public void unsetNumberOfSOADocuments() {
        numberOfSOADocuments = null;
    }

    /**
     * Internal Getter for IncludeAccountInvoicesSummary.
     * True/False Optional. Default value is false. When true InvoicesSummaries list will be
     * returned in the API output.
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IncludeAccountInvoicesSummary")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIncludeAccountInvoicesSummary() {
        return this.includeAccountInvoicesSummary;
    }

    /**
     * Getter for IncludeAccountInvoicesSummary.
     * True/False Optional. Default value is false. When true InvoicesSummaries list will be
     * returned in the API output.
     * @return Returns the Boolean
     */
    public Boolean getIncludeAccountInvoicesSummary() {
        return OptionalNullable.getFrom(includeAccountInvoicesSummary);
    }

    /**
     * Setter for IncludeAccountInvoicesSummary.
     * True/False Optional. Default value is false. When true InvoicesSummaries list will be
     * returned in the API output.
     * @param includeAccountInvoicesSummary Value for Boolean
     */
    @JsonSetter("IncludeAccountInvoicesSummary")
    public void setIncludeAccountInvoicesSummary(Boolean includeAccountInvoicesSummary) {
        this.includeAccountInvoicesSummary = OptionalNullable.of(includeAccountInvoicesSummary);
    }

    /**
     * UnSetter for IncludeAccountInvoicesSummary.
     * True/False Optional. Default value is false. When true InvoicesSummaries list will be
     * returned in the API output.
     */
    public void unsetIncludeAccountInvoicesSummary() {
        includeAccountInvoicesSummary = null;
    }

    /**
     * Internal Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional If ColCo Code is passed else Mandatory.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColCoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColCoId() {
        return this.colCoId;
    }

    /**
     * Getter for ColCoId.
     * Collecting Company Id of the selected payer. Optional If ColCo Code is passed else Mandatory.
     * @return Returns the Integer
     */
    public Integer getColCoId() {
        return OptionalNullable.getFrom(colCoId);
    }

    /**
     * Setter for ColCoId.
     * Collecting Company Id of the selected payer. Optional If ColCo Code is passed else Mandatory.
     * @param colCoId Value for Integer
     */
    @JsonSetter("ColCoId")
    public void setColCoId(Integer colCoId) {
        this.colCoId = OptionalNullable.of(colCoId);
    }

    /**
     * UnSetter for ColCoId.
     * Collecting Company Id of the selected payer. Optional If ColCo Code is passed else Mandatory.
     */
    public void unsetColCoId() {
        colCoId = null;
    }

    /**
     * Getter for Accounts.
     * @return Returns the List of Accounts
     */
    @JsonGetter("Accounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Accounts> getAccounts() {
        return accounts;
    }

    /**
     * Setter for Accounts.
     * @param accounts Value for List of Accounts
     */
    @JsonSetter("Accounts")
    public void setAccounts(List<Accounts> accounts) {
        this.accounts = accounts;
    }

    /**
     * Converts this StatementOfAccountRequestFilters into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "StatementOfAccountRequestFilters [" + "colCoCode=" + colCoCode + ", payerId="
                + payerId + ", payerNumber=" + payerNumber + ", includeMonthlyInvoiceTrend="
                + includeMonthlyInvoiceTrend + ", includePastStatementOfAccounts="
                + includePastStatementOfAccounts + ", dueOrOverDueSOADocumentsOnly="
                + dueOrOverDueSOADocumentsOnly + ", numberOfSOADocuments=" + numberOfSOADocuments
                + ", includeAccountInvoicesSummary=" + includeAccountInvoicesSummary + ", colCoId="
                + colCoId + ", accounts=" + accounts + "]";
    }

    /**
     * Builds a new {@link StatementOfAccountRequestFilters.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link StatementOfAccountRequestFilters.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accounts(getAccounts());
        builder.colCoCode = internalGetColCoCode();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.includeMonthlyInvoiceTrend = internalGetIncludeMonthlyInvoiceTrend();
        builder.includePastStatementOfAccounts = internalGetIncludePastStatementOfAccounts();
        builder.dueOrOverDueSOADocumentsOnly = internalGetDueOrOverDueSOADocumentsOnly();
        builder.numberOfSOADocuments = internalGetNumberOfSOADocuments();
        builder.includeAccountInvoicesSummary = internalGetIncludeAccountInvoicesSummary();
        builder.colCoId = internalGetColCoId();
        return builder;
    }

    /**
     * Class to build instances of {@link StatementOfAccountRequestFilters}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colCoCode;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<Boolean> includeMonthlyInvoiceTrend;
        private OptionalNullable<Boolean> includePastStatementOfAccounts;
        private OptionalNullable<Boolean> dueOrOverDueSOADocumentsOnly;
        private OptionalNullable<Integer> numberOfSOADocuments;
        private OptionalNullable<Boolean> includeAccountInvoicesSummary;
        private OptionalNullable<Integer> colCoId;
        private List<Accounts> accounts;



        /**
         * Setter for colCoCode.
         * @param  colCoCode  Integer value for colCoCode.
         * @return Builder
         */
        public Builder colCoCode(Integer colCoCode) {
            this.colCoCode = OptionalNullable.of(colCoCode);
            return this;
        }

        /**
         * UnSetter for colCoCode.
         * @return Builder
         */
        public Builder unsetColCoCode() {
            colCoCode = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for includeMonthlyInvoiceTrend.
         * @param  includeMonthlyInvoiceTrend  Boolean value for includeMonthlyInvoiceTrend.
         * @return Builder
         */
        public Builder includeMonthlyInvoiceTrend(Boolean includeMonthlyInvoiceTrend) {
            this.includeMonthlyInvoiceTrend = OptionalNullable.of(includeMonthlyInvoiceTrend);
            return this;
        }

        /**
         * UnSetter for includeMonthlyInvoiceTrend.
         * @return Builder
         */
        public Builder unsetIncludeMonthlyInvoiceTrend() {
            includeMonthlyInvoiceTrend = null;
            return this;
        }

        /**
         * Setter for includePastStatementOfAccounts.
         * @param  includePastStatementOfAccounts  Boolean value for includePastStatementOfAccounts.
         * @return Builder
         */
        public Builder includePastStatementOfAccounts(Boolean includePastStatementOfAccounts) {
            this.includePastStatementOfAccounts =
                    OptionalNullable.of(includePastStatementOfAccounts);
            return this;
        }

        /**
         * UnSetter for includePastStatementOfAccounts.
         * @return Builder
         */
        public Builder unsetIncludePastStatementOfAccounts() {
            includePastStatementOfAccounts = null;
            return this;
        }

        /**
         * Setter for dueOrOverDueSOADocumentsOnly.
         * @param  dueOrOverDueSOADocumentsOnly  Boolean value for dueOrOverDueSOADocumentsOnly.
         * @return Builder
         */
        public Builder dueOrOverDueSOADocumentsOnly(Boolean dueOrOverDueSOADocumentsOnly) {
            this.dueOrOverDueSOADocumentsOnly = OptionalNullable.of(dueOrOverDueSOADocumentsOnly);
            return this;
        }

        /**
         * UnSetter for dueOrOverDueSOADocumentsOnly.
         * @return Builder
         */
        public Builder unsetDueOrOverDueSOADocumentsOnly() {
            dueOrOverDueSOADocumentsOnly = null;
            return this;
        }

        /**
         * Setter for numberOfSOADocuments.
         * @param  numberOfSOADocuments  Integer value for numberOfSOADocuments.
         * @return Builder
         */
        public Builder numberOfSOADocuments(Integer numberOfSOADocuments) {
            this.numberOfSOADocuments = OptionalNullable.of(numberOfSOADocuments);
            return this;
        }

        /**
         * UnSetter for numberOfSOADocuments.
         * @return Builder
         */
        public Builder unsetNumberOfSOADocuments() {
            numberOfSOADocuments = null;
            return this;
        }

        /**
         * Setter for includeAccountInvoicesSummary.
         * @param  includeAccountInvoicesSummary  Boolean value for includeAccountInvoicesSummary.
         * @return Builder
         */
        public Builder includeAccountInvoicesSummary(Boolean includeAccountInvoicesSummary) {
            this.includeAccountInvoicesSummary = OptionalNullable.of(includeAccountInvoicesSummary);
            return this;
        }

        /**
         * UnSetter for includeAccountInvoicesSummary.
         * @return Builder
         */
        public Builder unsetIncludeAccountInvoicesSummary() {
            includeAccountInvoicesSummary = null;
            return this;
        }

        /**
         * Setter for colCoId.
         * @param  colCoId  Integer value for colCoId.
         * @return Builder
         */
        public Builder colCoId(Integer colCoId) {
            this.colCoId = OptionalNullable.of(colCoId);
            return this;
        }

        /**
         * UnSetter for colCoId.
         * @return Builder
         */
        public Builder unsetColCoId() {
            colCoId = null;
            return this;
        }

        /**
         * Setter for accounts.
         * @param  accounts  List of Accounts value for accounts.
         * @return Builder
         */
        public Builder accounts(List<Accounts> accounts) {
            this.accounts = accounts;
            return this;
        }

        /**
         * Builds a new {@link StatementOfAccountRequestFilters} object using the set fields.
         * @return {@link StatementOfAccountRequestFilters}
         */
        public StatementOfAccountRequestFilters build() {
            return new StatementOfAccountRequestFilters(colCoCode, payerId, payerNumber,
                    includeMonthlyInvoiceTrend, includePastStatementOfAccounts,
                    dueOrOverDueSOADocumentsOnly, numberOfSOADocuments,
                    includeAccountInvoicesSummary, colCoId, accounts);
        }
    }
}
