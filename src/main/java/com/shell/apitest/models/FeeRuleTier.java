/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for FeeRuleTier type.
 */
public class FeeRuleTier {
    private OptionalNullable<Integer> tierMinimum;
    private OptionalNullable<Double> value;
    private OptionalNullable<Integer> tierMaximum;

    /**
     * Default constructor.
     */
    public FeeRuleTier() {
    }

    /**
     * Initialization constructor.
     * @param  tierMinimum  Integer value for tierMinimum.
     * @param  value  Double value for value.
     * @param  tierMaximum  Integer value for tierMaximum.
     */
    public FeeRuleTier(
            Integer tierMinimum,
            Double value,
            Integer tierMaximum) {
        this.tierMinimum = OptionalNullable.of(tierMinimum);
        this.value = OptionalNullable.of(value);
        this.tierMaximum = OptionalNullable.of(tierMaximum);
    }

    /**
     * Initialization constructor.
     * @param  tierMinimum  Integer value for tierMinimum.
     * @param  value  Double value for value.
     * @param  tierMaximum  Integer value for tierMaximum.
     */

    protected FeeRuleTier(OptionalNullable<Integer> tierMinimum, OptionalNullable<Double> value,
            OptionalNullable<Integer> tierMaximum) {
        this.tierMinimum = tierMinimum;
        this.value = value;
        this.tierMaximum = tierMaximum;
    }

    /**
     * Internal Getter for TierMinimum.
     * Minimum consumption configured in the tier.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TierMinimum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTierMinimum() {
        return this.tierMinimum;
    }

    /**
     * Getter for TierMinimum.
     * Minimum consumption configured in the tier.
     * @return Returns the Integer
     */
    public Integer getTierMinimum() {
        return OptionalNullable.getFrom(tierMinimum);
    }

    /**
     * Setter for TierMinimum.
     * Minimum consumption configured in the tier.
     * @param tierMinimum Value for Integer
     */
    @JsonSetter("TierMinimum")
    public void setTierMinimum(Integer tierMinimum) {
        this.tierMinimum = OptionalNullable.of(tierMinimum);
    }

    /**
     * UnSetter for TierMinimum.
     * Minimum consumption configured in the tier.
     */
    public void unsetTierMinimum() {
        tierMinimum = null;
    }

    /**
     * Internal Getter for Value.
     * Bonus value for the tier.
     * @return Returns the Internal Double
     */
    @JsonGetter("Value")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetValue() {
        return this.value;
    }

    /**
     * Getter for Value.
     * Bonus value for the tier.
     * @return Returns the Double
     */
    public Double getValue() {
        return OptionalNullable.getFrom(value);
    }

    /**
     * Setter for Value.
     * Bonus value for the tier.
     * @param value Value for Double
     */
    @JsonSetter("Value")
    public void setValue(Double value) {
        this.value = OptionalNullable.of(value);
    }

    /**
     * UnSetter for Value.
     * Bonus value for the tier.
     */
    public void unsetValue() {
        value = null;
    }

    /**
     * Internal Getter for TierMaximum.
     * Maximum consumption configured in the tier.
     * @return Returns the Internal Integer
     */
    @JsonGetter("TierMaximum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTierMaximum() {
        return this.tierMaximum;
    }

    /**
     * Getter for TierMaximum.
     * Maximum consumption configured in the tier.
     * @return Returns the Integer
     */
    public Integer getTierMaximum() {
        return OptionalNullable.getFrom(tierMaximum);
    }

    /**
     * Setter for TierMaximum.
     * Maximum consumption configured in the tier.
     * @param tierMaximum Value for Integer
     */
    @JsonSetter("TierMaximum")
    public void setTierMaximum(Integer tierMaximum) {
        this.tierMaximum = OptionalNullable.of(tierMaximum);
    }

    /**
     * UnSetter for TierMaximum.
     * Maximum consumption configured in the tier.
     */
    public void unsetTierMaximum() {
        tierMaximum = null;
    }

    /**
     * Converts this FeeRuleTier into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FeeRuleTier [" + "tierMinimum=" + tierMinimum + ", value=" + value
                + ", tierMaximum=" + tierMaximum + "]";
    }

    /**
     * Builds a new {@link FeeRuleTier.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link FeeRuleTier.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.tierMinimum = internalGetTierMinimum();
        builder.value = internalGetValue();
        builder.tierMaximum = internalGetTierMaximum();
        return builder;
    }

    /**
     * Class to build instances of {@link FeeRuleTier}.
     */
    public static class Builder {
        private OptionalNullable<Integer> tierMinimum;
        private OptionalNullable<Double> value;
        private OptionalNullable<Integer> tierMaximum;



        /**
         * Setter for tierMinimum.
         * @param  tierMinimum  Integer value for tierMinimum.
         * @return Builder
         */
        public Builder tierMinimum(Integer tierMinimum) {
            this.tierMinimum = OptionalNullable.of(tierMinimum);
            return this;
        }

        /**
         * UnSetter for tierMinimum.
         * @return Builder
         */
        public Builder unsetTierMinimum() {
            tierMinimum = null;
            return this;
        }

        /**
         * Setter for value.
         * @param  value  Double value for value.
         * @return Builder
         */
        public Builder value(Double value) {
            this.value = OptionalNullable.of(value);
            return this;
        }

        /**
         * UnSetter for value.
         * @return Builder
         */
        public Builder unsetValue() {
            value = null;
            return this;
        }

        /**
         * Setter for tierMaximum.
         * @param  tierMaximum  Integer value for tierMaximum.
         * @return Builder
         */
        public Builder tierMaximum(Integer tierMaximum) {
            this.tierMaximum = OptionalNullable.of(tierMaximum);
            return this;
        }

        /**
         * UnSetter for tierMaximum.
         * @return Builder
         */
        public Builder unsetTierMaximum() {
            tierMaximum = null;
            return this;
        }

        /**
         * Builds a new {@link FeeRuleTier} object using the set fields.
         * @return {@link FeeRuleTier}
         */
        public FeeRuleTier build() {
            return new FeeRuleTier(tierMinimum, value, tierMaximum);
        }
    }
}
