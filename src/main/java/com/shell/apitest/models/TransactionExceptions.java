/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for TransactionExceptions type.
 */
public class TransactionExceptions {
    private OptionalNullable<Double> salesItemId;
    private OptionalNullable<Integer> cardId;
    private OptionalNullable<Integer> productId;
    private OptionalNullable<String> transactionGUID;
    private OptionalNullable<String> transactionDate;
    private OptionalNullable<Double> customerInvoiceValueTotalGross;
    private OptionalNullable<String> cardPAN;
    private OptionalNullable<String> cardExpiry;
    private OptionalNullable<String> transactionTime;
    private OptionalNullable<String> uTCOffset;
    private OptionalNullable<String> fleetIdInput;
    private OptionalNullable<Integer> odometerInput;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> vehicleRegistration;
    private OptionalNullable<String> invoiceCurrencyCode;
    private OptionalNullable<String> invoiceCurrencySymbol;
    private OptionalNullable<String> transactionCurrencyCode;
    private OptionalNullable<String> transactionCurrencySymbol;
    private OptionalNullable<Double> transactionNetAmount;
    private OptionalNullable<Double> transactionTax;
    private OptionalNullable<Double> transactionGrossAmount;
    private OptionalNullable<Double> invoiceNetAmount;
    private OptionalNullable<Double> invoiceTax;
    private OptionalNullable<Double> invoiceGrossAmount;
    private OptionalNullable<String> purchasedInCountry;
    private OptionalNullable<Integer> accountId;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> accountShortName;
    private OptionalNullable<Double> quantity;
    private OptionalNullable<Boolean> fuelProduct;
    private OptionalNullable<Double> unitPriceInTransactionCurrency;
    private OptionalNullable<Double> unitPriceInInvoiceCurrency;
    private OptionalNullable<Double> unitDiscountTransactionCurrency;
    private OptionalNullable<Double> unitDiscountInvoiceCurrency;
    private OptionalNullable<Boolean> isInvoiced;
    private OptionalNullable<String> invoiceNumber;
    private OptionalNullable<String> invoiceDate;
    private OptionalNullable<String> siteCode;
    private OptionalNullable<String> siteName;
    private OptionalNullable<String> siteCountry;
    private Location location;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<String> receiptNumber;
    private OptionalNullable<String> productCode;
    private OptionalNullable<String> productName;
    private OptionalNullable<Integer> productGroupId;
    private OptionalNullable<String> productGroupName;
    private OptionalNullable<Double> delCoExchangeRate;
    private OptionalNullable<Double> colCoExchangeRate;
    private OptionalNullable<Boolean> isShellSite;
    private OptionalNullable<String> network;
    private OptionalNullable<Integer> siteGroupId;
    private OptionalNullable<String> siteGroupName;
    private OptionalNullable<String> postingDate;
    private OptionalNullable<String> issuerCode;
    private OptionalNullable<String> purchasedInCountryCode;
    private OptionalNullable<String> customerCountryCode;
    private OptionalNullable<String> customerCountry;
    private OptionalNullable<String> releaseCode;
    private OptionalNullable<String> cardGroupId;
    private OptionalNullable<String> cardSequenceNumber;
    private OptionalNullable<String> checkDigit;
    private OptionalNullable<String> fleetIDDescription;
    private OptionalNullable<Double> vATRate;
    private OptionalNullable<String> vATCategory;
    private OptionalNullable<String> effectiveDiscountInTrxCurrency;
    private OptionalNullable<String> transactionType;
    private OptionalNullable<String> pINIndicator;
    private OptionalNullable<String> vATApplicable;
    private OptionalNullable<String> netInvoiceIndicator;
    private OptionalNullable<String> customerCurrencyCode;
    private OptionalNullable<String> customerCurrencySymbol;
    private OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency;
    private OptionalNullable<Double> effectiveDiscountInCustomerCurrency;
    private OptionalNullable<Double> vATonNetAmountInCustomerCurrency;
    private OptionalNullable<String> discountType;
    private OptionalNullable<String> transactionStatus;
    private OptionalNullable<String> payerGroup;
    private OptionalNullable<String> refundFlag;
    private OptionalNullable<Double> originalSalesItemId;
    private OptionalNullable<String> delcoName;
    private OptionalNullable<String> delcoCode;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> cardExpiryPeriod;
    private OptionalNullable<String> authorisationCode;
    private OptionalNullable<String> transactionId;
    private OptionalNullable<String> transactionLine;
    private OptionalNullable<String> allowClearing;
    private OptionalNullable<String> cRMNumber;
    private OptionalNullable<String> disputeStatus;
    private OptionalNullable<Double> rebateRate;
    private OptionalNullable<Double> delCoToColCoExchangeRate;
    private OptionalNullable<Double> netEuroAmount;
    private OptionalNullable<Double> euroRebateAmount;
    private OptionalNullable<Double> euroVATAmount;
    private OptionalNullable<String> parentCustomerNumber;
    private OptionalNullable<Double> vATonNetAmount;
    private OptionalNullable<String> vATCountry;

    /**
     * Default constructor.
     */
    public TransactionExceptions() {
    }

    /**
     * Initialization constructor.
     * @param  salesItemId  Double value for salesItemId.
     * @param  cardId  Integer value for cardId.
     * @param  productId  Integer value for productId.
     * @param  transactionGUID  String value for transactionGUID.
     * @param  transactionDate  String value for transactionDate.
     * @param  customerInvoiceValueTotalGross  Double value for customerInvoiceValueTotalGross.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardExpiry  String value for cardExpiry.
     * @param  transactionTime  String value for transactionTime.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  transactionNetAmount  Double value for transactionNetAmount.
     * @param  transactionTax  Double value for transactionTax.
     * @param  transactionGrossAmount  Double value for transactionGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  invoiceTax  Double value for invoiceTax.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  accountShortName  String value for accountShortName.
     * @param  quantity  Double value for quantity.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
     * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
     * @param  unitDiscountTransactionCurrency  Double value for unitDiscountTransactionCurrency.
     * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  siteCode  String value for siteCode.
     * @param  siteName  String value for siteName.
     * @param  siteCountry  String value for siteCountry.
     * @param  location  Location value for location.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  receiptNumber  String value for receiptNumber.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  productGroupName  String value for productGroupName.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  colCoExchangeRate  Double value for colCoExchangeRate.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  network  String value for network.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  postingDate  String value for postingDate.
     * @param  issuerCode  String value for issuerCode.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  customerCountryCode  String value for customerCountryCode.
     * @param  customerCountry  String value for customerCountry.
     * @param  releaseCode  String value for releaseCode.
     * @param  cardGroupId  String value for cardGroupId.
     * @param  cardSequenceNumber  String value for cardSequenceNumber.
     * @param  checkDigit  String value for checkDigit.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  vATRate  Double value for vATRate.
     * @param  vATCategory  String value for vATCategory.
     * @param  effectiveDiscountInTrxCurrency  String value for effectiveDiscountInTrxCurrency.
     * @param  transactionType  String value for transactionType.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Double value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  vATonNetAmountInCustomerCurrency  Double value for vATonNetAmountInCustomerCurrency.
     * @param  discountType  String value for discountType.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  payerGroup  String value for payerGroup.
     * @param  refundFlag  String value for refundFlag.
     * @param  originalSalesItemId  Double value for originalSalesItemId.
     * @param  delcoName  String value for delcoName.
     * @param  delcoCode  String value for delcoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
     * @param  authorisationCode  String value for authorisationCode.
     * @param  transactionId  String value for transactionId.
     * @param  transactionLine  String value for transactionLine.
     * @param  allowClearing  String value for allowClearing.
     * @param  cRMNumber  String value for cRMNumber.
     * @param  disputeStatus  String value for disputeStatus.
     * @param  rebateRate  Double value for rebateRate.
     * @param  delCoToColCoExchangeRate  Double value for delCoToColCoExchangeRate.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroRebateAmount  Double value for euroRebateAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  vATonNetAmount  Double value for vATonNetAmount.
     * @param  vATCountry  String value for vATCountry.
     */
    public TransactionExceptions(
            Double salesItemId,
            Integer cardId,
            Integer productId,
            String transactionGUID,
            String transactionDate,
            Double customerInvoiceValueTotalGross,
            String cardPAN,
            String cardExpiry,
            String transactionTime,
            String uTCOffset,
            String fleetIdInput,
            Integer odometerInput,
            String driverName,
            String vehicleRegistration,
            String invoiceCurrencyCode,
            String invoiceCurrencySymbol,
            String transactionCurrencyCode,
            String transactionCurrencySymbol,
            Double transactionNetAmount,
            Double transactionTax,
            Double transactionGrossAmount,
            Double invoiceNetAmount,
            Double invoiceTax,
            Double invoiceGrossAmount,
            String purchasedInCountry,
            Integer accountId,
            String accountNumber,
            String accountName,
            String accountShortName,
            Double quantity,
            Boolean fuelProduct,
            Double unitPriceInTransactionCurrency,
            Double unitPriceInInvoiceCurrency,
            Double unitDiscountTransactionCurrency,
            Double unitDiscountInvoiceCurrency,
            Boolean isInvoiced,
            String invoiceNumber,
            String invoiceDate,
            String siteCode,
            String siteName,
            String siteCountry,
            Location location,
            String cardGroupName,
            String receiptNumber,
            String productCode,
            String productName,
            Integer productGroupId,
            String productGroupName,
            Double delCoExchangeRate,
            Double colCoExchangeRate,
            Boolean isShellSite,
            String network,
            Integer siteGroupId,
            String siteGroupName,
            String postingDate,
            String issuerCode,
            String purchasedInCountryCode,
            String customerCountryCode,
            String customerCountry,
            String releaseCode,
            String cardGroupId,
            String cardSequenceNumber,
            String checkDigit,
            String fleetIDDescription,
            Double vATRate,
            String vATCategory,
            String effectiveDiscountInTrxCurrency,
            String transactionType,
            String pINIndicator,
            String vATApplicable,
            String netInvoiceIndicator,
            String customerCurrencyCode,
            String customerCurrencySymbol,
            Double effectiveUnitDiscountInCustomerCurrency,
            Double effectiveDiscountInCustomerCurrency,
            Double vATonNetAmountInCustomerCurrency,
            String discountType,
            String transactionStatus,
            String payerGroup,
            String refundFlag,
            Double originalSalesItemId,
            String delcoName,
            String delcoCode,
            String payerNumber,
            String payerName,
            String cardExpiryPeriod,
            String authorisationCode,
            String transactionId,
            String transactionLine,
            String allowClearing,
            String cRMNumber,
            String disputeStatus,
            Double rebateRate,
            Double delCoToColCoExchangeRate,
            Double netEuroAmount,
            Double euroRebateAmount,
            Double euroVATAmount,
            String parentCustomerNumber,
            Double vATonNetAmount,
            String vATCountry) {
        this.salesItemId = OptionalNullable.of(salesItemId);
        this.cardId = OptionalNullable.of(cardId);
        this.productId = OptionalNullable.of(productId);
        this.transactionGUID = OptionalNullable.of(transactionGUID);
        this.transactionDate = OptionalNullable.of(transactionDate);
        this.customerInvoiceValueTotalGross = OptionalNullable.of(customerInvoiceValueTotalGross);
        this.cardPAN = OptionalNullable.of(cardPAN);
        this.cardExpiry = OptionalNullable.of(cardExpiry);
        this.transactionTime = OptionalNullable.of(transactionTime);
        this.uTCOffset = OptionalNullable.of(uTCOffset);
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
        this.odometerInput = OptionalNullable.of(odometerInput);
        this.driverName = OptionalNullable.of(driverName);
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
        this.transactionTax = OptionalNullable.of(transactionTax);
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
        this.invoiceTax = OptionalNullable.of(invoiceTax);
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.accountName = OptionalNullable.of(accountName);
        this.accountShortName = OptionalNullable.of(accountShortName);
        this.quantity = OptionalNullable.of(quantity);
        this.fuelProduct = OptionalNullable.of(fuelProduct);
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
        this.isInvoiced = OptionalNullable.of(isInvoiced);
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
        this.invoiceDate = OptionalNullable.of(invoiceDate);
        this.siteCode = OptionalNullable.of(siteCode);
        this.siteName = OptionalNullable.of(siteName);
        this.siteCountry = OptionalNullable.of(siteCountry);
        this.location = location;
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.receiptNumber = OptionalNullable.of(receiptNumber);
        this.productCode = OptionalNullable.of(productCode);
        this.productName = OptionalNullable.of(productName);
        this.productGroupId = OptionalNullable.of(productGroupId);
        this.productGroupName = OptionalNullable.of(productGroupName);
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
        this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
        this.isShellSite = OptionalNullable.of(isShellSite);
        this.network = OptionalNullable.of(network);
        this.siteGroupId = OptionalNullable.of(siteGroupId);
        this.siteGroupName = OptionalNullable.of(siteGroupName);
        this.postingDate = OptionalNullable.of(postingDate);
        this.issuerCode = OptionalNullable.of(issuerCode);
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
        this.customerCountryCode = OptionalNullable.of(customerCountryCode);
        this.customerCountry = OptionalNullable.of(customerCountry);
        this.releaseCode = OptionalNullable.of(releaseCode);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
        this.checkDigit = OptionalNullable.of(checkDigit);
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
        this.vATRate = OptionalNullable.of(vATRate);
        this.vATCategory = OptionalNullable.of(vATCategory);
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
        this.transactionType = OptionalNullable.of(transactionType);
        this.pINIndicator = OptionalNullable.of(pINIndicator);
        this.vATApplicable = OptionalNullable.of(vATApplicable);
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
        this.effectiveUnitDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
        this.effectiveDiscountInCustomerCurrency =
                OptionalNullable.of(effectiveDiscountInCustomerCurrency);
        this.vATonNetAmountInCustomerCurrency =
                OptionalNullable.of(vATonNetAmountInCustomerCurrency);
        this.discountType = OptionalNullable.of(discountType);
        this.transactionStatus = OptionalNullable.of(transactionStatus);
        this.payerGroup = OptionalNullable.of(payerGroup);
        this.refundFlag = OptionalNullable.of(refundFlag);
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
        this.delcoName = OptionalNullable.of(delcoName);
        this.delcoCode = OptionalNullable.of(delcoCode);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerName = OptionalNullable.of(payerName);
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
        this.authorisationCode = OptionalNullable.of(authorisationCode);
        this.transactionId = OptionalNullable.of(transactionId);
        this.transactionLine = OptionalNullable.of(transactionLine);
        this.allowClearing = OptionalNullable.of(allowClearing);
        this.cRMNumber = OptionalNullable.of(cRMNumber);
        this.disputeStatus = OptionalNullable.of(disputeStatus);
        this.rebateRate = OptionalNullable.of(rebateRate);
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
        this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
        this.vATCountry = OptionalNullable.of(vATCountry);
    }

    /**
     * Initialization constructor.
     * @param  salesItemId  Double value for salesItemId.
     * @param  cardId  Integer value for cardId.
     * @param  productId  Integer value for productId.
     * @param  transactionGUID  String value for transactionGUID.
     * @param  transactionDate  String value for transactionDate.
     * @param  customerInvoiceValueTotalGross  Double value for customerInvoiceValueTotalGross.
     * @param  cardPAN  String value for cardPAN.
     * @param  cardExpiry  String value for cardExpiry.
     * @param  transactionTime  String value for transactionTime.
     * @param  uTCOffset  String value for uTCOffset.
     * @param  fleetIdInput  String value for fleetIdInput.
     * @param  odometerInput  Integer value for odometerInput.
     * @param  driverName  String value for driverName.
     * @param  vehicleRegistration  String value for vehicleRegistration.
     * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
     * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
     * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
     * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
     * @param  transactionNetAmount  Double value for transactionNetAmount.
     * @param  transactionTax  Double value for transactionTax.
     * @param  transactionGrossAmount  Double value for transactionGrossAmount.
     * @param  invoiceNetAmount  Double value for invoiceNetAmount.
     * @param  invoiceTax  Double value for invoiceTax.
     * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
     * @param  purchasedInCountry  String value for purchasedInCountry.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     * @param  accountShortName  String value for accountShortName.
     * @param  quantity  Double value for quantity.
     * @param  fuelProduct  Boolean value for fuelProduct.
     * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
     * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
     * @param  unitDiscountTransactionCurrency  Double value for unitDiscountTransactionCurrency.
     * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
     * @param  isInvoiced  Boolean value for isInvoiced.
     * @param  invoiceNumber  String value for invoiceNumber.
     * @param  invoiceDate  String value for invoiceDate.
     * @param  siteCode  String value for siteCode.
     * @param  siteName  String value for siteName.
     * @param  siteCountry  String value for siteCountry.
     * @param  location  Location value for location.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  receiptNumber  String value for receiptNumber.
     * @param  productCode  String value for productCode.
     * @param  productName  String value for productName.
     * @param  productGroupId  Integer value for productGroupId.
     * @param  productGroupName  String value for productGroupName.
     * @param  delCoExchangeRate  Double value for delCoExchangeRate.
     * @param  colCoExchangeRate  Double value for colCoExchangeRate.
     * @param  isShellSite  Boolean value for isShellSite.
     * @param  network  String value for network.
     * @param  siteGroupId  Integer value for siteGroupId.
     * @param  siteGroupName  String value for siteGroupName.
     * @param  postingDate  String value for postingDate.
     * @param  issuerCode  String value for issuerCode.
     * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
     * @param  customerCountryCode  String value for customerCountryCode.
     * @param  customerCountry  String value for customerCountry.
     * @param  releaseCode  String value for releaseCode.
     * @param  cardGroupId  String value for cardGroupId.
     * @param  cardSequenceNumber  String value for cardSequenceNumber.
     * @param  checkDigit  String value for checkDigit.
     * @param  fleetIDDescription  String value for fleetIDDescription.
     * @param  vATRate  Double value for vATRate.
     * @param  vATCategory  String value for vATCategory.
     * @param  effectiveDiscountInTrxCurrency  String value for effectiveDiscountInTrxCurrency.
     * @param  transactionType  String value for transactionType.
     * @param  pINIndicator  String value for pINIndicator.
     * @param  vATApplicable  String value for vATApplicable.
     * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
     * @param  customerCurrencyCode  String value for customerCurrencyCode.
     * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
     * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
     *         effectiveUnitDiscountInCustomerCurrency.
     * @param  effectiveDiscountInCustomerCurrency  Double value for
     *         effectiveDiscountInCustomerCurrency.
     * @param  vATonNetAmountInCustomerCurrency  Double value for vATonNetAmountInCustomerCurrency.
     * @param  discountType  String value for discountType.
     * @param  transactionStatus  String value for transactionStatus.
     * @param  payerGroup  String value for payerGroup.
     * @param  refundFlag  String value for refundFlag.
     * @param  originalSalesItemId  Double value for originalSalesItemId.
     * @param  delcoName  String value for delcoName.
     * @param  delcoCode  String value for delcoCode.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
     * @param  authorisationCode  String value for authorisationCode.
     * @param  transactionId  String value for transactionId.
     * @param  transactionLine  String value for transactionLine.
     * @param  allowClearing  String value for allowClearing.
     * @param  cRMNumber  String value for cRMNumber.
     * @param  disputeStatus  String value for disputeStatus.
     * @param  rebateRate  Double value for rebateRate.
     * @param  delCoToColCoExchangeRate  Double value for delCoToColCoExchangeRate.
     * @param  netEuroAmount  Double value for netEuroAmount.
     * @param  euroRebateAmount  Double value for euroRebateAmount.
     * @param  euroVATAmount  Double value for euroVATAmount.
     * @param  parentCustomerNumber  String value for parentCustomerNumber.
     * @param  vATonNetAmount  Double value for vATonNetAmount.
     * @param  vATCountry  String value for vATCountry.
     */

    protected TransactionExceptions(OptionalNullable<Double> salesItemId,
            OptionalNullable<Integer> cardId, OptionalNullable<Integer> productId,
            OptionalNullable<String> transactionGUID, OptionalNullable<String> transactionDate,
            OptionalNullable<Double> customerInvoiceValueTotalGross,
            OptionalNullable<String> cardPAN, OptionalNullable<String> cardExpiry,
            OptionalNullable<String> transactionTime, OptionalNullable<String> uTCOffset,
            OptionalNullable<String> fleetIdInput, OptionalNullable<Integer> odometerInput,
            OptionalNullable<String> driverName, OptionalNullable<String> vehicleRegistration,
            OptionalNullable<String> invoiceCurrencyCode,
            OptionalNullable<String> invoiceCurrencySymbol,
            OptionalNullable<String> transactionCurrencyCode,
            OptionalNullable<String> transactionCurrencySymbol,
            OptionalNullable<Double> transactionNetAmount, OptionalNullable<Double> transactionTax,
            OptionalNullable<Double> transactionGrossAmount,
            OptionalNullable<Double> invoiceNetAmount, OptionalNullable<Double> invoiceTax,
            OptionalNullable<Double> invoiceGrossAmount,
            OptionalNullable<String> purchasedInCountry, OptionalNullable<Integer> accountId,
            OptionalNullable<String> accountNumber, OptionalNullable<String> accountName,
            OptionalNullable<String> accountShortName, OptionalNullable<Double> quantity,
            OptionalNullable<Boolean> fuelProduct,
            OptionalNullable<Double> unitPriceInTransactionCurrency,
            OptionalNullable<Double> unitPriceInInvoiceCurrency,
            OptionalNullable<Double> unitDiscountTransactionCurrency,
            OptionalNullable<Double> unitDiscountInvoiceCurrency,
            OptionalNullable<Boolean> isInvoiced, OptionalNullable<String> invoiceNumber,
            OptionalNullable<String> invoiceDate, OptionalNullable<String> siteCode,
            OptionalNullable<String> siteName, OptionalNullable<String> siteCountry,
            Location location, OptionalNullable<String> cardGroupName,
            OptionalNullable<String> receiptNumber, OptionalNullable<String> productCode,
            OptionalNullable<String> productName, OptionalNullable<Integer> productGroupId,
            OptionalNullable<String> productGroupName, OptionalNullable<Double> delCoExchangeRate,
            OptionalNullable<Double> colCoExchangeRate, OptionalNullable<Boolean> isShellSite,
            OptionalNullable<String> network, OptionalNullable<Integer> siteGroupId,
            OptionalNullable<String> siteGroupName, OptionalNullable<String> postingDate,
            OptionalNullable<String> issuerCode, OptionalNullable<String> purchasedInCountryCode,
            OptionalNullable<String> customerCountryCode, OptionalNullable<String> customerCountry,
            OptionalNullable<String> releaseCode, OptionalNullable<String> cardGroupId,
            OptionalNullable<String> cardSequenceNumber, OptionalNullable<String> checkDigit,
            OptionalNullable<String> fleetIDDescription, OptionalNullable<Double> vATRate,
            OptionalNullable<String> vATCategory,
            OptionalNullable<String> effectiveDiscountInTrxCurrency,
            OptionalNullable<String> transactionType, OptionalNullable<String> pINIndicator,
            OptionalNullable<String> vATApplicable, OptionalNullable<String> netInvoiceIndicator,
            OptionalNullable<String> customerCurrencyCode,
            OptionalNullable<String> customerCurrencySymbol,
            OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency,
            OptionalNullable<Double> effectiveDiscountInCustomerCurrency,
            OptionalNullable<Double> vATonNetAmountInCustomerCurrency,
            OptionalNullable<String> discountType, OptionalNullable<String> transactionStatus,
            OptionalNullable<String> payerGroup, OptionalNullable<String> refundFlag,
            OptionalNullable<Double> originalSalesItemId, OptionalNullable<String> delcoName,
            OptionalNullable<String> delcoCode, OptionalNullable<String> payerNumber,
            OptionalNullable<String> payerName, OptionalNullable<String> cardExpiryPeriod,
            OptionalNullable<String> authorisationCode, OptionalNullable<String> transactionId,
            OptionalNullable<String> transactionLine, OptionalNullable<String> allowClearing,
            OptionalNullable<String> cRMNumber, OptionalNullable<String> disputeStatus,
            OptionalNullable<Double> rebateRate, OptionalNullable<Double> delCoToColCoExchangeRate,
            OptionalNullable<Double> netEuroAmount, OptionalNullable<Double> euroRebateAmount,
            OptionalNullable<Double> euroVATAmount, OptionalNullable<String> parentCustomerNumber,
            OptionalNullable<Double> vATonNetAmount, OptionalNullable<String> vATCountry) {
        this.salesItemId = salesItemId;
        this.cardId = cardId;
        this.productId = productId;
        this.transactionGUID = transactionGUID;
        this.transactionDate = transactionDate;
        this.customerInvoiceValueTotalGross = customerInvoiceValueTotalGross;
        this.cardPAN = cardPAN;
        this.cardExpiry = cardExpiry;
        this.transactionTime = transactionTime;
        this.uTCOffset = uTCOffset;
        this.fleetIdInput = fleetIdInput;
        this.odometerInput = odometerInput;
        this.driverName = driverName;
        this.vehicleRegistration = vehicleRegistration;
        this.invoiceCurrencyCode = invoiceCurrencyCode;
        this.invoiceCurrencySymbol = invoiceCurrencySymbol;
        this.transactionCurrencyCode = transactionCurrencyCode;
        this.transactionCurrencySymbol = transactionCurrencySymbol;
        this.transactionNetAmount = transactionNetAmount;
        this.transactionTax = transactionTax;
        this.transactionGrossAmount = transactionGrossAmount;
        this.invoiceNetAmount = invoiceNetAmount;
        this.invoiceTax = invoiceTax;
        this.invoiceGrossAmount = invoiceGrossAmount;
        this.purchasedInCountry = purchasedInCountry;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountName = accountName;
        this.accountShortName = accountShortName;
        this.quantity = quantity;
        this.fuelProduct = fuelProduct;
        this.unitPriceInTransactionCurrency = unitPriceInTransactionCurrency;
        this.unitPriceInInvoiceCurrency = unitPriceInInvoiceCurrency;
        this.unitDiscountTransactionCurrency = unitDiscountTransactionCurrency;
        this.unitDiscountInvoiceCurrency = unitDiscountInvoiceCurrency;
        this.isInvoiced = isInvoiced;
        this.invoiceNumber = invoiceNumber;
        this.invoiceDate = invoiceDate;
        this.siteCode = siteCode;
        this.siteName = siteName;
        this.siteCountry = siteCountry;
        this.location = location;
        this.cardGroupName = cardGroupName;
        this.receiptNumber = receiptNumber;
        this.productCode = productCode;
        this.productName = productName;
        this.productGroupId = productGroupId;
        this.productGroupName = productGroupName;
        this.delCoExchangeRate = delCoExchangeRate;
        this.colCoExchangeRate = colCoExchangeRate;
        this.isShellSite = isShellSite;
        this.network = network;
        this.siteGroupId = siteGroupId;
        this.siteGroupName = siteGroupName;
        this.postingDate = postingDate;
        this.issuerCode = issuerCode;
        this.purchasedInCountryCode = purchasedInCountryCode;
        this.customerCountryCode = customerCountryCode;
        this.customerCountry = customerCountry;
        this.releaseCode = releaseCode;
        this.cardGroupId = cardGroupId;
        this.cardSequenceNumber = cardSequenceNumber;
        this.checkDigit = checkDigit;
        this.fleetIDDescription = fleetIDDescription;
        this.vATRate = vATRate;
        this.vATCategory = vATCategory;
        this.effectiveDiscountInTrxCurrency = effectiveDiscountInTrxCurrency;
        this.transactionType = transactionType;
        this.pINIndicator = pINIndicator;
        this.vATApplicable = vATApplicable;
        this.netInvoiceIndicator = netInvoiceIndicator;
        this.customerCurrencyCode = customerCurrencyCode;
        this.customerCurrencySymbol = customerCurrencySymbol;
        this.effectiveUnitDiscountInCustomerCurrency = effectiveUnitDiscountInCustomerCurrency;
        this.effectiveDiscountInCustomerCurrency = effectiveDiscountInCustomerCurrency;
        this.vATonNetAmountInCustomerCurrency = vATonNetAmountInCustomerCurrency;
        this.discountType = discountType;
        this.transactionStatus = transactionStatus;
        this.payerGroup = payerGroup;
        this.refundFlag = refundFlag;
        this.originalSalesItemId = originalSalesItemId;
        this.delcoName = delcoName;
        this.delcoCode = delcoCode;
        this.payerNumber = payerNumber;
        this.payerName = payerName;
        this.cardExpiryPeriod = cardExpiryPeriod;
        this.authorisationCode = authorisationCode;
        this.transactionId = transactionId;
        this.transactionLine = transactionLine;
        this.allowClearing = allowClearing;
        this.cRMNumber = cRMNumber;
        this.disputeStatus = disputeStatus;
        this.rebateRate = rebateRate;
        this.delCoToColCoExchangeRate = delCoToColCoExchangeRate;
        this.netEuroAmount = netEuroAmount;
        this.euroRebateAmount = euroRebateAmount;
        this.euroVATAmount = euroVATAmount;
        this.parentCustomerNumber = parentCustomerNumber;
        this.vATonNetAmount = vATonNetAmount;
        this.vATCountry = vATCountry;
    }

    /**
     * Internal Getter for SalesItemId.
     * Unique Sales Item Identifier
     * @return Returns the Internal Double
     */
    @JsonGetter("SalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetSalesItemId() {
        return this.salesItemId;
    }

    /**
     * Getter for SalesItemId.
     * Unique Sales Item Identifier
     * @return Returns the Double
     */
    public Double getSalesItemId() {
        return OptionalNullable.getFrom(salesItemId);
    }

    /**
     * Setter for SalesItemId.
     * Unique Sales Item Identifier
     * @param salesItemId Value for Double
     */
    @JsonSetter("SalesItemId")
    public void setSalesItemId(Double salesItemId) {
        this.salesItemId = OptionalNullable.of(salesItemId);
    }

    /**
     * UnSetter for SalesItemId.
     * Unique Sales Item Identifier
     */
    public void unsetSalesItemId() {
        salesItemId = null;
    }

    /**
     * Internal Getter for CardId.
     * Unique Card Identifier
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardId() {
        return this.cardId;
    }

    /**
     * Getter for CardId.
     * Unique Card Identifier
     * @return Returns the Integer
     */
    public Integer getCardId() {
        return OptionalNullable.getFrom(cardId);
    }

    /**
     * Setter for CardId.
     * Unique Card Identifier
     * @param cardId Value for Integer
     */
    @JsonSetter("CardId")
    public void setCardId(Integer cardId) {
        this.cardId = OptionalNullable.of(cardId);
    }

    /**
     * UnSetter for CardId.
     * Unique Card Identifier
     */
    public void unsetCardId() {
        cardId = null;
    }

    /**
     * Internal Getter for ProductId.
     * Product Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductId() {
        return this.productId;
    }

    /**
     * Getter for ProductId.
     * Product Id
     * @return Returns the Integer
     */
    public Integer getProductId() {
        return OptionalNullable.getFrom(productId);
    }

    /**
     * Setter for ProductId.
     * Product Id
     * @param productId Value for Integer
     */
    @JsonSetter("ProductId")
    public void setProductId(Integer productId) {
        this.productId = OptionalNullable.of(productId);
    }

    /**
     * UnSetter for ProductId.
     * Product Id
     */
    public void unsetProductId() {
        productId = null;
    }

    /**
     * Internal Getter for TransactionGUID.
     * Transaction Unique Identifier
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionGUID")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionGUID() {
        return this.transactionGUID;
    }

    /**
     * Getter for TransactionGUID.
     * Transaction Unique Identifier
     * @return Returns the String
     */
    public String getTransactionGUID() {
        return OptionalNullable.getFrom(transactionGUID);
    }

    /**
     * Setter for TransactionGUID.
     * Transaction Unique Identifier
     * @param transactionGUID Value for String
     */
    @JsonSetter("TransactionGUID")
    public void setTransactionGUID(String transactionGUID) {
        this.transactionGUID = OptionalNullable.of(transactionGUID);
    }

    /**
     * UnSetter for TransactionGUID.
     * Transaction Unique Identifier
     */
    public void unsetTransactionGUID() {
        transactionGUID = null;
    }

    /**
     * Internal Getter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionDate() {
        return this.transactionDate;
    }

    /**
     * Getter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd
     * @return Returns the String
     */
    public String getTransactionDate() {
        return OptionalNullable.getFrom(transactionDate);
    }

    /**
     * Setter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd
     * @param transactionDate Value for String
     */
    @JsonSetter("TransactionDate")
    public void setTransactionDate(String transactionDate) {
        this.transactionDate = OptionalNullable.of(transactionDate);
    }

    /**
     * UnSetter for TransactionDate.
     * Local Transaction Date of where the transaction took place Format: yyyyMMdd
     */
    public void unsetTransactionDate() {
        transactionDate = null;
    }

    /**
     * Internal Getter for CustomerInvoiceValueTotalGross.
     * Total Gross Amount for the Invoice Customer
     * @return Returns the Internal Double
     */
    @JsonGetter("CustomerInvoiceValueTotalGross")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCustomerInvoiceValueTotalGross() {
        return this.customerInvoiceValueTotalGross;
    }

    /**
     * Getter for CustomerInvoiceValueTotalGross.
     * Total Gross Amount for the Invoice Customer
     * @return Returns the Double
     */
    public Double getCustomerInvoiceValueTotalGross() {
        return OptionalNullable.getFrom(customerInvoiceValueTotalGross);
    }

    /**
     * Setter for CustomerInvoiceValueTotalGross.
     * Total Gross Amount for the Invoice Customer
     * @param customerInvoiceValueTotalGross Value for Double
     */
    @JsonSetter("CustomerInvoiceValueTotalGross")
    public void setCustomerInvoiceValueTotalGross(Double customerInvoiceValueTotalGross) {
        this.customerInvoiceValueTotalGross = OptionalNullable.of(customerInvoiceValueTotalGross);
    }

    /**
     * UnSetter for CustomerInvoiceValueTotalGross.
     * Total Gross Amount for the Invoice Customer
     */
    public void unsetCustomerInvoiceValueTotalGross() {
        customerInvoiceValueTotalGross = null;
    }

    /**
     * Internal Getter for CardPAN.
     * Card PAN number Returns masked PAN number when masking is enabled at the Microservices
     * configuration (Mask all digits except the last 6 digits of the PAN)
     * @return Returns the Internal String
     */
    @JsonGetter("CardPAN")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardPAN() {
        return this.cardPAN;
    }

    /**
     * Getter for CardPAN.
     * Card PAN number Returns masked PAN number when masking is enabled at the Microservices
     * configuration (Mask all digits except the last 6 digits of the PAN)
     * @return Returns the String
     */
    public String getCardPAN() {
        return OptionalNullable.getFrom(cardPAN);
    }

    /**
     * Setter for CardPAN.
     * Card PAN number Returns masked PAN number when masking is enabled at the Microservices
     * configuration (Mask all digits except the last 6 digits of the PAN)
     * @param cardPAN Value for String
     */
    @JsonSetter("CardPAN")
    public void setCardPAN(String cardPAN) {
        this.cardPAN = OptionalNullable.of(cardPAN);
    }

    /**
     * UnSetter for CardPAN.
     * Card PAN number Returns masked PAN number when masking is enabled at the Microservices
     * configuration (Mask all digits except the last 6 digits of the PAN)
     */
    public void unsetCardPAN() {
        cardPAN = null;
    }

    /**
     * Internal Getter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("CardExpiry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardExpiry() {
        return this.cardExpiry;
    }

    /**
     * Getter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @return Returns the String
     */
    public String getCardExpiry() {
        return OptionalNullable.getFrom(cardExpiry);
    }

    /**
     * Setter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     * @param cardExpiry Value for String
     */
    @JsonSetter("CardExpiry")
    public void setCardExpiry(String cardExpiry) {
        this.cardExpiry = OptionalNullable.of(cardExpiry);
    }

    /**
     * UnSetter for CardExpiry.
     * Card Expiry Date Format: yyyyMMdd
     */
    public void unsetCardExpiry() {
        cardExpiry = null;
    }

    /**
     * Internal Getter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionTime() {
        return this.transactionTime;
    }

    /**
     * Getter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * @return Returns the String
     */
    public String getTransactionTime() {
        return OptionalNullable.getFrom(transactionTime);
    }

    /**
     * Setter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     * @param transactionTime Value for String
     */
    @JsonSetter("TransactionTime")
    public void setTransactionTime(String transactionTime) {
        this.transactionTime = OptionalNullable.of(transactionTime);
    }

    /**
     * UnSetter for TransactionTime.
     * Local Transaction Time of where the transaction took place Format: HH:mm:ss (24 hours format)
     */
    public void unsetTransactionTime() {
        transactionTime = null;
    }

    /**
     * Internal Getter for UTCOffset.
     * UTC Offset extracted from GFN Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @return Returns the Internal String
     */
    @JsonGetter("UTCOffset")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetUTCOffset() {
        return this.uTCOffset;
    }

    /**
     * Getter for UTCOffset.
     * UTC Offset extracted from GFN Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @return Returns the String
     */
    public String getUTCOffset() {
        return OptionalNullable.getFrom(uTCOffset);
    }

    /**
     * Setter for UTCOffset.
     * UTC Offset extracted from GFN Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     * @param uTCOffset Value for String
     */
    @JsonSetter("UTCOffset")
    public void setUTCOffset(String uTCOffset) {
        this.uTCOffset = OptionalNullable.of(uTCOffset);
    }

    /**
     * UnSetter for UTCOffset.
     * UTC Offset extracted from GFN Sales Date time. Note: This may not be accurate for all TPN
     * transactions Format: +/-HH:mm:ss (24 hours format)
     */
    public void unsetUTCOffset() {
        uTCOffset = null;
    }

    /**
     * Internal Getter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIdInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIdInput() {
        return this.fleetIdInput;
    }

    /**
     * Getter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction
     * @return Returns the String
     */
    public String getFleetIdInput() {
        return OptionalNullable.getFrom(fleetIdInput);
    }

    /**
     * Setter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction
     * @param fleetIdInput Value for String
     */
    @JsonSetter("FleetIdInput")
    public void setFleetIdInput(String fleetIdInput) {
        this.fleetIdInput = OptionalNullable.of(fleetIdInput);
    }

    /**
     * UnSetter for FleetIdInput.
     * Fleet Id Input as entered by the drivers at the time of transaction
     */
    public void unsetFleetIdInput() {
        fleetIdInput = null;
    }

    /**
     * Internal Getter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction
     * @return Returns the Internal Integer
     */
    @JsonGetter("OdometerInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetOdometerInput() {
        return this.odometerInput;
    }

    /**
     * Getter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction
     * @return Returns the Integer
     */
    public Integer getOdometerInput() {
        return OptionalNullable.getFrom(odometerInput);
    }

    /**
     * Setter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction
     * @param odometerInput Value for Integer
     */
    @JsonSetter("OdometerInput")
    public void setOdometerInput(Integer odometerInput) {
        this.odometerInput = OptionalNullable.of(odometerInput);
    }

    /**
     * UnSetter for OdometerInput.
     * Odometer Input as entered by the drivers at the time of transaction
     */
    public void unsetOdometerInput() {
        odometerInput = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver Name embossed on the card
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver Name embossed on the card
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver Name embossed on the card
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver Name embossed on the card
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @return Returns the Internal String
     */
    @JsonGetter("VehicleRegistration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVehicleRegistration() {
        return this.vehicleRegistration;
    }

    /**
     * Getter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @return Returns the String
     */
    public String getVehicleRegistration() {
        return OptionalNullable.getFrom(vehicleRegistration);
    }

    /**
     * Setter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     * @param vehicleRegistration Value for String
     */
    @JsonSetter("VehicleRegistration")
    public void setVehicleRegistration(String vehicleRegistration) {
        this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
    }

    /**
     * UnSetter for VehicleRegistration.
     * Vehicle Registration Number embossed on the card
     */
    public void unsetVehicleRegistration() {
        vehicleRegistration = null;
    }

    /**
     * Internal Getter for InvoiceCurrencyCode.
     * ISO currency code (Example: GBP)
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencyCode() {
        return this.invoiceCurrencyCode;
    }

    /**
     * Getter for InvoiceCurrencyCode.
     * ISO currency code (Example: GBP)
     * @return Returns the String
     */
    public String getInvoiceCurrencyCode() {
        return OptionalNullable.getFrom(invoiceCurrencyCode);
    }

    /**
     * Setter for InvoiceCurrencyCode.
     * ISO currency code (Example: GBP)
     * @param invoiceCurrencyCode Value for String
     */
    @JsonSetter("InvoiceCurrencyCode")
    public void setInvoiceCurrencyCode(String invoiceCurrencyCode) {
        this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
    }

    /**
     * UnSetter for InvoiceCurrencyCode.
     * ISO currency code (Example: GBP)
     */
    public void unsetInvoiceCurrencyCode() {
        invoiceCurrencyCode = null;
    }

    /**
     * Internal Getter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code (i.e. £, $, etc.,)
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceCurrencySymbol() {
        return this.invoiceCurrencySymbol;
    }

    /**
     * Getter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code (i.e. £, $, etc.,)
     * @return Returns the String
     */
    public String getInvoiceCurrencySymbol() {
        return OptionalNullable.getFrom(invoiceCurrencySymbol);
    }

    /**
     * Setter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code (i.e. £, $, etc.,)
     * @param invoiceCurrencySymbol Value for String
     */
    @JsonSetter("InvoiceCurrencySymbol")
    public void setInvoiceCurrencySymbol(String invoiceCurrencySymbol) {
        this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
    }

    /**
     * UnSetter for InvoiceCurrencySymbol.
     * Currency symbol of the Invoice Currency Code (i.e. £, $, etc.,)
     */
    public void unsetInvoiceCurrencySymbol() {
        invoiceCurrencySymbol = null;
    }

    /**
     * Internal Getter for TransactionCurrencyCode.
     * ISO currency code
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencyCode() {
        return this.transactionCurrencyCode;
    }

    /**
     * Getter for TransactionCurrencyCode.
     * ISO currency code
     * @return Returns the String
     */
    public String getTransactionCurrencyCode() {
        return OptionalNullable.getFrom(transactionCurrencyCode);
    }

    /**
     * Setter for TransactionCurrencyCode.
     * ISO currency code
     * @param transactionCurrencyCode Value for String
     */
    @JsonSetter("TransactionCurrencyCode")
    public void setTransactionCurrencyCode(String transactionCurrencyCode) {
        this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
    }

    /**
     * UnSetter for TransactionCurrencyCode.
     * ISO currency code
     */
    public void unsetTransactionCurrencyCode() {
        transactionCurrencyCode = null;
    }

    /**
     * Internal Getter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code (i.e. £, $, etc.,)
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionCurrencySymbol() {
        return this.transactionCurrencySymbol;
    }

    /**
     * Getter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code (i.e. £, $, etc.,)
     * @return Returns the String
     */
    public String getTransactionCurrencySymbol() {
        return OptionalNullable.getFrom(transactionCurrencySymbol);
    }

    /**
     * Setter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code (i.e. £, $, etc.,)
     * @param transactionCurrencySymbol Value for String
     */
    @JsonSetter("TransactionCurrencySymbol")
    public void setTransactionCurrencySymbol(String transactionCurrencySymbol) {
        this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
    }

    /**
     * UnSetter for TransactionCurrencySymbol.
     * Currency symbol of the Transaction Currency Code (i.e. £, $, etc.,)
     */
    public void unsetTransactionCurrencySymbol() {
        transactionCurrencySymbol = null;
    }

    /**
     * Internal Getter for TransactionNetAmount.
     * Net Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionNetAmount() {
        return this.transactionNetAmount;
    }

    /**
     * Getter for TransactionNetAmount.
     * Net Amount
     * @return Returns the Double
     */
    public Double getTransactionNetAmount() {
        return OptionalNullable.getFrom(transactionNetAmount);
    }

    /**
     * Setter for TransactionNetAmount.
     * Net Amount
     * @param transactionNetAmount Value for Double
     */
    @JsonSetter("TransactionNetAmount")
    public void setTransactionNetAmount(Double transactionNetAmount) {
        this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
    }

    /**
     * UnSetter for TransactionNetAmount.
     * Net Amount
     */
    public void unsetTransactionNetAmount() {
        transactionNetAmount = null;
    }

    /**
     * Internal Getter for TransactionTax.
     * Tax Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionTax() {
        return this.transactionTax;
    }

    /**
     * Getter for TransactionTax.
     * Tax Amount
     * @return Returns the Double
     */
    public Double getTransactionTax() {
        return OptionalNullable.getFrom(transactionTax);
    }

    /**
     * Setter for TransactionTax.
     * Tax Amount
     * @param transactionTax Value for Double
     */
    @JsonSetter("TransactionTax")
    public void setTransactionTax(Double transactionTax) {
        this.transactionTax = OptionalNullable.of(transactionTax);
    }

    /**
     * UnSetter for TransactionTax.
     * Tax Amount
     */
    public void unsetTransactionTax() {
        transactionTax = null;
    }

    /**
     * Internal Getter for TransactionGrossAmount.
     * Gross Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionGrossAmount() {
        return this.transactionGrossAmount;
    }

    /**
     * Getter for TransactionGrossAmount.
     * Gross Amount
     * @return Returns the Double
     */
    public Double getTransactionGrossAmount() {
        return OptionalNullable.getFrom(transactionGrossAmount);
    }

    /**
     * Setter for TransactionGrossAmount.
     * Gross Amount
     * @param transactionGrossAmount Value for Double
     */
    @JsonSetter("TransactionGrossAmount")
    public void setTransactionGrossAmount(Double transactionGrossAmount) {
        this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
    }

    /**
     * UnSetter for TransactionGrossAmount.
     * Gross Amount
     */
    public void unsetTransactionGrossAmount() {
        transactionGrossAmount = null;
    }

    /**
     * Internal Getter for InvoiceNetAmount.
     * Invoiced Net Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceNetAmount() {
        return this.invoiceNetAmount;
    }

    /**
     * Getter for InvoiceNetAmount.
     * Invoiced Net Amount
     * @return Returns the Double
     */
    public Double getInvoiceNetAmount() {
        return OptionalNullable.getFrom(invoiceNetAmount);
    }

    /**
     * Setter for InvoiceNetAmount.
     * Invoiced Net Amount
     * @param invoiceNetAmount Value for Double
     */
    @JsonSetter("InvoiceNetAmount")
    public void setInvoiceNetAmount(Double invoiceNetAmount) {
        this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
    }

    /**
     * UnSetter for InvoiceNetAmount.
     * Invoiced Net Amount
     */
    public void unsetInvoiceNetAmount() {
        invoiceNetAmount = null;
    }

    /**
     * Internal Getter for InvoiceTax.
     * Invoiced Tax Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceTax() {
        return this.invoiceTax;
    }

    /**
     * Getter for InvoiceTax.
     * Invoiced Tax Amount
     * @return Returns the Double
     */
    public Double getInvoiceTax() {
        return OptionalNullable.getFrom(invoiceTax);
    }

    /**
     * Setter for InvoiceTax.
     * Invoiced Tax Amount
     * @param invoiceTax Value for Double
     */
    @JsonSetter("InvoiceTax")
    public void setInvoiceTax(Double invoiceTax) {
        this.invoiceTax = OptionalNullable.of(invoiceTax);
    }

    /**
     * UnSetter for InvoiceTax.
     * Invoiced Tax Amount
     */
    public void unsetInvoiceTax() {
        invoiceTax = null;
    }

    /**
     * Internal Getter for InvoiceGrossAmount.
     * Invoice Gross Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("InvoiceGrossAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInvoiceGrossAmount() {
        return this.invoiceGrossAmount;
    }

    /**
     * Getter for InvoiceGrossAmount.
     * Invoice Gross Amount
     * @return Returns the Double
     */
    public Double getInvoiceGrossAmount() {
        return OptionalNullable.getFrom(invoiceGrossAmount);
    }

    /**
     * Setter for InvoiceGrossAmount.
     * Invoice Gross Amount
     * @param invoiceGrossAmount Value for Double
     */
    @JsonSetter("InvoiceGrossAmount")
    public void setInvoiceGrossAmount(Double invoiceGrossAmount) {
        this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
    }

    /**
     * UnSetter for InvoiceGrossAmount.
     * Invoice Gross Amount
     */
    public void unsetInvoiceGrossAmount() {
        invoiceGrossAmount = null;
    }

    /**
     * Internal Getter for PurchasedInCountry.
     * Country of Purchase (Ex: France, Germany, etc.,)
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountry() {
        return this.purchasedInCountry;
    }

    /**
     * Getter for PurchasedInCountry.
     * Country of Purchase (Ex: France, Germany, etc.,)
     * @return Returns the String
     */
    public String getPurchasedInCountry() {
        return OptionalNullable.getFrom(purchasedInCountry);
    }

    /**
     * Setter for PurchasedInCountry.
     * Country of Purchase (Ex: France, Germany, etc.,)
     * @param purchasedInCountry Value for String
     */
    @JsonSetter("PurchasedInCountry")
    public void setPurchasedInCountry(String purchasedInCountry) {
        this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
    }

    /**
     * UnSetter for PurchasedInCountry.
     * Country of Purchase (Ex: France, Germany, etc.,)
     */
    public void unsetPurchasedInCountry() {
        purchasedInCountry = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for AccountName.
     * Account Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Account Name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Account Name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Account Name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountShortName.
     * Account Short Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountShortName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountShortName() {
        return this.accountShortName;
    }

    /**
     * Getter for AccountShortName.
     * Account Short Name
     * @return Returns the String
     */
    public String getAccountShortName() {
        return OptionalNullable.getFrom(accountShortName);
    }

    /**
     * Setter for AccountShortName.
     * Account Short Name
     * @param accountShortName Value for String
     */
    @JsonSetter("AccountShortName")
    public void setAccountShortName(String accountShortName) {
        this.accountShortName = OptionalNullable.of(accountShortName);
    }

    /**
     * UnSetter for AccountShortName.
     * Account Short Name
     */
    public void unsetAccountShortName() {
        accountShortName = null;
    }

    /**
     * Internal Getter for Quantity.
     * Quantity/Volume
     * @return Returns the Internal Double
     */
    @JsonGetter("Quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetQuantity() {
        return this.quantity;
    }

    /**
     * Getter for Quantity.
     * Quantity/Volume
     * @return Returns the Double
     */
    public Double getQuantity() {
        return OptionalNullable.getFrom(quantity);
    }

    /**
     * Setter for Quantity.
     * Quantity/Volume
     * @param quantity Value for Double
     */
    @JsonSetter("Quantity")
    public void setQuantity(Double quantity) {
        this.quantity = OptionalNullable.of(quantity);
    }

    /**
     * UnSetter for Quantity.
     * Quantity/Volume
     */
    public void unsetQuantity() {
        quantity = null;
    }

    /**
     * Internal Getter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @return Returns the Internal Boolean
     */
    @JsonGetter("FuelProduct")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetFuelProduct() {
        return this.fuelProduct;
    }

    /**
     * Getter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @return Returns the Boolean
     */
    public Boolean getFuelProduct() {
        return OptionalNullable.getFrom(fuelProduct);
    }

    /**
     * Setter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     * @param fuelProduct Value for Boolean
     */
    @JsonSetter("FuelProduct")
    public void setFuelProduct(Boolean fuelProduct) {
        this.fuelProduct = OptionalNullable.of(fuelProduct);
    }

    /**
     * UnSetter for FuelProduct.
     * True if the product on transaction is listed as a fuel product else return false
     */
    public void unsetFuelProduct() {
        fuelProduct = null;
    }

    /**
     * Internal Getter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitPriceInTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitPriceInTransactionCurrency() {
        return this.unitPriceInTransactionCurrency;
    }

    /**
     * Getter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency
     * @return Returns the Double
     */
    public Double getUnitPriceInTransactionCurrency() {
        return OptionalNullable.getFrom(unitPriceInTransactionCurrency);
    }

    /**
     * Setter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency
     * @param unitPriceInTransactionCurrency Value for Double
     */
    @JsonSetter("UnitPriceInTransactionCurrency")
    public void setUnitPriceInTransactionCurrency(Double unitPriceInTransactionCurrency) {
        this.unitPriceInTransactionCurrency = OptionalNullable.of(unitPriceInTransactionCurrency);
    }

    /**
     * UnSetter for UnitPriceInTransactionCurrency.
     * Product Unit Price in transaction currency
     */
    public void unsetUnitPriceInTransactionCurrency() {
        unitPriceInTransactionCurrency = null;
    }

    /**
     * Internal Getter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitPriceInInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitPriceInInvoiceCurrency() {
        return this.unitPriceInInvoiceCurrency;
    }

    /**
     * Getter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency
     * @return Returns the Double
     */
    public Double getUnitPriceInInvoiceCurrency() {
        return OptionalNullable.getFrom(unitPriceInInvoiceCurrency);
    }

    /**
     * Setter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency
     * @param unitPriceInInvoiceCurrency Value for Double
     */
    @JsonSetter("UnitPriceInInvoiceCurrency")
    public void setUnitPriceInInvoiceCurrency(Double unitPriceInInvoiceCurrency) {
        this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
    }

    /**
     * UnSetter for UnitPriceInInvoiceCurrency.
     * Product Unit Price in invoice currency
     */
    public void unsetUnitPriceInInvoiceCurrency() {
        unitPriceInInvoiceCurrency = null;
    }

    /**
     * Internal Getter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitDiscountTransactionCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitDiscountTransactionCurrency() {
        return this.unitDiscountTransactionCurrency;
    }

    /**
     * Getter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency
     * @return Returns the Double
     */
    public Double getUnitDiscountTransactionCurrency() {
        return OptionalNullable.getFrom(unitDiscountTransactionCurrency);
    }

    /**
     * Setter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency
     * @param unitDiscountTransactionCurrency Value for Double
     */
    @JsonSetter("UnitDiscountTransactionCurrency")
    public void setUnitDiscountTransactionCurrency(Double unitDiscountTransactionCurrency) {
        this.unitDiscountTransactionCurrency = OptionalNullable.of(unitDiscountTransactionCurrency);
    }

    /**
     * UnSetter for UnitDiscountTransactionCurrency.
     * Unit Discount in transaction currency
     */
    public void unsetUnitDiscountTransactionCurrency() {
        unitDiscountTransactionCurrency = null;
    }

    /**
     * Internal Getter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency
     * @return Returns the Internal Double
     */
    @JsonGetter("UnitDiscountInvoiceCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetUnitDiscountInvoiceCurrency() {
        return this.unitDiscountInvoiceCurrency;
    }

    /**
     * Getter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency
     * @return Returns the Double
     */
    public Double getUnitDiscountInvoiceCurrency() {
        return OptionalNullable.getFrom(unitDiscountInvoiceCurrency);
    }

    /**
     * Setter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency
     * @param unitDiscountInvoiceCurrency Value for Double
     */
    @JsonSetter("UnitDiscountInvoiceCurrency")
    public void setUnitDiscountInvoiceCurrency(Double unitDiscountInvoiceCurrency) {
        this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
    }

    /**
     * UnSetter for UnitDiscountInvoiceCurrency.
     * Unit Discount in invoice currency
     */
    public void unsetUnitDiscountInvoiceCurrency() {
        unitDiscountInvoiceCurrency = null;
    }

    /**
     * Internal Getter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsInvoiced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsInvoiced() {
        return this.isInvoiced;
    }

    /**
     * Getter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @return Returns the Boolean
     */
    public Boolean getIsInvoiced() {
        return OptionalNullable.getFrom(isInvoiced);
    }

    /**
     * Setter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     * @param isInvoiced Value for Boolean
     */
    @JsonSetter("IsInvoiced")
    public void setIsInvoiced(Boolean isInvoiced) {
        this.isInvoiced = OptionalNullable.of(isInvoiced);
    }

    /**
     * UnSetter for IsInvoiced.
     * True when the transaction is already invoice, else return False
     */
    public void unsetIsInvoiced() {
        isInvoiced = null;
    }

    /**
     * Internal Getter for InvoiceNumber.
     * Invoice Number if invoiced
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceNumber() {
        return this.invoiceNumber;
    }

    /**
     * Getter for InvoiceNumber.
     * Invoice Number if invoiced
     * @return Returns the String
     */
    public String getInvoiceNumber() {
        return OptionalNullable.getFrom(invoiceNumber);
    }

    /**
     * Setter for InvoiceNumber.
     * Invoice Number if invoiced
     * @param invoiceNumber Value for String
     */
    @JsonSetter("InvoiceNumber")
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = OptionalNullable.of(invoiceNumber);
    }

    /**
     * UnSetter for InvoiceNumber.
     * Invoice Number if invoiced
     */
    public void unsetInvoiceNumber() {
        invoiceNumber = null;
    }

    /**
     * Internal Getter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @return Returns the Internal String
     */
    @JsonGetter("InvoiceDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetInvoiceDate() {
        return this.invoiceDate;
    }

    /**
     * Getter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @return Returns the String
     */
    public String getInvoiceDate() {
        return OptionalNullable.getFrom(invoiceDate);
    }

    /**
     * Setter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     * @param invoiceDate Value for String
     */
    @JsonSetter("InvoiceDate")
    public void setInvoiceDate(String invoiceDate) {
        this.invoiceDate = OptionalNullable.of(invoiceDate);
    }

    /**
     * UnSetter for InvoiceDate.
     * Invoice Date Format: yyyyMMdd HH:mm:ss
     */
    public void unsetInvoiceDate() {
        invoiceDate = null;
    }

    /**
     * Internal Getter for SiteCode.
     * Site Code
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCode() {
        return this.siteCode;
    }

    /**
     * Getter for SiteCode.
     * Site Code
     * @return Returns the String
     */
    public String getSiteCode() {
        return OptionalNullable.getFrom(siteCode);
    }

    /**
     * Setter for SiteCode.
     * Site Code
     * @param siteCode Value for String
     */
    @JsonSetter("SiteCode")
    public void setSiteCode(String siteCode) {
        this.siteCode = OptionalNullable.of(siteCode);
    }

    /**
     * UnSetter for SiteCode.
     * Site Code
     */
    public void unsetSiteCode() {
        siteCode = null;
    }

    /**
     * Internal Getter for SiteName.
     * Site Name
     * @return Returns the Internal String
     */
    @JsonGetter("SiteName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteName() {
        return this.siteName;
    }

    /**
     * Getter for SiteName.
     * Site Name
     * @return Returns the String
     */
    public String getSiteName() {
        return OptionalNullable.getFrom(siteName);
    }

    /**
     * Setter for SiteName.
     * Site Name
     * @param siteName Value for String
     */
    @JsonSetter("SiteName")
    public void setSiteName(String siteName) {
        this.siteName = OptionalNullable.of(siteName);
    }

    /**
     * UnSetter for SiteName.
     * Site Name
     */
    public void unsetSiteName() {
        siteName = null;
    }

    /**
     * Internal Getter for SiteCountry.
     * Site Country
     * @return Returns the Internal String
     */
    @JsonGetter("SiteCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteCountry() {
        return this.siteCountry;
    }

    /**
     * Getter for SiteCountry.
     * Site Country
     * @return Returns the String
     */
    public String getSiteCountry() {
        return OptionalNullable.getFrom(siteCountry);
    }

    /**
     * Setter for SiteCountry.
     * Site Country
     * @param siteCountry Value for String
     */
    @JsonSetter("SiteCountry")
    public void setSiteCountry(String siteCountry) {
        this.siteCountry = OptionalNullable.of(siteCountry);
    }

    /**
     * UnSetter for SiteCountry.
     * Site Country
     */
    public void unsetSiteCountry() {
        siteCountry = null;
    }

    /**
     * Getter for Location.
     * @return Returns the Location
     */
    @JsonGetter("Location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Location getLocation() {
        return location;
    }

    /**
     * Setter for Location.
     * @param location Value for Location
     */
    @JsonSetter("Location")
    public void setLocation(Location location) {
        this.location = location;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card Group Name
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card Group Name
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card Group Name
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card Group Name
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for ReceiptNumber.
     * Receipt Number
     * @return Returns the Internal String
     */
    @JsonGetter("ReceiptNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReceiptNumber() {
        return this.receiptNumber;
    }

    /**
     * Getter for ReceiptNumber.
     * Receipt Number
     * @return Returns the String
     */
    public String getReceiptNumber() {
        return OptionalNullable.getFrom(receiptNumber);
    }

    /**
     * Setter for ReceiptNumber.
     * Receipt Number
     * @param receiptNumber Value for String
     */
    @JsonSetter("ReceiptNumber")
    public void setReceiptNumber(String receiptNumber) {
        this.receiptNumber = OptionalNullable.of(receiptNumber);
    }

    /**
     * UnSetter for ReceiptNumber.
     * Receipt Number
     */
    public void unsetReceiptNumber() {
        receiptNumber = null;
    }

    /**
     * Internal Getter for ProductCode.
     * Product Code
     * @return Returns the Internal String
     */
    @JsonGetter("ProductCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductCode() {
        return this.productCode;
    }

    /**
     * Getter for ProductCode.
     * Product Code
     * @return Returns the String
     */
    public String getProductCode() {
        return OptionalNullable.getFrom(productCode);
    }

    /**
     * Setter for ProductCode.
     * Product Code
     * @param productCode Value for String
     */
    @JsonSetter("ProductCode")
    public void setProductCode(String productCode) {
        this.productCode = OptionalNullable.of(productCode);
    }

    /**
     * UnSetter for ProductCode.
     * Product Code
     */
    public void unsetProductCode() {
        productCode = null;
    }

    /**
     * Internal Getter for ProductName.
     * Product Name
     * @return Returns the Internal String
     */
    @JsonGetter("ProductName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductName() {
        return this.productName;
    }

    /**
     * Getter for ProductName.
     * Product Name
     * @return Returns the String
     */
    public String getProductName() {
        return OptionalNullable.getFrom(productName);
    }

    /**
     * Setter for ProductName.
     * Product Name
     * @param productName Value for String
     */
    @JsonSetter("ProductName")
    public void setProductName(String productName) {
        this.productName = OptionalNullable.of(productName);
    }

    /**
     * UnSetter for ProductName.
     * Product Name
     */
    public void unsetProductName() {
        productName = null;
    }

    /**
     * Internal Getter for ProductGroupId.
     * Product Group Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("ProductGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetProductGroupId() {
        return this.productGroupId;
    }

    /**
     * Getter for ProductGroupId.
     * Product Group Id
     * @return Returns the Integer
     */
    public Integer getProductGroupId() {
        return OptionalNullable.getFrom(productGroupId);
    }

    /**
     * Setter for ProductGroupId.
     * Product Group Id
     * @param productGroupId Value for Integer
     */
    @JsonSetter("ProductGroupId")
    public void setProductGroupId(Integer productGroupId) {
        this.productGroupId = OptionalNullable.of(productGroupId);
    }

    /**
     * UnSetter for ProductGroupId.
     * Product Group Id
     */
    public void unsetProductGroupId() {
        productGroupId = null;
    }

    /**
     * Internal Getter for ProductGroupName.
     * Product Group Name
     * @return Returns the Internal String
     */
    @JsonGetter("ProductGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetProductGroupName() {
        return this.productGroupName;
    }

    /**
     * Getter for ProductGroupName.
     * Product Group Name
     * @return Returns the String
     */
    public String getProductGroupName() {
        return OptionalNullable.getFrom(productGroupName);
    }

    /**
     * Setter for ProductGroupName.
     * Product Group Name
     * @param productGroupName Value for String
     */
    @JsonSetter("ProductGroupName")
    public void setProductGroupName(String productGroupName) {
        this.productGroupName = OptionalNullable.of(productGroupName);
    }

    /**
     * UnSetter for ProductGroupName.
     * Product Group Name
     */
    public void unsetProductGroupName() {
        productGroupName = null;
    }

    /**
     * Internal Getter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate)
     * @return Returns the Internal Double
     */
    @JsonGetter("DelCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelCoExchangeRate() {
        return this.delCoExchangeRate;
    }

    /**
     * Getter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate)
     * @return Returns the Double
     */
    public Double getDelCoExchangeRate() {
        return OptionalNullable.getFrom(delCoExchangeRate);
    }

    /**
     * Setter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate)
     * @param delCoExchangeRate Value for Double
     */
    @JsonSetter("DelCoExchangeRate")
    public void setDelCoExchangeRate(Double delCoExchangeRate) {
        this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
    }

    /**
     * UnSetter for DelCoExchangeRate.
     * DelCo Exchange Rate (Site exchange rate)
     */
    public void unsetDelCoExchangeRate() {
        delCoExchangeRate = null;
    }

    /**
     * Internal Getter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @return Returns the Internal Double
     */
    @JsonGetter("ColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetColCoExchangeRate() {
        return this.colCoExchangeRate;
    }

    /**
     * Getter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @return Returns the Double
     */
    public Double getColCoExchangeRate() {
        return OptionalNullable.getFrom(colCoExchangeRate);
    }

    /**
     * Setter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     * @param colCoExchangeRate Value for Double
     */
    @JsonSetter("ColCoExchangeRate")
    public void setColCoExchangeRate(Double colCoExchangeRate) {
        this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
    }

    /**
     * UnSetter for ColCoExchangeRate.
     * ColCo Exchange Rate (Customer exchange rate)
     */
    public void unsetColCoExchangeRate() {
        colCoExchangeRate = null;
    }

    /**
     * Internal Getter for IsShellSite.
     * True when transaction occurred at a Shell site else return False
     * @return Returns the Internal Boolean
     */
    @JsonGetter("IsShellSite")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Boolean> internalGetIsShellSite() {
        return this.isShellSite;
    }

    /**
     * Getter for IsShellSite.
     * True when transaction occurred at a Shell site else return False
     * @return Returns the Boolean
     */
    public Boolean getIsShellSite() {
        return OptionalNullable.getFrom(isShellSite);
    }

    /**
     * Setter for IsShellSite.
     * True when transaction occurred at a Shell site else return False
     * @param isShellSite Value for Boolean
     */
    @JsonSetter("IsShellSite")
    public void setIsShellSite(Boolean isShellSite) {
        this.isShellSite = OptionalNullable.of(isShellSite);
    }

    /**
     * UnSetter for IsShellSite.
     * True when transaction occurred at a Shell site else return False
     */
    public void unsetIsShellSite() {
        isShellSite = null;
    }

    /**
     * Internal Getter for Network.
     * Network as configured
     * @return Returns the Internal String
     */
    @JsonGetter("Network")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetwork() {
        return this.network;
    }

    /**
     * Getter for Network.
     * Network as configured
     * @return Returns the String
     */
    public String getNetwork() {
        return OptionalNullable.getFrom(network);
    }

    /**
     * Setter for Network.
     * Network as configured
     * @param network Value for String
     */
    @JsonSetter("Network")
    public void setNetwork(String network) {
        this.network = OptionalNullable.of(network);
    }

    /**
     * UnSetter for Network.
     * Network as configured
     */
    public void unsetNetwork() {
        network = null;
    }

    /**
     * Internal Getter for SiteGroupId.
     * Site Group Id
     * @return Returns the Internal Integer
     */
    @JsonGetter("SiteGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetSiteGroupId() {
        return this.siteGroupId;
    }

    /**
     * Getter for SiteGroupId.
     * Site Group Id
     * @return Returns the Integer
     */
    public Integer getSiteGroupId() {
        return OptionalNullable.getFrom(siteGroupId);
    }

    /**
     * Setter for SiteGroupId.
     * Site Group Id
     * @param siteGroupId Value for Integer
     */
    @JsonSetter("SiteGroupId")
    public void setSiteGroupId(Integer siteGroupId) {
        this.siteGroupId = OptionalNullable.of(siteGroupId);
    }

    /**
     * UnSetter for SiteGroupId.
     * Site Group Id
     */
    public void unsetSiteGroupId() {
        siteGroupId = null;
    }

    /**
     * Internal Getter for SiteGroupName.
     * Site GroupName
     * @return Returns the Internal String
     */
    @JsonGetter("SiteGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSiteGroupName() {
        return this.siteGroupName;
    }

    /**
     * Getter for SiteGroupName.
     * Site GroupName
     * @return Returns the String
     */
    public String getSiteGroupName() {
        return OptionalNullable.getFrom(siteGroupName);
    }

    /**
     * Setter for SiteGroupName.
     * Site GroupName
     * @param siteGroupName Value for String
     */
    @JsonSetter("SiteGroupName")
    public void setSiteGroupName(String siteGroupName) {
        this.siteGroupName = OptionalNullable.of(siteGroupName);
    }

    /**
     * UnSetter for SiteGroupName.
     * Site GroupName
     */
    public void unsetSiteGroupName() {
        siteGroupName = null;
    }

    /**
     * Internal Getter for PostingDate.
     * Site GroupName
     * @return Returns the Internal String
     */
    @JsonGetter("PostingDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPostingDate() {
        return this.postingDate;
    }

    /**
     * Getter for PostingDate.
     * Site GroupName
     * @return Returns the String
     */
    public String getPostingDate() {
        return OptionalNullable.getFrom(postingDate);
    }

    /**
     * Setter for PostingDate.
     * Site GroupName
     * @param postingDate Value for String
     */
    @JsonSetter("PostingDate")
    public void setPostingDate(String postingDate) {
        this.postingDate = OptionalNullable.of(postingDate);
    }

    /**
     * UnSetter for PostingDate.
     * Site GroupName
     */
    public void unsetPostingDate() {
        postingDate = null;
    }

    /**
     * Internal Getter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet 7077 = CRT
     * @return Returns the Internal String
     */
    @JsonGetter("IssuerCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetIssuerCode() {
        return this.issuerCode;
    }

    /**
     * Getter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet 7077 = CRT
     * @return Returns the String
     */
    public String getIssuerCode() {
        return OptionalNullable.getFrom(issuerCode);
    }

    /**
     * Setter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet 7077 = CRT
     * @param issuerCode Value for String
     */
    @JsonSetter("IssuerCode")
    public void setIssuerCode(String issuerCode) {
        this.issuerCode = OptionalNullable.of(issuerCode);
    }

    /**
     * UnSetter for IssuerCode.
     * First digits of the Card PAN 7002 = Fleet 7077 = CRT
     */
    public void unsetIssuerCode() {
        issuerCode = null;
    }

    /**
     * Internal Getter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place
     * @return Returns the Internal String
     */
    @JsonGetter("PurchasedInCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPurchasedInCountryCode() {
        return this.purchasedInCountryCode;
    }

    /**
     * Getter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place
     * @return Returns the String
     */
    public String getPurchasedInCountryCode() {
        return OptionalNullable.getFrom(purchasedInCountryCode);
    }

    /**
     * Setter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place
     * @param purchasedInCountryCode Value for String
     */
    @JsonSetter("PurchasedInCountryCode")
    public void setPurchasedInCountryCode(String purchasedInCountryCode) {
        this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
    }

    /**
     * UnSetter for PurchasedInCountryCode.
     * ISO code of the country where the transaction took place
     */
    public void unsetPurchasedInCountryCode() {
        purchasedInCountryCode = null;
    }

    /**
     * Internal Getter for CustomerCountryCode.
     * ISO code of the Customer Country
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountryCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountryCode() {
        return this.customerCountryCode;
    }

    /**
     * Getter for CustomerCountryCode.
     * ISO code of the Customer Country
     * @return Returns the String
     */
    public String getCustomerCountryCode() {
        return OptionalNullable.getFrom(customerCountryCode);
    }

    /**
     * Setter for CustomerCountryCode.
     * ISO code of the Customer Country
     * @param customerCountryCode Value for String
     */
    @JsonSetter("CustomerCountryCode")
    public void setCustomerCountryCode(String customerCountryCode) {
        this.customerCountryCode = OptionalNullable.of(customerCountryCode);
    }

    /**
     * UnSetter for CustomerCountryCode.
     * ISO code of the Customer Country
     */
    public void unsetCustomerCountryCode() {
        customerCountryCode = null;
    }

    /**
     * Internal Getter for CustomerCountry.
     * Name of the Customer Country
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCountry() {
        return this.customerCountry;
    }

    /**
     * Getter for CustomerCountry.
     * Name of the Customer Country
     * @return Returns the String
     */
    public String getCustomerCountry() {
        return OptionalNullable.getFrom(customerCountry);
    }

    /**
     * Setter for CustomerCountry.
     * Name of the Customer Country
     * @param customerCountry Value for String
     */
    @JsonSetter("CustomerCountry")
    public void setCustomerCountry(String customerCountry) {
        this.customerCountry = OptionalNullable.of(customerCountry);
    }

    /**
     * UnSetter for CustomerCountry.
     * Name of the Customer Country
     */
    public void unsetCustomerCountry() {
        customerCountry = null;
    }

    /**
     * Internal Getter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("ReleaseCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetReleaseCode() {
        return this.releaseCode;
    }

    /**
     * Getter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN
     * @return Returns the String
     */
    public String getReleaseCode() {
        return OptionalNullable.getFrom(releaseCode);
    }

    /**
     * Setter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN
     * @param releaseCode Value for String
     */
    @JsonSetter("ReleaseCode")
    public void setReleaseCode(String releaseCode) {
        this.releaseCode = OptionalNullable.of(releaseCode);
    }

    /**
     * UnSetter for ReleaseCode.
     * Release code, 7th Digit of the Card PAN
     */
    public void unsetReleaseCode() {
        releaseCode = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID
     * @return Returns the String
     */
    public String getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID
     * @param cardGroupId Value for String
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(String cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @return Returns the Internal String
     */
    @JsonGetter("CardSequenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardSequenceNumber() {
        return this.cardSequenceNumber;
    }

    /**
     * Getter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @return Returns the String
     */
    public String getCardSequenceNumber() {
        return OptionalNullable.getFrom(cardSequenceNumber);
    }

    /**
     * Setter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     * @param cardSequenceNumber Value for String
     */
    @JsonSetter("CardSequenceNumber")
    public void setCardSequenceNumber(String cardSequenceNumber) {
        this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
    }

    /**
     * UnSetter for CardSequenceNumber.
     * 3 digits, Card sequence number and Check digit (Digit 16,17 and 18 on the card pan)
     */
    public void unsetCardSequenceNumber() {
        cardSequenceNumber = null;
    }

    /**
     * Internal Getter for CheckDigit.
     * Check digit, Last number of the card pan
     * @return Returns the Internal String
     */
    @JsonGetter("CheckDigit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCheckDigit() {
        return this.checkDigit;
    }

    /**
     * Getter for CheckDigit.
     * Check digit, Last number of the card pan
     * @return Returns the String
     */
    public String getCheckDigit() {
        return OptionalNullable.getFrom(checkDigit);
    }

    /**
     * Setter for CheckDigit.
     * Check digit, Last number of the card pan
     * @param checkDigit Value for String
     */
    @JsonSetter("CheckDigit")
    public void setCheckDigit(String checkDigit) {
        this.checkDigit = OptionalNullable.of(checkDigit);
    }

    /**
     * UnSetter for CheckDigit.
     * Check digit, Last number of the card pan
     */
    public void unsetCheckDigit() {
        checkDigit = null;
    }

    /**
     * Internal Getter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @return Returns the Internal String
     */
    @JsonGetter("FleetIDDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFleetIDDescription() {
        return this.fleetIDDescription;
    }

    /**
     * Getter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @return Returns the String
     */
    public String getFleetIDDescription() {
        return OptionalNullable.getFrom(fleetIDDescription);
    }

    /**
     * Setter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     * @param fleetIDDescription Value for String
     */
    @JsonSetter("FleetIDDescription")
    public void setFleetIDDescription(String fleetIDDescription) {
        this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
    }

    /**
     * UnSetter for FleetIDDescription.
     * FleetId/CRN description in Card Platform configured at the account level
     */
    public void unsetFleetIDDescription() {
        fleetIDDescription = null;
    }

    /**
     * Internal Getter for VATRate.
     * VAT Percentage
     * @return Returns the Internal Double
     */
    @JsonGetter("VATRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATRate() {
        return this.vATRate;
    }

    /**
     * Getter for VATRate.
     * VAT Percentage
     * @return Returns the Double
     */
    public Double getVATRate() {
        return OptionalNullable.getFrom(vATRate);
    }

    /**
     * Setter for VATRate.
     * VAT Percentage
     * @param vATRate Value for Double
     */
    @JsonSetter("VATRate")
    public void setVATRate(Double vATRate) {
        this.vATRate = OptionalNullable.of(vATRate);
    }

    /**
     * UnSetter for VATRate.
     * VAT Percentage
     */
    public void unsetVATRate() {
        vATRate = null;
    }

    /**
     * Internal Getter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated 2-A1 PH-O 12% Sales Domestic 3-VAT exempt
     * @return Returns the Internal String
     */
    @JsonGetter("VATCategory")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCategory() {
        return this.vATCategory;
    }

    /**
     * Getter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated 2-A1 PH-O 12% Sales Domestic 3-VAT exempt
     * @return Returns the String
     */
    public String getVATCategory() {
        return OptionalNullable.getFrom(vATCategory);
    }

    /**
     * Setter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated 2-A1 PH-O 12% Sales Domestic 3-VAT exempt
     * @param vATCategory Value for String
     */
    @JsonSetter("VATCategory")
    public void setVATCategory(String vATCategory) {
        this.vATCategory = OptionalNullable.of(vATCategory);
    }

    /**
     * UnSetter for VATCategory.
     * VAT Category Id-Description 1-Zero Rated 2-A1 PH-O 12% Sales Domestic 3-VAT exempt
     */
    public void unsetVATCategory() {
        vATCategory = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     * @return Returns the Internal String
     */
    @JsonGetter("EffectiveDiscountInTrxCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetEffectiveDiscountInTrxCurrency() {
        return this.effectiveDiscountInTrxCurrency;
    }

    /**
     * Getter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     * @return Returns the String
     */
    public String getEffectiveDiscountInTrxCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInTrxCurrency);
    }

    /**
     * Setter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     * @param effectiveDiscountInTrxCurrency Value for String
     */
    @JsonSetter("EffectiveDiscountInTrxCurrency")
    public void setEffectiveDiscountInTrxCurrency(String effectiveDiscountInTrxCurrency) {
        this.effectiveDiscountInTrxCurrency = OptionalNullable.of(effectiveDiscountInTrxCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInTrxCurrency.
     * Effective Discount (excluding VAT, in transaction currency) 4 digits
     */
    public void unsetEffectiveDiscountInTrxCurrency() {
        effectiveDiscountInTrxCurrency = null;
    }

    /**
     * Internal Getter for TransactionType.
     * Transaction Type
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionType() {
        return this.transactionType;
    }

    /**
     * Getter for TransactionType.
     * Transaction Type
     * @return Returns the String
     */
    public String getTransactionType() {
        return OptionalNullable.getFrom(transactionType);
    }

    /**
     * Setter for TransactionType.
     * Transaction Type
     * @param transactionType Value for String
     */
    @JsonSetter("TransactionType")
    public void setTransactionType(String transactionType) {
        this.transactionType = OptionalNullable.of(transactionType);
    }

    /**
     * UnSetter for TransactionType.
     * Transaction Type
     */
    public void unsetTransactionType() {
        transactionType = null;
    }

    /**
     * Internal Getter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     * @return Returns the Internal String
     */
    @JsonGetter("PINIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPINIndicator() {
        return this.pINIndicator;
    }

    /**
     * Getter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     * @return Returns the String
     */
    public String getPINIndicator() {
        return OptionalNullable.getFrom(pINIndicator);
    }

    /**
     * Setter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     * @param pINIndicator Value for String
     */
    @JsonSetter("PINIndicator")
    public void setPINIndicator(String pINIndicator) {
        this.pINIndicator = OptionalNullable.of(pINIndicator);
    }

    /**
     * UnSetter for PINIndicator.
     * Pin Indicator (Indicates whether PIN used or not used at the time of transaction)
     */
    public void unsetPINIndicator() {
        pINIndicator = null;
    }

    /**
     * Internal Getter for VATApplicable.
     * Is VAT Applicable for this transaction “Y” or “N”
     * @return Returns the Internal String
     */
    @JsonGetter("VATApplicable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATApplicable() {
        return this.vATApplicable;
    }

    /**
     * Getter for VATApplicable.
     * Is VAT Applicable for this transaction “Y” or “N”
     * @return Returns the String
     */
    public String getVATApplicable() {
        return OptionalNullable.getFrom(vATApplicable);
    }

    /**
     * Setter for VATApplicable.
     * Is VAT Applicable for this transaction “Y” or “N”
     * @param vATApplicable Value for String
     */
    @JsonSetter("VATApplicable")
    public void setVATApplicable(String vATApplicable) {
        this.vATApplicable = OptionalNullable.of(vATApplicable);
    }

    /**
     * UnSetter for VATApplicable.
     * Is VAT Applicable for this transaction “Y” or “N”
     */
    public void unsetVATApplicable() {
        vATApplicable = null;
    }

    /**
     * Internal Getter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * @return Returns the Internal String
     */
    @JsonGetter("NetInvoiceIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNetInvoiceIndicator() {
        return this.netInvoiceIndicator;
    }

    /**
     * Getter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * @return Returns the String
     */
    public String getNetInvoiceIndicator() {
        return OptionalNullable.getFrom(netInvoiceIndicator);
    }

    /**
     * Setter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     * @param netInvoiceIndicator Value for String
     */
    @JsonSetter("NetInvoiceIndicator")
    public void setNetInvoiceIndicator(String netInvoiceIndicator) {
        this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
    }

    /**
     * UnSetter for NetInvoiceIndicator.
     * Net Invoice Indicator, Will the customer receive an invoice without VAT? Example: “Y” or “N”
     */
    public void unsetNetInvoiceIndicator() {
        netInvoiceIndicator = null;
    }

    /**
     * Internal Getter for CustomerCurrencyCode.
     * Customer currency code
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencyCode() {
        return this.customerCurrencyCode;
    }

    /**
     * Getter for CustomerCurrencyCode.
     * Customer currency code
     * @return Returns the String
     */
    public String getCustomerCurrencyCode() {
        return OptionalNullable.getFrom(customerCurrencyCode);
    }

    /**
     * Setter for CustomerCurrencyCode.
     * Customer currency code
     * @param customerCurrencyCode Value for String
     */
    @JsonSetter("CustomerCurrencyCode")
    public void setCustomerCurrencyCode(String customerCurrencyCode) {
        this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
    }

    /**
     * UnSetter for CustomerCurrencyCode.
     * Customer currency code
     */
    public void unsetCustomerCurrencyCode() {
        customerCurrencyCode = null;
    }

    /**
     * Internal Getter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @return Returns the Internal String
     */
    @JsonGetter("CustomerCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomerCurrencySymbol() {
        return this.customerCurrencySymbol;
    }

    /**
     * Getter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @return Returns the String
     */
    public String getCustomerCurrencySymbol() {
        return OptionalNullable.getFrom(customerCurrencySymbol);
    }

    /**
     * Setter for CustomerCurrencySymbol.
     * Customer currency Symbol
     * @param customerCurrencySymbol Value for String
     */
    @JsonSetter("CustomerCurrencySymbol")
    public void setCustomerCurrencySymbol(String customerCurrencySymbol) {
        this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
    }

    /**
     * UnSetter for CustomerCurrencySymbol.
     * Customer currency Symbol
     */
    public void unsetCustomerCurrencySymbol() {
        customerCurrencySymbol = null;
    }

    /**
     * Internal Getter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveUnitDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveUnitDiscountInCustomerCurrency() {
        return this.effectiveUnitDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount
     * @return Returns the Double
     */
    public Double getEffectiveUnitDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount
     * @param effectiveUnitDiscountInCustomerCurrency Value for Double
     */
    @JsonSetter("EffectiveUnitDiscountInCustomerCurrency")
    public void setEffectiveUnitDiscountInCustomerCurrency(Double effectiveUnitDiscountInCustomerCurrency) {
        this.effectiveUnitDiscountInCustomerCurrency = OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveUnitDiscountInCustomerCurrency.
     * Effective Unit Discount
     */
    public void unsetEffectiveUnitDiscountInCustomerCurrency() {
        effectiveUnitDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount
     * @return Returns the Internal Double
     */
    @JsonGetter("EffectiveDiscountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEffectiveDiscountInCustomerCurrency() {
        return this.effectiveDiscountInCustomerCurrency;
    }

    /**
     * Getter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount
     * @return Returns the Double
     */
    public Double getEffectiveDiscountInCustomerCurrency() {
        return OptionalNullable.getFrom(effectiveDiscountInCustomerCurrency);
    }

    /**
     * Setter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount
     * @param effectiveDiscountInCustomerCurrency Value for Double
     */
    @JsonSetter("EffectiveDiscountInCustomerCurrency")
    public void setEffectiveDiscountInCustomerCurrency(Double effectiveDiscountInCustomerCurrency) {
        this.effectiveDiscountInCustomerCurrency = OptionalNullable.of(effectiveDiscountInCustomerCurrency);
    }

    /**
     * UnSetter for EffectiveDiscountInCustomerCurrency.
     * Effective Discount
     */
    public void unsetEffectiveDiscountInCustomerCurrency() {
        effectiveDiscountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("VATonNetAmountInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATonNetAmountInCustomerCurrency() {
        return this.vATonNetAmountInCustomerCurrency;
    }

    /**
     * Getter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount
     * @return Returns the Double
     */
    public Double getVATonNetAmountInCustomerCurrency() {
        return OptionalNullable.getFrom(vATonNetAmountInCustomerCurrency);
    }

    /**
     * Setter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount
     * @param vATonNetAmountInCustomerCurrency Value for Double
     */
    @JsonSetter("VATonNetAmountInCustomerCurrency")
    public void setVATonNetAmountInCustomerCurrency(Double vATonNetAmountInCustomerCurrency) {
        this.vATonNetAmountInCustomerCurrency = OptionalNullable.of(vATonNetAmountInCustomerCurrency);
    }

    /**
     * UnSetter for VATonNetAmountInCustomerCurrency.
     * VAT on Net Amount
     */
    public void unsetVATonNetAmountInCustomerCurrency() {
        vATonNetAmountInCustomerCurrency = null;
    }

    /**
     * Internal Getter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit 3-Percentage
     * @return Returns the Internal String
     */
    @JsonGetter("DiscountType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDiscountType() {
        return this.discountType;
    }

    /**
     * Getter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit 3-Percentage
     * @return Returns the String
     */
    public String getDiscountType() {
        return OptionalNullable.getFrom(discountType);
    }

    /**
     * Setter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit 3-Percentage
     * @param discountType Value for String
     */
    @JsonSetter("DiscountType")
    public void setDiscountType(String discountType) {
        this.discountType = OptionalNullable.of(discountType);
    }

    /**
     * UnSetter for DiscountType.
     * Discount Type Example: 1-None 2-Pence per unit 3-Percentage
     */
    public void unsetDiscountType() {
        discountType = null;
    }

    /**
     * Internal Getter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionStatus() {
        return this.transactionStatus;
    }

    /**
     * Getter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @return Returns the String
     */
    public String getTransactionStatus() {
        return OptionalNullable.getFrom(transactionStatus);
    }

    /**
     * Setter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     * @param transactionStatus Value for String
     */
    @JsonSetter("TransactionStatus")
    public void setTransactionStatus(String transactionStatus) {
        this.transactionStatus = OptionalNullable.of(transactionStatus);
    }

    /**
     * UnSetter for TransactionStatus.
     * Transaction status "U" or "I" “U” stands for Uninvoiced “I” stands for Invoiced
     */
    public void unsetTransactionStatus() {
        transactionStatus = null;
    }

    /**
     * Internal Getter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @return Returns the Internal String
     */
    @JsonGetter("PayerGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerGroup() {
        return this.payerGroup;
    }

    /**
     * Getter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @return Returns the String
     */
    public String getPayerGroup() {
        return OptionalNullable.getFrom(payerGroup);
    }

    /**
     * Setter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     * @param payerGroup Value for String
     */
    @JsonSetter("PayerGroup")
    public void setPayerGroup(String payerGroup) {
        this.payerGroup = OptionalNullable.of(payerGroup);
    }

    /**
     * UnSetter for PayerGroup.
     * Payer Group applicable for the Large Customer NL+8 digit code
     */
    public void unsetPayerGroup() {
        payerGroup = null;
    }

    /**
     * Internal Getter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     * @return Returns the Internal String
     */
    @JsonGetter("RefundFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetRefundFlag() {
        return this.refundFlag;
    }

    /**
     * Getter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     * @return Returns the String
     */
    public String getRefundFlag() {
        return OptionalNullable.getFrom(refundFlag);
    }

    /**
     * Setter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     * @param refundFlag Value for String
     */
    @JsonSetter("RefundFlag")
    public void setRefundFlag(String refundFlag) {
        this.refundFlag = OptionalNullable.of(refundFlag);
    }

    /**
     * UnSetter for RefundFlag.
     * Refund Flag “N” for Not Refunded and “Y” for Refunded.
     */
    public void unsetRefundFlag() {
        refundFlag = null;
    }

    /**
     * Internal Getter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @return Returns the Internal Double
     */
    @JsonGetter("OriginalSalesItemId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOriginalSalesItemId() {
        return this.originalSalesItemId;
    }

    /**
     * Getter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @return Returns the Double
     */
    public Double getOriginalSalesItemId() {
        return OptionalNullable.getFrom(originalSalesItemId);
    }

    /**
     * Setter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     * @param originalSalesItemId Value for Double
     */
    @JsonSetter("OriginalSalesItemId")
    public void setOriginalSalesItemId(Double originalSalesItemId) {
        this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
    }

    /**
     * UnSetter for OriginalSalesItemId.
     * Shows Sales Item Id of the original item that was refunded
     */
    public void unsetOriginalSalesItemId() {
        originalSalesItemId = null;
    }

    /**
     * Internal Getter for DelcoName.
     * Delco Name
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoName() {
        return this.delcoName;
    }

    /**
     * Getter for DelcoName.
     * Delco Name
     * @return Returns the String
     */
    public String getDelcoName() {
        return OptionalNullable.getFrom(delcoName);
    }

    /**
     * Setter for DelcoName.
     * Delco Name
     * @param delcoName Value for String
     */
    @JsonSetter("DelcoName")
    public void setDelcoName(String delcoName) {
        this.delcoName = OptionalNullable.of(delcoName);
    }

    /**
     * UnSetter for DelcoName.
     * Delco Name
     */
    public void unsetDelcoName() {
        delcoName = null;
    }

    /**
     * Internal Getter for DelcoCode.
     * Delco Code
     * @return Returns the Internal String
     */
    @JsonGetter("DelcoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDelcoCode() {
        return this.delcoCode;
    }

    /**
     * Getter for DelcoCode.
     * Delco Code
     * @return Returns the String
     */
    public String getDelcoCode() {
        return OptionalNullable.getFrom(delcoCode);
    }

    /**
     * Setter for DelcoCode.
     * Delco Code
     * @param delcoCode Value for String
     */
    @JsonSetter("DelcoCode")
    public void setDelcoCode(String delcoCode) {
        this.delcoCode = OptionalNullable.of(delcoCode);
    }

    /**
     * UnSetter for DelcoCode.
     * Delco Code
     */
    public void unsetDelcoCode() {
        delcoCode = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer number
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer number
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer number
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer number
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerName.
     * Payer name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Payer name
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Payer name
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Payer name
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction
     * @return Returns the Internal String
     */
    @JsonGetter("CardExpiryPeriod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardExpiryPeriod() {
        return this.cardExpiryPeriod;
    }

    /**
     * Getter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction
     * @return Returns the String
     */
    public String getCardExpiryPeriod() {
        return OptionalNullable.getFrom(cardExpiryPeriod);
    }

    /**
     * Setter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction
     * @param cardExpiryPeriod Value for String
     */
    @JsonSetter("CardExpiryPeriod")
    public void setCardExpiryPeriod(String cardExpiryPeriod) {
        this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
    }

    /**
     * UnSetter for CardExpiryPeriod.
     * Year/Month of the Card Expiry captured on the transaction
     */
    public void unsetCardExpiryPeriod() {
        cardExpiryPeriod = null;
    }

    /**
     * Internal Getter for AuthorisationCode.
     * Authorisation code of the transaction
     * @return Returns the Internal String
     */
    @JsonGetter("AuthorisationCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAuthorisationCode() {
        return this.authorisationCode;
    }

    /**
     * Getter for AuthorisationCode.
     * Authorisation code of the transaction
     * @return Returns the String
     */
    public String getAuthorisationCode() {
        return OptionalNullable.getFrom(authorisationCode);
    }

    /**
     * Setter for AuthorisationCode.
     * Authorisation code of the transaction
     * @param authorisationCode Value for String
     */
    @JsonSetter("AuthorisationCode")
    public void setAuthorisationCode(String authorisationCode) {
        this.authorisationCode = OptionalNullable.of(authorisationCode);
    }

    /**
     * UnSetter for AuthorisationCode.
     * Authorisation code of the transaction
     */
    public void unsetAuthorisationCode() {
        authorisationCode = null;
    }

    /**
     * Internal Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionId() {
        return this.transactionId;
    }

    /**
     * Getter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @return Returns the String
     */
    public String getTransactionId() {
        return OptionalNullable.getFrom(transactionId);
    }

    /**
     * Setter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     * @param transactionId Value for String
     */
    @JsonSetter("TransactionId")
    public void setTransactionId(String transactionId) {
        this.transactionId = OptionalNullable.of(transactionId);
    }

    /**
     * UnSetter for TransactionId.
     * Unique id of the transaction that may include one or more salesitems
     */
    public void unsetTransactionId() {
        transactionId = null;
    }

    /**
     * Internal Getter for TransactionLine.
     * Transaction line item number
     * @return Returns the Internal String
     */
    @JsonGetter("TransactionLine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTransactionLine() {
        return this.transactionLine;
    }

    /**
     * Getter for TransactionLine.
     * Transaction line item number
     * @return Returns the String
     */
    public String getTransactionLine() {
        return OptionalNullable.getFrom(transactionLine);
    }

    /**
     * Setter for TransactionLine.
     * Transaction line item number
     * @param transactionLine Value for String
     */
    @JsonSetter("TransactionLine")
    public void setTransactionLine(String transactionLine) {
        this.transactionLine = OptionalNullable.of(transactionLine);
    }

    /**
     * UnSetter for TransactionLine.
     * Transaction line item number
     */
    public void unsetTransactionLine() {
        transactionLine = null;
    }

    /**
     * Internal Getter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N”
     * @return Returns the Internal String
     */
    @JsonGetter("AllowClearing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAllowClearing() {
        return this.allowClearing;
    }

    /**
     * Getter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N”
     * @return Returns the String
     */
    public String getAllowClearing() {
        return OptionalNullable.getFrom(allowClearing);
    }

    /**
     * Setter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N”
     * @param allowClearing Value for String
     */
    @JsonSetter("AllowClearing")
    public void setAllowClearing(String allowClearing) {
        this.allowClearing = OptionalNullable.of(allowClearing);
    }

    /**
     * UnSetter for AllowClearing.
     * Is the Sales Item allowed for clearing? i.e. not written off Example: “Y” or “N”
     */
    public void unsetAllowClearing() {
        allowClearing = null;
    }

    /**
     * Internal Getter for CRMNumber.
     * CRM Case number if the sales item is in dispute
     * @return Returns the Internal String
     */
    @JsonGetter("CRMNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCRMNumber() {
        return this.cRMNumber;
    }

    /**
     * Getter for CRMNumber.
     * CRM Case number if the sales item is in dispute
     * @return Returns the String
     */
    public String getCRMNumber() {
        return OptionalNullable.getFrom(cRMNumber);
    }

    /**
     * Setter for CRMNumber.
     * CRM Case number if the sales item is in dispute
     * @param cRMNumber Value for String
     */
    @JsonSetter("CRMNumber")
    public void setCRMNumber(String cRMNumber) {
        this.cRMNumber = OptionalNullable.of(cRMNumber);
    }

    /**
     * UnSetter for CRMNumber.
     * CRM Case number if the sales item is in dispute
     */
    public void unsetCRMNumber() {
        cRMNumber = null;
    }

    /**
     * Internal Getter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0 No Dispute 1 In Dispute 2 Re-Instated 3 Adjusted 4
     * Written Off by Colco 5 Written Off by Delco 6 Charged Back to Site
     * @return Returns the Internal String
     */
    @JsonGetter("DisputeStatus")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDisputeStatus() {
        return this.disputeStatus;
    }

    /**
     * Getter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0 No Dispute 1 In Dispute 2 Re-Instated 3 Adjusted 4
     * Written Off by Colco 5 Written Off by Delco 6 Charged Back to Site
     * @return Returns the String
     */
    public String getDisputeStatus() {
        return OptionalNullable.getFrom(disputeStatus);
    }

    /**
     * Setter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0 No Dispute 1 In Dispute 2 Re-Instated 3 Adjusted 4
     * Written Off by Colco 5 Written Off by Delco 6 Charged Back to Site
     * @param disputeStatus Value for String
     */
    @JsonSetter("DisputeStatus")
    public void setDisputeStatus(String disputeStatus) {
        this.disputeStatus = OptionalNullable.of(disputeStatus);
    }

    /**
     * UnSetter for DisputeStatus.
     * Sales Item Dispute Status if disputed 0 No Dispute 1 In Dispute 2 Re-Instated 3 Adjusted 4
     * Written Off by Colco 5 Written Off by Delco 6 Charged Back to Site
     */
    public void unsetDisputeStatus() {
        disputeStatus = null;
    }

    /**
     * Internal Getter for RebateRate.
     * Unit discount in customer currency
     * @return Returns the Internal Double
     */
    @JsonGetter("RebateRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetRebateRate() {
        return this.rebateRate;
    }

    /**
     * Getter for RebateRate.
     * Unit discount in customer currency
     * @return Returns the Double
     */
    public Double getRebateRate() {
        return OptionalNullable.getFrom(rebateRate);
    }

    /**
     * Setter for RebateRate.
     * Unit discount in customer currency
     * @param rebateRate Value for Double
     */
    @JsonSetter("RebateRate")
    public void setRebateRate(Double rebateRate) {
        this.rebateRate = OptionalNullable.of(rebateRate);
    }

    /**
     * UnSetter for RebateRate.
     * Unit discount in customer currency
     */
    public void unsetRebateRate() {
        rebateRate = null;
    }

    /**
     * Internal Getter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency.
     * @return Returns the Internal Double
     */
    @JsonGetter("DelCoToColCoExchangeRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDelCoToColCoExchangeRate() {
        return this.delCoToColCoExchangeRate;
    }

    /**
     * Getter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency.
     * @return Returns the Double
     */
    public Double getDelCoToColCoExchangeRate() {
        return OptionalNullable.getFrom(delCoToColCoExchangeRate);
    }

    /**
     * Setter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency.
     * @param delCoToColCoExchangeRate Value for Double
     */
    @JsonSetter("DelCoToColCoExchangeRate")
    public void setDelCoToColCoExchangeRate(Double delCoToColCoExchangeRate) {
        this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
    }

    /**
     * UnSetter for DelCoToColCoExchangeRate.
     * Exchange rate from transaction currency to customer currency.
     */
    public void unsetDelCoToColCoExchangeRate() {
        delCoToColCoExchangeRate = null;
    }

    /**
     * Internal Getter for NetEuroAmount.
     * Net euro amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("NetEuroAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetNetEuroAmount() {
        return this.netEuroAmount;
    }

    /**
     * Getter for NetEuroAmount.
     * Net euro amount.
     * @return Returns the Double
     */
    public Double getNetEuroAmount() {
        return OptionalNullable.getFrom(netEuroAmount);
    }

    /**
     * Setter for NetEuroAmount.
     * Net euro amount.
     * @param netEuroAmount Value for Double
     */
    @JsonSetter("NetEuroAmount")
    public void setNetEuroAmount(Double netEuroAmount) {
        this.netEuroAmount = OptionalNullable.of(netEuroAmount);
    }

    /**
     * UnSetter for NetEuroAmount.
     * Net euro amount.
     */
    public void unsetNetEuroAmount() {
        netEuroAmount = null;
    }

    /**
     * Internal Getter for EuroRebateAmount.
     * Euro rebate amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("EuroRebateAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEuroRebateAmount() {
        return this.euroRebateAmount;
    }

    /**
     * Getter for EuroRebateAmount.
     * Euro rebate amount.
     * @return Returns the Double
     */
    public Double getEuroRebateAmount() {
        return OptionalNullable.getFrom(euroRebateAmount);
    }

    /**
     * Setter for EuroRebateAmount.
     * Euro rebate amount.
     * @param euroRebateAmount Value for Double
     */
    @JsonSetter("EuroRebateAmount")
    public void setEuroRebateAmount(Double euroRebateAmount) {
        this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
    }

    /**
     * UnSetter for EuroRebateAmount.
     * Euro rebate amount.
     */
    public void unsetEuroRebateAmount() {
        euroRebateAmount = null;
    }

    /**
     * Internal Getter for EuroVATAmount.
     * Euro VAT amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("EuroVATAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetEuroVATAmount() {
        return this.euroVATAmount;
    }

    /**
     * Getter for EuroVATAmount.
     * Euro VAT amount.
     * @return Returns the Double
     */
    public Double getEuroVATAmount() {
        return OptionalNullable.getFrom(euroVATAmount);
    }

    /**
     * Setter for EuroVATAmount.
     * Euro VAT amount.
     * @param euroVATAmount Value for Double
     */
    @JsonSetter("EuroVATAmount")
    public void setEuroVATAmount(Double euroVATAmount) {
        this.euroVATAmount = OptionalNullable.of(euroVATAmount);
    }

    /**
     * UnSetter for EuroVATAmount.
     * Euro VAT amount.
     */
    public void unsetEuroVATAmount() {
        euroVATAmount = null;
    }

    /**
     * Internal Getter for ParentCustomerNumber.
     * Parent customer number
     * @return Returns the Internal String
     */
    @JsonGetter("ParentCustomerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetParentCustomerNumber() {
        return this.parentCustomerNumber;
    }

    /**
     * Getter for ParentCustomerNumber.
     * Parent customer number
     * @return Returns the String
     */
    public String getParentCustomerNumber() {
        return OptionalNullable.getFrom(parentCustomerNumber);
    }

    /**
     * Setter for ParentCustomerNumber.
     * Parent customer number
     * @param parentCustomerNumber Value for String
     */
    @JsonSetter("ParentCustomerNumber")
    public void setParentCustomerNumber(String parentCustomerNumber) {
        this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
    }

    /**
     * UnSetter for ParentCustomerNumber.
     * Parent customer number
     */
    public void unsetParentCustomerNumber() {
        parentCustomerNumber = null;
    }

    /**
     * Internal Getter for VATonNetAmount.
     * VAT on Net Amount (in transaction currency) 2 decimals
     * @return Returns the Internal Double
     */
    @JsonGetter("VATonNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetVATonNetAmount() {
        return this.vATonNetAmount;
    }

    /**
     * Getter for VATonNetAmount.
     * VAT on Net Amount (in transaction currency) 2 decimals
     * @return Returns the Double
     */
    public Double getVATonNetAmount() {
        return OptionalNullable.getFrom(vATonNetAmount);
    }

    /**
     * Setter for VATonNetAmount.
     * VAT on Net Amount (in transaction currency) 2 decimals
     * @param vATonNetAmount Value for Double
     */
    @JsonSetter("VATonNetAmount")
    public void setVATonNetAmount(Double vATonNetAmount) {
        this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
    }

    /**
     * UnSetter for VATonNetAmount.
     * VAT on Net Amount (in transaction currency) 2 decimals
     */
    public void unsetVATonNetAmount() {
        vATonNetAmount = null;
    }

    /**
     * Internal Getter for VATCountry.
     * VAT Country
     * @return Returns the Internal String
     */
    @JsonGetter("VATCountry")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetVATCountry() {
        return this.vATCountry;
    }

    /**
     * Getter for VATCountry.
     * VAT Country
     * @return Returns the String
     */
    public String getVATCountry() {
        return OptionalNullable.getFrom(vATCountry);
    }

    /**
     * Setter for VATCountry.
     * VAT Country
     * @param vATCountry Value for String
     */
    @JsonSetter("VATCountry")
    public void setVATCountry(String vATCountry) {
        this.vATCountry = OptionalNullable.of(vATCountry);
    }

    /**
     * UnSetter for VATCountry.
     * VAT Country
     */
    public void unsetVATCountry() {
        vATCountry = null;
    }

    /**
     * Converts this TransactionExceptions into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TransactionExceptions [" + "salesItemId=" + salesItemId + ", cardId=" + cardId
                + ", productId=" + productId + ", transactionGUID=" + transactionGUID
                + ", transactionDate=" + transactionDate + ", customerInvoiceValueTotalGross="
                + customerInvoiceValueTotalGross + ", cardPAN=" + cardPAN + ", cardExpiry="
                + cardExpiry + ", transactionTime=" + transactionTime + ", uTCOffset=" + uTCOffset
                + ", fleetIdInput=" + fleetIdInput + ", odometerInput=" + odometerInput
                + ", driverName=" + driverName + ", vehicleRegistration=" + vehicleRegistration
                + ", invoiceCurrencyCode=" + invoiceCurrencyCode + ", invoiceCurrencySymbol="
                + invoiceCurrencySymbol + ", transactionCurrencyCode=" + transactionCurrencyCode
                + ", transactionCurrencySymbol=" + transactionCurrencySymbol
                + ", transactionNetAmount=" + transactionNetAmount + ", transactionTax="
                + transactionTax + ", transactionGrossAmount=" + transactionGrossAmount
                + ", invoiceNetAmount=" + invoiceNetAmount + ", invoiceTax=" + invoiceTax
                + ", invoiceGrossAmount=" + invoiceGrossAmount + ", purchasedInCountry="
                + purchasedInCountry + ", accountId=" + accountId + ", accountNumber="
                + accountNumber + ", accountName=" + accountName + ", accountShortName="
                + accountShortName + ", quantity=" + quantity + ", fuelProduct=" + fuelProduct
                + ", unitPriceInTransactionCurrency=" + unitPriceInTransactionCurrency
                + ", unitPriceInInvoiceCurrency=" + unitPriceInInvoiceCurrency
                + ", unitDiscountTransactionCurrency=" + unitDiscountTransactionCurrency
                + ", unitDiscountInvoiceCurrency=" + unitDiscountInvoiceCurrency + ", isInvoiced="
                + isInvoiced + ", invoiceNumber=" + invoiceNumber + ", invoiceDate=" + invoiceDate
                + ", siteCode=" + siteCode + ", siteName=" + siteName + ", siteCountry="
                + siteCountry + ", location=" + location + ", cardGroupName=" + cardGroupName
                + ", receiptNumber=" + receiptNumber + ", productCode=" + productCode
                + ", productName=" + productName + ", productGroupId=" + productGroupId
                + ", productGroupName=" + productGroupName + ", delCoExchangeRate="
                + delCoExchangeRate + ", colCoExchangeRate=" + colCoExchangeRate + ", isShellSite="
                + isShellSite + ", network=" + network + ", siteGroupId=" + siteGroupId
                + ", siteGroupName=" + siteGroupName + ", postingDate=" + postingDate
                + ", issuerCode=" + issuerCode + ", purchasedInCountryCode="
                + purchasedInCountryCode + ", customerCountryCode=" + customerCountryCode
                + ", customerCountry=" + customerCountry + ", releaseCode=" + releaseCode
                + ", cardGroupId=" + cardGroupId + ", cardSequenceNumber=" + cardSequenceNumber
                + ", checkDigit=" + checkDigit + ", fleetIDDescription=" + fleetIDDescription
                + ", vATRate=" + vATRate + ", vATCategory=" + vATCategory
                + ", effectiveDiscountInTrxCurrency=" + effectiveDiscountInTrxCurrency
                + ", transactionType=" + transactionType + ", pINIndicator=" + pINIndicator
                + ", vATApplicable=" + vATApplicable + ", netInvoiceIndicator="
                + netInvoiceIndicator + ", customerCurrencyCode=" + customerCurrencyCode
                + ", customerCurrencySymbol=" + customerCurrencySymbol
                + ", effectiveUnitDiscountInCustomerCurrency="
                + effectiveUnitDiscountInCustomerCurrency + ", effectiveDiscountInCustomerCurrency="
                + effectiveDiscountInCustomerCurrency + ", vATonNetAmountInCustomerCurrency="
                + vATonNetAmountInCustomerCurrency + ", discountType=" + discountType
                + ", transactionStatus=" + transactionStatus + ", payerGroup=" + payerGroup
                + ", refundFlag=" + refundFlag + ", originalSalesItemId=" + originalSalesItemId
                + ", delcoName=" + delcoName + ", delcoCode=" + delcoCode + ", payerNumber="
                + payerNumber + ", payerName=" + payerName + ", cardExpiryPeriod="
                + cardExpiryPeriod + ", authorisationCode=" + authorisationCode + ", transactionId="
                + transactionId + ", transactionLine=" + transactionLine + ", allowClearing="
                + allowClearing + ", cRMNumber=" + cRMNumber + ", disputeStatus=" + disputeStatus
                + ", rebateRate=" + rebateRate + ", delCoToColCoExchangeRate="
                + delCoToColCoExchangeRate + ", netEuroAmount=" + netEuroAmount
                + ", euroRebateAmount=" + euroRebateAmount + ", euroVATAmount=" + euroVATAmount
                + ", parentCustomerNumber=" + parentCustomerNumber + ", vATonNetAmount="
                + vATonNetAmount + ", vATCountry=" + vATCountry + "]";
    }

    /**
     * Builds a new {@link TransactionExceptions.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TransactionExceptions.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .location(getLocation());
        builder.salesItemId = internalGetSalesItemId();
        builder.cardId = internalGetCardId();
        builder.productId = internalGetProductId();
        builder.transactionGUID = internalGetTransactionGUID();
        builder.transactionDate = internalGetTransactionDate();
        builder.customerInvoiceValueTotalGross = internalGetCustomerInvoiceValueTotalGross();
        builder.cardPAN = internalGetCardPAN();
        builder.cardExpiry = internalGetCardExpiry();
        builder.transactionTime = internalGetTransactionTime();
        builder.uTCOffset = internalGetUTCOffset();
        builder.fleetIdInput = internalGetFleetIdInput();
        builder.odometerInput = internalGetOdometerInput();
        builder.driverName = internalGetDriverName();
        builder.vehicleRegistration = internalGetVehicleRegistration();
        builder.invoiceCurrencyCode = internalGetInvoiceCurrencyCode();
        builder.invoiceCurrencySymbol = internalGetInvoiceCurrencySymbol();
        builder.transactionCurrencyCode = internalGetTransactionCurrencyCode();
        builder.transactionCurrencySymbol = internalGetTransactionCurrencySymbol();
        builder.transactionNetAmount = internalGetTransactionNetAmount();
        builder.transactionTax = internalGetTransactionTax();
        builder.transactionGrossAmount = internalGetTransactionGrossAmount();
        builder.invoiceNetAmount = internalGetInvoiceNetAmount();
        builder.invoiceTax = internalGetInvoiceTax();
        builder.invoiceGrossAmount = internalGetInvoiceGrossAmount();
        builder.purchasedInCountry = internalGetPurchasedInCountry();
        builder.accountId = internalGetAccountId();
        builder.accountNumber = internalGetAccountNumber();
        builder.accountName = internalGetAccountName();
        builder.accountShortName = internalGetAccountShortName();
        builder.quantity = internalGetQuantity();
        builder.fuelProduct = internalGetFuelProduct();
        builder.unitPriceInTransactionCurrency = internalGetUnitPriceInTransactionCurrency();
        builder.unitPriceInInvoiceCurrency = internalGetUnitPriceInInvoiceCurrency();
        builder.unitDiscountTransactionCurrency = internalGetUnitDiscountTransactionCurrency();
        builder.unitDiscountInvoiceCurrency = internalGetUnitDiscountInvoiceCurrency();
        builder.isInvoiced = internalGetIsInvoiced();
        builder.invoiceNumber = internalGetInvoiceNumber();
        builder.invoiceDate = internalGetInvoiceDate();
        builder.siteCode = internalGetSiteCode();
        builder.siteName = internalGetSiteName();
        builder.siteCountry = internalGetSiteCountry();
        builder.cardGroupName = internalGetCardGroupName();
        builder.receiptNumber = internalGetReceiptNumber();
        builder.productCode = internalGetProductCode();
        builder.productName = internalGetProductName();
        builder.productGroupId = internalGetProductGroupId();
        builder.productGroupName = internalGetProductGroupName();
        builder.delCoExchangeRate = internalGetDelCoExchangeRate();
        builder.colCoExchangeRate = internalGetColCoExchangeRate();
        builder.isShellSite = internalGetIsShellSite();
        builder.network = internalGetNetwork();
        builder.siteGroupId = internalGetSiteGroupId();
        builder.siteGroupName = internalGetSiteGroupName();
        builder.postingDate = internalGetPostingDate();
        builder.issuerCode = internalGetIssuerCode();
        builder.purchasedInCountryCode = internalGetPurchasedInCountryCode();
        builder.customerCountryCode = internalGetCustomerCountryCode();
        builder.customerCountry = internalGetCustomerCountry();
        builder.releaseCode = internalGetReleaseCode();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardSequenceNumber = internalGetCardSequenceNumber();
        builder.checkDigit = internalGetCheckDigit();
        builder.fleetIDDescription = internalGetFleetIDDescription();
        builder.vATRate = internalGetVATRate();
        builder.vATCategory = internalGetVATCategory();
        builder.effectiveDiscountInTrxCurrency = internalGetEffectiveDiscountInTrxCurrency();
        builder.transactionType = internalGetTransactionType();
        builder.pINIndicator = internalGetPINIndicator();
        builder.vATApplicable = internalGetVATApplicable();
        builder.netInvoiceIndicator = internalGetNetInvoiceIndicator();
        builder.customerCurrencyCode = internalGetCustomerCurrencyCode();
        builder.customerCurrencySymbol = internalGetCustomerCurrencySymbol();
        builder.effectiveUnitDiscountInCustomerCurrency =
                internalGetEffectiveUnitDiscountInCustomerCurrency();
        builder.effectiveDiscountInCustomerCurrency =
                internalGetEffectiveDiscountInCustomerCurrency();
        builder.vATonNetAmountInCustomerCurrency = internalGetVATonNetAmountInCustomerCurrency();
        builder.discountType = internalGetDiscountType();
        builder.transactionStatus = internalGetTransactionStatus();
        builder.payerGroup = internalGetPayerGroup();
        builder.refundFlag = internalGetRefundFlag();
        builder.originalSalesItemId = internalGetOriginalSalesItemId();
        builder.delcoName = internalGetDelcoName();
        builder.delcoCode = internalGetDelcoCode();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerName = internalGetPayerName();
        builder.cardExpiryPeriod = internalGetCardExpiryPeriod();
        builder.authorisationCode = internalGetAuthorisationCode();
        builder.transactionId = internalGetTransactionId();
        builder.transactionLine = internalGetTransactionLine();
        builder.allowClearing = internalGetAllowClearing();
        builder.cRMNumber = internalGetCRMNumber();
        builder.disputeStatus = internalGetDisputeStatus();
        builder.rebateRate = internalGetRebateRate();
        builder.delCoToColCoExchangeRate = internalGetDelCoToColCoExchangeRate();
        builder.netEuroAmount = internalGetNetEuroAmount();
        builder.euroRebateAmount = internalGetEuroRebateAmount();
        builder.euroVATAmount = internalGetEuroVATAmount();
        builder.parentCustomerNumber = internalGetParentCustomerNumber();
        builder.vATonNetAmount = internalGetVATonNetAmount();
        builder.vATCountry = internalGetVATCountry();
        return builder;
    }

    /**
     * Class to build instances of {@link TransactionExceptions}.
     */
    public static class Builder {
        private OptionalNullable<Double> salesItemId;
        private OptionalNullable<Integer> cardId;
        private OptionalNullable<Integer> productId;
        private OptionalNullable<String> transactionGUID;
        private OptionalNullable<String> transactionDate;
        private OptionalNullable<Double> customerInvoiceValueTotalGross;
        private OptionalNullable<String> cardPAN;
        private OptionalNullable<String> cardExpiry;
        private OptionalNullable<String> transactionTime;
        private OptionalNullable<String> uTCOffset;
        private OptionalNullable<String> fleetIdInput;
        private OptionalNullable<Integer> odometerInput;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> vehicleRegistration;
        private OptionalNullable<String> invoiceCurrencyCode;
        private OptionalNullable<String> invoiceCurrencySymbol;
        private OptionalNullable<String> transactionCurrencyCode;
        private OptionalNullable<String> transactionCurrencySymbol;
        private OptionalNullable<Double> transactionNetAmount;
        private OptionalNullable<Double> transactionTax;
        private OptionalNullable<Double> transactionGrossAmount;
        private OptionalNullable<Double> invoiceNetAmount;
        private OptionalNullable<Double> invoiceTax;
        private OptionalNullable<Double> invoiceGrossAmount;
        private OptionalNullable<String> purchasedInCountry;
        private OptionalNullable<Integer> accountId;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> accountShortName;
        private OptionalNullable<Double> quantity;
        private OptionalNullable<Boolean> fuelProduct;
        private OptionalNullable<Double> unitPriceInTransactionCurrency;
        private OptionalNullable<Double> unitPriceInInvoiceCurrency;
        private OptionalNullable<Double> unitDiscountTransactionCurrency;
        private OptionalNullable<Double> unitDiscountInvoiceCurrency;
        private OptionalNullable<Boolean> isInvoiced;
        private OptionalNullable<String> invoiceNumber;
        private OptionalNullable<String> invoiceDate;
        private OptionalNullable<String> siteCode;
        private OptionalNullable<String> siteName;
        private OptionalNullable<String> siteCountry;
        private Location location;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<String> receiptNumber;
        private OptionalNullable<String> productCode;
        private OptionalNullable<String> productName;
        private OptionalNullable<Integer> productGroupId;
        private OptionalNullable<String> productGroupName;
        private OptionalNullable<Double> delCoExchangeRate;
        private OptionalNullable<Double> colCoExchangeRate;
        private OptionalNullable<Boolean> isShellSite;
        private OptionalNullable<String> network;
        private OptionalNullable<Integer> siteGroupId;
        private OptionalNullable<String> siteGroupName;
        private OptionalNullable<String> postingDate;
        private OptionalNullable<String> issuerCode;
        private OptionalNullable<String> purchasedInCountryCode;
        private OptionalNullable<String> customerCountryCode;
        private OptionalNullable<String> customerCountry;
        private OptionalNullable<String> releaseCode;
        private OptionalNullable<String> cardGroupId;
        private OptionalNullable<String> cardSequenceNumber;
        private OptionalNullable<String> checkDigit;
        private OptionalNullable<String> fleetIDDescription;
        private OptionalNullable<Double> vATRate;
        private OptionalNullable<String> vATCategory;
        private OptionalNullable<String> effectiveDiscountInTrxCurrency;
        private OptionalNullable<String> transactionType;
        private OptionalNullable<String> pINIndicator;
        private OptionalNullable<String> vATApplicable;
        private OptionalNullable<String> netInvoiceIndicator;
        private OptionalNullable<String> customerCurrencyCode;
        private OptionalNullable<String> customerCurrencySymbol;
        private OptionalNullable<Double> effectiveUnitDiscountInCustomerCurrency;
        private OptionalNullable<Double> effectiveDiscountInCustomerCurrency;
        private OptionalNullable<Double> vATonNetAmountInCustomerCurrency;
        private OptionalNullable<String> discountType;
        private OptionalNullable<String> transactionStatus;
        private OptionalNullable<String> payerGroup;
        private OptionalNullable<String> refundFlag;
        private OptionalNullable<Double> originalSalesItemId;
        private OptionalNullable<String> delcoName;
        private OptionalNullable<String> delcoCode;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> cardExpiryPeriod;
        private OptionalNullable<String> authorisationCode;
        private OptionalNullable<String> transactionId;
        private OptionalNullable<String> transactionLine;
        private OptionalNullable<String> allowClearing;
        private OptionalNullable<String> cRMNumber;
        private OptionalNullable<String> disputeStatus;
        private OptionalNullable<Double> rebateRate;
        private OptionalNullable<Double> delCoToColCoExchangeRate;
        private OptionalNullable<Double> netEuroAmount;
        private OptionalNullable<Double> euroRebateAmount;
        private OptionalNullable<Double> euroVATAmount;
        private OptionalNullable<String> parentCustomerNumber;
        private OptionalNullable<Double> vATonNetAmount;
        private OptionalNullable<String> vATCountry;



        /**
         * Setter for salesItemId.
         * @param  salesItemId  Double value for salesItemId.
         * @return Builder
         */
        public Builder salesItemId(Double salesItemId) {
            this.salesItemId = OptionalNullable.of(salesItemId);
            return this;
        }

        /**
         * UnSetter for salesItemId.
         * @return Builder
         */
        public Builder unsetSalesItemId() {
            salesItemId = null;
            return this;
        }

        /**
         * Setter for cardId.
         * @param  cardId  Integer value for cardId.
         * @return Builder
         */
        public Builder cardId(Integer cardId) {
            this.cardId = OptionalNullable.of(cardId);
            return this;
        }

        /**
         * UnSetter for cardId.
         * @return Builder
         */
        public Builder unsetCardId() {
            cardId = null;
            return this;
        }

        /**
         * Setter for productId.
         * @param  productId  Integer value for productId.
         * @return Builder
         */
        public Builder productId(Integer productId) {
            this.productId = OptionalNullable.of(productId);
            return this;
        }

        /**
         * UnSetter for productId.
         * @return Builder
         */
        public Builder unsetProductId() {
            productId = null;
            return this;
        }

        /**
         * Setter for transactionGUID.
         * @param  transactionGUID  String value for transactionGUID.
         * @return Builder
         */
        public Builder transactionGUID(String transactionGUID) {
            this.transactionGUID = OptionalNullable.of(transactionGUID);
            return this;
        }

        /**
         * UnSetter for transactionGUID.
         * @return Builder
         */
        public Builder unsetTransactionGUID() {
            transactionGUID = null;
            return this;
        }

        /**
         * Setter for transactionDate.
         * @param  transactionDate  String value for transactionDate.
         * @return Builder
         */
        public Builder transactionDate(String transactionDate) {
            this.transactionDate = OptionalNullable.of(transactionDate);
            return this;
        }

        /**
         * UnSetter for transactionDate.
         * @return Builder
         */
        public Builder unsetTransactionDate() {
            transactionDate = null;
            return this;
        }

        /**
         * Setter for customerInvoiceValueTotalGross.
         * @param  customerInvoiceValueTotalGross  Double value for customerInvoiceValueTotalGross.
         * @return Builder
         */
        public Builder customerInvoiceValueTotalGross(Double customerInvoiceValueTotalGross) {
            this.customerInvoiceValueTotalGross =
                    OptionalNullable.of(customerInvoiceValueTotalGross);
            return this;
        }

        /**
         * UnSetter for customerInvoiceValueTotalGross.
         * @return Builder
         */
        public Builder unsetCustomerInvoiceValueTotalGross() {
            customerInvoiceValueTotalGross = null;
            return this;
        }

        /**
         * Setter for cardPAN.
         * @param  cardPAN  String value for cardPAN.
         * @return Builder
         */
        public Builder cardPAN(String cardPAN) {
            this.cardPAN = OptionalNullable.of(cardPAN);
            return this;
        }

        /**
         * UnSetter for cardPAN.
         * @return Builder
         */
        public Builder unsetCardPAN() {
            cardPAN = null;
            return this;
        }

        /**
         * Setter for cardExpiry.
         * @param  cardExpiry  String value for cardExpiry.
         * @return Builder
         */
        public Builder cardExpiry(String cardExpiry) {
            this.cardExpiry = OptionalNullable.of(cardExpiry);
            return this;
        }

        /**
         * UnSetter for cardExpiry.
         * @return Builder
         */
        public Builder unsetCardExpiry() {
            cardExpiry = null;
            return this;
        }

        /**
         * Setter for transactionTime.
         * @param  transactionTime  String value for transactionTime.
         * @return Builder
         */
        public Builder transactionTime(String transactionTime) {
            this.transactionTime = OptionalNullable.of(transactionTime);
            return this;
        }

        /**
         * UnSetter for transactionTime.
         * @return Builder
         */
        public Builder unsetTransactionTime() {
            transactionTime = null;
            return this;
        }

        /**
         * Setter for uTCOffset.
         * @param  uTCOffset  String value for uTCOffset.
         * @return Builder
         */
        public Builder uTCOffset(String uTCOffset) {
            this.uTCOffset = OptionalNullable.of(uTCOffset);
            return this;
        }

        /**
         * UnSetter for uTCOffset.
         * @return Builder
         */
        public Builder unsetUTCOffset() {
            uTCOffset = null;
            return this;
        }

        /**
         * Setter for fleetIdInput.
         * @param  fleetIdInput  String value for fleetIdInput.
         * @return Builder
         */
        public Builder fleetIdInput(String fleetIdInput) {
            this.fleetIdInput = OptionalNullable.of(fleetIdInput);
            return this;
        }

        /**
         * UnSetter for fleetIdInput.
         * @return Builder
         */
        public Builder unsetFleetIdInput() {
            fleetIdInput = null;
            return this;
        }

        /**
         * Setter for odometerInput.
         * @param  odometerInput  Integer value for odometerInput.
         * @return Builder
         */
        public Builder odometerInput(Integer odometerInput) {
            this.odometerInput = OptionalNullable.of(odometerInput);
            return this;
        }

        /**
         * UnSetter for odometerInput.
         * @return Builder
         */
        public Builder unsetOdometerInput() {
            odometerInput = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for vehicleRegistration.
         * @param  vehicleRegistration  String value for vehicleRegistration.
         * @return Builder
         */
        public Builder vehicleRegistration(String vehicleRegistration) {
            this.vehicleRegistration = OptionalNullable.of(vehicleRegistration);
            return this;
        }

        /**
         * UnSetter for vehicleRegistration.
         * @return Builder
         */
        public Builder unsetVehicleRegistration() {
            vehicleRegistration = null;
            return this;
        }

        /**
         * Setter for invoiceCurrencyCode.
         * @param  invoiceCurrencyCode  String value for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder invoiceCurrencyCode(String invoiceCurrencyCode) {
            this.invoiceCurrencyCode = OptionalNullable.of(invoiceCurrencyCode);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencyCode.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencyCode() {
            invoiceCurrencyCode = null;
            return this;
        }

        /**
         * Setter for invoiceCurrencySymbol.
         * @param  invoiceCurrencySymbol  String value for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder invoiceCurrencySymbol(String invoiceCurrencySymbol) {
            this.invoiceCurrencySymbol = OptionalNullable.of(invoiceCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for invoiceCurrencySymbol.
         * @return Builder
         */
        public Builder unsetInvoiceCurrencySymbol() {
            invoiceCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for transactionCurrencyCode.
         * @param  transactionCurrencyCode  String value for transactionCurrencyCode.
         * @return Builder
         */
        public Builder transactionCurrencyCode(String transactionCurrencyCode) {
            this.transactionCurrencyCode = OptionalNullable.of(transactionCurrencyCode);
            return this;
        }

        /**
         * UnSetter for transactionCurrencyCode.
         * @return Builder
         */
        public Builder unsetTransactionCurrencyCode() {
            transactionCurrencyCode = null;
            return this;
        }

        /**
         * Setter for transactionCurrencySymbol.
         * @param  transactionCurrencySymbol  String value for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder transactionCurrencySymbol(String transactionCurrencySymbol) {
            this.transactionCurrencySymbol = OptionalNullable.of(transactionCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for transactionCurrencySymbol.
         * @return Builder
         */
        public Builder unsetTransactionCurrencySymbol() {
            transactionCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for transactionNetAmount.
         * @param  transactionNetAmount  Double value for transactionNetAmount.
         * @return Builder
         */
        public Builder transactionNetAmount(Double transactionNetAmount) {
            this.transactionNetAmount = OptionalNullable.of(transactionNetAmount);
            return this;
        }

        /**
         * UnSetter for transactionNetAmount.
         * @return Builder
         */
        public Builder unsetTransactionNetAmount() {
            transactionNetAmount = null;
            return this;
        }

        /**
         * Setter for transactionTax.
         * @param  transactionTax  Double value for transactionTax.
         * @return Builder
         */
        public Builder transactionTax(Double transactionTax) {
            this.transactionTax = OptionalNullable.of(transactionTax);
            return this;
        }

        /**
         * UnSetter for transactionTax.
         * @return Builder
         */
        public Builder unsetTransactionTax() {
            transactionTax = null;
            return this;
        }

        /**
         * Setter for transactionGrossAmount.
         * @param  transactionGrossAmount  Double value for transactionGrossAmount.
         * @return Builder
         */
        public Builder transactionGrossAmount(Double transactionGrossAmount) {
            this.transactionGrossAmount = OptionalNullable.of(transactionGrossAmount);
            return this;
        }

        /**
         * UnSetter for transactionGrossAmount.
         * @return Builder
         */
        public Builder unsetTransactionGrossAmount() {
            transactionGrossAmount = null;
            return this;
        }

        /**
         * Setter for invoiceNetAmount.
         * @param  invoiceNetAmount  Double value for invoiceNetAmount.
         * @return Builder
         */
        public Builder invoiceNetAmount(Double invoiceNetAmount) {
            this.invoiceNetAmount = OptionalNullable.of(invoiceNetAmount);
            return this;
        }

        /**
         * UnSetter for invoiceNetAmount.
         * @return Builder
         */
        public Builder unsetInvoiceNetAmount() {
            invoiceNetAmount = null;
            return this;
        }

        /**
         * Setter for invoiceTax.
         * @param  invoiceTax  Double value for invoiceTax.
         * @return Builder
         */
        public Builder invoiceTax(Double invoiceTax) {
            this.invoiceTax = OptionalNullable.of(invoiceTax);
            return this;
        }

        /**
         * UnSetter for invoiceTax.
         * @return Builder
         */
        public Builder unsetInvoiceTax() {
            invoiceTax = null;
            return this;
        }

        /**
         * Setter for invoiceGrossAmount.
         * @param  invoiceGrossAmount  Double value for invoiceGrossAmount.
         * @return Builder
         */
        public Builder invoiceGrossAmount(Double invoiceGrossAmount) {
            this.invoiceGrossAmount = OptionalNullable.of(invoiceGrossAmount);
            return this;
        }

        /**
         * UnSetter for invoiceGrossAmount.
         * @return Builder
         */
        public Builder unsetInvoiceGrossAmount() {
            invoiceGrossAmount = null;
            return this;
        }

        /**
         * Setter for purchasedInCountry.
         * @param  purchasedInCountry  String value for purchasedInCountry.
         * @return Builder
         */
        public Builder purchasedInCountry(String purchasedInCountry) {
            this.purchasedInCountry = OptionalNullable.of(purchasedInCountry);
            return this;
        }

        /**
         * UnSetter for purchasedInCountry.
         * @return Builder
         */
        public Builder unsetPurchasedInCountry() {
            purchasedInCountry = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountShortName.
         * @param  accountShortName  String value for accountShortName.
         * @return Builder
         */
        public Builder accountShortName(String accountShortName) {
            this.accountShortName = OptionalNullable.of(accountShortName);
            return this;
        }

        /**
         * UnSetter for accountShortName.
         * @return Builder
         */
        public Builder unsetAccountShortName() {
            accountShortName = null;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  Double value for quantity.
         * @return Builder
         */
        public Builder quantity(Double quantity) {
            this.quantity = OptionalNullable.of(quantity);
            return this;
        }

        /**
         * UnSetter for quantity.
         * @return Builder
         */
        public Builder unsetQuantity() {
            quantity = null;
            return this;
        }

        /**
         * Setter for fuelProduct.
         * @param  fuelProduct  Boolean value for fuelProduct.
         * @return Builder
         */
        public Builder fuelProduct(Boolean fuelProduct) {
            this.fuelProduct = OptionalNullable.of(fuelProduct);
            return this;
        }

        /**
         * UnSetter for fuelProduct.
         * @return Builder
         */
        public Builder unsetFuelProduct() {
            fuelProduct = null;
            return this;
        }

        /**
         * Setter for unitPriceInTransactionCurrency.
         * @param  unitPriceInTransactionCurrency  Double value for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unitPriceInTransactionCurrency(Double unitPriceInTransactionCurrency) {
            this.unitPriceInTransactionCurrency =
                    OptionalNullable.of(unitPriceInTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInTransactionCurrency() {
            unitPriceInTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for unitPriceInInvoiceCurrency.
         * @param  unitPriceInInvoiceCurrency  Double value for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unitPriceInInvoiceCurrency(Double unitPriceInInvoiceCurrency) {
            this.unitPriceInInvoiceCurrency = OptionalNullable.of(unitPriceInInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitPriceInInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitPriceInInvoiceCurrency() {
            unitPriceInInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for unitDiscountTransactionCurrency.
         * @param  unitDiscountTransactionCurrency  Double value for
         *         unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unitDiscountTransactionCurrency(Double unitDiscountTransactionCurrency) {
            this.unitDiscountTransactionCurrency =
                    OptionalNullable.of(unitDiscountTransactionCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountTransactionCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountTransactionCurrency() {
            unitDiscountTransactionCurrency = null;
            return this;
        }

        /**
         * Setter for unitDiscountInvoiceCurrency.
         * @param  unitDiscountInvoiceCurrency  Double value for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unitDiscountInvoiceCurrency(Double unitDiscountInvoiceCurrency) {
            this.unitDiscountInvoiceCurrency = OptionalNullable.of(unitDiscountInvoiceCurrency);
            return this;
        }

        /**
         * UnSetter for unitDiscountInvoiceCurrency.
         * @return Builder
         */
        public Builder unsetUnitDiscountInvoiceCurrency() {
            unitDiscountInvoiceCurrency = null;
            return this;
        }

        /**
         * Setter for isInvoiced.
         * @param  isInvoiced  Boolean value for isInvoiced.
         * @return Builder
         */
        public Builder isInvoiced(Boolean isInvoiced) {
            this.isInvoiced = OptionalNullable.of(isInvoiced);
            return this;
        }

        /**
         * UnSetter for isInvoiced.
         * @return Builder
         */
        public Builder unsetIsInvoiced() {
            isInvoiced = null;
            return this;
        }

        /**
         * Setter for invoiceNumber.
         * @param  invoiceNumber  String value for invoiceNumber.
         * @return Builder
         */
        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = OptionalNullable.of(invoiceNumber);
            return this;
        }

        /**
         * UnSetter for invoiceNumber.
         * @return Builder
         */
        public Builder unsetInvoiceNumber() {
            invoiceNumber = null;
            return this;
        }

        /**
         * Setter for invoiceDate.
         * @param  invoiceDate  String value for invoiceDate.
         * @return Builder
         */
        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = OptionalNullable.of(invoiceDate);
            return this;
        }

        /**
         * UnSetter for invoiceDate.
         * @return Builder
         */
        public Builder unsetInvoiceDate() {
            invoiceDate = null;
            return this;
        }

        /**
         * Setter for siteCode.
         * @param  siteCode  String value for siteCode.
         * @return Builder
         */
        public Builder siteCode(String siteCode) {
            this.siteCode = OptionalNullable.of(siteCode);
            return this;
        }

        /**
         * UnSetter for siteCode.
         * @return Builder
         */
        public Builder unsetSiteCode() {
            siteCode = null;
            return this;
        }

        /**
         * Setter for siteName.
         * @param  siteName  String value for siteName.
         * @return Builder
         */
        public Builder siteName(String siteName) {
            this.siteName = OptionalNullable.of(siteName);
            return this;
        }

        /**
         * UnSetter for siteName.
         * @return Builder
         */
        public Builder unsetSiteName() {
            siteName = null;
            return this;
        }

        /**
         * Setter for siteCountry.
         * @param  siteCountry  String value for siteCountry.
         * @return Builder
         */
        public Builder siteCountry(String siteCountry) {
            this.siteCountry = OptionalNullable.of(siteCountry);
            return this;
        }

        /**
         * UnSetter for siteCountry.
         * @return Builder
         */
        public Builder unsetSiteCountry() {
            siteCountry = null;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  Location value for location.
         * @return Builder
         */
        public Builder location(Location location) {
            this.location = location;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for receiptNumber.
         * @param  receiptNumber  String value for receiptNumber.
         * @return Builder
         */
        public Builder receiptNumber(String receiptNumber) {
            this.receiptNumber = OptionalNullable.of(receiptNumber);
            return this;
        }

        /**
         * UnSetter for receiptNumber.
         * @return Builder
         */
        public Builder unsetReceiptNumber() {
            receiptNumber = null;
            return this;
        }

        /**
         * Setter for productCode.
         * @param  productCode  String value for productCode.
         * @return Builder
         */
        public Builder productCode(String productCode) {
            this.productCode = OptionalNullable.of(productCode);
            return this;
        }

        /**
         * UnSetter for productCode.
         * @return Builder
         */
        public Builder unsetProductCode() {
            productCode = null;
            return this;
        }

        /**
         * Setter for productName.
         * @param  productName  String value for productName.
         * @return Builder
         */
        public Builder productName(String productName) {
            this.productName = OptionalNullable.of(productName);
            return this;
        }

        /**
         * UnSetter for productName.
         * @return Builder
         */
        public Builder unsetProductName() {
            productName = null;
            return this;
        }

        /**
         * Setter for productGroupId.
         * @param  productGroupId  Integer value for productGroupId.
         * @return Builder
         */
        public Builder productGroupId(Integer productGroupId) {
            this.productGroupId = OptionalNullable.of(productGroupId);
            return this;
        }

        /**
         * UnSetter for productGroupId.
         * @return Builder
         */
        public Builder unsetProductGroupId() {
            productGroupId = null;
            return this;
        }

        /**
         * Setter for productGroupName.
         * @param  productGroupName  String value for productGroupName.
         * @return Builder
         */
        public Builder productGroupName(String productGroupName) {
            this.productGroupName = OptionalNullable.of(productGroupName);
            return this;
        }

        /**
         * UnSetter for productGroupName.
         * @return Builder
         */
        public Builder unsetProductGroupName() {
            productGroupName = null;
            return this;
        }

        /**
         * Setter for delCoExchangeRate.
         * @param  delCoExchangeRate  Double value for delCoExchangeRate.
         * @return Builder
         */
        public Builder delCoExchangeRate(Double delCoExchangeRate) {
            this.delCoExchangeRate = OptionalNullable.of(delCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoExchangeRate() {
            delCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for colCoExchangeRate.
         * @param  colCoExchangeRate  Double value for colCoExchangeRate.
         * @return Builder
         */
        public Builder colCoExchangeRate(Double colCoExchangeRate) {
            this.colCoExchangeRate = OptionalNullable.of(colCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for colCoExchangeRate.
         * @return Builder
         */
        public Builder unsetColCoExchangeRate() {
            colCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for isShellSite.
         * @param  isShellSite  Boolean value for isShellSite.
         * @return Builder
         */
        public Builder isShellSite(Boolean isShellSite) {
            this.isShellSite = OptionalNullable.of(isShellSite);
            return this;
        }

        /**
         * UnSetter for isShellSite.
         * @return Builder
         */
        public Builder unsetIsShellSite() {
            isShellSite = null;
            return this;
        }

        /**
         * Setter for network.
         * @param  network  String value for network.
         * @return Builder
         */
        public Builder network(String network) {
            this.network = OptionalNullable.of(network);
            return this;
        }

        /**
         * UnSetter for network.
         * @return Builder
         */
        public Builder unsetNetwork() {
            network = null;
            return this;
        }

        /**
         * Setter for siteGroupId.
         * @param  siteGroupId  Integer value for siteGroupId.
         * @return Builder
         */
        public Builder siteGroupId(Integer siteGroupId) {
            this.siteGroupId = OptionalNullable.of(siteGroupId);
            return this;
        }

        /**
         * UnSetter for siteGroupId.
         * @return Builder
         */
        public Builder unsetSiteGroupId() {
            siteGroupId = null;
            return this;
        }

        /**
         * Setter for siteGroupName.
         * @param  siteGroupName  String value for siteGroupName.
         * @return Builder
         */
        public Builder siteGroupName(String siteGroupName) {
            this.siteGroupName = OptionalNullable.of(siteGroupName);
            return this;
        }

        /**
         * UnSetter for siteGroupName.
         * @return Builder
         */
        public Builder unsetSiteGroupName() {
            siteGroupName = null;
            return this;
        }

        /**
         * Setter for postingDate.
         * @param  postingDate  String value for postingDate.
         * @return Builder
         */
        public Builder postingDate(String postingDate) {
            this.postingDate = OptionalNullable.of(postingDate);
            return this;
        }

        /**
         * UnSetter for postingDate.
         * @return Builder
         */
        public Builder unsetPostingDate() {
            postingDate = null;
            return this;
        }

        /**
         * Setter for issuerCode.
         * @param  issuerCode  String value for issuerCode.
         * @return Builder
         */
        public Builder issuerCode(String issuerCode) {
            this.issuerCode = OptionalNullable.of(issuerCode);
            return this;
        }

        /**
         * UnSetter for issuerCode.
         * @return Builder
         */
        public Builder unsetIssuerCode() {
            issuerCode = null;
            return this;
        }

        /**
         * Setter for purchasedInCountryCode.
         * @param  purchasedInCountryCode  String value for purchasedInCountryCode.
         * @return Builder
         */
        public Builder purchasedInCountryCode(String purchasedInCountryCode) {
            this.purchasedInCountryCode = OptionalNullable.of(purchasedInCountryCode);
            return this;
        }

        /**
         * UnSetter for purchasedInCountryCode.
         * @return Builder
         */
        public Builder unsetPurchasedInCountryCode() {
            purchasedInCountryCode = null;
            return this;
        }

        /**
         * Setter for customerCountryCode.
         * @param  customerCountryCode  String value for customerCountryCode.
         * @return Builder
         */
        public Builder customerCountryCode(String customerCountryCode) {
            this.customerCountryCode = OptionalNullable.of(customerCountryCode);
            return this;
        }

        /**
         * UnSetter for customerCountryCode.
         * @return Builder
         */
        public Builder unsetCustomerCountryCode() {
            customerCountryCode = null;
            return this;
        }

        /**
         * Setter for customerCountry.
         * @param  customerCountry  String value for customerCountry.
         * @return Builder
         */
        public Builder customerCountry(String customerCountry) {
            this.customerCountry = OptionalNullable.of(customerCountry);
            return this;
        }

        /**
         * UnSetter for customerCountry.
         * @return Builder
         */
        public Builder unsetCustomerCountry() {
            customerCountry = null;
            return this;
        }

        /**
         * Setter for releaseCode.
         * @param  releaseCode  String value for releaseCode.
         * @return Builder
         */
        public Builder releaseCode(String releaseCode) {
            this.releaseCode = OptionalNullable.of(releaseCode);
            return this;
        }

        /**
         * UnSetter for releaseCode.
         * @return Builder
         */
        public Builder unsetReleaseCode() {
            releaseCode = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  String value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(String cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardSequenceNumber.
         * @param  cardSequenceNumber  String value for cardSequenceNumber.
         * @return Builder
         */
        public Builder cardSequenceNumber(String cardSequenceNumber) {
            this.cardSequenceNumber = OptionalNullable.of(cardSequenceNumber);
            return this;
        }

        /**
         * UnSetter for cardSequenceNumber.
         * @return Builder
         */
        public Builder unsetCardSequenceNumber() {
            cardSequenceNumber = null;
            return this;
        }

        /**
         * Setter for checkDigit.
         * @param  checkDigit  String value for checkDigit.
         * @return Builder
         */
        public Builder checkDigit(String checkDigit) {
            this.checkDigit = OptionalNullable.of(checkDigit);
            return this;
        }

        /**
         * UnSetter for checkDigit.
         * @return Builder
         */
        public Builder unsetCheckDigit() {
            checkDigit = null;
            return this;
        }

        /**
         * Setter for fleetIDDescription.
         * @param  fleetIDDescription  String value for fleetIDDescription.
         * @return Builder
         */
        public Builder fleetIDDescription(String fleetIDDescription) {
            this.fleetIDDescription = OptionalNullable.of(fleetIDDescription);
            return this;
        }

        /**
         * UnSetter for fleetIDDescription.
         * @return Builder
         */
        public Builder unsetFleetIDDescription() {
            fleetIDDescription = null;
            return this;
        }

        /**
         * Setter for vATRate.
         * @param  vATRate  Double value for vATRate.
         * @return Builder
         */
        public Builder vATRate(Double vATRate) {
            this.vATRate = OptionalNullable.of(vATRate);
            return this;
        }

        /**
         * UnSetter for vATRate.
         * @return Builder
         */
        public Builder unsetVATRate() {
            vATRate = null;
            return this;
        }

        /**
         * Setter for vATCategory.
         * @param  vATCategory  String value for vATCategory.
         * @return Builder
         */
        public Builder vATCategory(String vATCategory) {
            this.vATCategory = OptionalNullable.of(vATCategory);
            return this;
        }

        /**
         * UnSetter for vATCategory.
         * @return Builder
         */
        public Builder unsetVATCategory() {
            vATCategory = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInTrxCurrency.
         * @param  effectiveDiscountInTrxCurrency  String value for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInTrxCurrency(String effectiveDiscountInTrxCurrency) {
            this.effectiveDiscountInTrxCurrency =
                    OptionalNullable.of(effectiveDiscountInTrxCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInTrxCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInTrxCurrency() {
            effectiveDiscountInTrxCurrency = null;
            return this;
        }

        /**
         * Setter for transactionType.
         * @param  transactionType  String value for transactionType.
         * @return Builder
         */
        public Builder transactionType(String transactionType) {
            this.transactionType = OptionalNullable.of(transactionType);
            return this;
        }

        /**
         * UnSetter for transactionType.
         * @return Builder
         */
        public Builder unsetTransactionType() {
            transactionType = null;
            return this;
        }

        /**
         * Setter for pINIndicator.
         * @param  pINIndicator  String value for pINIndicator.
         * @return Builder
         */
        public Builder pINIndicator(String pINIndicator) {
            this.pINIndicator = OptionalNullable.of(pINIndicator);
            return this;
        }

        /**
         * UnSetter for pINIndicator.
         * @return Builder
         */
        public Builder unsetPINIndicator() {
            pINIndicator = null;
            return this;
        }

        /**
         * Setter for vATApplicable.
         * @param  vATApplicable  String value for vATApplicable.
         * @return Builder
         */
        public Builder vATApplicable(String vATApplicable) {
            this.vATApplicable = OptionalNullable.of(vATApplicable);
            return this;
        }

        /**
         * UnSetter for vATApplicable.
         * @return Builder
         */
        public Builder unsetVATApplicable() {
            vATApplicable = null;
            return this;
        }

        /**
         * Setter for netInvoiceIndicator.
         * @param  netInvoiceIndicator  String value for netInvoiceIndicator.
         * @return Builder
         */
        public Builder netInvoiceIndicator(String netInvoiceIndicator) {
            this.netInvoiceIndicator = OptionalNullable.of(netInvoiceIndicator);
            return this;
        }

        /**
         * UnSetter for netInvoiceIndicator.
         * @return Builder
         */
        public Builder unsetNetInvoiceIndicator() {
            netInvoiceIndicator = null;
            return this;
        }

        /**
         * Setter for customerCurrencyCode.
         * @param  customerCurrencyCode  String value for customerCurrencyCode.
         * @return Builder
         */
        public Builder customerCurrencyCode(String customerCurrencyCode) {
            this.customerCurrencyCode = OptionalNullable.of(customerCurrencyCode);
            return this;
        }

        /**
         * UnSetter for customerCurrencyCode.
         * @return Builder
         */
        public Builder unsetCustomerCurrencyCode() {
            customerCurrencyCode = null;
            return this;
        }

        /**
         * Setter for customerCurrencySymbol.
         * @param  customerCurrencySymbol  String value for customerCurrencySymbol.
         * @return Builder
         */
        public Builder customerCurrencySymbol(String customerCurrencySymbol) {
            this.customerCurrencySymbol = OptionalNullable.of(customerCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for customerCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCustomerCurrencySymbol() {
            customerCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for effectiveUnitDiscountInCustomerCurrency.
         * @param  effectiveUnitDiscountInCustomerCurrency  Double value for
         *         effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveUnitDiscountInCustomerCurrency(
                Double effectiveUnitDiscountInCustomerCurrency) {
            this.effectiveUnitDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveUnitDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveUnitDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveUnitDiscountInCustomerCurrency() {
            effectiveUnitDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for effectiveDiscountInCustomerCurrency.
         * @param  effectiveDiscountInCustomerCurrency  Double value for
         *         effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder effectiveDiscountInCustomerCurrency(
                Double effectiveDiscountInCustomerCurrency) {
            this.effectiveDiscountInCustomerCurrency =
                    OptionalNullable.of(effectiveDiscountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for effectiveDiscountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetEffectiveDiscountInCustomerCurrency() {
            effectiveDiscountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for vATonNetAmountInCustomerCurrency.
         * @param  vATonNetAmountInCustomerCurrency  Double value for
         *         vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder vATonNetAmountInCustomerCurrency(Double vATonNetAmountInCustomerCurrency) {
            this.vATonNetAmountInCustomerCurrency =
                    OptionalNullable.of(vATonNetAmountInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for vATonNetAmountInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetVATonNetAmountInCustomerCurrency() {
            vATonNetAmountInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for discountType.
         * @param  discountType  String value for discountType.
         * @return Builder
         */
        public Builder discountType(String discountType) {
            this.discountType = OptionalNullable.of(discountType);
            return this;
        }

        /**
         * UnSetter for discountType.
         * @return Builder
         */
        public Builder unsetDiscountType() {
            discountType = null;
            return this;
        }

        /**
         * Setter for transactionStatus.
         * @param  transactionStatus  String value for transactionStatus.
         * @return Builder
         */
        public Builder transactionStatus(String transactionStatus) {
            this.transactionStatus = OptionalNullable.of(transactionStatus);
            return this;
        }

        /**
         * UnSetter for transactionStatus.
         * @return Builder
         */
        public Builder unsetTransactionStatus() {
            transactionStatus = null;
            return this;
        }

        /**
         * Setter for payerGroup.
         * @param  payerGroup  String value for payerGroup.
         * @return Builder
         */
        public Builder payerGroup(String payerGroup) {
            this.payerGroup = OptionalNullable.of(payerGroup);
            return this;
        }

        /**
         * UnSetter for payerGroup.
         * @return Builder
         */
        public Builder unsetPayerGroup() {
            payerGroup = null;
            return this;
        }

        /**
         * Setter for refundFlag.
         * @param  refundFlag  String value for refundFlag.
         * @return Builder
         */
        public Builder refundFlag(String refundFlag) {
            this.refundFlag = OptionalNullable.of(refundFlag);
            return this;
        }

        /**
         * UnSetter for refundFlag.
         * @return Builder
         */
        public Builder unsetRefundFlag() {
            refundFlag = null;
            return this;
        }

        /**
         * Setter for originalSalesItemId.
         * @param  originalSalesItemId  Double value for originalSalesItemId.
         * @return Builder
         */
        public Builder originalSalesItemId(Double originalSalesItemId) {
            this.originalSalesItemId = OptionalNullable.of(originalSalesItemId);
            return this;
        }

        /**
         * UnSetter for originalSalesItemId.
         * @return Builder
         */
        public Builder unsetOriginalSalesItemId() {
            originalSalesItemId = null;
            return this;
        }

        /**
         * Setter for delcoName.
         * @param  delcoName  String value for delcoName.
         * @return Builder
         */
        public Builder delcoName(String delcoName) {
            this.delcoName = OptionalNullable.of(delcoName);
            return this;
        }

        /**
         * UnSetter for delcoName.
         * @return Builder
         */
        public Builder unsetDelcoName() {
            delcoName = null;
            return this;
        }

        /**
         * Setter for delcoCode.
         * @param  delcoCode  String value for delcoCode.
         * @return Builder
         */
        public Builder delcoCode(String delcoCode) {
            this.delcoCode = OptionalNullable.of(delcoCode);
            return this;
        }

        /**
         * UnSetter for delcoCode.
         * @return Builder
         */
        public Builder unsetDelcoCode() {
            delcoCode = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for cardExpiryPeriod.
         * @param  cardExpiryPeriod  String value for cardExpiryPeriod.
         * @return Builder
         */
        public Builder cardExpiryPeriod(String cardExpiryPeriod) {
            this.cardExpiryPeriod = OptionalNullable.of(cardExpiryPeriod);
            return this;
        }

        /**
         * UnSetter for cardExpiryPeriod.
         * @return Builder
         */
        public Builder unsetCardExpiryPeriod() {
            cardExpiryPeriod = null;
            return this;
        }

        /**
         * Setter for authorisationCode.
         * @param  authorisationCode  String value for authorisationCode.
         * @return Builder
         */
        public Builder authorisationCode(String authorisationCode) {
            this.authorisationCode = OptionalNullable.of(authorisationCode);
            return this;
        }

        /**
         * UnSetter for authorisationCode.
         * @return Builder
         */
        public Builder unsetAuthorisationCode() {
            authorisationCode = null;
            return this;
        }

        /**
         * Setter for transactionId.
         * @param  transactionId  String value for transactionId.
         * @return Builder
         */
        public Builder transactionId(String transactionId) {
            this.transactionId = OptionalNullable.of(transactionId);
            return this;
        }

        /**
         * UnSetter for transactionId.
         * @return Builder
         */
        public Builder unsetTransactionId() {
            transactionId = null;
            return this;
        }

        /**
         * Setter for transactionLine.
         * @param  transactionLine  String value for transactionLine.
         * @return Builder
         */
        public Builder transactionLine(String transactionLine) {
            this.transactionLine = OptionalNullable.of(transactionLine);
            return this;
        }

        /**
         * UnSetter for transactionLine.
         * @return Builder
         */
        public Builder unsetTransactionLine() {
            transactionLine = null;
            return this;
        }

        /**
         * Setter for allowClearing.
         * @param  allowClearing  String value for allowClearing.
         * @return Builder
         */
        public Builder allowClearing(String allowClearing) {
            this.allowClearing = OptionalNullable.of(allowClearing);
            return this;
        }

        /**
         * UnSetter for allowClearing.
         * @return Builder
         */
        public Builder unsetAllowClearing() {
            allowClearing = null;
            return this;
        }

        /**
         * Setter for cRMNumber.
         * @param  cRMNumber  String value for cRMNumber.
         * @return Builder
         */
        public Builder cRMNumber(String cRMNumber) {
            this.cRMNumber = OptionalNullable.of(cRMNumber);
            return this;
        }

        /**
         * UnSetter for cRMNumber.
         * @return Builder
         */
        public Builder unsetCRMNumber() {
            cRMNumber = null;
            return this;
        }

        /**
         * Setter for disputeStatus.
         * @param  disputeStatus  String value for disputeStatus.
         * @return Builder
         */
        public Builder disputeStatus(String disputeStatus) {
            this.disputeStatus = OptionalNullable.of(disputeStatus);
            return this;
        }

        /**
         * UnSetter for disputeStatus.
         * @return Builder
         */
        public Builder unsetDisputeStatus() {
            disputeStatus = null;
            return this;
        }

        /**
         * Setter for rebateRate.
         * @param  rebateRate  Double value for rebateRate.
         * @return Builder
         */
        public Builder rebateRate(Double rebateRate) {
            this.rebateRate = OptionalNullable.of(rebateRate);
            return this;
        }

        /**
         * UnSetter for rebateRate.
         * @return Builder
         */
        public Builder unsetRebateRate() {
            rebateRate = null;
            return this;
        }

        /**
         * Setter for delCoToColCoExchangeRate.
         * @param  delCoToColCoExchangeRate  Double value for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder delCoToColCoExchangeRate(Double delCoToColCoExchangeRate) {
            this.delCoToColCoExchangeRate = OptionalNullable.of(delCoToColCoExchangeRate);
            return this;
        }

        /**
         * UnSetter for delCoToColCoExchangeRate.
         * @return Builder
         */
        public Builder unsetDelCoToColCoExchangeRate() {
            delCoToColCoExchangeRate = null;
            return this;
        }

        /**
         * Setter for netEuroAmount.
         * @param  netEuroAmount  Double value for netEuroAmount.
         * @return Builder
         */
        public Builder netEuroAmount(Double netEuroAmount) {
            this.netEuroAmount = OptionalNullable.of(netEuroAmount);
            return this;
        }

        /**
         * UnSetter for netEuroAmount.
         * @return Builder
         */
        public Builder unsetNetEuroAmount() {
            netEuroAmount = null;
            return this;
        }

        /**
         * Setter for euroRebateAmount.
         * @param  euroRebateAmount  Double value for euroRebateAmount.
         * @return Builder
         */
        public Builder euroRebateAmount(Double euroRebateAmount) {
            this.euroRebateAmount = OptionalNullable.of(euroRebateAmount);
            return this;
        }

        /**
         * UnSetter for euroRebateAmount.
         * @return Builder
         */
        public Builder unsetEuroRebateAmount() {
            euroRebateAmount = null;
            return this;
        }

        /**
         * Setter for euroVATAmount.
         * @param  euroVATAmount  Double value for euroVATAmount.
         * @return Builder
         */
        public Builder euroVATAmount(Double euroVATAmount) {
            this.euroVATAmount = OptionalNullable.of(euroVATAmount);
            return this;
        }

        /**
         * UnSetter for euroVATAmount.
         * @return Builder
         */
        public Builder unsetEuroVATAmount() {
            euroVATAmount = null;
            return this;
        }

        /**
         * Setter for parentCustomerNumber.
         * @param  parentCustomerNumber  String value for parentCustomerNumber.
         * @return Builder
         */
        public Builder parentCustomerNumber(String parentCustomerNumber) {
            this.parentCustomerNumber = OptionalNullable.of(parentCustomerNumber);
            return this;
        }

        /**
         * UnSetter for parentCustomerNumber.
         * @return Builder
         */
        public Builder unsetParentCustomerNumber() {
            parentCustomerNumber = null;
            return this;
        }

        /**
         * Setter for vATonNetAmount.
         * @param  vATonNetAmount  Double value for vATonNetAmount.
         * @return Builder
         */
        public Builder vATonNetAmount(Double vATonNetAmount) {
            this.vATonNetAmount = OptionalNullable.of(vATonNetAmount);
            return this;
        }

        /**
         * UnSetter for vATonNetAmount.
         * @return Builder
         */
        public Builder unsetVATonNetAmount() {
            vATonNetAmount = null;
            return this;
        }

        /**
         * Setter for vATCountry.
         * @param  vATCountry  String value for vATCountry.
         * @return Builder
         */
        public Builder vATCountry(String vATCountry) {
            this.vATCountry = OptionalNullable.of(vATCountry);
            return this;
        }

        /**
         * UnSetter for vATCountry.
         * @return Builder
         */
        public Builder unsetVATCountry() {
            vATCountry = null;
            return this;
        }

        /**
         * Builds a new {@link TransactionExceptions} object using the set fields.
         * @return {@link TransactionExceptions}
         */
        public TransactionExceptions build() {
            return new TransactionExceptions(salesItemId, cardId, productId, transactionGUID,
                    transactionDate, customerInvoiceValueTotalGross, cardPAN, cardExpiry,
                    transactionTime, uTCOffset, fleetIdInput, odometerInput, driverName,
                    vehicleRegistration, invoiceCurrencyCode, invoiceCurrencySymbol,
                    transactionCurrencyCode, transactionCurrencySymbol, transactionNetAmount,
                    transactionTax, transactionGrossAmount, invoiceNetAmount, invoiceTax,
                    invoiceGrossAmount, purchasedInCountry, accountId, accountNumber, accountName,
                    accountShortName, quantity, fuelProduct, unitPriceInTransactionCurrency,
                    unitPriceInInvoiceCurrency, unitDiscountTransactionCurrency,
                    unitDiscountInvoiceCurrency, isInvoiced, invoiceNumber, invoiceDate, siteCode,
                    siteName, siteCountry, location, cardGroupName, receiptNumber, productCode,
                    productName, productGroupId, productGroupName, delCoExchangeRate,
                    colCoExchangeRate, isShellSite, network, siteGroupId, siteGroupName,
                    postingDate, issuerCode, purchasedInCountryCode, customerCountryCode,
                    customerCountry, releaseCode, cardGroupId, cardSequenceNumber, checkDigit,
                    fleetIDDescription, vATRate, vATCategory, effectiveDiscountInTrxCurrency,
                    transactionType, pINIndicator, vATApplicable, netInvoiceIndicator,
                    customerCurrencyCode, customerCurrencySymbol,
                    effectiveUnitDiscountInCustomerCurrency, effectiveDiscountInCustomerCurrency,
                    vATonNetAmountInCustomerCurrency, discountType, transactionStatus, payerGroup,
                    refundFlag, originalSalesItemId, delcoName, delcoCode, payerNumber, payerName,
                    cardExpiryPeriod, authorisationCode, transactionId, transactionLine,
                    allowClearing, cRMNumber, disputeStatus, rebateRate, delCoToColCoExchangeRate,
                    netEuroAmount, euroRebateAmount, euroVATAmount, parentCustomerNumber,
                    vATonNetAmount, vATCountry);
        }
    }
}
