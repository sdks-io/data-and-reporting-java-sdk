/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for LastStatementOfAccount type.
 */
public class LastStatementOfAccount {
    private OptionalNullable<Double> amountDue;
    private OptionalNullable<Double> amountNotOverdue;
    private OptionalNullable<Double> amountOverdue;
    private OptionalNullable<Integer> creditLimit;
    private OptionalNullable<String> creditLimitCurrencyCode;
    private OptionalNullable<String> creditLimitCurrencySymbol;
    private OptionalNullable<Double> creditLimitInCustomerCurrency;
    private OptionalNullable<String> currencyCode;
    private OptionalNullable<String> currencySymbol;
    private OptionalNullable<String> lastPaymentCurrencyCode;
    private OptionalNullable<String> lastPaymentCurrencySymbol;
    private OptionalNullable<String> lastPaymentDate;
    private OptionalNullable<Double> lastPaymentValue;
    private OptionalNullable<Double> outstandingBalance;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> paymentDueDate;
    private OptionalNullable<String> paymentMethod;
    private OptionalNullable<Integer> paymentMethodId;
    private OptionalNullable<String> paymentTerms;
    private OptionalNullable<Integer> paymentTermsId;
    private OptionalNullable<String> soAReferenceNumber;
    private OptionalNullable<String> statementDate;
    private OptionalNullable<Integer> statementOfAccountId;
    private OptionalNullable<Integer> totalBillingDocuments;
    private OptionalNullable<Integer> totalSummaryBillingDocuments;
    private OptionalNullable<Integer> unallocatedPayment;

    /**
     * Default constructor.
     */
    public LastStatementOfAccount() {
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  creditLimit  Integer value for creditLimit.
     * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
     * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  lastPaymentValue  Double value for lastPaymentValue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  paymentMethodId  Integer value for paymentMethodId.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  paymentTermsId  Integer value for paymentTermsId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalSummaryBillingDocuments  Integer value for totalSummaryBillingDocuments.
     * @param  unallocatedPayment  Integer value for unallocatedPayment.
     */
    public LastStatementOfAccount(
            Double amountDue,
            Double amountNotOverdue,
            Double amountOverdue,
            Integer creditLimit,
            String creditLimitCurrencyCode,
            String creditLimitCurrencySymbol,
            Double creditLimitInCustomerCurrency,
            String currencyCode,
            String currencySymbol,
            String lastPaymentCurrencyCode,
            String lastPaymentCurrencySymbol,
            String lastPaymentDate,
            Double lastPaymentValue,
            Double outstandingBalance,
            Integer payerId,
            String payerNumber,
            String paymentDueDate,
            String paymentMethod,
            Integer paymentMethodId,
            String paymentTerms,
            Integer paymentTermsId,
            String soAReferenceNumber,
            String statementDate,
            Integer statementOfAccountId,
            Integer totalBillingDocuments,
            Integer totalSummaryBillingDocuments,
            Integer unallocatedPayment) {
        this.amountDue = OptionalNullable.of(amountDue);
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
        this.amountOverdue = OptionalNullable.of(amountOverdue);
        this.creditLimit = OptionalNullable.of(creditLimit);
        this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
        this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
        this.currencyCode = OptionalNullable.of(currencyCode);
        this.currencySymbol = OptionalNullable.of(currencySymbol);
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
        this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
        this.paymentMethod = OptionalNullable.of(paymentMethod);
        this.paymentMethodId = OptionalNullable.of(paymentMethodId);
        this.paymentTerms = OptionalNullable.of(paymentTerms);
        this.paymentTermsId = OptionalNullable.of(paymentTermsId);
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
        this.statementDate = OptionalNullable.of(statementDate);
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
        this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
    }

    /**
     * Initialization constructor.
     * @param  amountDue  Double value for amountDue.
     * @param  amountNotOverdue  Double value for amountNotOverdue.
     * @param  amountOverdue  Double value for amountOverdue.
     * @param  creditLimit  Integer value for creditLimit.
     * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
     * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
     * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
     * @param  currencyCode  String value for currencyCode.
     * @param  currencySymbol  String value for currencySymbol.
     * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
     * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
     * @param  lastPaymentDate  String value for lastPaymentDate.
     * @param  lastPaymentValue  Double value for lastPaymentValue.
     * @param  outstandingBalance  Double value for outstandingBalance.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  paymentDueDate  String value for paymentDueDate.
     * @param  paymentMethod  String value for paymentMethod.
     * @param  paymentMethodId  Integer value for paymentMethodId.
     * @param  paymentTerms  String value for paymentTerms.
     * @param  paymentTermsId  Integer value for paymentTermsId.
     * @param  soAReferenceNumber  String value for soAReferenceNumber.
     * @param  statementDate  String value for statementDate.
     * @param  statementOfAccountId  Integer value for statementOfAccountId.
     * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
     * @param  totalSummaryBillingDocuments  Integer value for totalSummaryBillingDocuments.
     * @param  unallocatedPayment  Integer value for unallocatedPayment.
     */

    protected LastStatementOfAccount(OptionalNullable<Double> amountDue,
            OptionalNullable<Double> amountNotOverdue, OptionalNullable<Double> amountOverdue,
            OptionalNullable<Integer> creditLimit, OptionalNullable<String> creditLimitCurrencyCode,
            OptionalNullable<String> creditLimitCurrencySymbol,
            OptionalNullable<Double> creditLimitInCustomerCurrency,
            OptionalNullable<String> currencyCode, OptionalNullable<String> currencySymbol,
            OptionalNullable<String> lastPaymentCurrencyCode,
            OptionalNullable<String> lastPaymentCurrencySymbol,
            OptionalNullable<String> lastPaymentDate, OptionalNullable<Double> lastPaymentValue,
            OptionalNullable<Double> outstandingBalance, OptionalNullable<Integer> payerId,
            OptionalNullable<String> payerNumber, OptionalNullable<String> paymentDueDate,
            OptionalNullable<String> paymentMethod, OptionalNullable<Integer> paymentMethodId,
            OptionalNullable<String> paymentTerms, OptionalNullable<Integer> paymentTermsId,
            OptionalNullable<String> soAReferenceNumber, OptionalNullable<String> statementDate,
            OptionalNullable<Integer> statementOfAccountId,
            OptionalNullable<Integer> totalBillingDocuments,
            OptionalNullable<Integer> totalSummaryBillingDocuments,
            OptionalNullable<Integer> unallocatedPayment) {
        this.amountDue = amountDue;
        this.amountNotOverdue = amountNotOverdue;
        this.amountOverdue = amountOverdue;
        this.creditLimit = creditLimit;
        this.creditLimitCurrencyCode = creditLimitCurrencyCode;
        this.creditLimitCurrencySymbol = creditLimitCurrencySymbol;
        this.creditLimitInCustomerCurrency = creditLimitInCustomerCurrency;
        this.currencyCode = currencyCode;
        this.currencySymbol = currencySymbol;
        this.lastPaymentCurrencyCode = lastPaymentCurrencyCode;
        this.lastPaymentCurrencySymbol = lastPaymentCurrencySymbol;
        this.lastPaymentDate = lastPaymentDate;
        this.lastPaymentValue = lastPaymentValue;
        this.outstandingBalance = outstandingBalance;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.paymentDueDate = paymentDueDate;
        this.paymentMethod = paymentMethod;
        this.paymentMethodId = paymentMethodId;
        this.paymentTerms = paymentTerms;
        this.paymentTermsId = paymentTermsId;
        this.soAReferenceNumber = soAReferenceNumber;
        this.statementDate = statementDate;
        this.statementOfAccountId = statementOfAccountId;
        this.totalBillingDocuments = totalBillingDocuments;
        this.totalSummaryBillingDocuments = totalSummaryBillingDocuments;
        this.unallocatedPayment = unallocatedPayment;
    }

    /**
     * Internal Getter for AmountDue.
     * Invoiced amount and due for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountDue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountDue() {
        return this.amountDue;
    }

    /**
     * Getter for AmountDue.
     * Invoiced amount and due for payment.
     * @return Returns the Double
     */
    public Double getAmountDue() {
        return OptionalNullable.getFrom(amountDue);
    }

    /**
     * Setter for AmountDue.
     * Invoiced amount and due for payment.
     * @param amountDue Value for Double
     */
    @JsonSetter("AmountDue")
    public void setAmountDue(Double amountDue) {
        this.amountDue = OptionalNullable.of(amountDue);
    }

    /**
     * UnSetter for AmountDue.
     * Invoiced amount and due for payment.
     */
    public void unsetAmountDue() {
        amountDue = null;
    }

    /**
     * Internal Getter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountNotOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountNotOverdue() {
        return this.amountNotOverdue;
    }

    /**
     * Getter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment.
     * @return Returns the Double
     */
    public Double getAmountNotOverdue() {
        return OptionalNullable.getFrom(amountNotOverdue);
    }

    /**
     * Setter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment.
     * @param amountNotOverdue Value for Double
     */
    @JsonSetter("AmountNotOverdue")
    public void setAmountNotOverdue(Double amountNotOverdue) {
        this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
    }

    /**
     * UnSetter for AmountNotOverdue.
     * Invoiced amount and not overdue for payment.
     */
    public void unsetAmountNotOverdue() {
        amountNotOverdue = null;
    }

    /**
     * Internal Getter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @return Returns the Internal Double
     */
    @JsonGetter("AmountOverdue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetAmountOverdue() {
        return this.amountOverdue;
    }

    /**
     * Getter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @return Returns the Double
     */
    public Double getAmountOverdue() {
        return OptionalNullable.getFrom(amountOverdue);
    }

    /**
     * Setter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     * @param amountOverdue Value for Double
     */
    @JsonSetter("AmountOverdue")
    public void setAmountOverdue(Double amountOverdue) {
        this.amountOverdue = OptionalNullable.of(amountOverdue);
    }

    /**
     * UnSetter for AmountOverdue.
     * Invoiced amount and overdue for payment.
     */
    public void unsetAmountOverdue() {
        amountOverdue = null;
    }

    /**
     * Internal Getter for CreditLimit.
     * Credit limit.
     * @return Returns the Internal Integer
     */
    @JsonGetter("CreditLimit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCreditLimit() {
        return this.creditLimit;
    }

    /**
     * Getter for CreditLimit.
     * Credit limit.
     * @return Returns the Integer
     */
    public Integer getCreditLimit() {
        return OptionalNullable.getFrom(creditLimit);
    }

    /**
     * Setter for CreditLimit.
     * Credit limit.
     * @param creditLimit Value for Integer
     */
    @JsonSetter("CreditLimit")
    public void setCreditLimit(Integer creditLimit) {
        this.creditLimit = OptionalNullable.of(creditLimit);
    }

    /**
     * UnSetter for CreditLimit.
     * Credit limit.
     */
    public void unsetCreditLimit() {
        creditLimit = null;
    }

    /**
     * Internal Getter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CreditLimitCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditLimitCurrencyCode() {
        return this.creditLimitCurrencyCode;
    }

    /**
     * Getter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @return Returns the String
     */
    public String getCreditLimitCurrencyCode() {
        return OptionalNullable.getFrom(creditLimitCurrencyCode);
    }

    /**
     * Setter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     * @param creditLimitCurrencyCode Value for String
     */
    @JsonSetter("CreditLimitCurrencyCode")
    public void setCreditLimitCurrencyCode(String creditLimitCurrencyCode) {
        this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
    }

    /**
     * UnSetter for CreditLimitCurrencyCode.
     * ISO code of the credit limit’s currency. Example: EUR
     */
    public void unsetCreditLimitCurrencyCode() {
        creditLimitCurrencyCode = null;
    }

    /**
     * Internal Getter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CreditLimitCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCreditLimitCurrencySymbol() {
        return this.creditLimitCurrencySymbol;
    }

    /**
     * Getter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @return Returns the String
     */
    public String getCreditLimitCurrencySymbol() {
        return OptionalNullable.getFrom(creditLimitCurrencySymbol);
    }

    /**
     * Setter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     * @param creditLimitCurrencySymbol Value for String
     */
    @JsonSetter("CreditLimitCurrencySymbol")
    public void setCreditLimitCurrencySymbol(String creditLimitCurrencySymbol) {
        this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
    }

    /**
     * UnSetter for CreditLimitCurrencySymbol.
     * Symbol of the credit limit’s currency. Example: €
     */
    public void unsetCreditLimitCurrencySymbol() {
        creditLimitCurrencySymbol = null;
    }

    /**
     * Internal Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. **Note**: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the StatementOfAccount response.
     * @return Returns the Internal Double
     */
    @JsonGetter("CreditLimitInCustomerCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCreditLimitInCustomerCurrency() {
        return this.creditLimitInCustomerCurrency;
    }

    /**
     * Getter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. **Note**: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the StatementOfAccount response.
     * @return Returns the Double
     */
    public Double getCreditLimitInCustomerCurrency() {
        return OptionalNullable.getFrom(creditLimitInCustomerCurrency);
    }

    /**
     * Setter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. **Note**: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the StatementOfAccount response.
     * @param creditLimitInCustomerCurrency Value for Double
     */
    @JsonSetter("CreditLimitInCustomerCurrency")
    public void setCreditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
        this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
    }

    /**
     * UnSetter for CreditLimitInCustomerCurrency.
     * Credit limit in Customer currency. **Note**: For currency details refer the parameters
     * CurrencyCode &amp; CurrencySymbol in the StatementOfAccount response.
     */
    public void unsetCreditLimitInCustomerCurrency() {
        creditLimitInCustomerCurrency = null;
    }

    /**
     * Internal Getter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencyCode() {
        return this.currencyCode;
    }

    /**
     * Getter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @return Returns the String
     */
    public String getCurrencyCode() {
        return OptionalNullable.getFrom(currencyCode);
    }

    /**
     * Setter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     * @param currencyCode Value for String
     */
    @JsonSetter("CurrencyCode")
    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = OptionalNullable.of(currencyCode);
    }

    /**
     * UnSetter for CurrencyCode.
     * ISO code of SOA currency. Example: EUR
     */
    public void unsetCurrencyCode() {
        currencyCode = null;
    }

    /**
     * Internal Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("CurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Getter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @return Returns the String
     */
    public String getCurrencySymbol() {
        return OptionalNullable.getFrom(currencySymbol);
    }

    /**
     * Setter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     * @param currencySymbol Value for String
     */
    @JsonSetter("CurrencySymbol")
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = OptionalNullable.of(currencySymbol);
    }

    /**
     * UnSetter for CurrencySymbol.
     * Symbol of SOA currency. Example: €
     */
    public void unsetCurrencySymbol() {
        currencySymbol = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencyCode.
     * ISO code of Last Payment currency. Example: EUR
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencyCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencyCode() {
        return this.lastPaymentCurrencyCode;
    }

    /**
     * Getter for LastPaymentCurrencyCode.
     * ISO code of Last Payment currency. Example: EUR
     * @return Returns the String
     */
    public String getLastPaymentCurrencyCode() {
        return OptionalNullable.getFrom(lastPaymentCurrencyCode);
    }

    /**
     * Setter for LastPaymentCurrencyCode.
     * ISO code of Last Payment currency. Example: EUR
     * @param lastPaymentCurrencyCode Value for String
     */
    @JsonSetter("LastPaymentCurrencyCode")
    public void setLastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
        this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
    }

    /**
     * UnSetter for LastPaymentCurrencyCode.
     * ISO code of Last Payment currency. Example: EUR
     */
    public void unsetLastPaymentCurrencyCode() {
        lastPaymentCurrencyCode = null;
    }

    /**
     * Internal Getter for LastPaymentCurrencySymbol.
     * Symbol of Last Payment currency. Example: €
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentCurrencySymbol")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentCurrencySymbol() {
        return this.lastPaymentCurrencySymbol;
    }

    /**
     * Getter for LastPaymentCurrencySymbol.
     * Symbol of Last Payment currency. Example: €
     * @return Returns the String
     */
    public String getLastPaymentCurrencySymbol() {
        return OptionalNullable.getFrom(lastPaymentCurrencySymbol);
    }

    /**
     * Setter for LastPaymentCurrencySymbol.
     * Symbol of Last Payment currency. Example: €
     * @param lastPaymentCurrencySymbol Value for String
     */
    @JsonSetter("LastPaymentCurrencySymbol")
    public void setLastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
        this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
    }

    /**
     * UnSetter for LastPaymentCurrencySymbol.
     * Symbol of Last Payment currency. Example: €
     */
    public void unsetLastPaymentCurrencySymbol() {
        lastPaymentCurrencySymbol = null;
    }

    /**
     * Internal Getter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("LastPaymentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLastPaymentDate() {
        return this.lastPaymentDate;
    }

    /**
     * Getter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getLastPaymentDate() {
        return OptionalNullable.getFrom(lastPaymentDate);
    }

    /**
     * Setter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     * @param lastPaymentDate Value for String
     */
    @JsonSetter("LastPaymentDate")
    public void setLastPaymentDate(String lastPaymentDate) {
        this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
    }

    /**
     * UnSetter for LastPaymentDate.
     * Last payment date. Format: yyyyMMdd
     */
    public void unsetLastPaymentDate() {
        lastPaymentDate = null;
    }

    /**
     * Internal Getter for LastPaymentValue.
     * Last payment value.
     * @return Returns the Internal Double
     */
    @JsonGetter("LastPaymentValue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLastPaymentValue() {
        return this.lastPaymentValue;
    }

    /**
     * Getter for LastPaymentValue.
     * Last payment value.
     * @return Returns the Double
     */
    public Double getLastPaymentValue() {
        return OptionalNullable.getFrom(lastPaymentValue);
    }

    /**
     * Setter for LastPaymentValue.
     * Last payment value.
     * @param lastPaymentValue Value for Double
     */
    @JsonSetter("LastPaymentValue")
    public void setLastPaymentValue(Double lastPaymentValue) {
        this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
    }

    /**
     * UnSetter for LastPaymentValue.
     * Last payment value.
     */
    public void unsetLastPaymentValue() {
        lastPaymentValue = null;
    }

    /**
     * Internal Getter for OutstandingBalance.
     * Current outstanding balance amount.
     * @return Returns the Internal Double
     */
    @JsonGetter("OutstandingBalance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetOutstandingBalance() {
        return this.outstandingBalance;
    }

    /**
     * Getter for OutstandingBalance.
     * Current outstanding balance amount.
     * @return Returns the Double
     */
    public Double getOutstandingBalance() {
        return OptionalNullable.getFrom(outstandingBalance);
    }

    /**
     * Setter for OutstandingBalance.
     * Current outstanding balance amount.
     * @param outstandingBalance Value for Double
     */
    @JsonSetter("OutstandingBalance")
    public void setOutstandingBalance(Double outstandingBalance) {
        this.outstandingBalance = OptionalNullable.of(outstandingBalance);
    }

    /**
     * UnSetter for OutstandingBalance.
     * Current outstanding balance amount.
     */
    public void unsetOutstandingBalance() {
        outstandingBalance = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payment customer id of the customer.
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payment customer id of the customer.
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payment customer id of the customer.
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number.
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number.
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number.
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentDueDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentDueDate() {
        return this.paymentDueDate;
    }

    /**
     * Getter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getPaymentDueDate() {
        return OptionalNullable.getFrom(paymentDueDate);
    }

    /**
     * Setter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     * @param paymentDueDate Value for String
     */
    @JsonSetter("PaymentDueDate")
    public void setPaymentDueDate(String paymentDueDate) {
        this.paymentDueDate = OptionalNullable.of(paymentDueDate);
    }

    /**
     * UnSetter for PaymentDueDate.
     * Due date for payment. Format: yyyyMMdd
     */
    public void unsetPaymentDueDate() {
        paymentDueDate = null;
    }

    /**
     * Internal Getter for PaymentMethod.
     * Payment method description of the Payer. Example: Id &amp; Description • Incoming - Direct Debit
     * • Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentMethod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentMethod() {
        return this.paymentMethod;
    }

    /**
     * Getter for PaymentMethod.
     * Payment method description of the Payer. Example: Id &amp; Description • Incoming - Direct Debit
     * • Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @return Returns the String
     */
    public String getPaymentMethod() {
        return OptionalNullable.getFrom(paymentMethod);
    }

    /**
     * Setter for PaymentMethod.
     * Payment method description of the Payer. Example: Id &amp; Description • Incoming - Direct Debit
     * • Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @param paymentMethod Value for String
     */
    @JsonSetter("PaymentMethod")
    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = OptionalNullable.of(paymentMethod);
    }

    /**
     * UnSetter for PaymentMethod.
     * Payment method description of the Payer. Example: Id &amp; Description • Incoming - Direct Debit
     * • Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     */
    public void unsetPaymentMethod() {
        paymentMethod = null;
    }

    /**
     * Internal Getter for PaymentMethodId.
     * Payment method Id of the Payer. Example: Id &amp; Description • Incoming - Direct Debit •
     * Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @return Returns the Internal Integer
     */
    @JsonGetter("PaymentMethodId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPaymentMethodId() {
        return this.paymentMethodId;
    }

    /**
     * Getter for PaymentMethodId.
     * Payment method Id of the Payer. Example: Id &amp; Description • Incoming - Direct Debit •
     * Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @return Returns the Integer
     */
    public Integer getPaymentMethodId() {
        return OptionalNullable.getFrom(paymentMethodId);
    }

    /**
     * Setter for PaymentMethodId.
     * Payment method Id of the Payer. Example: Id &amp; Description • Incoming - Direct Debit •
     * Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     * @param paymentMethodId Value for Integer
     */
    @JsonSetter("PaymentMethodId")
    public void setPaymentMethodId(Integer paymentMethodId) {
        this.paymentMethodId = OptionalNullable.of(paymentMethodId);
    }

    /**
     * UnSetter for PaymentMethodId.
     * Payment method Id of the Payer. Example: Id &amp; Description • Incoming - Direct Debit •
     * Incoming - Cheque • Incoming - Direct Debit A • Incoming - Bank Transfer • Incoming - Cash
     */
    public void unsetPaymentMethodId() {
        paymentMethodId = null;
    }

    /**
     * Internal Getter for PaymentTerms.
     * Payment terms description of the Payer. Example: Id &amp; Description • 14 days after Invoice •
     * 15 days after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice
     * • 0 days after invoice • days after invoice • days after invoice • 7 days after invoice •
     * 10th of the following month
     * @return Returns the Internal String
     */
    @JsonGetter("PaymentTerms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPaymentTerms() {
        return this.paymentTerms;
    }

    /**
     * Getter for PaymentTerms.
     * Payment terms description of the Payer. Example: Id &amp; Description • 14 days after Invoice •
     * 15 days after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice
     * • 0 days after invoice • days after invoice • days after invoice • 7 days after invoice •
     * 10th of the following month
     * @return Returns the String
     */
    public String getPaymentTerms() {
        return OptionalNullable.getFrom(paymentTerms);
    }

    /**
     * Setter for PaymentTerms.
     * Payment terms description of the Payer. Example: Id &amp; Description • 14 days after Invoice •
     * 15 days after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice
     * • 0 days after invoice • days after invoice • days after invoice • 7 days after invoice •
     * 10th of the following month
     * @param paymentTerms Value for String
     */
    @JsonSetter("PaymentTerms")
    public void setPaymentTerms(String paymentTerms) {
        this.paymentTerms = OptionalNullable.of(paymentTerms);
    }

    /**
     * UnSetter for PaymentTerms.
     * Payment terms description of the Payer. Example: Id &amp; Description • 14 days after Invoice •
     * 15 days after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice
     * • 0 days after invoice • days after invoice • days after invoice • 7 days after invoice •
     * 10th of the following month
     */
    public void unsetPaymentTerms() {
        paymentTerms = null;
    }

    /**
     * Internal Getter for PaymentTermsId.
     * Payment terms Id of the Payer. Example: Id &amp; Description • 14 days after Invoice • 15 days
     * after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice • 0
     * days after invoice • days after invoice • days after invoice • 7 days after invoice • 10th of
     * the following month
     * @return Returns the Internal Integer
     */
    @JsonGetter("PaymentTermsId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPaymentTermsId() {
        return this.paymentTermsId;
    }

    /**
     * Getter for PaymentTermsId.
     * Payment terms Id of the Payer. Example: Id &amp; Description • 14 days after Invoice • 15 days
     * after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice • 0
     * days after invoice • days after invoice • days after invoice • 7 days after invoice • 10th of
     * the following month
     * @return Returns the Integer
     */
    public Integer getPaymentTermsId() {
        return OptionalNullable.getFrom(paymentTermsId);
    }

    /**
     * Setter for PaymentTermsId.
     * Payment terms Id of the Payer. Example: Id &amp; Description • 14 days after Invoice • 15 days
     * after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice • 0
     * days after invoice • days after invoice • days after invoice • 7 days after invoice • 10th of
     * the following month
     * @param paymentTermsId Value for Integer
     */
    @JsonSetter("PaymentTermsId")
    public void setPaymentTermsId(Integer paymentTermsId) {
        this.paymentTermsId = OptionalNullable.of(paymentTermsId);
    }

    /**
     * UnSetter for PaymentTermsId.
     * Payment terms Id of the Payer. Example: Id &amp; Description • 14 days after Invoice • 15 days
     * after Invoice • 21 days after Invoice • 30 days after Invoice • 45 days after Invoice • 0
     * days after invoice • days after invoice • days after invoice • 7 days after invoice • 10th of
     * the following month
     */
    public void unsetPaymentTermsId() {
        paymentTermsId = null;
    }

    /**
     * Internal Getter for SoAReferenceNumber.
     * Statement of account reference number
     * @return Returns the Internal String
     */
    @JsonGetter("SoAReferenceNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetSoAReferenceNumber() {
        return this.soAReferenceNumber;
    }

    /**
     * Getter for SoAReferenceNumber.
     * Statement of account reference number
     * @return Returns the String
     */
    public String getSoAReferenceNumber() {
        return OptionalNullable.getFrom(soAReferenceNumber);
    }

    /**
     * Setter for SoAReferenceNumber.
     * Statement of account reference number
     * @param soAReferenceNumber Value for String
     */
    @JsonSetter("SoAReferenceNumber")
    public void setSoAReferenceNumber(String soAReferenceNumber) {
        this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
    }

    /**
     * UnSetter for SoAReferenceNumber.
     * Statement of account reference number
     */
    public void unsetSoAReferenceNumber() {
        soAReferenceNumber = null;
    }

    /**
     * Internal Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the Internal String
     */
    @JsonGetter("StatementDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetStatementDate() {
        return this.statementDate;
    }

    /**
     * Getter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @return Returns the String
     */
    public String getStatementDate() {
        return OptionalNullable.getFrom(statementDate);
    }

    /**
     * Setter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     * @param statementDate Value for String
     */
    @JsonSetter("StatementDate")
    public void setStatementDate(String statementDate) {
        this.statementDate = OptionalNullable.of(statementDate);
    }

    /**
     * UnSetter for StatementDate.
     * Date on which the SOA was generated. Format: yyyyMMdd
     */
    public void unsetStatementDate() {
        statementDate = null;
    }

    /**
     * Internal Getter for StatementOfAccountId.
     * Statement of account identifier, Example: 1
     * @return Returns the Internal Integer
     */
    @JsonGetter("StatementOfAccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetStatementOfAccountId() {
        return this.statementOfAccountId;
    }

    /**
     * Getter for StatementOfAccountId.
     * Statement of account identifier, Example: 1
     * @return Returns the Integer
     */
    public Integer getStatementOfAccountId() {
        return OptionalNullable.getFrom(statementOfAccountId);
    }

    /**
     * Setter for StatementOfAccountId.
     * Statement of account identifier, Example: 1
     * @param statementOfAccountId Value for Integer
     */
    @JsonSetter("StatementOfAccountId")
    public void setStatementOfAccountId(Integer statementOfAccountId) {
        this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
    }

    /**
     * UnSetter for StatementOfAccountId.
     * Statement of account identifier, Example: 1
     */
    public void unsetStatementOfAccountId() {
        statementOfAccountId = null;
    }

    /**
     * Internal Getter for TotalBillingDocuments.
     * Total number of billing documents for this Statement of Account
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalBillingDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalBillingDocuments() {
        return this.totalBillingDocuments;
    }

    /**
     * Getter for TotalBillingDocuments.
     * Total number of billing documents for this Statement of Account
     * @return Returns the Integer
     */
    public Integer getTotalBillingDocuments() {
        return OptionalNullable.getFrom(totalBillingDocuments);
    }

    /**
     * Setter for TotalBillingDocuments.
     * Total number of billing documents for this Statement of Account
     * @param totalBillingDocuments Value for Integer
     */
    @JsonSetter("TotalBillingDocuments")
    public void setTotalBillingDocuments(Integer totalBillingDocuments) {
        this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
    }

    /**
     * UnSetter for TotalBillingDocuments.
     * Total number of billing documents for this Statement of Account
     */
    public void unsetTotalBillingDocuments() {
        totalBillingDocuments = null;
    }

    /**
     * Internal Getter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @return Returns the Internal Integer
     */
    @JsonGetter("TotalSummaryBillingDocuments")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetTotalSummaryBillingDocuments() {
        return this.totalSummaryBillingDocuments;
    }

    /**
     * Getter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @return Returns the Integer
     */
    public Integer getTotalSummaryBillingDocuments() {
        return OptionalNullable.getFrom(totalSummaryBillingDocuments);
    }

    /**
     * Setter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     * @param totalSummaryBillingDocuments Value for Integer
     */
    @JsonSetter("TotalSummaryBillingDocuments")
    public void setTotalSummaryBillingDocuments(Integer totalSummaryBillingDocuments) {
        this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
    }

    /**
     * UnSetter for TotalSummaryBillingDocuments.
     * Total number of summary billing documents for this Statement of Account
     */
    public void unsetTotalSummaryBillingDocuments() {
        totalSummaryBillingDocuments = null;
    }

    /**
     * Internal Getter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount.
     * @return Returns the Internal Integer
     */
    @JsonGetter("UnallocatedPayment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetUnallocatedPayment() {
        return this.unallocatedPayment;
    }

    /**
     * Getter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount.
     * @return Returns the Integer
     */
    public Integer getUnallocatedPayment() {
        return OptionalNullable.getFrom(unallocatedPayment);
    }

    /**
     * Setter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount.
     * @param unallocatedPayment Value for Integer
     */
    @JsonSetter("UnallocatedPayment")
    public void setUnallocatedPayment(Integer unallocatedPayment) {
        this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
    }

    /**
     * UnSetter for UnallocatedPayment.
     * Unallocated payment. When negative, indicates overdue amount.
     */
    public void unsetUnallocatedPayment() {
        unallocatedPayment = null;
    }

    /**
     * Converts this LastStatementOfAccount into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LastStatementOfAccount [" + "amountDue=" + amountDue + ", amountNotOverdue="
                + amountNotOverdue + ", amountOverdue=" + amountOverdue + ", creditLimit="
                + creditLimit + ", creditLimitCurrencyCode=" + creditLimitCurrencyCode
                + ", creditLimitCurrencySymbol=" + creditLimitCurrencySymbol
                + ", creditLimitInCustomerCurrency=" + creditLimitInCustomerCurrency
                + ", currencyCode=" + currencyCode + ", currencySymbol=" + currencySymbol
                + ", lastPaymentCurrencyCode=" + lastPaymentCurrencyCode
                + ", lastPaymentCurrencySymbol=" + lastPaymentCurrencySymbol + ", lastPaymentDate="
                + lastPaymentDate + ", lastPaymentValue=" + lastPaymentValue
                + ", outstandingBalance=" + outstandingBalance + ", payerId=" + payerId
                + ", payerNumber=" + payerNumber + ", paymentDueDate=" + paymentDueDate
                + ", paymentMethod=" + paymentMethod + ", paymentMethodId=" + paymentMethodId
                + ", paymentTerms=" + paymentTerms + ", paymentTermsId=" + paymentTermsId
                + ", soAReferenceNumber=" + soAReferenceNumber + ", statementDate=" + statementDate
                + ", statementOfAccountId=" + statementOfAccountId + ", totalBillingDocuments="
                + totalBillingDocuments + ", totalSummaryBillingDocuments="
                + totalSummaryBillingDocuments + ", unallocatedPayment=" + unallocatedPayment + "]";
    }

    /**
     * Builds a new {@link LastStatementOfAccount.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LastStatementOfAccount.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.amountDue = internalGetAmountDue();
        builder.amountNotOverdue = internalGetAmountNotOverdue();
        builder.amountOverdue = internalGetAmountOverdue();
        builder.creditLimit = internalGetCreditLimit();
        builder.creditLimitCurrencyCode = internalGetCreditLimitCurrencyCode();
        builder.creditLimitCurrencySymbol = internalGetCreditLimitCurrencySymbol();
        builder.creditLimitInCustomerCurrency = internalGetCreditLimitInCustomerCurrency();
        builder.currencyCode = internalGetCurrencyCode();
        builder.currencySymbol = internalGetCurrencySymbol();
        builder.lastPaymentCurrencyCode = internalGetLastPaymentCurrencyCode();
        builder.lastPaymentCurrencySymbol = internalGetLastPaymentCurrencySymbol();
        builder.lastPaymentDate = internalGetLastPaymentDate();
        builder.lastPaymentValue = internalGetLastPaymentValue();
        builder.outstandingBalance = internalGetOutstandingBalance();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.paymentDueDate = internalGetPaymentDueDate();
        builder.paymentMethod = internalGetPaymentMethod();
        builder.paymentMethodId = internalGetPaymentMethodId();
        builder.paymentTerms = internalGetPaymentTerms();
        builder.paymentTermsId = internalGetPaymentTermsId();
        builder.soAReferenceNumber = internalGetSoAReferenceNumber();
        builder.statementDate = internalGetStatementDate();
        builder.statementOfAccountId = internalGetStatementOfAccountId();
        builder.totalBillingDocuments = internalGetTotalBillingDocuments();
        builder.totalSummaryBillingDocuments = internalGetTotalSummaryBillingDocuments();
        builder.unallocatedPayment = internalGetUnallocatedPayment();
        return builder;
    }

    /**
     * Class to build instances of {@link LastStatementOfAccount}.
     */
    public static class Builder {
        private OptionalNullable<Double> amountDue;
        private OptionalNullable<Double> amountNotOverdue;
        private OptionalNullable<Double> amountOverdue;
        private OptionalNullable<Integer> creditLimit;
        private OptionalNullable<String> creditLimitCurrencyCode;
        private OptionalNullable<String> creditLimitCurrencySymbol;
        private OptionalNullable<Double> creditLimitInCustomerCurrency;
        private OptionalNullable<String> currencyCode;
        private OptionalNullable<String> currencySymbol;
        private OptionalNullable<String> lastPaymentCurrencyCode;
        private OptionalNullable<String> lastPaymentCurrencySymbol;
        private OptionalNullable<String> lastPaymentDate;
        private OptionalNullable<Double> lastPaymentValue;
        private OptionalNullable<Double> outstandingBalance;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> paymentDueDate;
        private OptionalNullable<String> paymentMethod;
        private OptionalNullable<Integer> paymentMethodId;
        private OptionalNullable<String> paymentTerms;
        private OptionalNullable<Integer> paymentTermsId;
        private OptionalNullable<String> soAReferenceNumber;
        private OptionalNullable<String> statementDate;
        private OptionalNullable<Integer> statementOfAccountId;
        private OptionalNullable<Integer> totalBillingDocuments;
        private OptionalNullable<Integer> totalSummaryBillingDocuments;
        private OptionalNullable<Integer> unallocatedPayment;



        /**
         * Setter for amountDue.
         * @param  amountDue  Double value for amountDue.
         * @return Builder
         */
        public Builder amountDue(Double amountDue) {
            this.amountDue = OptionalNullable.of(amountDue);
            return this;
        }

        /**
         * UnSetter for amountDue.
         * @return Builder
         */
        public Builder unsetAmountDue() {
            amountDue = null;
            return this;
        }

        /**
         * Setter for amountNotOverdue.
         * @param  amountNotOverdue  Double value for amountNotOverdue.
         * @return Builder
         */
        public Builder amountNotOverdue(Double amountNotOverdue) {
            this.amountNotOverdue = OptionalNullable.of(amountNotOverdue);
            return this;
        }

        /**
         * UnSetter for amountNotOverdue.
         * @return Builder
         */
        public Builder unsetAmountNotOverdue() {
            amountNotOverdue = null;
            return this;
        }

        /**
         * Setter for amountOverdue.
         * @param  amountOverdue  Double value for amountOverdue.
         * @return Builder
         */
        public Builder amountOverdue(Double amountOverdue) {
            this.amountOverdue = OptionalNullable.of(amountOverdue);
            return this;
        }

        /**
         * UnSetter for amountOverdue.
         * @return Builder
         */
        public Builder unsetAmountOverdue() {
            amountOverdue = null;
            return this;
        }

        /**
         * Setter for creditLimit.
         * @param  creditLimit  Integer value for creditLimit.
         * @return Builder
         */
        public Builder creditLimit(Integer creditLimit) {
            this.creditLimit = OptionalNullable.of(creditLimit);
            return this;
        }

        /**
         * UnSetter for creditLimit.
         * @return Builder
         */
        public Builder unsetCreditLimit() {
            creditLimit = null;
            return this;
        }

        /**
         * Setter for creditLimitCurrencyCode.
         * @param  creditLimitCurrencyCode  String value for creditLimitCurrencyCode.
         * @return Builder
         */
        public Builder creditLimitCurrencyCode(String creditLimitCurrencyCode) {
            this.creditLimitCurrencyCode = OptionalNullable.of(creditLimitCurrencyCode);
            return this;
        }

        /**
         * UnSetter for creditLimitCurrencyCode.
         * @return Builder
         */
        public Builder unsetCreditLimitCurrencyCode() {
            creditLimitCurrencyCode = null;
            return this;
        }

        /**
         * Setter for creditLimitCurrencySymbol.
         * @param  creditLimitCurrencySymbol  String value for creditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder creditLimitCurrencySymbol(String creditLimitCurrencySymbol) {
            this.creditLimitCurrencySymbol = OptionalNullable.of(creditLimitCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for creditLimitCurrencySymbol.
         * @return Builder
         */
        public Builder unsetCreditLimitCurrencySymbol() {
            creditLimitCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for creditLimitInCustomerCurrency.
         * @param  creditLimitInCustomerCurrency  Double value for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder creditLimitInCustomerCurrency(Double creditLimitInCustomerCurrency) {
            this.creditLimitInCustomerCurrency = OptionalNullable.of(creditLimitInCustomerCurrency);
            return this;
        }

        /**
         * UnSetter for creditLimitInCustomerCurrency.
         * @return Builder
         */
        public Builder unsetCreditLimitInCustomerCurrency() {
            creditLimitInCustomerCurrency = null;
            return this;
        }

        /**
         * Setter for currencyCode.
         * @param  currencyCode  String value for currencyCode.
         * @return Builder
         */
        public Builder currencyCode(String currencyCode) {
            this.currencyCode = OptionalNullable.of(currencyCode);
            return this;
        }

        /**
         * UnSetter for currencyCode.
         * @return Builder
         */
        public Builder unsetCurrencyCode() {
            currencyCode = null;
            return this;
        }

        /**
         * Setter for currencySymbol.
         * @param  currencySymbol  String value for currencySymbol.
         * @return Builder
         */
        public Builder currencySymbol(String currencySymbol) {
            this.currencySymbol = OptionalNullable.of(currencySymbol);
            return this;
        }

        /**
         * UnSetter for currencySymbol.
         * @return Builder
         */
        public Builder unsetCurrencySymbol() {
            currencySymbol = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencyCode.
         * @param  lastPaymentCurrencyCode  String value for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder lastPaymentCurrencyCode(String lastPaymentCurrencyCode) {
            this.lastPaymentCurrencyCode = OptionalNullable.of(lastPaymentCurrencyCode);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencyCode.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencyCode() {
            lastPaymentCurrencyCode = null;
            return this;
        }

        /**
         * Setter for lastPaymentCurrencySymbol.
         * @param  lastPaymentCurrencySymbol  String value for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder lastPaymentCurrencySymbol(String lastPaymentCurrencySymbol) {
            this.lastPaymentCurrencySymbol = OptionalNullable.of(lastPaymentCurrencySymbol);
            return this;
        }

        /**
         * UnSetter for lastPaymentCurrencySymbol.
         * @return Builder
         */
        public Builder unsetLastPaymentCurrencySymbol() {
            lastPaymentCurrencySymbol = null;
            return this;
        }

        /**
         * Setter for lastPaymentDate.
         * @param  lastPaymentDate  String value for lastPaymentDate.
         * @return Builder
         */
        public Builder lastPaymentDate(String lastPaymentDate) {
            this.lastPaymentDate = OptionalNullable.of(lastPaymentDate);
            return this;
        }

        /**
         * UnSetter for lastPaymentDate.
         * @return Builder
         */
        public Builder unsetLastPaymentDate() {
            lastPaymentDate = null;
            return this;
        }

        /**
         * Setter for lastPaymentValue.
         * @param  lastPaymentValue  Double value for lastPaymentValue.
         * @return Builder
         */
        public Builder lastPaymentValue(Double lastPaymentValue) {
            this.lastPaymentValue = OptionalNullable.of(lastPaymentValue);
            return this;
        }

        /**
         * UnSetter for lastPaymentValue.
         * @return Builder
         */
        public Builder unsetLastPaymentValue() {
            lastPaymentValue = null;
            return this;
        }

        /**
         * Setter for outstandingBalance.
         * @param  outstandingBalance  Double value for outstandingBalance.
         * @return Builder
         */
        public Builder outstandingBalance(Double outstandingBalance) {
            this.outstandingBalance = OptionalNullable.of(outstandingBalance);
            return this;
        }

        /**
         * UnSetter for outstandingBalance.
         * @return Builder
         */
        public Builder unsetOutstandingBalance() {
            outstandingBalance = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for paymentDueDate.
         * @param  paymentDueDate  String value for paymentDueDate.
         * @return Builder
         */
        public Builder paymentDueDate(String paymentDueDate) {
            this.paymentDueDate = OptionalNullable.of(paymentDueDate);
            return this;
        }

        /**
         * UnSetter for paymentDueDate.
         * @return Builder
         */
        public Builder unsetPaymentDueDate() {
            paymentDueDate = null;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  String value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = OptionalNullable.of(paymentMethod);
            return this;
        }

        /**
         * UnSetter for paymentMethod.
         * @return Builder
         */
        public Builder unsetPaymentMethod() {
            paymentMethod = null;
            return this;
        }

        /**
         * Setter for paymentMethodId.
         * @param  paymentMethodId  Integer value for paymentMethodId.
         * @return Builder
         */
        public Builder paymentMethodId(Integer paymentMethodId) {
            this.paymentMethodId = OptionalNullable.of(paymentMethodId);
            return this;
        }

        /**
         * UnSetter for paymentMethodId.
         * @return Builder
         */
        public Builder unsetPaymentMethodId() {
            paymentMethodId = null;
            return this;
        }

        /**
         * Setter for paymentTerms.
         * @param  paymentTerms  String value for paymentTerms.
         * @return Builder
         */
        public Builder paymentTerms(String paymentTerms) {
            this.paymentTerms = OptionalNullable.of(paymentTerms);
            return this;
        }

        /**
         * UnSetter for paymentTerms.
         * @return Builder
         */
        public Builder unsetPaymentTerms() {
            paymentTerms = null;
            return this;
        }

        /**
         * Setter for paymentTermsId.
         * @param  paymentTermsId  Integer value for paymentTermsId.
         * @return Builder
         */
        public Builder paymentTermsId(Integer paymentTermsId) {
            this.paymentTermsId = OptionalNullable.of(paymentTermsId);
            return this;
        }

        /**
         * UnSetter for paymentTermsId.
         * @return Builder
         */
        public Builder unsetPaymentTermsId() {
            paymentTermsId = null;
            return this;
        }

        /**
         * Setter for soAReferenceNumber.
         * @param  soAReferenceNumber  String value for soAReferenceNumber.
         * @return Builder
         */
        public Builder soAReferenceNumber(String soAReferenceNumber) {
            this.soAReferenceNumber = OptionalNullable.of(soAReferenceNumber);
            return this;
        }

        /**
         * UnSetter for soAReferenceNumber.
         * @return Builder
         */
        public Builder unsetSoAReferenceNumber() {
            soAReferenceNumber = null;
            return this;
        }

        /**
         * Setter for statementDate.
         * @param  statementDate  String value for statementDate.
         * @return Builder
         */
        public Builder statementDate(String statementDate) {
            this.statementDate = OptionalNullable.of(statementDate);
            return this;
        }

        /**
         * UnSetter for statementDate.
         * @return Builder
         */
        public Builder unsetStatementDate() {
            statementDate = null;
            return this;
        }

        /**
         * Setter for statementOfAccountId.
         * @param  statementOfAccountId  Integer value for statementOfAccountId.
         * @return Builder
         */
        public Builder statementOfAccountId(Integer statementOfAccountId) {
            this.statementOfAccountId = OptionalNullable.of(statementOfAccountId);
            return this;
        }

        /**
         * UnSetter for statementOfAccountId.
         * @return Builder
         */
        public Builder unsetStatementOfAccountId() {
            statementOfAccountId = null;
            return this;
        }

        /**
         * Setter for totalBillingDocuments.
         * @param  totalBillingDocuments  Integer value for totalBillingDocuments.
         * @return Builder
         */
        public Builder totalBillingDocuments(Integer totalBillingDocuments) {
            this.totalBillingDocuments = OptionalNullable.of(totalBillingDocuments);
            return this;
        }

        /**
         * UnSetter for totalBillingDocuments.
         * @return Builder
         */
        public Builder unsetTotalBillingDocuments() {
            totalBillingDocuments = null;
            return this;
        }

        /**
         * Setter for totalSummaryBillingDocuments.
         * @param  totalSummaryBillingDocuments  Integer value for totalSummaryBillingDocuments.
         * @return Builder
         */
        public Builder totalSummaryBillingDocuments(Integer totalSummaryBillingDocuments) {
            this.totalSummaryBillingDocuments = OptionalNullable.of(totalSummaryBillingDocuments);
            return this;
        }

        /**
         * UnSetter for totalSummaryBillingDocuments.
         * @return Builder
         */
        public Builder unsetTotalSummaryBillingDocuments() {
            totalSummaryBillingDocuments = null;
            return this;
        }

        /**
         * Setter for unallocatedPayment.
         * @param  unallocatedPayment  Integer value for unallocatedPayment.
         * @return Builder
         */
        public Builder unallocatedPayment(Integer unallocatedPayment) {
            this.unallocatedPayment = OptionalNullable.of(unallocatedPayment);
            return this;
        }

        /**
         * UnSetter for unallocatedPayment.
         * @return Builder
         */
        public Builder unsetUnallocatedPayment() {
            unallocatedPayment = null;
            return this;
        }

        /**
         * Builds a new {@link LastStatementOfAccount} object using the set fields.
         * @return {@link LastStatementOfAccount}
         */
        public LastStatementOfAccount build() {
            return new LastStatementOfAccount(amountDue, amountNotOverdue, amountOverdue,
                    creditLimit, creditLimitCurrencyCode, creditLimitCurrencySymbol,
                    creditLimitInCustomerCurrency, currencyCode, currencySymbol,
                    lastPaymentCurrencyCode, lastPaymentCurrencySymbol, lastPaymentDate,
                    lastPaymentValue, outstandingBalance, payerId, payerNumber, paymentDueDate,
                    paymentMethod, paymentMethodId, paymentTerms, paymentTermsId,
                    soAReferenceNumber, statementDate, statementOfAccountId, totalBillingDocuments,
                    totalSummaryBillingDocuments, unallocatedPayment);
        }
    }
}
