/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for AccountAccess type.
 */
public class AccountAccess {
    private OptionalNullable<Integer> colcoId;
    private OptionalNullable<Integer> colcoCode;
    private OptionalNullable<Integer> payerId;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> payerName;
    private OptionalNullable<Integer> accountId;
    private String accountNumber;
    private OptionalNullable<String> accountName;

    /**
     * Default constructor.
     */
    public AccountAccess() {
    }

    /**
     * Initialization constructor.
     * @param  colcoId  Integer value for colcoId.
     * @param  colcoCode  Integer value for colcoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     */
    public AccountAccess(
            Integer colcoId,
            Integer colcoCode,
            Integer payerId,
            String payerNumber,
            String payerName,
            Integer accountId,
            String accountNumber,
            String accountName) {
        this.colcoId = OptionalNullable.of(colcoId);
        this.colcoCode = OptionalNullable.of(colcoCode);
        this.payerId = OptionalNullable.of(payerId);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.payerName = OptionalNullable.of(payerName);
        this.accountId = OptionalNullable.of(accountId);
        this.accountNumber = accountNumber;
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * Initialization constructor.
     * @param  colcoId  Integer value for colcoId.
     * @param  colcoCode  Integer value for colcoCode.
     * @param  payerId  Integer value for payerId.
     * @param  payerNumber  String value for payerNumber.
     * @param  payerName  String value for payerName.
     * @param  accountId  Integer value for accountId.
     * @param  accountNumber  String value for accountNumber.
     * @param  accountName  String value for accountName.
     */

    protected AccountAccess(OptionalNullable<Integer> colcoId, OptionalNullable<Integer> colcoCode,
            OptionalNullable<Integer> payerId, OptionalNullable<String> payerNumber,
            OptionalNullable<String> payerName, OptionalNullable<Integer> accountId,
            String accountNumber, OptionalNullable<String> accountName) {
        this.colcoId = colcoId;
        this.colcoCode = colcoCode;
        this.payerId = payerId;
        this.payerNumber = payerNumber;
        this.payerName = payerName;
        this.accountId = accountId;
        this.accountNumber = accountNumber;
        this.accountName = accountName;
    }

    /**
     * Internal Getter for ColcoId.
     * Collecting company id.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColcoId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColcoId() {
        return this.colcoId;
    }

    /**
     * Getter for ColcoId.
     * Collecting company id.
     * @return Returns the Integer
     */
    public Integer getColcoId() {
        return OptionalNullable.getFrom(colcoId);
    }

    /**
     * Setter for ColcoId.
     * Collecting company id.
     * @param colcoId Value for Integer
     */
    @JsonSetter("ColcoId")
    public void setColcoId(Integer colcoId) {
        this.colcoId = OptionalNullable.of(colcoId);
    }

    /**
     * UnSetter for ColcoId.
     * Collecting company id.
     */
    public void unsetColcoId() {
        colcoId = null;
    }

    /**
     * Internal Getter for ColcoCode.
     * Collecting company code.
     * @return Returns the Internal Integer
     */
    @JsonGetter("ColcoCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetColcoCode() {
        return this.colcoCode;
    }

    /**
     * Getter for ColcoCode.
     * Collecting company code.
     * @return Returns the Integer
     */
    public Integer getColcoCode() {
        return OptionalNullable.getFrom(colcoCode);
    }

    /**
     * Setter for ColcoCode.
     * Collecting company code.
     * @param colcoCode Value for Integer
     */
    @JsonSetter("ColcoCode")
    public void setColcoCode(Integer colcoCode) {
        this.colcoCode = OptionalNullable.of(colcoCode);
    }

    /**
     * UnSetter for ColcoCode.
     * Collecting company code.
     */
    public void unsetColcoCode() {
        colcoCode = null;
    }

    /**
     * Internal Getter for PayerId.
     * Payer Id to which the user has access
     * @return Returns the Internal Integer
     */
    @JsonGetter("PayerId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPayerId() {
        return this.payerId;
    }

    /**
     * Getter for PayerId.
     * Payer Id to which the user has access
     * @return Returns the Integer
     */
    public Integer getPayerId() {
        return OptionalNullable.getFrom(payerId);
    }

    /**
     * Setter for PayerId.
     * Payer Id to which the user has access
     * @param payerId Value for Integer
     */
    @JsonSetter("PayerId")
    public void setPayerId(Integer payerId) {
        this.payerId = OptionalNullable.of(payerId);
    }

    /**
     * UnSetter for PayerId.
     * Payer Id to which the user has access
     */
    public void unsetPayerId() {
        payerId = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payer Number to which the user has access
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payer Number to which the user has access
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payer Number to which the user has access
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payer Number to which the user has access
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for PayerName.
     * Name of the Payer to which the user has access
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Name of the Payer to which the user has access
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Name of the Payer to which the user has access
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Name of the Payer to which the user has access
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for AccountId.
     * Account Id to which the user has access
     * @return Returns the Internal Integer
     */
    @JsonGetter("AccountId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetAccountId() {
        return this.accountId;
    }

    /**
     * Getter for AccountId.
     * Account Id to which the user has access
     * @return Returns the Integer
     */
    public Integer getAccountId() {
        return OptionalNullable.getFrom(accountId);
    }

    /**
     * Setter for AccountId.
     * Account Id to which the user has access
     * @param accountId Value for Integer
     */
    @JsonSetter("AccountId")
    public void setAccountId(Integer accountId) {
        this.accountId = OptionalNullable.of(accountId);
    }

    /**
     * UnSetter for AccountId.
     * Account Id to which the user has access
     */
    public void unsetAccountId() {
        accountId = null;
    }

    /**
     * Getter for AccountNumber.
     * Account Number to which the user has access
     * @return Returns the String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountNumber() {
        return accountNumber;
    }

    /**
     * Setter for AccountNumber.
     * Account Number to which the user has access
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Internal Getter for AccountName.
     * Name of the Account to which the user has access
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Name of the Account to which the user has access
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Name of the Account to which the user has access
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Name of the Account to which the user has access
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Converts this AccountAccess into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AccountAccess [" + "colcoId=" + colcoId + ", colcoCode=" + colcoCode + ", payerId="
                + payerId + ", payerNumber=" + payerNumber + ", payerName=" + payerName
                + ", accountId=" + accountId + ", accountNumber=" + accountNumber + ", accountName="
                + accountName + "]";
    }

    /**
     * Builds a new {@link AccountAccess.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AccountAccess.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accountNumber(getAccountNumber());
        builder.colcoId = internalGetColcoId();
        builder.colcoCode = internalGetColcoCode();
        builder.payerId = internalGetPayerId();
        builder.payerNumber = internalGetPayerNumber();
        builder.payerName = internalGetPayerName();
        builder.accountId = internalGetAccountId();
        builder.accountName = internalGetAccountName();
        return builder;
    }

    /**
     * Class to build instances of {@link AccountAccess}.
     */
    public static class Builder {
        private OptionalNullable<Integer> colcoId;
        private OptionalNullable<Integer> colcoCode;
        private OptionalNullable<Integer> payerId;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> payerName;
        private OptionalNullable<Integer> accountId;
        private String accountNumber;
        private OptionalNullable<String> accountName;



        /**
         * Setter for colcoId.
         * @param  colcoId  Integer value for colcoId.
         * @return Builder
         */
        public Builder colcoId(Integer colcoId) {
            this.colcoId = OptionalNullable.of(colcoId);
            return this;
        }

        /**
         * UnSetter for colcoId.
         * @return Builder
         */
        public Builder unsetColcoId() {
            colcoId = null;
            return this;
        }

        /**
         * Setter for colcoCode.
         * @param  colcoCode  Integer value for colcoCode.
         * @return Builder
         */
        public Builder colcoCode(Integer colcoCode) {
            this.colcoCode = OptionalNullable.of(colcoCode);
            return this;
        }

        /**
         * UnSetter for colcoCode.
         * @return Builder
         */
        public Builder unsetColcoCode() {
            colcoCode = null;
            return this;
        }

        /**
         * Setter for payerId.
         * @param  payerId  Integer value for payerId.
         * @return Builder
         */
        public Builder payerId(Integer payerId) {
            this.payerId = OptionalNullable.of(payerId);
            return this;
        }

        /**
         * UnSetter for payerId.
         * @return Builder
         */
        public Builder unsetPayerId() {
            payerId = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  Integer value for accountId.
         * @return Builder
         */
        public Builder accountId(Integer accountId) {
            this.accountId = OptionalNullable.of(accountId);
            return this;
        }

        /**
         * UnSetter for accountId.
         * @return Builder
         */
        public Builder unsetAccountId() {
            accountId = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Builds a new {@link AccountAccess} object using the set fields.
         * @return {@link AccountAccess}
         */
        public AccountAccess build() {
            return new AccountAccess(colcoId, colcoCode, payerId, payerNumber, payerName, accountId,
                    accountNumber, accountName);
        }
    }
}
