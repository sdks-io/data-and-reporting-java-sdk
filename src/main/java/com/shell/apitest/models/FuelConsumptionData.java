/*
 * ShellDataReportingAPIsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.shell.apitest.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for FuelConsumptionData type.
 */
public class FuelConsumptionData {
    private OptionalNullable<String> accountName;
    private OptionalNullable<String> accountNumber;
    private OptionalNullable<String> payerName;
    private OptionalNullable<String> payerNumber;
    private OptionalNullable<String> cardNumber;
    private OptionalNullable<Integer> cardGroupId;
    private OptionalNullable<String> cardGroupName;
    private OptionalNullable<String> driverName;
    private OptionalNullable<String> licenseNumber;
    private OptionalNullable<Double> initialOdometer;
    private OptionalNullable<Double> lastOdometer;
    private OptionalNullable<Double> distance;
    private OptionalNullable<Double> fuelConsumption;
    private OptionalNullable<Double> fuelNetAmount;
    private OptionalNullable<Double> discount;
    private OptionalNullable<Double> fuelTax;
    private OptionalNullable<Double> fuelVolume;
    private OptionalNullable<Double> grossNonFuelExpenses;
    private OptionalNullable<Double> cO2Produced;
    private OptionalNullable<Double> transactionCount;

    /**
     * Default constructor.
     */
    public FuelConsumptionData() {
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  payerName  String value for payerName.
     * @param  payerNumber  String value for payerNumber.
     * @param  cardNumber  String value for cardNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  driverName  String value for driverName.
     * @param  licenseNumber  String value for licenseNumber.
     * @param  initialOdometer  Double value for initialOdometer.
     * @param  lastOdometer  Double value for lastOdometer.
     * @param  distance  Double value for distance.
     * @param  fuelConsumption  Double value for fuelConsumption.
     * @param  fuelNetAmount  Double value for fuelNetAmount.
     * @param  discount  Double value for discount.
     * @param  fuelTax  Double value for fuelTax.
     * @param  fuelVolume  Double value for fuelVolume.
     * @param  grossNonFuelExpenses  Double value for grossNonFuelExpenses.
     * @param  cO2Produced  Double value for cO2Produced.
     * @param  transactionCount  Double value for transactionCount.
     */
    public FuelConsumptionData(
            String accountName,
            String accountNumber,
            String payerName,
            String payerNumber,
            String cardNumber,
            Integer cardGroupId,
            String cardGroupName,
            String driverName,
            String licenseNumber,
            Double initialOdometer,
            Double lastOdometer,
            Double distance,
            Double fuelConsumption,
            Double fuelNetAmount,
            Double discount,
            Double fuelTax,
            Double fuelVolume,
            Double grossNonFuelExpenses,
            Double cO2Produced,
            Double transactionCount) {
        this.accountName = OptionalNullable.of(accountName);
        this.accountNumber = OptionalNullable.of(accountNumber);
        this.payerName = OptionalNullable.of(payerName);
        this.payerNumber = OptionalNullable.of(payerNumber);
        this.cardNumber = OptionalNullable.of(cardNumber);
        this.cardGroupId = OptionalNullable.of(cardGroupId);
        this.cardGroupName = OptionalNullable.of(cardGroupName);
        this.driverName = OptionalNullable.of(driverName);
        this.licenseNumber = OptionalNullable.of(licenseNumber);
        this.initialOdometer = OptionalNullable.of(initialOdometer);
        this.lastOdometer = OptionalNullable.of(lastOdometer);
        this.distance = OptionalNullable.of(distance);
        this.fuelConsumption = OptionalNullable.of(fuelConsumption);
        this.fuelNetAmount = OptionalNullable.of(fuelNetAmount);
        this.discount = OptionalNullable.of(discount);
        this.fuelTax = OptionalNullable.of(fuelTax);
        this.fuelVolume = OptionalNullable.of(fuelVolume);
        this.grossNonFuelExpenses = OptionalNullable.of(grossNonFuelExpenses);
        this.cO2Produced = OptionalNullable.of(cO2Produced);
        this.transactionCount = OptionalNullable.of(transactionCount);
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  accountNumber  String value for accountNumber.
     * @param  payerName  String value for payerName.
     * @param  payerNumber  String value for payerNumber.
     * @param  cardNumber  String value for cardNumber.
     * @param  cardGroupId  Integer value for cardGroupId.
     * @param  cardGroupName  String value for cardGroupName.
     * @param  driverName  String value for driverName.
     * @param  licenseNumber  String value for licenseNumber.
     * @param  initialOdometer  Double value for initialOdometer.
     * @param  lastOdometer  Double value for lastOdometer.
     * @param  distance  Double value for distance.
     * @param  fuelConsumption  Double value for fuelConsumption.
     * @param  fuelNetAmount  Double value for fuelNetAmount.
     * @param  discount  Double value for discount.
     * @param  fuelTax  Double value for fuelTax.
     * @param  fuelVolume  Double value for fuelVolume.
     * @param  grossNonFuelExpenses  Double value for grossNonFuelExpenses.
     * @param  cO2Produced  Double value for cO2Produced.
     * @param  transactionCount  Double value for transactionCount.
     */

    protected FuelConsumptionData(OptionalNullable<String> accountName,
            OptionalNullable<String> accountNumber, OptionalNullable<String> payerName,
            OptionalNullable<String> payerNumber, OptionalNullable<String> cardNumber,
            OptionalNullable<Integer> cardGroupId, OptionalNullable<String> cardGroupName,
            OptionalNullable<String> driverName, OptionalNullable<String> licenseNumber,
            OptionalNullable<Double> initialOdometer, OptionalNullable<Double> lastOdometer,
            OptionalNullable<Double> distance, OptionalNullable<Double> fuelConsumption,
            OptionalNullable<Double> fuelNetAmount, OptionalNullable<Double> discount,
            OptionalNullable<Double> fuelTax, OptionalNullable<Double> fuelVolume,
            OptionalNullable<Double> grossNonFuelExpenses, OptionalNullable<Double> cO2Produced,
            OptionalNullable<Double> transactionCount) {
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.payerName = payerName;
        this.payerNumber = payerNumber;
        this.cardNumber = cardNumber;
        this.cardGroupId = cardGroupId;
        this.cardGroupName = cardGroupName;
        this.driverName = driverName;
        this.licenseNumber = licenseNumber;
        this.initialOdometer = initialOdometer;
        this.lastOdometer = lastOdometer;
        this.distance = distance;
        this.fuelConsumption = fuelConsumption;
        this.fuelNetAmount = fuelNetAmount;
        this.discount = discount;
        this.fuelTax = fuelTax;
        this.fuelVolume = fuelVolume;
        this.grossNonFuelExpenses = grossNonFuelExpenses;
        this.cO2Produced = cO2Produced;
        this.transactionCount = transactionCount;
    }

    /**
     * Internal Getter for AccountName.
     * Account Name
     * @return Returns the Internal String
     */
    @JsonGetter("AccountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountName() {
        return this.accountName;
    }

    /**
     * Getter for AccountName.
     * Account Name
     * @return Returns the String
     */
    public String getAccountName() {
        return OptionalNullable.getFrom(accountName);
    }

    /**
     * Setter for AccountName.
     * Account Name
     * @param accountName Value for String
     */
    @JsonSetter("AccountName")
    public void setAccountName(String accountName) {
        this.accountName = OptionalNullable.of(accountName);
    }

    /**
     * UnSetter for AccountName.
     * Account Name
     */
    public void unsetAccountName() {
        accountName = null;
    }

    /**
     * Internal Getter for AccountNumber.
     * Account Number
     * @return Returns the Internal String
     */
    @JsonGetter("AccountNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Getter for AccountNumber.
     * Account Number
     * @return Returns the String
     */
    public String getAccountNumber() {
        return OptionalNullable.getFrom(accountNumber);
    }

    /**
     * Setter for AccountNumber.
     * Account Number
     * @param accountNumber Value for String
     */
    @JsonSetter("AccountNumber")
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = OptionalNullable.of(accountNumber);
    }

    /**
     * UnSetter for AccountNumber.
     * Account Number
     */
    public void unsetAccountNumber() {
        accountNumber = null;
    }

    /**
     * Internal Getter for PayerName.
     * Payment customer Name
     * @return Returns the Internal String
     */
    @JsonGetter("PayerName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerName() {
        return this.payerName;
    }

    /**
     * Getter for PayerName.
     * Payment customer Name
     * @return Returns the String
     */
    public String getPayerName() {
        return OptionalNullable.getFrom(payerName);
    }

    /**
     * Setter for PayerName.
     * Payment customer Name
     * @param payerName Value for String
     */
    @JsonSetter("PayerName")
    public void setPayerName(String payerName) {
        this.payerName = OptionalNullable.of(payerName);
    }

    /**
     * UnSetter for PayerName.
     * Payment customer Name
     */
    public void unsetPayerName() {
        payerName = null;
    }

    /**
     * Internal Getter for PayerNumber.
     * Payment customer number
     * @return Returns the Internal String
     */
    @JsonGetter("PayerNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPayerNumber() {
        return this.payerNumber;
    }

    /**
     * Getter for PayerNumber.
     * Payment customer number
     * @return Returns the String
     */
    public String getPayerNumber() {
        return OptionalNullable.getFrom(payerNumber);
    }

    /**
     * Setter for PayerNumber.
     * Payment customer number
     * @param payerNumber Value for String
     */
    @JsonSetter("PayerNumber")
    public void setPayerNumber(String payerNumber) {
        this.payerNumber = OptionalNullable.of(payerNumber);
    }

    /**
     * UnSetter for PayerNumber.
     * Payment customer number
     */
    public void unsetPayerNumber() {
        payerNumber = null;
    }

    /**
     * Internal Getter for CardNumber.
     * Card PAN
     * @return Returns the Internal String
     */
    @JsonGetter("CardNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardNumber() {
        return this.cardNumber;
    }

    /**
     * Getter for CardNumber.
     * Card PAN
     * @return Returns the String
     */
    public String getCardNumber() {
        return OptionalNullable.getFrom(cardNumber);
    }

    /**
     * Setter for CardNumber.
     * Card PAN
     * @param cardNumber Value for String
     */
    @JsonSetter("CardNumber")
    public void setCardNumber(String cardNumber) {
        this.cardNumber = OptionalNullable.of(cardNumber);
    }

    /**
     * UnSetter for CardNumber.
     * Card PAN
     */
    public void unsetCardNumber() {
        cardNumber = null;
    }

    /**
     * Internal Getter for CardGroupId.
     * Card group ID
     * @return Returns the Internal Integer
     */
    @JsonGetter("CardGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetCardGroupId() {
        return this.cardGroupId;
    }

    /**
     * Getter for CardGroupId.
     * Card group ID
     * @return Returns the Integer
     */
    public Integer getCardGroupId() {
        return OptionalNullable.getFrom(cardGroupId);
    }

    /**
     * Setter for CardGroupId.
     * Card group ID
     * @param cardGroupId Value for Integer
     */
    @JsonSetter("CardGroupId")
    public void setCardGroupId(Integer cardGroupId) {
        this.cardGroupId = OptionalNullable.of(cardGroupId);
    }

    /**
     * UnSetter for CardGroupId.
     * Card group ID
     */
    public void unsetCardGroupId() {
        cardGroupId = null;
    }

    /**
     * Internal Getter for CardGroupName.
     * Card group name
     * @return Returns the Internal String
     */
    @JsonGetter("CardGroupName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCardGroupName() {
        return this.cardGroupName;
    }

    /**
     * Getter for CardGroupName.
     * Card group name
     * @return Returns the String
     */
    public String getCardGroupName() {
        return OptionalNullable.getFrom(cardGroupName);
    }

    /**
     * Setter for CardGroupName.
     * Card group name
     * @param cardGroupName Value for String
     */
    @JsonSetter("CardGroupName")
    public void setCardGroupName(String cardGroupName) {
        this.cardGroupName = OptionalNullable.of(cardGroupName);
    }

    /**
     * UnSetter for CardGroupName.
     * Card group name
     */
    public void unsetCardGroupName() {
        cardGroupName = null;
    }

    /**
     * Internal Getter for DriverName.
     * Driver name
     * @return Returns the Internal String
     */
    @JsonGetter("DriverName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDriverName() {
        return this.driverName;
    }

    /**
     * Getter for DriverName.
     * Driver name
     * @return Returns the String
     */
    public String getDriverName() {
        return OptionalNullable.getFrom(driverName);
    }

    /**
     * Setter for DriverName.
     * Driver name
     * @param driverName Value for String
     */
    @JsonSetter("DriverName")
    public void setDriverName(String driverName) {
        this.driverName = OptionalNullable.of(driverName);
    }

    /**
     * UnSetter for DriverName.
     * Driver name
     */
    public void unsetDriverName() {
        driverName = null;
    }

    /**
     * Internal Getter for LicenseNumber.
     * Vehicle registration number
     * @return Returns the Internal String
     */
    @JsonGetter("LicenseNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLicenseNumber() {
        return this.licenseNumber;
    }

    /**
     * Getter for LicenseNumber.
     * Vehicle registration number
     * @return Returns the String
     */
    public String getLicenseNumber() {
        return OptionalNullable.getFrom(licenseNumber);
    }

    /**
     * Setter for LicenseNumber.
     * Vehicle registration number
     * @param licenseNumber Value for String
     */
    @JsonSetter("LicenseNumber")
    public void setLicenseNumber(String licenseNumber) {
        this.licenseNumber = OptionalNullable.of(licenseNumber);
    }

    /**
     * UnSetter for LicenseNumber.
     * Vehicle registration number
     */
    public void unsetLicenseNumber() {
        licenseNumber = null;
    }

    /**
     * Internal Getter for InitialOdometer.
     * First transaction odometer reading
     * @return Returns the Internal Double
     */
    @JsonGetter("InitialOdometer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetInitialOdometer() {
        return this.initialOdometer;
    }

    /**
     * Getter for InitialOdometer.
     * First transaction odometer reading
     * @return Returns the Double
     */
    public Double getInitialOdometer() {
        return OptionalNullable.getFrom(initialOdometer);
    }

    /**
     * Setter for InitialOdometer.
     * First transaction odometer reading
     * @param initialOdometer Value for Double
     */
    @JsonSetter("InitialOdometer")
    public void setInitialOdometer(Double initialOdometer) {
        this.initialOdometer = OptionalNullable.of(initialOdometer);
    }

    /**
     * UnSetter for InitialOdometer.
     * First transaction odometer reading
     */
    public void unsetInitialOdometer() {
        initialOdometer = null;
    }

    /**
     * Internal Getter for LastOdometer.
     * Last transaction odometer reading
     * @return Returns the Internal Double
     */
    @JsonGetter("LastOdometer")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetLastOdometer() {
        return this.lastOdometer;
    }

    /**
     * Getter for LastOdometer.
     * Last transaction odometer reading
     * @return Returns the Double
     */
    public Double getLastOdometer() {
        return OptionalNullable.getFrom(lastOdometer);
    }

    /**
     * Setter for LastOdometer.
     * Last transaction odometer reading
     * @param lastOdometer Value for Double
     */
    @JsonSetter("LastOdometer")
    public void setLastOdometer(Double lastOdometer) {
        this.lastOdometer = OptionalNullable.of(lastOdometer);
    }

    /**
     * UnSetter for LastOdometer.
     * Last transaction odometer reading
     */
    public void unsetLastOdometer() {
        lastOdometer = null;
    }

    /**
     * Internal Getter for Distance.
     * Distance in KM or Miles based on Customer and Colco Settings
     * @return Returns the Internal Double
     */
    @JsonGetter("Distance")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDistance() {
        return this.distance;
    }

    /**
     * Getter for Distance.
     * Distance in KM or Miles based on Customer and Colco Settings
     * @return Returns the Double
     */
    public Double getDistance() {
        return OptionalNullable.getFrom(distance);
    }

    /**
     * Setter for Distance.
     * Distance in KM or Miles based on Customer and Colco Settings
     * @param distance Value for Double
     */
    @JsonSetter("Distance")
    public void setDistance(Double distance) {
        this.distance = OptionalNullable.of(distance);
    }

    /**
     * UnSetter for Distance.
     * Distance in KM or Miles based on Customer and Colco Settings
     */
    public void unsetDistance() {
        distance = null;
    }

    /**
     * Internal Getter for FuelConsumption.
     * Total Fuel Consumption.
     * @return Returns the Internal Double
     */
    @JsonGetter("FuelConsumption")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFuelConsumption() {
        return this.fuelConsumption;
    }

    /**
     * Getter for FuelConsumption.
     * Total Fuel Consumption.
     * @return Returns the Double
     */
    public Double getFuelConsumption() {
        return OptionalNullable.getFrom(fuelConsumption);
    }

    /**
     * Setter for FuelConsumption.
     * Total Fuel Consumption.
     * @param fuelConsumption Value for Double
     */
    @JsonSetter("FuelConsumption")
    public void setFuelConsumption(Double fuelConsumption) {
        this.fuelConsumption = OptionalNullable.of(fuelConsumption);
    }

    /**
     * UnSetter for FuelConsumption.
     * Total Fuel Consumption.
     */
    public void unsetFuelConsumption() {
        fuelConsumption = null;
    }

    /**
     * Internal Getter for FuelNetAmount.
     * Net Fuel Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("FuelNetAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFuelNetAmount() {
        return this.fuelNetAmount;
    }

    /**
     * Getter for FuelNetAmount.
     * Net Fuel Amount
     * @return Returns the Double
     */
    public Double getFuelNetAmount() {
        return OptionalNullable.getFrom(fuelNetAmount);
    }

    /**
     * Setter for FuelNetAmount.
     * Net Fuel Amount
     * @param fuelNetAmount Value for Double
     */
    @JsonSetter("FuelNetAmount")
    public void setFuelNetAmount(Double fuelNetAmount) {
        this.fuelNetAmount = OptionalNullable.of(fuelNetAmount);
    }

    /**
     * UnSetter for FuelNetAmount.
     * Net Fuel Amount
     */
    public void unsetFuelNetAmount() {
        fuelNetAmount = null;
    }

    /**
     * Internal Getter for Discount.
     * Total Discount
     * @return Returns the Internal Double
     */
    @JsonGetter("Discount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetDiscount() {
        return this.discount;
    }

    /**
     * Getter for Discount.
     * Total Discount
     * @return Returns the Double
     */
    public Double getDiscount() {
        return OptionalNullable.getFrom(discount);
    }

    /**
     * Setter for Discount.
     * Total Discount
     * @param discount Value for Double
     */
    @JsonSetter("Discount")
    public void setDiscount(Double discount) {
        this.discount = OptionalNullable.of(discount);
    }

    /**
     * UnSetter for Discount.
     * Total Discount
     */
    public void unsetDiscount() {
        discount = null;
    }

    /**
     * Internal Getter for FuelTax.
     * Fuel Tax Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("FuelTax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFuelTax() {
        return this.fuelTax;
    }

    /**
     * Getter for FuelTax.
     * Fuel Tax Amount
     * @return Returns the Double
     */
    public Double getFuelTax() {
        return OptionalNullable.getFrom(fuelTax);
    }

    /**
     * Setter for FuelTax.
     * Fuel Tax Amount
     * @param fuelTax Value for Double
     */
    @JsonSetter("FuelTax")
    public void setFuelTax(Double fuelTax) {
        this.fuelTax = OptionalNullable.of(fuelTax);
    }

    /**
     * UnSetter for FuelTax.
     * Fuel Tax Amount
     */
    public void unsetFuelTax() {
        fuelTax = null;
    }

    /**
     * Internal Getter for FuelVolume.
     * Total Fuel Volume in Litres
     * @return Returns the Internal Double
     */
    @JsonGetter("FuelVolume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetFuelVolume() {
        return this.fuelVolume;
    }

    /**
     * Getter for FuelVolume.
     * Total Fuel Volume in Litres
     * @return Returns the Double
     */
    public Double getFuelVolume() {
        return OptionalNullable.getFrom(fuelVolume);
    }

    /**
     * Setter for FuelVolume.
     * Total Fuel Volume in Litres
     * @param fuelVolume Value for Double
     */
    @JsonSetter("FuelVolume")
    public void setFuelVolume(Double fuelVolume) {
        this.fuelVolume = OptionalNullable.of(fuelVolume);
    }

    /**
     * UnSetter for FuelVolume.
     * Total Fuel Volume in Litres
     */
    public void unsetFuelVolume() {
        fuelVolume = null;
    }

    /**
     * Internal Getter for GrossNonFuelExpenses.
     * Gross Nonfuel Amount
     * @return Returns the Internal Double
     */
    @JsonGetter("GrossNonFuelExpenses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetGrossNonFuelExpenses() {
        return this.grossNonFuelExpenses;
    }

    /**
     * Getter for GrossNonFuelExpenses.
     * Gross Nonfuel Amount
     * @return Returns the Double
     */
    public Double getGrossNonFuelExpenses() {
        return OptionalNullable.getFrom(grossNonFuelExpenses);
    }

    /**
     * Setter for GrossNonFuelExpenses.
     * Gross Nonfuel Amount
     * @param grossNonFuelExpenses Value for Double
     */
    @JsonSetter("GrossNonFuelExpenses")
    public void setGrossNonFuelExpenses(Double grossNonFuelExpenses) {
        this.grossNonFuelExpenses = OptionalNullable.of(grossNonFuelExpenses);
    }

    /**
     * UnSetter for GrossNonFuelExpenses.
     * Gross Nonfuel Amount
     */
    public void unsetGrossNonFuelExpenses() {
        grossNonFuelExpenses = null;
    }

    /**
     * Internal Getter for CO2Produced.
     * Total Co2 produced
     * @return Returns the Internal Double
     */
    @JsonGetter("CO2Produced")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetCO2Produced() {
        return this.cO2Produced;
    }

    /**
     * Getter for CO2Produced.
     * Total Co2 produced
     * @return Returns the Double
     */
    public Double getCO2Produced() {
        return OptionalNullable.getFrom(cO2Produced);
    }

    /**
     * Setter for CO2Produced.
     * Total Co2 produced
     * @param cO2Produced Value for Double
     */
    @JsonSetter("CO2Produced")
    public void setCO2Produced(Double cO2Produced) {
        this.cO2Produced = OptionalNullable.of(cO2Produced);
    }

    /**
     * UnSetter for CO2Produced.
     * Total Co2 produced
     */
    public void unsetCO2Produced() {
        cO2Produced = null;
    }

    /**
     * Internal Getter for TransactionCount.
     * Total Transaction Count
     * @return Returns the Internal Double
     */
    @JsonGetter("TransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Double> internalGetTransactionCount() {
        return this.transactionCount;
    }

    /**
     * Getter for TransactionCount.
     * Total Transaction Count
     * @return Returns the Double
     */
    public Double getTransactionCount() {
        return OptionalNullable.getFrom(transactionCount);
    }

    /**
     * Setter for TransactionCount.
     * Total Transaction Count
     * @param transactionCount Value for Double
     */
    @JsonSetter("TransactionCount")
    public void setTransactionCount(Double transactionCount) {
        this.transactionCount = OptionalNullable.of(transactionCount);
    }

    /**
     * UnSetter for TransactionCount.
     * Total Transaction Count
     */
    public void unsetTransactionCount() {
        transactionCount = null;
    }

    /**
     * Converts this FuelConsumptionData into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "FuelConsumptionData [" + "accountName=" + accountName + ", accountNumber="
                + accountNumber + ", payerName=" + payerName + ", payerNumber=" + payerNumber
                + ", cardNumber=" + cardNumber + ", cardGroupId=" + cardGroupId + ", cardGroupName="
                + cardGroupName + ", driverName=" + driverName + ", licenseNumber=" + licenseNumber
                + ", initialOdometer=" + initialOdometer + ", lastOdometer=" + lastOdometer
                + ", distance=" + distance + ", fuelConsumption=" + fuelConsumption
                + ", fuelNetAmount=" + fuelNetAmount + ", discount=" + discount + ", fuelTax="
                + fuelTax + ", fuelVolume=" + fuelVolume + ", grossNonFuelExpenses="
                + grossNonFuelExpenses + ", cO2Produced=" + cO2Produced + ", transactionCount="
                + transactionCount + "]";
    }

    /**
     * Builds a new {@link FuelConsumptionData.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link FuelConsumptionData.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder();
        builder.accountName = internalGetAccountName();
        builder.accountNumber = internalGetAccountNumber();
        builder.payerName = internalGetPayerName();
        builder.payerNumber = internalGetPayerNumber();
        builder.cardNumber = internalGetCardNumber();
        builder.cardGroupId = internalGetCardGroupId();
        builder.cardGroupName = internalGetCardGroupName();
        builder.driverName = internalGetDriverName();
        builder.licenseNumber = internalGetLicenseNumber();
        builder.initialOdometer = internalGetInitialOdometer();
        builder.lastOdometer = internalGetLastOdometer();
        builder.distance = internalGetDistance();
        builder.fuelConsumption = internalGetFuelConsumption();
        builder.fuelNetAmount = internalGetFuelNetAmount();
        builder.discount = internalGetDiscount();
        builder.fuelTax = internalGetFuelTax();
        builder.fuelVolume = internalGetFuelVolume();
        builder.grossNonFuelExpenses = internalGetGrossNonFuelExpenses();
        builder.cO2Produced = internalGetCO2Produced();
        builder.transactionCount = internalGetTransactionCount();
        return builder;
    }

    /**
     * Class to build instances of {@link FuelConsumptionData}.
     */
    public static class Builder {
        private OptionalNullable<String> accountName;
        private OptionalNullable<String> accountNumber;
        private OptionalNullable<String> payerName;
        private OptionalNullable<String> payerNumber;
        private OptionalNullable<String> cardNumber;
        private OptionalNullable<Integer> cardGroupId;
        private OptionalNullable<String> cardGroupName;
        private OptionalNullable<String> driverName;
        private OptionalNullable<String> licenseNumber;
        private OptionalNullable<Double> initialOdometer;
        private OptionalNullable<Double> lastOdometer;
        private OptionalNullable<Double> distance;
        private OptionalNullable<Double> fuelConsumption;
        private OptionalNullable<Double> fuelNetAmount;
        private OptionalNullable<Double> discount;
        private OptionalNullable<Double> fuelTax;
        private OptionalNullable<Double> fuelVolume;
        private OptionalNullable<Double> grossNonFuelExpenses;
        private OptionalNullable<Double> cO2Produced;
        private OptionalNullable<Double> transactionCount;



        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = OptionalNullable.of(accountName);
            return this;
        }

        /**
         * UnSetter for accountName.
         * @return Builder
         */
        public Builder unsetAccountName() {
            accountName = null;
            return this;
        }

        /**
         * Setter for accountNumber.
         * @param  accountNumber  String value for accountNumber.
         * @return Builder
         */
        public Builder accountNumber(String accountNumber) {
            this.accountNumber = OptionalNullable.of(accountNumber);
            return this;
        }

        /**
         * UnSetter for accountNumber.
         * @return Builder
         */
        public Builder unsetAccountNumber() {
            accountNumber = null;
            return this;
        }

        /**
         * Setter for payerName.
         * @param  payerName  String value for payerName.
         * @return Builder
         */
        public Builder payerName(String payerName) {
            this.payerName = OptionalNullable.of(payerName);
            return this;
        }

        /**
         * UnSetter for payerName.
         * @return Builder
         */
        public Builder unsetPayerName() {
            payerName = null;
            return this;
        }

        /**
         * Setter for payerNumber.
         * @param  payerNumber  String value for payerNumber.
         * @return Builder
         */
        public Builder payerNumber(String payerNumber) {
            this.payerNumber = OptionalNullable.of(payerNumber);
            return this;
        }

        /**
         * UnSetter for payerNumber.
         * @return Builder
         */
        public Builder unsetPayerNumber() {
            payerNumber = null;
            return this;
        }

        /**
         * Setter for cardNumber.
         * @param  cardNumber  String value for cardNumber.
         * @return Builder
         */
        public Builder cardNumber(String cardNumber) {
            this.cardNumber = OptionalNullable.of(cardNumber);
            return this;
        }

        /**
         * UnSetter for cardNumber.
         * @return Builder
         */
        public Builder unsetCardNumber() {
            cardNumber = null;
            return this;
        }

        /**
         * Setter for cardGroupId.
         * @param  cardGroupId  Integer value for cardGroupId.
         * @return Builder
         */
        public Builder cardGroupId(Integer cardGroupId) {
            this.cardGroupId = OptionalNullable.of(cardGroupId);
            return this;
        }

        /**
         * UnSetter for cardGroupId.
         * @return Builder
         */
        public Builder unsetCardGroupId() {
            cardGroupId = null;
            return this;
        }

        /**
         * Setter for cardGroupName.
         * @param  cardGroupName  String value for cardGroupName.
         * @return Builder
         */
        public Builder cardGroupName(String cardGroupName) {
            this.cardGroupName = OptionalNullable.of(cardGroupName);
            return this;
        }

        /**
         * UnSetter for cardGroupName.
         * @return Builder
         */
        public Builder unsetCardGroupName() {
            cardGroupName = null;
            return this;
        }

        /**
         * Setter for driverName.
         * @param  driverName  String value for driverName.
         * @return Builder
         */
        public Builder driverName(String driverName) {
            this.driverName = OptionalNullable.of(driverName);
            return this;
        }

        /**
         * UnSetter for driverName.
         * @return Builder
         */
        public Builder unsetDriverName() {
            driverName = null;
            return this;
        }

        /**
         * Setter for licenseNumber.
         * @param  licenseNumber  String value for licenseNumber.
         * @return Builder
         */
        public Builder licenseNumber(String licenseNumber) {
            this.licenseNumber = OptionalNullable.of(licenseNumber);
            return this;
        }

        /**
         * UnSetter for licenseNumber.
         * @return Builder
         */
        public Builder unsetLicenseNumber() {
            licenseNumber = null;
            return this;
        }

        /**
         * Setter for initialOdometer.
         * @param  initialOdometer  Double value for initialOdometer.
         * @return Builder
         */
        public Builder initialOdometer(Double initialOdometer) {
            this.initialOdometer = OptionalNullable.of(initialOdometer);
            return this;
        }

        /**
         * UnSetter for initialOdometer.
         * @return Builder
         */
        public Builder unsetInitialOdometer() {
            initialOdometer = null;
            return this;
        }

        /**
         * Setter for lastOdometer.
         * @param  lastOdometer  Double value for lastOdometer.
         * @return Builder
         */
        public Builder lastOdometer(Double lastOdometer) {
            this.lastOdometer = OptionalNullable.of(lastOdometer);
            return this;
        }

        /**
         * UnSetter for lastOdometer.
         * @return Builder
         */
        public Builder unsetLastOdometer() {
            lastOdometer = null;
            return this;
        }

        /**
         * Setter for distance.
         * @param  distance  Double value for distance.
         * @return Builder
         */
        public Builder distance(Double distance) {
            this.distance = OptionalNullable.of(distance);
            return this;
        }

        /**
         * UnSetter for distance.
         * @return Builder
         */
        public Builder unsetDistance() {
            distance = null;
            return this;
        }

        /**
         * Setter for fuelConsumption.
         * @param  fuelConsumption  Double value for fuelConsumption.
         * @return Builder
         */
        public Builder fuelConsumption(Double fuelConsumption) {
            this.fuelConsumption = OptionalNullable.of(fuelConsumption);
            return this;
        }

        /**
         * UnSetter for fuelConsumption.
         * @return Builder
         */
        public Builder unsetFuelConsumption() {
            fuelConsumption = null;
            return this;
        }

        /**
         * Setter for fuelNetAmount.
         * @param  fuelNetAmount  Double value for fuelNetAmount.
         * @return Builder
         */
        public Builder fuelNetAmount(Double fuelNetAmount) {
            this.fuelNetAmount = OptionalNullable.of(fuelNetAmount);
            return this;
        }

        /**
         * UnSetter for fuelNetAmount.
         * @return Builder
         */
        public Builder unsetFuelNetAmount() {
            fuelNetAmount = null;
            return this;
        }

        /**
         * Setter for discount.
         * @param  discount  Double value for discount.
         * @return Builder
         */
        public Builder discount(Double discount) {
            this.discount = OptionalNullable.of(discount);
            return this;
        }

        /**
         * UnSetter for discount.
         * @return Builder
         */
        public Builder unsetDiscount() {
            discount = null;
            return this;
        }

        /**
         * Setter for fuelTax.
         * @param  fuelTax  Double value for fuelTax.
         * @return Builder
         */
        public Builder fuelTax(Double fuelTax) {
            this.fuelTax = OptionalNullable.of(fuelTax);
            return this;
        }

        /**
         * UnSetter for fuelTax.
         * @return Builder
         */
        public Builder unsetFuelTax() {
            fuelTax = null;
            return this;
        }

        /**
         * Setter for fuelVolume.
         * @param  fuelVolume  Double value for fuelVolume.
         * @return Builder
         */
        public Builder fuelVolume(Double fuelVolume) {
            this.fuelVolume = OptionalNullable.of(fuelVolume);
            return this;
        }

        /**
         * UnSetter for fuelVolume.
         * @return Builder
         */
        public Builder unsetFuelVolume() {
            fuelVolume = null;
            return this;
        }

        /**
         * Setter for grossNonFuelExpenses.
         * @param  grossNonFuelExpenses  Double value for grossNonFuelExpenses.
         * @return Builder
         */
        public Builder grossNonFuelExpenses(Double grossNonFuelExpenses) {
            this.grossNonFuelExpenses = OptionalNullable.of(grossNonFuelExpenses);
            return this;
        }

        /**
         * UnSetter for grossNonFuelExpenses.
         * @return Builder
         */
        public Builder unsetGrossNonFuelExpenses() {
            grossNonFuelExpenses = null;
            return this;
        }

        /**
         * Setter for cO2Produced.
         * @param  cO2Produced  Double value for cO2Produced.
         * @return Builder
         */
        public Builder cO2Produced(Double cO2Produced) {
            this.cO2Produced = OptionalNullable.of(cO2Produced);
            return this;
        }

        /**
         * UnSetter for cO2Produced.
         * @return Builder
         */
        public Builder unsetCO2Produced() {
            cO2Produced = null;
            return this;
        }

        /**
         * Setter for transactionCount.
         * @param  transactionCount  Double value for transactionCount.
         * @return Builder
         */
        public Builder transactionCount(Double transactionCount) {
            this.transactionCount = OptionalNullable.of(transactionCount);
            return this;
        }

        /**
         * UnSetter for transactionCount.
         * @return Builder
         */
        public Builder unsetTransactionCount() {
            transactionCount = null;
            return this;
        }

        /**
         * Builds a new {@link FuelConsumptionData} object using the set fields.
         * @return {@link FuelConsumptionData}
         */
        public FuelConsumptionData build() {
            return new FuelConsumptionData(accountName, accountNumber, payerName, payerNumber,
                    cardNumber, cardGroupId, cardGroupName, driverName, licenseNumber,
                    initialOdometer, lastOdometer, distance, fuelConsumption, fuelNetAmount,
                    discount, fuelTax, fuelVolume, grossNonFuelExpenses, cO2Produced,
                    transactionCount);
        }
    }
}
